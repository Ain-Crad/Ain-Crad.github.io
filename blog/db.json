{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images.jpeg","path":"images/images.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/user2.jpg","path":"images/user2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar2.png","path":"images/avatar2.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1566306323393},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1566306323393},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1566306323393},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1566306323393},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1566306323393},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1566306323393},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1566306323393},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1566306323393},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1566306323393},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1566306323393},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1566306323409},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1566306323409},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1566306323409},{"_id":"themes/next/_config.yml","hash":"fbd8b775674e5c7a10b3c6ea2804c5e5b93f44f8","modified":1566306323409},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1566306323409},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1566306323424},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1566306323393},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1566306323393},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1566306323393},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1566306323393},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1566306323409},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1566306323409},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1566306323409},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1566306323409},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1566306323409},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1566306323409},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1566306323409},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1566306323409},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1566306323409},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1566306323409},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1566306323409},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1566306323409},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1566306323409},{"_id":"themes/next/languages/zh-Hans.yml","hash":"e874af4cb25de38e4ba7439ff6df2a9f4d35ee25","modified":1566306323409},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1566306323409},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1566306323409},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1566306323409},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1566306323424},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1566306323424},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1566306323424},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1566306323424},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1566306323424},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1566306323424},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1566306323424},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1566306324237},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1566306324237},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1566306324237},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1566306323424},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1566306323424},{"_id":"source/about/index.md","hash":"0028cf13ef1ea71fcadf1832112295858caefc78","modified":1566306323377},{"_id":"source/_posts/CodeForces-469D-Two-Sets.md","hash":"f9760ff0713ee18340b89c68980cf682a0b95175","modified":1567048823499},{"_id":"source/_posts/CodeForces-478C.md","hash":"8461c4a7dcd64621be321ae6abdb9c25f97f6174","modified":1566312936996},{"_id":"source/_posts/CodeForces-569A.md","hash":"98979abc9d92c7e0e769c7df4a1996f7c4e2c82f","modified":1566312912660},{"_id":"source/_posts/Codeforces-498Div3-C.md","hash":"42ff02fb47258bc35195ca29899507d6eab68baf","modified":1566312923279},{"_id":"source/_posts/Covariance-协方差.md","hash":"96a32f0ede9f9b39a2e0ab477325d5cf44625826","modified":1567328284421},{"_id":"source/_posts/C语言编译连接过程以及-h和-c文件解析.md","hash":"aeef4ce05ef6ee6db30da7dcf3e460198c8b6048","modified":1567392293090},{"_id":"source/_posts/Good-Bye-2018.md","hash":"683d3b0dd47a4a92df0700ef65571c1995a67a2e","modified":1567328001086},{"_id":"source/_posts/Graph-Theory-The-shortest-path.md","hash":"f55c9a81078caf04d2b910c2e2830ebb6005c346","modified":1567328106422},{"_id":"source/_posts/HDU1016-Prime-Ring-Problem-DFS.md","hash":"ee64cb64c961a36716ad2b97d400a6add490d548","modified":1566312852710},{"_id":"source/_posts/HDU2050.md","hash":"d4547223fbfe4dd88e58ea68efc701b0669d2f34","modified":1566312831215},{"_id":"source/_posts/HDU4856-Tunnels.md","hash":"27d8bd7e774bfb16fbb515042c7eb794a665b4e4","modified":1566312821358},{"_id":"source/_posts/HDU5092.md","hash":"3ee04003bdb6055a9455ce68de2ed55c4900cb29","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器.md","hash":"3a5c0983c9e0eab3aabca0f03f5cc0e13f550b54","modified":1567327786591},{"_id":"source/_posts/Learn-CMake-1-HelloWorld.md","hash":"ab6281a6d8ab5d34e11f032720e093beff6799b0","modified":1566312774407},{"_id":"source/_posts/Learn-CMake-2-多文件-目录.md","hash":"fbd86723f2cfa8573161cfeb22429a6458464c3b","modified":1566312743214},{"_id":"source/_posts/Learn-CMake-3-创建库文件.md","hash":"ce7590d87a01f7876132b14b087c3b0240e5195e","modified":1566312733116},{"_id":"source/_posts/Learn-CMake-4-链接库文件.md","hash":"3b3b15a8b1c949812aafa1b3c71475e0c0002fb4","modified":1566312724398},{"_id":"source/_posts/Linear algebra-Dot product.md","hash":"abc8ce97a3c0e00534fd133e355e8d308fce5907","modified":1567053594258},{"_id":"source/_posts/Maze.md","hash":"1e6342c4f49a1d450bb83aa47ce489b3f0c25672","modified":1566312690044},{"_id":"source/_posts/My-little-angel.md","hash":"f4c0a0afaed9bf973bdf5a0b8cbea983fc149190","modified":1567328379694},{"_id":"source/_posts/Nowcoder-Fourth-G.md","hash":"d18b7f23173967491be4a90550ea3f7f4575f8d2","modified":1566312631670},{"_id":"source/_posts/Nowcoder-Third-A.md","hash":"ae7930c5c1193c1495cad0eab1bc12eb32509538","modified":1566312604328},{"_id":"source/_posts/PCA-主成分分析.md","hash":"ff25bb402265839ec02aee1435b8af73412ec906","modified":1566312589796},{"_id":"source/_posts/POJ1970-The-Game-DFS.md","hash":"adc462a41f058b36975dbdcadfff028219b9d8b7","modified":1566312572432},{"_id":"source/_posts/POJ2481.md","hash":"d2b30c6ecc406afe3f7ec4fc4588baf33eebae40","modified":1566312561486},{"_id":"source/_posts/Rand-C-随机数.md","hash":"b912712967cdf19cf256074d35a9e0a4704f2734","modified":1567327306799},{"_id":"source/_posts/STL-cmp.md","hash":"67c5bef9af208e3a32e556f2f4125b3813411fe4","modified":1567053870581},{"_id":"source/_posts/Super-Mario.md","hash":"c33470e90de4bc03b1bc1219292f588a05999f4a","modified":1566312454638},{"_id":"source/_posts/Uva10129-Play-on-Words.md","hash":"c368355d5991235cd16acf426f61c9549a72d144","modified":1566312229230},{"_id":"source/_posts/Uva10305-Ordering-Tasks.md","hash":"591c0016e14aa7a44139acfc34c95e7bfd434642","modified":1566312219775},{"_id":"source/_posts/Uva10410-Tree-Reconstruction.md","hash":"43c7ad7cabf7bbaf4d1372df547dbe684deb6727","modified":1566312209942},{"_id":"source/_posts/Uva10562-Undraw the trees.md","hash":"ff4c42dbb53a890df9184e0ba7ef5597e69f193d","modified":1566312200589},{"_id":"source/_posts/Uva1103-Ancient-Messages.md","hash":"7f39bb42f873b97ef2fed08dde7fe5172b881f80","modified":1566312306732},{"_id":"source/_posts/Uva11059-Maximum-Product.md","hash":"eda962352f24e898325ae9841fe6b5c7d7693d7f","modified":1566312191463},{"_id":"source/_posts/Uva11212-Editing-a-Book.md","hash":"5ed5b20ffb0323ab0590f035adf727dee449094f","modified":1566312182081},{"_id":"source/_posts/Uva11853-Painball.md","hash":"bd93de5b3d76efb13a190add9d71147c081803eb","modified":1566312171525},{"_id":"source/_posts/Uva12118-Inspetor-s-Dilemma.md","hash":"9d15d8b05f6cafa089d5e2b17dbc2db3a9961b9b","modified":1566312140951},{"_id":"source/_posts/Uva12096-The-SetStack-Computer-STL.md","hash":"286c354dd0941c215702c7225e00fac4c7ca20e2","modified":1566312155326},{"_id":"source/_posts/Uva12166-Equilibrium-Mobile.md","hash":"d2c7c9c712a4bd860a8a2a6cb8711f9f5ac44422","modified":1566312131215},{"_id":"source/_posts/Uva122-二叉树构建与层次遍历.md","hash":"bdc6dcb26ccef19964f25723d343bd21602d24e8","modified":1566312436728},{"_id":"source/_posts/Uva127-Accordian-Patience.md","hash":"c792a4d30bcd368a7351facb6dccc70a933a6641","modified":1566312403743},{"_id":"source/_posts/Uva1343-The-Rotation-Game.md","hash":"7847b6528001dd9325aa90097130ae1ac4d40b0a","modified":1566312293694},{"_id":"source/_posts/Uva1374-Power-Calculus.md","hash":"a62bce36e1655d2a60892a97b7bb214d4db05c2f","modified":1566312280790},{"_id":"source/_posts/Uva1599-Ideal-Path.md","hash":"8da1aa30465a979d45d861555c8de0cf872ae503","modified":1566312272358},{"_id":"source/_posts/Uva1601-The-Morning-after-Halloween.md","hash":"3a4504e959c872d32756a7e459d02ac4dee99dd1","modified":1566312253846},{"_id":"source/_posts/Uva1600-Patrol-Robot.md","hash":"c51cb386788e07fe07158a339c8c354e6bda35b6","modified":1566312263031},{"_id":"source/_posts/Uva1602-Lattice-Animals.md","hash":"a6fccc9648b64ecfa738f6aa2f51aacc5b34e57e","modified":1566312239262},{"_id":"source/_posts/Uva221-Urban-Elevations.md","hash":"51674c9026393625ac5a47730f7bcc98ce27f929","modified":1566312394311},{"_id":"source/_posts/Uva548-二叉树构建-DFS.md","hash":"240c7a7e006d6f54df09879b4d7acf0a2379d946","modified":1566312380331},{"_id":"source/_posts/Uva673-Parentheses-Balance.md","hash":"31519de2cd46bc5de27123cbc393e76bf55bbd6b","modified":1566312370093},{"_id":"source/_posts/Uva725-Division.md","hash":"d03e2d9ac8d3409e1cc3d015170dd5ba2b91df29","modified":1566312360860},{"_id":"source/_posts/Uva806-Spatial-Structures.md","hash":"75cd3585ba1297cc3ea2b711abbfb102b842d9e3","modified":1566312348215},{"_id":"source/_posts/Uva816-Abbott-s-Revenge-BFS.md","hash":"d5d4e14d75be4aefdaf1d7050e8f3b0b94f84cc4","modified":1566312330145},{"_id":"source/_posts/Uva839-二叉树的递归处理.md","hash":"6703a670517d28f407778367ec804e63dfff83ba","modified":1566312316392},{"_id":"source/_posts/buildBinaryTree.md","hash":"592d74a6e647ad23f3cdc1dd705199aa7e200c75","modified":1566312952086},{"_id":"source/_posts/extern-外部变量.md","hash":"63b80cbbde79effffb23d78b7fa4747a6403bfce","modified":1567327967579},{"_id":"source/_posts/hexo-mathjax.md","hash":"bf4c236bd055f983163a39a4c077972b31401db8","modified":1566312803785},{"_id":"source/_posts/kickstart-2019D-X-or-What.md","hash":"3d7387276f8449e5add3674c3683cb6cba0d4c42","modified":1567048801715},{"_id":"source/_posts/new-keyword.md","hash":"b124b1b50b2d63e9b617e8a90339a77914b2c48e","modified":1567050191197},{"_id":"source/_posts/new start point.md","hash":"12b83b55a2ac2b59a1d4ee4ea7ae46f7e6f2c607","modified":1567328717157},{"_id":"source/_posts/next-permutation解析.md","hash":"5166542db61b2e6c1340c78cae8990072a529b99","modified":1566312642385},{"_id":"source/_posts/pick-numbers.md","hash":"0af2c69e0e19cc3e7d5058dd2dd6bf223a2afe24","modified":1566312580999},{"_id":"source/_posts/quick-matrix.md","hash":"89740c71df8ae679178e40841165518f088e1eae","modified":1567050313773},{"_id":"source/_posts/segtree-intval.md","hash":"ca697708109e7b4793ff8985d230ee648d01b261","modified":1566312521578},{"_id":"source/_posts/segtree-template.md","hash":"78865f63b909bdd907b7b5dcbe916860d07ed190","modified":1566312512123},{"_id":"source/_posts/sscanf-sprintf.md","hash":"60d44ce38e07da4c0d43991e75f7a9e48e67f2c7","modified":1567050137262},{"_id":"source/_posts/stringstream.md","hash":"5463e490d7a317190a3b5c0d7eb5b7fd2e7821b6","modified":1566312471229},{"_id":"source/_posts/tab-to-spaces.md","hash":"94524e522eff999b7163da9a47315a1a096c22fc","modified":1566312445050},{"_id":"source/_posts/vultr.md","hash":"118cfebf0060fc2c56dc36c7a1a7394d85425410","modified":1567328484917},{"_id":"source/_posts/二分查找以及lower-bound-upper-bound实现.md","hash":"f5b24774a955f282d57aedf2902c2c85fbb1d2f5","modified":1567327191104},{"_id":"source/_posts/二叉树中序和后序遍历-层序和先序遍历.md","hash":"9497e9e6b612fa028d758b3d31d13eb108026db4","modified":1566312054490},{"_id":"source/_posts/倒水问题.md","hash":"06bac76e73c2da9628c0d996d55a16d2d9152cda","modified":1566312065863},{"_id":"source/_posts/光栅化渲染-1-算法总述.md","hash":"0843a2bc98de59153b4647dc460ff55031e34113","modified":1567327131904},{"_id":"source/_posts/光栅化渲染-2-透视投影.md","hash":"b58dacafe14bc4ac86ea04405985fc0ef1bc3f77","modified":1567327088998},{"_id":"source/_posts/光栅化渲染-3-光栅化.md","hash":"e7e9323ae0c4cb8eae4b8c6d42f4a7767028cacd","modified":1567326822256},{"_id":"source/_posts/光栅化渲染-4-深度检测.md","hash":"ff0fac311db6ab22301e9bab621bbbd3139ce8d3","modified":1567326639009},{"_id":"source/_posts/八数码问题.md","hash":"ec8681fb23e84caa581503c1ff7be12eeb57535c","modified":1566312092103},{"_id":"source/_posts/八皇后问题.md","hash":"b436ebfb033e796f85dae50f0ae9a868c1c2b672","modified":1566312102631},{"_id":"source/_posts/哈希表.md","hash":"6284a9f54fc2360717e1ee6f39f094730ef88bfc","modified":1566312005422},{"_id":"source/_posts/埃及分数-迭代加深搜索.md","hash":"7968c1c16f28fdacd07450b49057888ba8bfc292","modified":1566312111128},{"_id":"source/_posts/循环小数化为分数的方法.md","hash":"d13c19a86bde691751a86cfab2ac3689f1fa1284","modified":1566311953091},{"_id":"source/_posts/欧拉回路.md","hash":"d25f4822f6af34f81471eae03622ddf4a25a574b","modified":1567053911803},{"_id":"source/_posts/静态链接库-STATIC-和动态链接库-SHARED.md","hash":"d03e1066bf9702c55eb4622144dd412ab7782f6d","modified":1567327845591},{"_id":"source/categories/index.md","hash":"29e02a3e0b3fddc5684472c5cdbec0344b13bba2","modified":1566306323377},{"_id":"source/links/index.md","hash":"524b276863aadb8fc8e28e8224af7e780c9a6ab8","modified":1566306323377},{"_id":"source/commonweal/index.md","hash":"57128f80832ea4ccf8259cdfd2f66a177c5da7ee","modified":1566306323377},{"_id":"source/schedule/index.md","hash":"b9db40a1283509c37c0dd5382243e27fa7eb35db","modified":1566306323377},{"_id":"source/sitemap/index.md","hash":"500ba3d8aecc70ffc6be7e2ad5db238e9309aa05","modified":1566306323377},{"_id":"source/tags/index.md","hash":"13c883410ae8b8ba7f1b756d1b8ac4457edd026d","modified":1566306323377},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566306324190},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1566306323409},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1566306323409},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1566306323409},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1566306323409},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1566306323409},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1566306323409},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1566306323409},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1566306323409},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1566306323409},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1566306323409},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1566306323409},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1566306323409},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1566306323409},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1566306323409},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1566306323409},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1566306323409},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1566306323409},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1566306323409},{"_id":"themes/next/layout/_third-party/comments.swig","hash":"7d9d6590d1343437dbfe14688113610ef1045a7a","modified":1566306323409},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1566306323424},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1566306323424},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1566306323424},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1566306323424},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1566306323424},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1566306323424},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1566306323424},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1566306324190},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1566306324190},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1566306324190},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1566306324190},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1566306324190},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1566306324190},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1566306324190},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1566306324190},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1566306324190},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1566306324190},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1566306324190},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1566306324190},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1566306324190},{"_id":"themes/next/source/images/images.jpeg","hash":"c3f38a8f5c4b6afca08f655cdaa2daf9c7804b5f","modified":1566306324190},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1566306324190},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1566306324190},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1566306324190},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1566306324190},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1566306324190},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1566306324190},{"_id":"themes/next/source/images/user2.jpg","hash":"16b0e60948516954e1f9834e2d593c1deb0ffec4","modified":1566306324190},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1566306323424},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1566306323424},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1566306323424},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1566306323424},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1566306323424},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1566306323424},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1566306323424},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1566306323424},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1566306323424},{"_id":"source/_posts/Graph-Theory-The-shortest-path/gra.png","hash":"c2a7946e9e78ad6264a4a6d6b581d06160604bfe","modified":1566306323315},{"_id":"source/_posts/HDU1016-Prime-Ring-Problem-DFS/dfs.png","hash":"bfaf09def97b165527bb22bad63dfe38109bdd64","modified":1566306323315},{"_id":"source/_posts/Graph-Theory-The-shortest-path/path.png","hash":"b20559aca988d5aaefc0931e513b4fc808c5be21","modified":1566306323315},{"_id":"source/_posts/HDU2050/line.jpg","hash":"0b614039e05df58510f6979466289f7ac7190b5f","modified":1566306323315},{"_id":"source/_posts/HDU2050/res.gif","hash":"163a87523482ba25a73787e59a0b13ecfb736053","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/Rudolf_Kalman.jpg","hash":"d9fc75dcf49e0051bfdcc7756e2b63ddfe7b8260","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g1.jpg","hash":"37434d3f18bd047d74a955400bff7e0405cfa8b9","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g2.jpg","hash":"7e24f2f2110a8d055e59fd2504c97aa40150515a","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/afterFilter.png","hash":"bf96d602e8c3f2030946ea7c0ce66c3b712f6374","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g3.jpg","hash":"addfbb4a223035d1ff4c146db85266d1c2b25adb","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g4.jpg","hash":"2003c2200792d6795a15d1aaef0fd7bf4e0b89da","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g5.jpg","hash":"44ba09420e7fbfc1dc583c071f0f248d91c16b8e","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/gauss.jpg","hash":"1857b243d0f0dc7cdc0e7640783f02faa9e3710f","modified":1566306323315},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/origin.png","hash":"9c830d9b7f7d255ba74fe3900ac0e5b271c9f211","modified":1566306323315},{"_id":"source/_posts/Learn-CMake-4-链接库文件/lena_color.png","hash":"5c2c81b0f5095fd2787700a7549d0b61e7bc7998","modified":1566306323315},{"_id":"source/_posts/Maze/maze.png","hash":"26050035faeb5026419d4fe0076622b2f6dc821a","modified":1566306323331},{"_id":"source/_posts/My-little-angel/moon1.jpg","hash":"c57a51bb30e1ec204f4fb3c01783b8f2e87a1bbd","modified":1566306323331},{"_id":"source/_posts/My-little-angel/together1.jpg","hash":"1783fb05e6a210c1c2de23c413b9fb466c44c03a","modified":1566306323331},{"_id":"source/_posts/PCA-主成分分析/pca.jpeg","hash":"29edc63a8409f691aeb4c74bea6f2014bff9681a","modified":1566306323331},{"_id":"source/_posts/POJ1970-The-Game-DFS/Renju.png","hash":"e478edf969416be8f2fda647b3336271dbb13b6a","modified":1566306323331},{"_id":"source/_posts/Rand-C-随机数/random.jpg","hash":"e6cfaf454b76a04cc8c38273c89e9a2c9b2265a5","modified":1566306323331},{"_id":"source/_posts/Super-Mario/SuperMario.png","hash":"b063b297ce5044d523ae0c3d2ea4c408cefe5848","modified":1566306323331},{"_id":"source/_posts/Uva10562-Undraw the trees/tree.png","hash":"51cf513829497a8d98dc1e0f7ade6d8dc407adfd","modified":1566306323331},{"_id":"source/_posts/Uva1103-Ancient-Messages/1.png","hash":"49e92896091c97e432582ca738cdd415dfbaef3a","modified":1566306323331},{"_id":"source/_posts/Uva1103-Ancient-Messages/2.png","hash":"66e6e3e8aa6456456ff9794274edf1dacb72219c","modified":1566306323331},{"_id":"source/_posts/Uva11212-Editing-a-Book/prune.png","hash":"c73f3744915ded4e3872dcb821e19743dd5669eb","modified":1566306323346},{"_id":"source/_posts/Uva12166-Equilibrium-Mobile/balance.png","hash":"f4529422d6cf9010363875a87318e6ec8cb45083","modified":1566306323346},{"_id":"source/_posts/Uva1602-Lattice-Animals/pic.png","hash":"7d7efe55681e5d9619164d67d023e8322cad366d","modified":1566306323346},{"_id":"source/_posts/Uva221-Urban-Elevations/building.png","hash":"5be5290e6f5974f919f3525d5d85f215d2b2dcd9","modified":1566306323346},{"_id":"source/_posts/Uva806-Spatial-Structures/1.png","hash":"3374b72597b7048bb95a6af65ba72f10699f86a8","modified":1566306323346},{"_id":"source/_posts/Uva806-Spatial-Structures/2.png","hash":"ad1edffc72af5cec0649f0b5e93a48a19d9d9acf","modified":1566306323346},{"_id":"source/_posts/Uva839-二叉树的递归处理/tree.png","hash":"ccee240e1b924dd7cca49828c69e0cf78742a7e3","modified":1566306323346},{"_id":"source/_posts/buildBinaryTree/BinaryTree.png","hash":"f5a67b09376f01bfe9459e5dbd066ef290510d5a","modified":1566306323346},{"_id":"source/_posts/tab-to-spaces/space.png","hash":"e1202e8eb89c5c09f5e3eb1e4a72be772c4790b6","modified":1566306323346},{"_id":"source/_posts/tab-to-spaces/tab.png","hash":"30312fc2dabd01c3540693ea57af6ea0a11c9fe2","modified":1566306323346},{"_id":"source/_posts/二分查找以及lower-bound-upper-bound实现/BinarySearch.jpeg","hash":"0ba27593f39f67249e26ef7183c23a7f87513bcf","modified":1566306323362},{"_id":"source/_posts/vultr/p1.png","hash":"595bda0f3e72f314db02d09c378298daf0840657","modified":1566306323346},{"_id":"source/_posts/vultr/p2.png","hash":"c797e71775de0c707e10ec8f765a154b37f27197","modified":1566306323346},{"_id":"source/_posts/vultr/p3.png","hash":"67dbd2c65a2c47e6ae09f22051629da1a6c5fdd1","modified":1566306323346},{"_id":"source/_posts/vultr/p5.png","hash":"a7c6230253b7b12375ea294a6386473479cd7d26","modified":1566306323346},{"_id":"source/_posts/vultr/p7.png","hash":"da388ae09f2db520f71e2348bf8a4883adb2666a","modified":1566306323362},{"_id":"source/_posts/vultr/p8.png","hash":"2f5ce1e7aa48769570589a1a15948f1364753a67","modified":1566306323362},{"_id":"source/_posts/倒水问题/fill.png","hash":"e52c036e123deee8ba888f4751544fee2873f38a","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-1-算法总述/figure1.png","hash":"af649c9b70f42ecfa0edad5a481f5ffd4d197b82","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-1-算法总述/figure2.jpg","hash":"2c36c6012a7c504c74cb3dca3a3d01995a6c27e7","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-1-算法总述/figure3.png","hash":"70c2465005d5eec54389370fafa997d62224ff54","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-1-算法总述/figure4.png","hash":"726703b49d439506bedae760c6fa738b95151e6f","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure1.png","hash":"912adafd5db1b41e1998984b3be9772ca857d2cb","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure2.png","hash":"649cae0f0af4c126256c4f299b92d4ed48fbf696","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure3.png","hash":"aac0c865e4baf9b3a90312a55bb1c4523807c33c","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure4.png","hash":"4fe94351ba51f9d8f087951002fb05f3532284ab","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure5.png","hash":"f2ee13c644b516eb37867babd53db9ba1a3f8760","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-2-透视投影/visible.png","hash":"1f0d35a1d683fd482fa1aa95141569a5338e75f4","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure1.png","hash":"b290b99658bc7c84af7720c3ba79fdd4aef05454","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure2.png","hash":"a8fe68eafaf8652d2124c42c5de5ec5b6ec99904","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure4.png","hash":"bff74759418d9700c5efda10e288c4bc9788d604","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure3.gif","hash":"b0a9b36f91e92ca2a42b8336352976420793cf5d","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure5.png","hash":"416f024d8f45031d1f8c8eaea530173c29f3f88b","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure6.png","hash":"279d015a4c7800ef29633a3413aa94d1c24f605d","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure7.png","hash":"a356d3e49e4627eadc7ff1cdb7d6393431c1c7fc","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/rasterization.png","hash":"cb9323db41b2889a3ca9609100eff4202ee77b9a","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-3-光栅化/result.png","hash":"b564c4c7db1f03b08ee9a8c0f53f72506f285886","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-4-深度检测/depth.png","hash":"2cf502ead52ade69c9aa9ddac8ebc2df3f8892dc","modified":1566907910392},{"_id":"source/_posts/光栅化渲染-4-深度检测/figure1.png","hash":"1e135db59da481a49accdc278d49bf1b767f0213","modified":1566909929227},{"_id":"source/_posts/光栅化渲染-4-深度检测/figure2.png","hash":"55a78a8a6e5ff37e3af5f3dfdf2f920dec96584c","modified":1566986184771},{"_id":"source/_posts/八数码问题/EightDigital.png","hash":"0de9048bd4284853f514126f2664ba19e7ed4b10","modified":1566306323362},{"_id":"source/_posts/八皇后问题/queen.png","hash":"6ab1bc094e22cb34ec02d3dcd9f3c70efe233479","modified":1566306323362},{"_id":"source/_posts/循环小数化为分数的方法/wiki.png","hash":"1b5ec94305a72471f51e90d9bd1d71e44983a983","modified":1566306323377},{"_id":"source/_posts/静态链接库-STATIC-和动态链接库-SHARED/shared.png","hash":"30958cd8a546d25f90a9320630be02d8b39dc16d","modified":1566306323377},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566306323409},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566306323409},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566306324175},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566306324175},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566306324175},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566306324190},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566306324190},{"_id":"themes/next/source/images/avatar.jpg","hash":"a2940e550cbd26df2e3561074910cc38f54edd15","modified":1566306324190},{"_id":"themes/next/source/images/avatar2.png","hash":"5a825078a61886e5bf8f40244b0c0d3acef801ee","modified":1566306324190},{"_id":"source/_posts/My-little-angel/qxy1.jpg","hash":"29c0b85aa8bd9e32c8b239b78ae5f571e8375bd9","modified":1566306323331},{"_id":"source/_posts/Uva1103-Ancient-Messages/hier.png","hash":"9fc1f550a328d3a0f44bec5cd4655935db1fe9d0","modified":1566306323346},{"_id":"source/_posts/vultr/p4.png","hash":"2ee46cf520c7d0585db4245c9586829f5173e680","modified":1566306323346},{"_id":"source/_posts/vultr/p6.png","hash":"47f4048062363375bb49809ceb19a67b5c659bf3","modified":1566306323362},{"_id":"source/_posts/vultr/p9.png","hash":"7a099d33cc7ac17bc5e233121d135e46af0549b5","modified":1566306323362},{"_id":"source/_posts/光栅化渲染-1-算法总述/discrete.png","hash":"b4b6f31ff7984722ea989da3021d191fc2806c77","modified":1566306323362},{"_id":"source/_posts/八皇后问题/diagonal.png","hash":"4963cc964d96d85438ef74780aafd357f2c198f4","modified":1566306323362},{"_id":"source/_posts/欧拉回路/Elur.png","hash":"ddc21e3cbc1ffa51606a7a521fad01c798d6ad47","modified":1566306323377},{"_id":"source/_posts/静态链接库-STATIC-和动态链接库-SHARED/static.png","hash":"2a49d01e43487344cba9c57f6b1d47a4f1489052","modified":1566306323377},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1566306323409},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1566306323409},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1566306323409},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1566306323409},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1566306323409},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1566306323409},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1566306323409},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1566306323409},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1566306323409},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1566306323409},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1566306323409},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1566306323409},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1566306323409},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1566306323409},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1566306323409},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1566306323424},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1566306323424},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1566306323424},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1566306323424},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1566306323424},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1566306323424},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1566306323409},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1566306323409},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1566306323424},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1566306323424},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1566306323424},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1566306323424},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1567326862791},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1566306324175},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1566306324175},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1566306324175},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1566306324190},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1566306324190},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1566306324190},{"_id":"themes/next/source/css/_variables/base.styl","hash":"23c59cceb03f2844d844562e37c7908b22e20ba8","modified":1566313406341},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1566306324190},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1566306324190},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1566306324190},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1566306324190},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1566306324190},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1566306324190},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1566306324190},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1566306324190},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1566306324190},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1566306324190},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1566306324190},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1566306324206},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1566306324206},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1566306324206},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1566306324206},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1566306324206},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1566306324206},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1566306324206},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1566306324221},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1566306324221},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1566306324221},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1566306324221},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1566306324221},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1566306324221},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1566306324221},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1566306324221},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1566306324221},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1566306324221},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1566306324221},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1566306324221},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1566306324221},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1566306324221},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1566306324237},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1566306324237},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1566306324237},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1566306324237},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1566306324237},{"_id":"source/_posts/Uva1343-The-Rotation-Game/game.png","hash":"aaa5af49a4c3ecab97010f616c8cced728f60c1f","modified":1566306323346},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1566306324221},{"_id":"source/_posts/光栅化渲染-2-透视投影/perspective.png","hash":"dd94afdc53034d3284cacc982d9124c2f596475a","modified":1566306323362},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1566306323424},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1566306324175},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1566306324175},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1566306324175},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1566306324175},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1566306324175},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1566306324175},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1566306324175},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1566306324190},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1566306324190},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1566306324190},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1566306324190},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1566306324190},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1566306324190},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1566306324175},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1566306324190},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1566306324206},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1566306324206},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1566306324206},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1566306324206},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1566306324237},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1566306324237},{"_id":"source/_posts/Linear algebra-Dot product/1.gif","hash":"a037ce119aca35cd7188ef70334ba9b06dc81d31","modified":1566306323315},{"_id":"source/_posts/哈希表/hash.png","hash":"29a902ee92685689f3c4b52320ed65dab3c442e1","modified":1566306323362},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1566306324190},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1566306324221},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1566306324221},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1566306324237},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1566306323424},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1566306324159},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1566306324175},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1566306324175},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1566306324175},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1566306324190},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1566306324190},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1566306324190},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1566306324190},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1566306324190},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1566306324206},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1566306324221},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1566306324221},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1566306324206},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1566306324221},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1566306324221},{"_id":"source/_posts/Linear algebra-Dot product/3.gif","hash":"fc991a2c97761dcc611775a0ed1bd3bcf31c6435","modified":1566306323331},{"_id":"source/_posts/Linear algebra-Dot product/2.gif","hash":"bb118b39f653f5c4b63c9947450608f8049641d4","modified":1566306323331},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1567392422157},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1567392422157},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1567392422157},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1567392422157},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1567392422158},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1567392422158},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1567392422158},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1567392422158},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1567392422158},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1567392422158},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1567392422158},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1567392422158},{"_id":"public/images/images.jpeg","hash":"c3f38a8f5c4b6afca08f655cdaa2daf9c7804b5f","modified":1567392422158},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1567392422158},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1567392422158},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1567392422158},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1567392422158},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1567392422158},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1567392422158},{"_id":"public/images/user2.jpg","hash":"16b0e60948516954e1f9834e2d593c1deb0ffec4","modified":1567392422158},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1567392422158},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1567392422158},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1567392422158},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1567392422158},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1567392422158},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1567392422158},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1567392422158},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1567392422158},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1567392422158},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1567392422158},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1567392422158},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1567392422158},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1567392422158},{"_id":"public/2018/08/12/HDU1016-Prime-Ring-Problem-DFS/dfs.png","hash":"bfaf09def97b165527bb22bad63dfe38109bdd64","modified":1567392422158},{"_id":"public/2019/03/26/Maze/maze.png","hash":"26050035faeb5026419d4fe0076622b2f6dc821a","modified":1567392422158},{"_id":"public/2019/04/03/Learn-CMake-4-链接库文件/lena_color.png","hash":"5c2c81b0f5095fd2787700a7549d0b61e7bc7998","modified":1567392422158},{"_id":"public/2019/03/27/PCA-主成分分析/pca.jpeg","hash":"29edc63a8409f691aeb4c74bea6f2014bff9681a","modified":1567392422159},{"_id":"public/2018/08/14/POJ1970-The-Game-DFS/Renju.png","hash":"e478edf969416be8f2fda647b3336271dbb13b6a","modified":1567392422159},{"_id":"public/2019/04/28/Rand-C-随机数/random.jpg","hash":"e6cfaf454b76a04cc8c38273c89e9a2c9b2265a5","modified":1567392422159},{"_id":"public/2018/12/03/Super-Mario/SuperMario.png","hash":"b063b297ce5044d523ae0c3d2ea4c408cefe5848","modified":1567392422159},{"_id":"public/2018/11/13/Uva10562-Undraw the trees/tree.png","hash":"51cf513829497a8d98dc1e0f7ade6d8dc407adfd","modified":1567392422159},{"_id":"public/2019/01/12/Uva11212-Editing-a-Book/prune.png","hash":"c73f3744915ded4e3872dcb821e19743dd5669eb","modified":1567392422159},{"_id":"public/2018/12/04/Uva12166-Equilibrium-Mobile/balance.png","hash":"f4529422d6cf9010363875a87318e6ec8cb45083","modified":1567392422159},{"_id":"public/2018/11/14/Uva221-Urban-Elevations/building.png","hash":"5be5290e6f5974f919f3525d5d85f215d2b2dcd9","modified":1567392422159},{"_id":"public/2019/03/04/buildBinaryTree/BinaryTree.png","hash":"f5a67b09376f01bfe9459e5dbd066ef290510d5a","modified":1567392422159},{"_id":"public/2019/07/27/二分查找以及lower-bound-upper-bound实现/BinarySearch.jpeg","hash":"0ba27593f39f67249e26ef7183c23a7f87513bcf","modified":1567392422159},{"_id":"public/2018/12/26/八数码问题/EightDigital.png","hash":"0de9048bd4284853f514126f2664ba19e7ed4b10","modified":1567392422159},{"_id":"public/2018/04/09/HDU2050/res.gif","hash":"163a87523482ba25a73787e59a0b13ecfb736053","modified":1567392422159},{"_id":"public/2018/12/04/Uva806-Spatial-Structures/1.png","hash":"3374b72597b7048bb95a6af65ba72f10699f86a8","modified":1567392422159},{"_id":"public/2018/12/20/八皇后问题/queen.png","hash":"6ab1bc094e22cb34ec02d3dcd9f3c70efe233479","modified":1567392422159},{"_id":"public/2018/12/04/Uva806-Spatial-Structures/2.png","hash":"ad1edffc72af5cec0649f0b5e93a48a19d9d9acf","modified":1567392422159},{"_id":"public/2018/06/10/My-little-angel/moon1.jpg","hash":"c57a51bb30e1ec204f4fb3c01783b8f2e87a1bbd","modified":1567392422159},{"_id":"public/2018/06/10/My-little-angel/together1.jpg","hash":"1783fb05e6a210c1c2de23c413b9fb466c44c03a","modified":1567392422159},{"_id":"public/2018/10/28/Uva1103-Ancient-Messages/2.png","hash":"66e6e3e8aa6456456ff9794274edf1dacb72219c","modified":1567392422159},{"_id":"public/2018/10/28/Uva1103-Ancient-Messages/1.png","hash":"49e92896091c97e432582ca738cdd415dfbaef3a","modified":1567392422159},{"_id":"public/2019/08/27/光栅化渲染-4-深度检测/depth.png","hash":"2cf502ead52ade69c9aa9ddac8ebc2df3f8892dc","modified":1567392422159},{"_id":"public/2019/08/27/光栅化渲染-4-深度检测/figure2.png","hash":"55a78a8a6e5ff37e3af5f3dfdf2f920dec96584c","modified":1567392422159},{"_id":"public/2019/08/10/光栅化渲染-1-算法总述/figure2.jpg","hash":"2c36c6012a7c504c74cb3dca3a3d01995a6c27e7","modified":1567392422159},{"_id":"public/2019/08/11/光栅化渲染-2-透视投影/figure1.png","hash":"912adafd5db1b41e1998984b3be9772ca857d2cb","modified":1567392422159},{"_id":"public/2019/08/10/光栅化渲染-1-算法总述/figure4.png","hash":"726703b49d439506bedae760c6fa738b95151e6f","modified":1567392422159},{"_id":"public/2019/08/11/光栅化渲染-2-透视投影/figure2.png","hash":"649cae0f0af4c126256c4f299b92d4ed48fbf696","modified":1567392422159},{"_id":"public/2019/08/11/光栅化渲染-2-透视投影/figure3.png","hash":"aac0c865e4baf9b3a90312a55bb1c4523807c33c","modified":1567392422159},{"_id":"public/2019/08/11/光栅化渲染-2-透视投影/figure4.png","hash":"4fe94351ba51f9d8f087951002fb05f3532284ab","modified":1567392422159},{"_id":"public/about/index.html","hash":"117ae60dc8142dc2a5b75b287f1220437c169a81","modified":1567392422471},{"_id":"public/categories/index.html","hash":"877d33dbfb9602ecd20c6c28aad6fdf47fbdd726","modified":1567392422471},{"_id":"public/links/index.html","hash":"73b22ced7c9d72942bca10ffed02b39643b465b4","modified":1567392422471},{"_id":"public/tags/index.html","hash":"f3d8a41ad9748876037f34c91fe23c48db10d61d","modified":1567392422471},{"_id":"public/sitemap/index.html","hash":"2604e93a1558b8fc4b0038ac62eda5918ab6405b","modified":1567392422472},{"_id":"public/commonweal/index.html","hash":"858fe00f968ae20cc6e86ac1a5fd1f4b3331b484","modified":1567392422472},{"_id":"public/2019/08/27/光栅化渲染-4-深度检测/index.html","hash":"5eb52d85060ab001b902f866e643971a8f8804dc","modified":1567392422472},{"_id":"public/schedule/index.html","hash":"7d63063671c98b1095f86e3b7761ab008cd9abb2","modified":1567392422472},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/index.html","hash":"8278521e655b3b390e06243b739278c9bb1d8749","modified":1567392422472},{"_id":"public/2019/08/11/光栅化渲染-2-透视投影/index.html","hash":"ba4d8c0ea03679bbc0bc1c862a9c94e21cfd3769","modified":1567392422472},{"_id":"public/2019/08/02/kickstart-2019D-X-or-What/index.html","hash":"232eb1a2b3cd527fe57408979499a4e06bf0845d","modified":1567392422472},{"_id":"public/2019/08/10/光栅化渲染-1-算法总述/index.html","hash":"1c4bc729d93d54b4860d072ea26a81efd1a6b669","modified":1567392422472},{"_id":"public/2019/07/27/CodeForces-469D-Two-Sets/index.html","hash":"eb21b1c5dfa5f842d5b066f73c25d34a98744f41","modified":1567392422472},{"_id":"public/2019/07/27/二分查找以及lower-bound-upper-bound实现/index.html","hash":"b55bfbd8915161b6ad3e831928cdadb4e4495196","modified":1567392422472},{"_id":"public/2019/04/28/Rand-C-随机数/index.html","hash":"9c29fe9e26ab26d9806f69d30cd344e975e0ba28","modified":1567392422472},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/index.html","hash":"c205af40a24a55ed853de2d3b16505cbd7e7d781","modified":1567392422472},{"_id":"public/2019/04/03/静态链接库-STATIC-和动态链接库-SHARED/index.html","hash":"e3e7e09ee8c9b6079e28e36aab3e1bfe4e67321f","modified":1567392422472},{"_id":"public/2019/04/03/Learn-CMake-4-链接库文件/index.html","hash":"d3ddb3e816e8338978e638e06ce4243efbdeffeb","modified":1567392422472},{"_id":"public/2019/04/03/Learn-CMake-3-创建库文件/index.html","hash":"1d797bb9d51c7ed433b5edec36fae1018e52fee2","modified":1567392422472},{"_id":"public/2019/04/03/Learn-CMake-2-多文件-目录/index.html","hash":"129ebf1b8e8ff6b0af77c70bae8ce13eef45fa9b","modified":1567392422472},{"_id":"public/2019/04/02/Learn-CMake-1-HelloWorld/index.html","hash":"ec98cca79e0c574069a7e3e7044c9958820e820b","modified":1567392422472},{"_id":"public/2019/03/27/PCA-主成分分析/index.html","hash":"7c119c0432a29099fe75b13cc7acabaa8088e5d8","modified":1567392422472},{"_id":"public/2019/03/26/Maze/index.html","hash":"6d5605130326522d2f718240b3ccb3d903099c94","modified":1567392422472},{"_id":"public/2019/03/27/Covariance-协方差/index.html","hash":"78fc4417bb3485b35c83338e700cec95d1962e0b","modified":1567392422472},{"_id":"public/2019/03/04/buildBinaryTree/index.html","hash":"f33561c91a335ab43a550ec1963f4c7529af2160","modified":1567392422472},{"_id":"public/2019/02/12/Uva1602-Lattice-Animals/index.html","hash":"12f2fd18b8bbe34bf3732185ff245a76503d83f2","modified":1567392422472},{"_id":"public/2019/02/08/Uva1374-Power-Calculus/index.html","hash":"fdc956e784840b862f825528f35775c7c228b7af","modified":1567392422472},{"_id":"public/2019/01/13/Uva1343-The-Rotation-Game/index.html","hash":"199f99a4ff6f23925215ba7341d4fef6e2f85a44","modified":1567392422472},{"_id":"public/2019/01/12/Uva11212-Editing-a-Book/index.html","hash":"2223f0c290b724c0a555d5dfd948e189d63134b1","modified":1567392422472},{"_id":"public/2019/01/02/Uva1601-The-Morning-after-Halloween/index.html","hash":"77bdd41dabe0dd9b9829ca984a533a039e3f862a","modified":1567392422472},{"_id":"public/2019/01/03/埃及分数-迭代加深搜索/index.html","hash":"9592349a18dbbe0b613f6ad70f2dedb23ae6223c","modified":1567392422473},{"_id":"public/2018/12/31/Good-Bye-2018/index.html","hash":"096e7f0574cb77e4460f5cfc1eae4492ea859d46","modified":1567392422473},{"_id":"public/2018/12/31/倒水问题/index.html","hash":"d419f96cd3bf7a2ee37efec1e3d50c143f9438fc","modified":1567392422473},{"_id":"public/2018/12/26/八数码问题/index.html","hash":"17375edec0d9be1eb20e8c99797ce2f925efb9e4","modified":1567392422473},{"_id":"public/2018/12/25/哈希表/index.html","hash":"b3a22a704ea03b17b155be0cde81b9d4fcb4aa36","modified":1567392422473},{"_id":"public/2018/12/20/八皇后问题/index.html","hash":"1e80862bbe64841dd32b84b907be47c8eaeee1f6","modified":1567392422473},{"_id":"public/2018/12/18/next-permutation解析/index.html","hash":"1f31d4f88d41e7556bbd89441eaabeeeaa331c7c","modified":1567392422473},{"_id":"public/2018/12/17/Uva11059-Maximum-Product/index.html","hash":"1d38ac2cf927c7c44b097372700e885a1a9965b0","modified":1567392422473},{"_id":"public/2018/12/17/Uva725-Division/index.html","hash":"65bac13bd4cb887eae033b8515381d2eff8b549a","modified":1567392422473},{"_id":"public/2018/12/17/Uva12118-Inspetor-s-Dilemma/index.html","hash":"d87a432f364b17ac284892d36acf4383eddbe09b","modified":1567392422473},{"_id":"public/2018/12/14/Uva10410-Tree-Reconstruction/index.html","hash":"6afdd563889a2bbff32ed7237902832086461c04","modified":1567392422473},{"_id":"public/2018/12/12/Uva127-Accordian-Patience/index.html","hash":"12ba8eb1d70d0cc141f3ae95f8397af08605cb81","modified":1567392422473},{"_id":"public/2018/12/09/循环小数化为分数的方法/index.html","hash":"b8da43d5d0e8bcec96d75138a1fb5bacfd76803b","modified":1567392422473},{"_id":"public/2018/12/04/Uva806-Spatial-Structures/index.html","hash":"17b8b6c8a8556ade3cb32704e68987be9efe57ca","modified":1567392422473},{"_id":"public/2018/12/04/Uva12166-Equilibrium-Mobile/index.html","hash":"43e48ce47e2de6c472349b1ec77566ad3fd11c42","modified":1567392422473},{"_id":"public/2018/12/03/Uva1600-Patrol-Robot/index.html","hash":"8b43feb1ac2efd6f9191fa45fa26c6a69b697521","modified":1567392422473},{"_id":"public/2018/12/03/extern-外部变量/index.html","hash":"d42bc756266b7ac719c0709200d1048e87b518d2","modified":1567392422473},{"_id":"public/2018/12/03/Super-Mario/index.html","hash":"ddbb2a76950e82515f514423eedd758e64ae9ad2","modified":1567392422473},{"_id":"public/2018/12/02/C语言编译连接过程以及-h和-c文件解析/index.html","hash":"09a7402ef14e03beb2813b6adf49ff8230582295","modified":1567392422473},{"_id":"public/2018/11/27/Uva673-Parentheses-Balance/index.html","hash":"864f2ad7b81cb02095c0da4caca73c81453e0ac2","modified":1567392422473},{"_id":"public/2018/11/20/Uva11853-Painball/index.html","hash":"0bc0d3257318398f48c5593fd1a46c0bf512590b","modified":1567392422473},{"_id":"public/2018/11/18/Uva1599-Ideal-Path/index.html","hash":"76e93f65489c1b606b5cbaf5d6f9d9db4040b19d","modified":1567392422473},{"_id":"public/2018/11/14/Uva221-Urban-Elevations/index.html","hash":"399977fd6f53c7b166669ba3300d1c7dec5f1348","modified":1567392422473},{"_id":"public/2018/11/13/Uva10562-Undraw the trees/index.html","hash":"b5767f1190b36d44edd589c9da826a6af8c2d0d4","modified":1567392422473},{"_id":"public/2018/11/12/Uva10129-Play-on-Words/index.html","hash":"8a7fc536e3ff678c9a10ac22887043bd32e0d8ae","modified":1567392422473},{"_id":"public/2018/11/04/欧拉回路/index.html","hash":"03afdc2d0b8986573b5a72ff7584678c3f29cb3f","modified":1567392422474},{"_id":"public/2018/11/04/Uva10305-Ordering-Tasks/index.html","hash":"2da061f4b28df9783240663e777e0b56c0460862","modified":1567392422474},{"_id":"public/2018/10/28/Uva1103-Ancient-Messages/index.html","hash":"02749fb56717e41d5abf5382c4819da8374ad356","modified":1567392422474},{"_id":"public/2018/11/01/Uva816-Abbott-s-Revenge-BFS/index.html","hash":"d77b2ec64a888c1dc8003990d5efc869bc3a7bc3","modified":1567392422474},{"_id":"public/2018/10/24/Linear algebra-Dot product/index.html","hash":"02d490cce40558cea5add344325037eeb812e07e","modified":1567392422474},{"_id":"public/2018/09/22/Uva839-二叉树的递归处理/index.html","hash":"1cdee02a821dc4b3549b215fbb7dabf02bc47cc2","modified":1567392422474},{"_id":"public/2018/09/22/Uva548-二叉树构建-DFS/index.html","hash":"2fee792448f5b474d1cf0a85ff3fd54ed6354bfd","modified":1567392422474},{"_id":"public/2018/09/22/二叉树中序和后序遍历-层序和先序遍历/index.html","hash":"a5233676957011315d5da4ac16d76ab81f8c16b0","modified":1567392422474},{"_id":"public/2018/09/21/Uva122-二叉树构建与层次遍历/index.html","hash":"121fb808adf7005c9e9e715a861aa6e627b07e97","modified":1567392422474},{"_id":"public/2018/09/15/sscanf-sprintf/index.html","hash":"e1d6c7532d28379a791f07134e8ef43f6e85f96d","modified":1567392422474},{"_id":"public/2018/09/20/new-keyword/index.html","hash":"8ecbb66c6df46eedb8fff73d584b8f68257efd68","modified":1567392422474},{"_id":"public/2018/09/07/Graph-Theory-The-shortest-path/index.html","hash":"d5ec727f62ed9399a56ae33718868c578fbedb37","modified":1567392422474},{"_id":"public/2018/08/28/CodeForces-478C/index.html","hash":"6a63d0be676946680e1d43abe44c96c2b303e2b6","modified":1567392422474},{"_id":"public/2018/08/28/CodeForces-569A/index.html","hash":"a48d7da7227c19045d2eba59a2f360f162afc0bd","modified":1567392422474},{"_id":"public/2018/08/14/POJ1970-The-Game-DFS/index.html","hash":"8f586e22c554e4e61f880218376d8a64bc15218d","modified":1567392422474},{"_id":"public/2018/08/12/HDU1016-Prime-Ring-Problem-DFS/index.html","hash":"a2354d98652c7f23a8dffe44a3a59b9d4adef2ee","modified":1567392422474},{"_id":"public/2018/08/11/pick-numbers/index.html","hash":"56d47b6c055cafa0ec27a385306cf765f0603aa7","modified":1567392422474},{"_id":"public/2018/08/09/Uva12096-The-SetStack-Computer-STL/index.html","hash":"d01b927db7fc5b5c44e5ee5b8000738e1add4bbe","modified":1567392422474},{"_id":"public/2018/08/08/stringstream/index.html","hash":"dab9bfa873bc236d1d55d103454f18d84ceecf1f","modified":1567392422474},{"_id":"public/2018/07/31/Codeforces-498Div3-C/index.html","hash":"71721217ecbc9345adb0851b79bc2df029559a01","modified":1567392422474},{"_id":"public/2018/07/26/Nowcoder-Third-A/index.html","hash":"9e73e758ec50879fea79218de6438ee1fd610b82","modified":1567392422474},{"_id":"public/2018/07/29/Nowcoder-Fourth-G/index.html","hash":"a0d61b025204f3e31ded957379ec5cdbaddcc95f","modified":1567392422474},{"_id":"public/2018/06/10/My-little-angel/index.html","hash":"886a9fcfddcd6a86e95a80985e1574f32adf36cb","modified":1567392422474},{"_id":"public/2018/06/12/tab-to-spaces/index.html","hash":"ce0e790b3cf1ae1ae60baba714be5c3f26662a53","modified":1567392422474},{"_id":"public/2018/06/05/HDU5092/index.html","hash":"b6b0418c0f6c2c01e9991da0afe66befed10f1bf","modified":1567392422474},{"_id":"public/2018/05/16/HDU4856-Tunnels/index.html","hash":"2092584f62837b738de8c644619c62b0b5513b20","modified":1567392422474},{"_id":"public/2018/05/14/quick-matrix/index.html","hash":"bc5950a67753f2fbc4ac22b444c7063179db01d5","modified":1567392422474},{"_id":"public/2018/05/06/segtree-template/index.html","hash":"cde04c2b67963b41a8b89f186d57e53cdca4c2d4","modified":1567392422474},{"_id":"public/2018/05/08/segtree-intval/index.html","hash":"ba06662dfcb4df0332e6bdcd71a240a0ece8b1df","modified":1567392422474},{"_id":"public/2018/04/22/POJ2481/index.html","hash":"e61d3bbd703440ba11daa8b42b70d011c24f5632","modified":1567392422475},{"_id":"public/2018/04/13/vultr/index.html","hash":"cf26f746efda4f54e159ce340fd71ca7d2c78477","modified":1567392422475},{"_id":"public/2018/04/09/HDU2050/index.html","hash":"6dbb6c6fce35b1679d78a3a4844a0799220c07e7","modified":1567392422475},{"_id":"public/2018/04/09/hexo-mathjax/index.html","hash":"bd0f51c773ce7f1ee3d7498a03ba11916911659c","modified":1567392422475},{"_id":"public/2018/08/07/STL-cmp/index.html","hash":"0e0e02df29d83f7e95b02f44172f02835c831ebd","modified":1567392422475},{"_id":"public/2018/04/08/new start point/index.html","hash":"598749ad5efe0b814633b4d44a5281cceccf071d","modified":1567392422475},{"_id":"public/archives/index.html","hash":"1dd8b2de3dcd1691606844b75c80c986c736b104","modified":1567392422475},{"_id":"public/archives/page/2/index.html","hash":"322ced0031df13af885a3a7910748dd05196ddbc","modified":1567392422475},{"_id":"public/archives/page/3/index.html","hash":"8edce2cbc0004c6c3ce11e383cbd05f0249a6049","modified":1567392422475},{"_id":"public/archives/page/4/index.html","hash":"09b0d461a6b006949418ae2afe53b3b22018f89a","modified":1567392422475},{"_id":"public/archives/page/5/index.html","hash":"55575607b39dc70d6d09a65d0732e4b93c5cad7a","modified":1567392422475},{"_id":"public/archives/page/6/index.html","hash":"c4b0c4be0faaeefaeb8c006904ef1127cf0441d9","modified":1567392422475},{"_id":"public/archives/page/7/index.html","hash":"aab39d33dce8c1fbd627721564bd55647eceb6fa","modified":1567392422475},{"_id":"public/archives/page/8/index.html","hash":"d1a5069250cf25c2ccb5581d8c3dd33c18bf824c","modified":1567392422475},{"_id":"public/archives/page/9/index.html","hash":"435a411ebd1e35ef751cb5d66a0b91c77c6ffef4","modified":1567392422475},{"_id":"public/archives/2018/index.html","hash":"2d0f8c2c7bfb7586cbe5adbd8716c77f6a4fb525","modified":1567392422475},{"_id":"public/archives/2018/page/2/index.html","hash":"23ffd23ff38b344fdc4bd5618624d8672ded8a1a","modified":1567392422475},{"_id":"public/archives/2018/page/3/index.html","hash":"7301f871a751e68500881f746daeae810b3d8fdc","modified":1567392422475},{"_id":"public/archives/2018/page/4/index.html","hash":"fdd200d298471252b3b98d8bf86fc7dc8c3ca196","modified":1567392422475},{"_id":"public/archives/2018/page/5/index.html","hash":"b1ef600c9327550e8286f4ad0e8140f5fc25282c","modified":1567392422475},{"_id":"public/archives/2018/page/6/index.html","hash":"611fa0bc06d9ddfa684607e2df7fb5fa9dd6bc38","modified":1567392422475},{"_id":"public/archives/2018/04/index.html","hash":"1b805b245819f1db08162255deb8d7c247c0797c","modified":1567392422475},{"_id":"public/archives/2018/05/index.html","hash":"54b14f00a54c15520c3ac5d5d2e00f2c236c4a60","modified":1567392422475},{"_id":"public/archives/2018/06/index.html","hash":"cdcfae8ca729c685327a9de312e2d4d9fdee6074","modified":1567392422475},{"_id":"public/archives/2018/07/index.html","hash":"aa2557798db6be87c43f570f9b635129139deb11","modified":1567392422475},{"_id":"public/archives/2018/08/index.html","hash":"8a96d846efa8694d175a4c06209021f3497bf52f","modified":1567392422475},{"_id":"public/archives/2018/09/index.html","hash":"109bc2702522d97b1c95d4639532e41c3b92ae21","modified":1567392422476},{"_id":"public/archives/2018/10/index.html","hash":"f35c4fabef2de9346412b393b7898157bae9721d","modified":1567392422476},{"_id":"public/archives/2018/11/index.html","hash":"267a09de16d59c278ca85e26042c95034a2b1fad","modified":1567392422476},{"_id":"public/archives/2018/12/index.html","hash":"bbd279fc9c3d85a9ac2b0131c5545846dfa2b6e4","modified":1567392422476},{"_id":"public/archives/2018/12/page/2/index.html","hash":"0722b1c451400776d64483381f4ccf206132ce42","modified":1567392422476},{"_id":"public/archives/2019/index.html","hash":"f4c4a72b53f9ea81267d080ce77ed0f0ece03118","modified":1567392422476},{"_id":"public/archives/2019/page/2/index.html","hash":"9a4cd37d064c06a0713a96fcc7f83d85732d5544","modified":1567392422476},{"_id":"public/archives/2019/page/3/index.html","hash":"005b0ffda2a34cc3783d9918ea490e01b67955ea","modified":1567392422476},{"_id":"public/archives/2019/01/index.html","hash":"806a461e7d33a868760fba9457c927cf0555ffea","modified":1567392422476},{"_id":"public/archives/2019/02/index.html","hash":"a7e05bcc2c12a33f9b00f92cf9420b62833e2c6a","modified":1567392422476},{"_id":"public/archives/2019/03/index.html","hash":"27e767c56fa9613431365e4891ed973b5434db18","modified":1567392422476},{"_id":"public/archives/2019/04/index.html","hash":"6b2c7027ba9e3b1568144d385edfa4141c30f1ee","modified":1567392422476},{"_id":"public/archives/2019/07/index.html","hash":"0cb33c4099e2d372f077f72c7a72ea67d6918ec4","modified":1567392422476},{"_id":"public/archives/2019/08/index.html","hash":"842ad6384f8f3c070febffbfe029020e0c6612fb","modified":1567392422476},{"_id":"public/categories/ACM/index.html","hash":"60455706eaf5599476ce6566b5df3e4296b29e0b","modified":1567392422476},{"_id":"public/categories/ACM/page/2/index.html","hash":"82ec17139e3f1398c4b1d85d9cddfd82494dc0c3","modified":1567392422476},{"_id":"public/categories/ACM/page/3/index.html","hash":"1772b6ae2bb9b571f49cefd8a2766b65e9358c91","modified":1567392422476},{"_id":"public/categories/ACM/page/4/index.html","hash":"326303c809e68b32edb83175d26f8468a49756d6","modified":1567392422476},{"_id":"public/categories/Math/index.html","hash":"ff02114efb6acfebcadbd20e0ee64e37c934d9c6","modified":1567392422476},{"_id":"public/categories/C/index.html","hash":"2a3af461bd30076214e04e8307c7c80992c25611","modified":1567392422476},{"_id":"public/categories/Summary/index.html","hash":"73f26be0f9fbde10aea13dd1e48184770631bc51","modified":1567392422476},{"_id":"public/categories/Summary/page/2/index.html","hash":"27bc8a0a0fe56d4491c0d91839156511b92dfe2f","modified":1567392422476},{"_id":"public/categories/Diary/index.html","hash":"83780111ceae1d718c54e81363a140566dd9ada6","modified":1567392422476},{"_id":"public/categories/Template/index.html","hash":"44d7c408a1056c6b9653e11aae602660499467d9","modified":1567392422476},{"_id":"public/categories/Messy-article/index.html","hash":"776f9957dbca15e8edd164b51f194d5b5889bcae","modified":1567392422476},{"_id":"public/categories/Google-Kick-Start/index.html","hash":"e3884a944859fcd227fd3b196c12186f8f7df961","modified":1567392422476},{"_id":"public/categories/Computer-Graphics/index.html","hash":"a38943a7f5cfefbc579d7943f34a66dcb96c938a","modified":1567392422476},{"_id":"public/categories/ACM/贪心/index.html","hash":"ef24f7108a56ef394b9d9ed916429f77437f83f7","modified":1567392422477},{"_id":"public/categories/ACM/思维/index.html","hash":"139e90499ab9fd3247cff0d8dad54909745a51d1","modified":1567392422477},{"_id":"public/categories/ACM/前缀和/index.html","hash":"cbc14fd8ac05d0ffb5266c5f608f7197b3585867","modified":1567392422477},{"_id":"public/categories/ACM/DFS/index.html","hash":"841d69ee97baa24f5b47706ebe3f2ca5f19964ce","modified":1567392422477},{"_id":"public/categories/ACM/动态规划/index.html","hash":"722724ec519519ba45f5c620bb1784f734547cb2","modified":1567392422477},{"_id":"public/categories/ACM/背包/index.html","hash":"6643c63edd7d79fc6b6d0ed1a1782d006b56d735","modified":1567392422477},{"_id":"public/categories/ACM/线段树/index.html","hash":"8ca9fd9bee7a491a6243c9a41c58f8723f6a05c4","modified":1567392422477},{"_id":"public/categories/ACM/拓扑排序/index.html","hash":"e22680ab783e9d27bb6071a8b182be5177d4bcf4","modified":1567392422477},{"_id":"public/categories/ACM/欧拉路/index.html","hash":"289bb226e7dd526c2ef01fe75acc38ca92803b13","modified":1567392422477},{"_id":"public/categories/ACM/树/index.html","hash":"1ed02927bedd4a652f36a74b4f7f8fda9061ae40","modified":1567392422477},{"_id":"public/categories/ACM/暴力枚举/index.html","hash":"544e3673e5d73b94853f752353eadd103a9d93d5","modified":1567392422477},{"_id":"public/categories/ACM/IDA/index.html","hash":"a24c30d2b7a797d73c12b3ea33a210e2c8e90a2f","modified":1567392422477},{"_id":"public/categories/ACM/map/index.html","hash":"15c97c373344e9c8bdc2653b759d23c0d9307193","modified":1567392422477},{"_id":"public/categories/ACM/链表/index.html","hash":"f73d19e07aeba14ee13152030f19c33b0ebd5897","modified":1567392422477},{"_id":"public/categories/ACM/离散化/index.html","hash":"bc30ea1d7021a68e3f402a8b89f2c0297ef8f15c","modified":1567392422477},{"_id":"public/categories/ACM/BFS/index.html","hash":"53cdfdc3239508e854806ad4858e0641ca292bbc","modified":1567392422477},{"_id":"public/categories/ACM/栈/index.html","hash":"1b65ed672f9fab0c3849871d45cf44c301a8cc2d","modified":1567392422477},{"_id":"public/index.html","hash":"15d887083d5cda415d0a176126a77aad98a6592f","modified":1567392422477},{"_id":"public/categories/Computer-Graphics/光栅化渲染/index.html","hash":"4d4b938f28c190a215b3f9ac3a86c78985a1e1fe","modified":1567392422477},{"_id":"public/page/4/index.html","hash":"fa52d8fe593131ea3f6d8e0fdbc084cb21b808a5","modified":1567392422477},{"_id":"public/page/2/index.html","hash":"4f8499773c1f5bf888453e0eb964e9f3a378ae3d","modified":1567392422477},{"_id":"public/page/3/index.html","hash":"5ae06f393f2761ca02c3ed9111a9d8c08c1fb85c","modified":1567392422477},{"_id":"public/page/5/index.html","hash":"f0ff87f2c30921bf0e6abe2304c5672567b8e4c0","modified":1567392422477},{"_id":"public/page/6/index.html","hash":"b34a5b56d90f745b147b3bfc754458aefe67a811","modified":1567392422477},{"_id":"public/page/7/index.html","hash":"b4f113bf14def6a903bb54c7128216782ef325a1","modified":1567392422477},{"_id":"public/page/8/index.html","hash":"b2f89ad4ebaccab79a3332f57eda0e87a21da6f7","modified":1567392422477},{"_id":"public/page/9/index.html","hash":"d760f6e3b83214d9871a80cbd7887fd23641d380","modified":1567392422478},{"_id":"public/tags/思维/index.html","hash":"9ca88d8a4747aec4ca0ef463120b3a73d19f17f5","modified":1567392422478},{"_id":"public/tags/贪心/index.html","hash":"370dc63f03c06e24bca15f98d320616b01d8b56e","modified":1567392422478},{"_id":"public/tags/前缀和/index.html","hash":"4b22420f400569a254e2d919ce2de817b700f1c0","modified":1567392422478},{"_id":"public/tags/Covariance/index.html","hash":"b07d2d8888afbe31cfe85d74090c59cee91d3089","modified":1567392422478},{"_id":"public/tags/后缀和/index.html","hash":"62b102429d8a4156b2f834a9dda43ededed83618","modified":1567392422478},{"_id":"public/tags/C语言/index.html","hash":"4b4e9fdee8cff427dde7025ba695fbb2d980613a","modified":1567392422478},{"_id":"public/tags/图论/index.html","hash":"2688ac4243dc8014f90eaae8034845a2962147fb","modified":1567392422478},{"_id":"public/tags/DFS/index.html","hash":"33efe51fe705ec8ea3ad93a29cd3b238e282f1e6","modified":1567392422478},{"_id":"public/tags/HDU/index.html","hash":"3feae4785bc89b262a5a98d321cc956519eaa663","modified":1567392422478},{"_id":"public/tags/线切割平面/index.html","hash":"ddd93a52793f967b18e56fbe866ecc6b0e7684d6","modified":1567392422478},{"_id":"public/tags/状态压缩DP/index.html","hash":"ae05a3cf60637dc8465bc023f8f0d091f171a99e","modified":1567392422478},{"_id":"public/tags/math/index.html","hash":"a918c661aed53d431d7d2c834189434fe86d0cb8","modified":1567392422478},{"_id":"public/tags/BFS/index.html","hash":"2b426b8f9cbab624355d50caac55e2696ac5dbb2","modified":1567392422478},{"_id":"public/tags/CMake/index.html","hash":"e4296570c298d5c4cc68e3bfcf1a99fc0dea25e2","modified":1567392422478},{"_id":"public/tags/总结/index.html","hash":"4bbca48e30a73dc5daef8ee1f74728fadf794e32","modified":1567392422478},{"_id":"public/tags/Liner-algebra/index.html","hash":"8b133c5849c925306fc44439c17ed0ed6628be9a","modified":1567392422478},{"_id":"public/tags/Lover/index.html","hash":"fc05541a3055f482f7af8868e38b9c98fefb9bba","modified":1567392422478},{"_id":"public/tags/DP/index.html","hash":"4219001283e01ba499ec48f3ed3d911cc0444937","modified":1567392422478},{"_id":"public/tags/逆向思维/index.html","hash":"9a2ffd04fa4c67267002f2bcf3ec407a5ff97d59","modified":1567392422478},{"_id":"public/tags/01背包/index.html","hash":"63e02d404188cacce0499456b5cb8367902339d7","modified":1567392422478},{"_id":"public/tags/PCA/index.html","hash":"13284d15d2b9c3699a5d47068e01cbdc5bd3e639","modified":1567392422478},{"_id":"public/tags/POJ/index.html","hash":"06c4d5b9fa483db45c7cda63c2abb664458ad854","modified":1567392422478},{"_id":"public/tags/迷宫问题/index.html","hash":"0fbe5346b07ce2e805bf784f55af39e1e762ba95","modified":1567392422478},{"_id":"public/tags/线段树/index.html","hash":"e8e336a16ec0dca96383ca0fd4c032ff557bad47","modified":1567392422479},{"_id":"public/tags/Game/index.html","hash":"bbd6503a41c1f8b365a2ccb17e4f50fd760b9d69","modified":1567392422479},{"_id":"public/tags/Random/index.html","hash":"5ea1fc9632e142c4841b4ec583af8f716f1bb9c9","modified":1567392422479},{"_id":"public/tags/STL/index.html","hash":"0f01396fe182fa07927024689242489f25e9e89a","modified":1567392422479},{"_id":"public/tags/欧拉路/index.html","hash":"8317e8b2c4337ff31cb8e5fdba5647a449be274d","modified":1567392422479},{"_id":"public/tags/拓扑排序/index.html","hash":"e115a94a01adf28ea0d28b670237635f068424b6","modified":1567392422479},{"_id":"public/tags/树/index.html","hash":"fd7312eba658e380983840617d6b7f5b779fdba1","modified":1567392422479},{"_id":"public/tags/二叉树/index.html","hash":"fcad09ae2c85e72de72c20bb4253476637dd5de5","modified":1567392422479},{"_id":"public/tags/暴力枚举/index.html","hash":"df6b5321e25658b905ea390d43579f5e7d1153bc","modified":1567392422479},{"_id":"public/tags/全局思维/index.html","hash":"7993fe31b9312594b97729ce4e2272019d183f94","modified":1567392422479},{"_id":"public/tags/迭代加深/index.html","hash":"01237a8e4912cfd0db21d78609a5231b9c9ae28a","modified":1567392422479},{"_id":"public/tags/stack/index.html","hash":"280625820a8aa5705a8550f63e4c14f59228af5f","modified":1567392422479},{"_id":"public/tags/全局思想/index.html","hash":"1455d249e3a8d9b4ce795551c33fd8a78c45100b","modified":1567392422479},{"_id":"public/tags/链表/index.html","hash":"2dbf0b2acf688d1d16297c114a7b63d07f31b6b7","modified":1567392422479},{"_id":"public/tags/IDA/index.html","hash":"e9a8758714c83edd7c65032492baebdf965e4561","modified":1567392422479},{"_id":"public/tags/栈/index.html","hash":"df4cea0303db2114875a162476ae3ca68d925cc3","modified":1567392422479},{"_id":"public/tags/搜索/index.html","hash":"1d372ea1d830b592e4bc463b7d317c4ea9f45add","modified":1567392422479},{"_id":"public/tags/仿射变换/index.html","hash":"1635b4828f659772b524f4eb0a9ef7e18e944bb4","modified":1567392422479},{"_id":"public/tags/离散化/index.html","hash":"63831730f04a6e1ba2713a68973f1a3753351dd5","modified":1567392422479},{"_id":"public/tags/Stack/index.html","hash":"4647b381bb482308013c3d6aef44e10d9f825d05","modified":1567392422479},{"_id":"public/tags/四分树/index.html","hash":"3d023b365f6685f3d39afc94136910a4d1b63697","modified":1567392422479},{"_id":"public/tags/Binary-Tree/index.html","hash":"0a81630636e60186c8c654b7da0865853afefcb3","modified":1567392422479},{"_id":"public/tags/mathjax/index.html","hash":"d686086feb8daaba4222b28e5977fd8f36a905f7","modified":1567392422479},{"_id":"public/tags/hexo插入数学公式/index.html","hash":"680763c1c1f0eae10abd238a9a644300a630c7bc","modified":1567392422479},{"_id":"public/tags/C/index.html","hash":"da67421f69f191d0d5527c0854fe14cbb55bef2b","modified":1567392422479},{"_id":"public/tags/排列/index.html","hash":"1648fbddebeda8fb90178caf37224019ab8e9ac4","modified":1567392422479},{"_id":"public/tags/生活/index.html","hash":"0df661f7533d87045a7cdc337b78ced5c51b6c90","modified":1567392422479},{"_id":"public/tags/线段树区间更新/index.html","hash":"236386dd7d678791dd0865f72b2cf9ee3992929b","modified":1567392422479},{"_id":"public/tags/线段树单点更新/index.html","hash":"70eaf82fd3a87f04c824f8c79fdd3d0b46b02228","modified":1567392422480},{"_id":"public/tags/字符串/index.html","hash":"fcdeeff2099a9d87f6086cd6d675d1c0c20cbbde","modified":1567392422480},{"_id":"public/tags/vultr服务器搭建/index.html","hash":"e92197b311098c07b31394d303bef0d9a0873932","modified":1567392422480},{"_id":"public/tags/Binary-Search/index.html","hash":"fc8f7eb18975324d0194feb3b3d967f37367f9d1","modified":1567392422480},{"_id":"public/tags/状态转移/index.html","hash":"ee304290be868842c53e67851774176034b825eb","modified":1567392422480},{"_id":"public/tags/Rasterization/index.html","hash":"abeb7f29a999d2b8b677dbe89f2c60232caed776","modified":1567392422480},{"_id":"public/tags/rasterization/index.html","hash":"528cb8f4f81755d0fdcc007d1e8f746074a0e741","modified":1567392422480},{"_id":"public/tags/python/index.html","hash":"19a7913b09ae29081431161e789f5bcba246cc53","modified":1567392422480},{"_id":"public/tags/Hash/index.html","hash":"206b7e717e5348979faa779c64e79071ad32cbf6","modified":1567392422480},{"_id":"public/tags/迭代加深搜索/index.html","hash":"a7fe94288207bc27d431a7cee00033fd04bd05ad","modified":1567392422480},{"_id":"public/tags/Link-Library/index.html","hash":"4f55677a97e6393c73198a4f0c6a03ffcf3ab9dc","modified":1567392422480},{"_id":"public/tags/Math/index.html","hash":"650ec837acb7c7402bacecb3b61ce18b3cdd6ca0","modified":1567392422480},{"_id":"public/tags/Kalman-filter/index.html","hash":"2e778076721d7f8bfc3d1efd3e65f8be92589f72","modified":1567392422480},{"_id":"public/tags/建图/index.html","hash":"47520c29e1824272acabf17b7efababdd7b92344","modified":1567392422480},{"_id":"public/tags/双向BFS/index.html","hash":"d4e2a48795754c52a55a212d8ba750c1f846c394","modified":1567392422480},{"_id":"public/images/avatar.jpg","hash":"a2940e550cbd26df2e3561074910cc38f54edd15","modified":1567392422480},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1567392422480},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1567392422480},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1567392422480},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1567392422480},{"_id":"public/2019/02/12/Uva1602-Lattice-Animals/pic.png","hash":"7d7efe55681e5d9619164d67d023e8322cad366d","modified":1567392422480},{"_id":"public/2018/09/22/Uva839-二叉树的递归处理/tree.png","hash":"ccee240e1b924dd7cca49828c69e0cf78742a7e3","modified":1567392422480},{"_id":"public/2018/12/31/倒水问题/fill.png","hash":"e52c036e123deee8ba888f4751544fee2873f38a","modified":1567392422480},{"_id":"public/2018/12/09/循环小数化为分数的方法/wiki.png","hash":"1b5ec94305a72471f51e90d9bd1d71e44983a983","modified":1567392422480},{"_id":"public/2018/11/04/欧拉回路/Elur.png","hash":"ddc21e3cbc1ffa51606a7a521fad01c798d6ad47","modified":1567392422480},{"_id":"public/2018/09/07/Graph-Theory-The-shortest-path/gra.png","hash":"c2a7946e9e78ad6264a4a6d6b581d06160604bfe","modified":1567392422481},{"_id":"public/2018/09/07/Graph-Theory-The-shortest-path/path.png","hash":"b20559aca988d5aaefc0931e513b4fc808c5be21","modified":1567392422481},{"_id":"public/2018/04/09/HDU2050/line.jpg","hash":"0b614039e05df58510f6979466289f7ac7190b5f","modified":1567392422481},{"_id":"public/2018/12/20/八皇后问题/diagonal.png","hash":"4963cc964d96d85438ef74780aafd357f2c198f4","modified":1567392422481},{"_id":"public/2018/06/12/tab-to-spaces/tab.png","hash":"30312fc2dabd01c3540693ea57af6ea0a11c9fe2","modified":1567392422481},{"_id":"public/2018/06/12/tab-to-spaces/space.png","hash":"e1202e8eb89c5c09f5e3eb1e4a72be772c4790b6","modified":1567392422481},{"_id":"public/2019/04/03/静态链接库-STATIC-和动态链接库-SHARED/static.png","hash":"2a49d01e43487344cba9c57f6b1d47a4f1489052","modified":1567392422481},{"_id":"public/2019/04/03/静态链接库-STATIC-和动态链接库-SHARED/shared.png","hash":"30958cd8a546d25f90a9320630be02d8b39dc16d","modified":1567392422481},{"_id":"public/2018/06/10/My-little-angel/qxy1.jpg","hash":"29c0b85aa8bd9e32c8b239b78ae5f571e8375bd9","modified":1567392422481},{"_id":"public/2018/10/28/Uva1103-Ancient-Messages/hier.png","hash":"9fc1f550a328d3a0f44bec5cd4655935db1fe9d0","modified":1567392422481},{"_id":"public/2019/08/27/光栅化渲染-4-深度检测/figure1.png","hash":"1e135db59da481a49accdc278d49bf1b767f0213","modified":1567392422481},{"_id":"public/2019/08/10/光栅化渲染-1-算法总述/discrete.png","hash":"b4b6f31ff7984722ea989da3021d191fc2806c77","modified":1567392422481},{"_id":"public/2019/08/10/光栅化渲染-1-算法总述/figure1.png","hash":"af649c9b70f42ecfa0edad5a481f5ffd4d197b82","modified":1567392422481},{"_id":"public/2019/08/10/光栅化渲染-1-算法总述/figure3.png","hash":"70c2465005d5eec54389370fafa997d62224ff54","modified":1567392422481},{"_id":"public/2019/08/11/光栅化渲染-2-透视投影/visible.png","hash":"1f0d35a1d683fd482fa1aa95141569a5338e75f4","modified":1567392422481},{"_id":"public/2018/04/13/vultr/p2.png","hash":"c797e71775de0c707e10ec8f765a154b37f27197","modified":1567392422481},{"_id":"public/2019/08/11/光栅化渲染-2-透视投影/figure5.png","hash":"f2ee13c644b516eb37867babd53db9ba1a3f8760","modified":1567392422481},{"_id":"public/2018/04/13/vultr/p3.png","hash":"67dbd2c65a2c47e6ae09f22051629da1a6c5fdd1","modified":1567392422481},{"_id":"public/2018/04/13/vultr/p7.png","hash":"da388ae09f2db520f71e2348bf8a4883adb2666a","modified":1567392422481},{"_id":"public/2018/04/13/vultr/p8.png","hash":"2f5ce1e7aa48769570589a1a15948f1364753a67","modified":1567392422481},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/Rudolf_Kalman.jpg","hash":"d9fc75dcf49e0051bfdcc7756e2b63ddfe7b8260","modified":1567392422481},{"_id":"public/2018/04/13/vultr/p5.png","hash":"a7c6230253b7b12375ea294a6386473479cd7d26","modified":1567392422481},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/g2.jpg","hash":"7e24f2f2110a8d055e59fd2504c97aa40150515a","modified":1567392422482},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/g1.jpg","hash":"37434d3f18bd047d74a955400bff7e0405cfa8b9","modified":1567392422482},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/afterFilter.png","hash":"bf96d602e8c3f2030946ea7c0ce66c3b712f6374","modified":1567392422482},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/g5.jpg","hash":"44ba09420e7fbfc1dc583c071f0f248d91c16b8e","modified":1567392422482},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/g3.jpg","hash":"addfbb4a223035d1ff4c146db85266d1c2b25adb","modified":1567392422482},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/g4.jpg","hash":"2003c2200792d6795a15d1aaef0fd7bf4e0b89da","modified":1567392422482},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/gauss.jpg","hash":"1857b243d0f0dc7cdc0e7640783f02faa9e3710f","modified":1567392422482},{"_id":"public/2019/04/17/Kalman-filter-卡尔曼滤波器/origin.png","hash":"9c830d9b7f7d255ba74fe3900ac0e5b271c9f211","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/figure1.png","hash":"b290b99658bc7c84af7720c3ba79fdd4aef05454","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/figure3.gif","hash":"b0a9b36f91e92ca2a42b8336352976420793cf5d","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/figure6.png","hash":"279d015a4c7800ef29633a3413aa94d1c24f605d","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/figure2.png","hash":"a8fe68eafaf8652d2124c42c5de5ec5b6ec99904","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/figure5.png","hash":"416f024d8f45031d1f8c8eaea530173c29f3f88b","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/figure4.png","hash":"bff74759418d9700c5efda10e288c4bc9788d604","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/rasterization.png","hash":"cb9323db41b2889a3ca9609100eff4202ee77b9a","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/figure7.png","hash":"a356d3e49e4627eadc7ff1cdb7d6393431c1c7fc","modified":1567392422482},{"_id":"public/2019/08/15/光栅化渲染-3-光栅化/result.png","hash":"b564c4c7db1f03b08ee9a8c0f53f72506f285886","modified":1567392422482},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1567392422491},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1567392422491},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1567392422491},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1567392422491},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1567392422491},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1567392422491},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1567392422491},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1567392422491},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1567392422491},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1567392422491},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1567392422491},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1567392422491},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1567392422491},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1567392422491},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1567392422491},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1567392422491},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1567392422491},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1567392422491},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1567392422491},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1567392422491},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1567392422492},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1567392422492},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1567392422492},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1567392422492},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1567392422492},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1567392422492},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1567392422492},{"_id":"public/lib/fastclick/README.html","hash":"e25da2e29e6947b704b43611b325e8ad65134e42","modified":1567392422492},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1567392422492},{"_id":"public/lib/jquery_lazyload/README.html","hash":"14c63ba441fb49b26032e72e9cb67c67c8df19f1","modified":1567392422492},{"_id":"public/css/main.css","hash":"c5edff7da73205861458e1ef06de1aeeb098ea8c","modified":1567392422492},{"_id":"public/2018/04/13/vultr/p1.png","hash":"595bda0f3e72f314db02d09c378298daf0840657","modified":1567392422492},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1567392422492},{"_id":"public/2018/04/13/vultr/p4.png","hash":"2ee46cf520c7d0585db4245c9586829f5173e680","modified":1567392422492},{"_id":"public/2018/04/13/vultr/p6.png","hash":"47f4048062363375bb49809ceb19a67b5c659bf3","modified":1567392422492},{"_id":"public/2018/04/13/vultr/p9.png","hash":"7a099d33cc7ac17bc5e233121d135e46af0549b5","modified":1567392422492},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1567392422499},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1567392422499},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1567392422499},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1567392422499},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1567392422499},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1567392422499},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1567392422499},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1567392422499},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1567392422499},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1567392422499},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1567392422503},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1567392422504},{"_id":"public/images/avatar2.png","hash":"5a825078a61886e5bf8f40244b0c0d3acef801ee","modified":1567392422504},{"_id":"public/2019/01/13/Uva1343-The-Rotation-Game/game.png","hash":"aaa5af49a4c3ecab97010f616c8cced728f60c1f","modified":1567392422504},{"_id":"public/2019/08/11/光栅化渲染-2-透视投影/perspective.png","hash":"dd94afdc53034d3284cacc982d9124c2f596475a","modified":1567392422504},{"_id":"public/2018/12/25/哈希表/hash.png","hash":"29a902ee92685689f3c4b52320ed65dab3c442e1","modified":1567392422504},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1567392422509},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1567392422509},{"_id":"public/2018/10/24/Linear algebra-Dot product/1.gif","hash":"a037ce119aca35cd7188ef70334ba9b06dc81d31","modified":1567392422509},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1567392422516},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1567392422516},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1567392422517},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1567392422517},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1567392422517},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1567392422517},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1567392422517},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1567392422520},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1567392422520},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1567392422522},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1567392422522},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1567392422537},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1567392422538},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1567392422538},{"_id":"public/2018/10/24/Linear algebra-Dot product/3.gif","hash":"fc991a2c97761dcc611775a0ed1bd3bcf31c6435","modified":1567392422590},{"_id":"public/2018/10/24/Linear algebra-Dot product/2.gif","hash":"bb118b39f653f5c4b63c9947450608f8049641d4","modified":1567392422590},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1567392422592},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1567392422596},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1567392422598}],"Category":[{"name":"ACM","_id":"ck01sz2n6002a30vn4bhhy9h8"},{"name":"Math","_id":"ck01sz2nl002o30vn4oden1fr"},{"name":"C++","_id":"ck01sz2nm002q30vnogp4uack"},{"name":"Summary","_id":"ck01sz2no002u30vnhjtk9dnx"},{"name":"Diary","_id":"ck01sz2no002w30vni3q9nj5w"},{"name":"Messy article","_id":"ck01sz2o1003t30vngx8ajknn"},{"name":"Template","_id":"ck01sz2og005930vniftz0cpz"},{"name":"Google Kick Start","_id":"ck01sz2oh005f30vnthpsmt16"},{"name":"Computer Graphics","_id":"ck01sz2op006630vn4208trpy"},{"name":"贪心","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qc007g30vn21w665kr"},{"name":"思维","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qd007o30vn3mukq1r9"},{"name":"前缀和","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qe007u30vnzp9ridda"},{"name":"DFS","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qg008530vnzn5dxo4n"},{"name":"动态规划","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qi008f30vnhz0xb7rk"},{"name":"背包","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qj008r30vnagclasxt"},{"name":"线段树","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qk009130vnu2thh8e9"},{"name":"欧拉路","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2ql009630vni4g15k2q"},{"name":"拓扑排序","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qm009b30vnp4gb9kr2"},{"name":"树","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qm009i30vn1ktpj63h"},{"name":"暴力枚举","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qo009x30vnk5a07idv"},{"name":"IDA*","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qp00a230vno23ny55w"},{"name":"map","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qq00ae30vnanbbnros"},{"name":"链表","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qs00ao30vn5a1ifwwv"},{"name":"BFS","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qu00ax30vncg6o0d1m"},{"name":"离散化","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qv00b630vnxjx01oqz"},{"name":"栈","parent":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qx00bc30vnuu86tfnf"},{"name":"光栅化渲染","parent":"ck01sz2op006630vn4208trpy","_id":"ck01sz2qz00bv30vn6xr25qsm"}],"Data":[],"Page":[{"title":"about","date":"2018-04-08T08:12:48.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-04-08 16:12:48\ntype: \"about\"\n---\n","updated":"2019-08-20T13:05:23.377Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck01sz2kz000030vn5t7qmyyt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-04-08T08:14:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-04-08 16:14:39\ntype: \"categories\"\n---\n","updated":"2019-08-20T13:05:23.377Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck01sz2l3000230vnzpk24yrv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Friends","date":"2018-10-13T02:47:36.000Z","_content":"| Links    | Notes    |\n| :------: | :------: |\n| [Bowen's Blog](http://www.bowen-blog.com/) | 徐阿卞大佬 |\n","source":"links/index.md","raw":"---\ntitle: Friends\ndate: 2018-10-13 10:47:36\n---\n| Links    | Notes    |\n| :------: | :------: |\n| [Bowen's Blog](http://www.bowen-blog.com/) | 徐阿卞大佬 |\n","updated":"2019-08-20T13:05:23.377Z","path":"links/index.html","comments":1,"layout":"page","_id":"ck01sz2ng002d30vne02sl95c","content":"<table>\n<thead>\n<tr>\n<th align=\"center\">Links</th>\n<th align=\"center\">Notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"http://www.bowen-blog.com/\" target=\"_blank\" rel=\"noopener\">Bowen’s Blog</a></td>\n<td align=\"center\">徐阿卞大佬</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"center\">Links</th>\n<th align=\"center\">Notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"http://www.bowen-blog.com/\" target=\"_blank\" rel=\"noopener\">Bowen’s Blog</a></td>\n<td align=\"center\">徐阿卞大佬</td>\n</tr>\n</tbody></table>\n"},{"title":"tags","date":"2018-04-07T17:23:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-04-08 01:23:59\ntype: \"tags\"\n---\n","updated":"2019-08-20T13:05:23.377Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck01sz2nh002f30vn0e2hu5si","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2018-04-08T09:18:19.000Z","type":"sitemap","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2018-04-08 17:18:19\ntype: \"sitemap\"\n---\n","updated":"2019-08-20T13:05:23.377Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"ck01sz2ni002h30vny789fh72","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"commonweal","date":"2018-04-08T09:18:33.000Z","type":"commonweal","_content":"","source":"commonweal/index.md","raw":"---\ntitle: commonweal\ndate: 2018-04-08 17:18:33\ntype: \"commonweal\"\n---\n","updated":"2019-08-20T13:05:23.377Z","path":"commonweal/index.html","comments":1,"layout":"page","_id":"ck01sz2nk002k30vnfe2jcto4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2018-04-08T09:15:03.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2018-04-08 17:15:03\ntype: \"schedule\"\n---\n","updated":"2019-08-20T13:05:23.377Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ck01sz2nk002l30vno8n41f62","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CodeForces-469D-Two Sets","date":"2019-07-27T10:46:03.000Z","_content":"CodeForces-469D-Two Sets 贪心求解\n<!--more-->\n# 题目链接\n[CodeForces-496D-Two Sets](http://codeforces.com/problemset/problem/469/D)\n\n# 题意\n有 $n$ 个不同的整数，要把它们分到 $A$ 和 $B$ 两个集合中。要求满足以下两个条件：\n- 如果 $x$ 属于集合 $A$，那么 $a-x$ 也必须属于集合$A$。\n- 如果 $x$ 属于集合 $B$，那么 $b-x$ 也必须属于集合$B$。\n\n# 题解\n贪心法。首先对这 $n$ 个不同的整数进行排序，顺序进行判断，假设 $b > a$，那么对于 $x$ 来说，先判断 $b-x$ 是否存在，之后再判断 $a-x$ 是否存在。因为 $b > a$，所以 $b-x>a-x$，应该优先将较大的一方也就是 $b-x$　与 $x$ 配对，因为由于序列递增若先将 $a-x$ 与 $x$，配对，那么 $b-x$ 此后将没有机会再次配对。\n查找 $b-x$ 和 $a-x$ 时使用二分搜索，这也是将数列进行排序的意义。\n\n# 代码\n```C++\n#include <iostream>\n#include <map>\n#include <algorithm>\n\n#include <cstdio>\n#include <cstring>\n\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nint n, a, b;\nint d[maxn];\nint dd[maxn];\nbool res[maxn];\nmap<int, bool> mp;\nbool flag = 0;\nbool vis[maxn];\n\nint bSearch(int x, int y, int v){\n    int m;\n    while(x < y){\n        m = x + (y - x) / 2;\n        if(dd[m] == v) return m;\n        else if(dd[m] > v) y = m;\n        else x = m + 1;\n    }\n    return -1;\n}\n\nint main(){\n    //freopen(\"in.txt\", \"r\", stdin);\n    cin >> n >> a >> b;\n    for(int i = 0; i < n; i++){\n        cin >> d[i];\n    }\n    memset(vis, 0, sizeof(vis));\n    memcpy(dd, d, sizeof(dd));\n    sort(dd, dd + n);\n\n    if(a > b){\n        swap(a, b);\n        flag = 1;\n    }\n\n    for(int i = 0; i < n; i++){\n        if((b - dd[i] >= 0) && !vis[i]){\n            int index = bSearch(0, n, b - dd[i]);\n            if(index >= 0 && !vis[index]){\n                mp[dd[i]] = 1;\n                mp[b - dd[i]] = 1;\n                vis[i] = 1;\n                vis[index] = 1;\n            }\n        }\n        if((a - dd[i] >= 0) && !vis[i]){\n            int index = bSearch(0, n, a - dd[i]);\n            if(index >= 0 && !vis[index]){\n                mp[dd[i]] = 0;\n                mp[a - dd[i]] = 0;\n                vis[i] = 1;\n                vis[index] = 1;\n            }\n        }\n\n        if(!vis[i]){\n            cout << \"NO\" << endl;\n            return 0;\n        }\n    }\n\n    for(int i = 0; i < n; i++){\n        if(flag) res[i] = !mp[d[i]];\n        else res[i] = mp[d[i]];\n    }\n\n    cout << \"YES\" << endl;\n    for(int i = 0; i < n; i++){\n        if(i == 0) cout << res[i];\n        else cout << \" \" << res[i];\n    }\n    cout << endl;\n\n    return 0;\n}\n```\n\n# 参考链接\n[Two Sets My greedy solution~~](http://codeforces.com/blog/entry/13880)","source":"_posts/CodeForces-469D-Two-Sets.md","raw":"---\ntitle: CodeForces-469D-Two Sets\ndate: 2019-07-27 18:46:03\ncategories:\n- ACM\n- 贪心\ntags:\n- 思维\n- 贪心\n---\nCodeForces-469D-Two Sets 贪心求解\n<!--more-->\n# 题目链接\n[CodeForces-496D-Two Sets](http://codeforces.com/problemset/problem/469/D)\n\n# 题意\n有 $n$ 个不同的整数，要把它们分到 $A$ 和 $B$ 两个集合中。要求满足以下两个条件：\n- 如果 $x$ 属于集合 $A$，那么 $a-x$ 也必须属于集合$A$。\n- 如果 $x$ 属于集合 $B$，那么 $b-x$ 也必须属于集合$B$。\n\n# 题解\n贪心法。首先对这 $n$ 个不同的整数进行排序，顺序进行判断，假设 $b > a$，那么对于 $x$ 来说，先判断 $b-x$ 是否存在，之后再判断 $a-x$ 是否存在。因为 $b > a$，所以 $b-x>a-x$，应该优先将较大的一方也就是 $b-x$　与 $x$ 配对，因为由于序列递增若先将 $a-x$ 与 $x$，配对，那么 $b-x$ 此后将没有机会再次配对。\n查找 $b-x$ 和 $a-x$ 时使用二分搜索，这也是将数列进行排序的意义。\n\n# 代码\n```C++\n#include <iostream>\n#include <map>\n#include <algorithm>\n\n#include <cstdio>\n#include <cstring>\n\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nint n, a, b;\nint d[maxn];\nint dd[maxn];\nbool res[maxn];\nmap<int, bool> mp;\nbool flag = 0;\nbool vis[maxn];\n\nint bSearch(int x, int y, int v){\n    int m;\n    while(x < y){\n        m = x + (y - x) / 2;\n        if(dd[m] == v) return m;\n        else if(dd[m] > v) y = m;\n        else x = m + 1;\n    }\n    return -1;\n}\n\nint main(){\n    //freopen(\"in.txt\", \"r\", stdin);\n    cin >> n >> a >> b;\n    for(int i = 0; i < n; i++){\n        cin >> d[i];\n    }\n    memset(vis, 0, sizeof(vis));\n    memcpy(dd, d, sizeof(dd));\n    sort(dd, dd + n);\n\n    if(a > b){\n        swap(a, b);\n        flag = 1;\n    }\n\n    for(int i = 0; i < n; i++){\n        if((b - dd[i] >= 0) && !vis[i]){\n            int index = bSearch(0, n, b - dd[i]);\n            if(index >= 0 && !vis[index]){\n                mp[dd[i]] = 1;\n                mp[b - dd[i]] = 1;\n                vis[i] = 1;\n                vis[index] = 1;\n            }\n        }\n        if((a - dd[i] >= 0) && !vis[i]){\n            int index = bSearch(0, n, a - dd[i]);\n            if(index >= 0 && !vis[index]){\n                mp[dd[i]] = 0;\n                mp[a - dd[i]] = 0;\n                vis[i] = 1;\n                vis[index] = 1;\n            }\n        }\n\n        if(!vis[i]){\n            cout << \"NO\" << endl;\n            return 0;\n        }\n    }\n\n    for(int i = 0; i < n; i++){\n        if(flag) res[i] = !mp[d[i]];\n        else res[i] = mp[d[i]];\n    }\n\n    cout << \"YES\" << endl;\n    for(int i = 0; i < n; i++){\n        if(i == 0) cout << res[i];\n        else cout << \" \" << res[i];\n    }\n    cout << endl;\n\n    return 0;\n}\n```\n\n# 参考链接\n[Two Sets My greedy solution~~](http://codeforces.com/blog/entry/13880)","slug":"CodeForces-469D-Two-Sets","published":1,"updated":"2019-08-29T03:20:23.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l0000130vnhh2sa916","content":"<p>CodeForces-469D-Two Sets 贪心求解</p>\n<a id=\"more\"></a>\n<h1 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h1><p><a href=\"http://codeforces.com/problemset/problem/469/D\" target=\"_blank\" rel=\"noopener\">CodeForces-496D-Two Sets</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有 $n$ 个不同的整数，要把它们分到 $A$ 和 $B$ 两个集合中。要求满足以下两个条件：</p>\n<ul>\n<li>如果 $x$ 属于集合 $A$，那么 $a-x$ 也必须属于集合$A$。</li>\n<li>如果 $x$ 属于集合 $B$，那么 $b-x$ 也必须属于集合$B$。</li>\n</ul>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>贪心法。首先对这 $n$ 个不同的整数进行排序，顺序进行判断，假设 $b &gt; a$，那么对于 $x$ 来说，先判断 $b-x$ 是否存在，之后再判断 $a-x$ 是否存在。因为 $b &gt; a$，所以 $b-x&gt;a-x$，应该优先将较大的一方也就是 $b-x$　与 $x$ 配对，因为由于序列递增若先将 $a-x$ 与 $x$，配对，那么 $b-x$ 此后将没有机会再次配对。<br>查找 $b-x$ 和 $a-x$ 时使用二分搜索，这也是将数列进行排序的意义。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a, b;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dd[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> res[maxn];</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>&gt; mp;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; y)&#123;</span><br><span class=\"line\">        m = x + (y - x) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dd[m] == v) <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dd[m] &gt; v) y = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(dd, d, <span class=\"keyword\">sizeof</span>(dd));</span><br><span class=\"line\">    sort(dd, dd + n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\">        swap(a, b);</span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((b - dd[i] &gt;= <span class=\"number\">0</span>) &amp;&amp; !vis[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = bSearch(<span class=\"number\">0</span>, n, b - dd[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; !vis[index])&#123;</span><br><span class=\"line\">                mp[dd[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                mp[b - dd[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((a - dd[i] &gt;= <span class=\"number\">0</span>) &amp;&amp; !vis[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = bSearch(<span class=\"number\">0</span>, n, a - dd[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; !vis[index])&#123;</span><br><span class=\"line\">                mp[dd[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                mp[a - dd[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"NO\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) res[i] = !mp[d[i]];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> res[i] = mp[d[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"YES\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; res[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; res[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://codeforces.com/blog/entry/13880\" target=\"_blank\" rel=\"noopener\">Two Sets My greedy solution~~</a></p>\n","site":{"data":{}},"excerpt":"<p>CodeForces-469D-Two Sets 贪心求解</p>","more":"<h1 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h1><p><a href=\"http://codeforces.com/problemset/problem/469/D\" target=\"_blank\" rel=\"noopener\">CodeForces-496D-Two Sets</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>有 $n$ 个不同的整数，要把它们分到 $A$ 和 $B$ 两个集合中。要求满足以下两个条件：</p>\n<ul>\n<li>如果 $x$ 属于集合 $A$，那么 $a-x$ 也必须属于集合$A$。</li>\n<li>如果 $x$ 属于集合 $B$，那么 $b-x$ 也必须属于集合$B$。</li>\n</ul>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>贪心法。首先对这 $n$ 个不同的整数进行排序，顺序进行判断，假设 $b &gt; a$，那么对于 $x$ 来说，先判断 $b-x$ 是否存在，之后再判断 $a-x$ 是否存在。因为 $b &gt; a$，所以 $b-x&gt;a-x$，应该优先将较大的一方也就是 $b-x$　与 $x$ 配对，因为由于序列递增若先将 $a-x$ 与 $x$，配对，那么 $b-x$ 此后将没有机会再次配对。<br>查找 $b-x$ 和 $a-x$ 时使用二分搜索，这也是将数列进行排序的意义。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a, b;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dd[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> res[maxn];</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>&gt; mp;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; y)&#123;</span><br><span class=\"line\">        m = x + (y - x) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dd[m] == v) <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dd[m] &gt; v) y = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(dd, d, <span class=\"keyword\">sizeof</span>(dd));</span><br><span class=\"line\">    sort(dd, dd + n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\">        swap(a, b);</span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((b - dd[i] &gt;= <span class=\"number\">0</span>) &amp;&amp; !vis[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = bSearch(<span class=\"number\">0</span>, n, b - dd[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; !vis[index])&#123;</span><br><span class=\"line\">                mp[dd[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                mp[b - dd[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((a - dd[i] &gt;= <span class=\"number\">0</span>) &amp;&amp; !vis[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = bSearch(<span class=\"number\">0</span>, n, a - dd[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; !vis[index])&#123;</span><br><span class=\"line\">                mp[dd[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                mp[a - dd[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"NO\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) res[i] = !mp[d[i]];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> res[i] = mp[d[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"YES\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; res[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; res[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://codeforces.com/blog/entry/13880\" target=\"_blank\" rel=\"noopener\">Two Sets My greedy solution~~</a></p>"},{"title":"CodeForces-569A-Music","date":"2018-08-28T07:15:59.000Z","_content":"也是一道思维题，理解了题意就很简单，但是自己理解题意费了好长时间，，还好最后AC了，背景故事蛮有意思的2333.\n<!--more-->\n# 链接\n[CodeForces-569A-Music](http://codeforces.com/problemset/problem/569/A)\n## 题意\n下载一首时长为$T$的歌，首先下载$S$秒，然后边下载边播放，播放到还未下载的位置就立即返回歌的开头重新播放，求需要返回几次才能最终完整听完这首歌。歌的下载速率为每经过$q$秒下载$q - 1$秒的歌。\n# 题解\n一开始没有理解歌的下载速率的问题，是每经过$q$秒直接得到$q - 1$秒的歌，还是在$q$秒内一直在下载，最后累计得到$q-1$秒的歌，看了样例后发现是第二种，（好像也第二种也更符合实际）。平均每秒的下载速率是$(q-1)/q$，这不是一个整数，甚至很可能是无理数，那结果很可能就不精确了，尤其是最后刚好下载完也刚刚听完的那种情况，会多算或者少算一次，所以不能求出平均下载速率然后来模拟计算。\n然后想到了一种思路，因为听的速率是大于下载的速率的，所以考虑最开始下载的$S$秒，求出这$S$秒被消耗完的时间$t$，$$t = \\frac{S}{1 - \\frac{q - 1}{q}}$$化简得$$t = S * q$$同时$t$也表示在这一时刻，听歌的进度正好赶上了下载的速度，此时判断$t$是否大于等于$T$，若大于等于则表示歌已下载完成，否则需返回歌的开头重新播放（此时的$S$更新为$t$，因为已下载的进度现在是$t$）。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 27 Aug 13:48:09 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nlong long T, S, q;\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int cnt = 1;\n    cin >> T >> S >> q;\n    while(1){\n        if(S * q >= T) break;\n        else{\n            S = S * q;\n            cnt++;\n        }\n    }\n    cout << cnt << endl;\n    return 0;\n}\n```","source":"_posts/CodeForces-569A.md","raw":"---\ntitle: 'CodeForces-569A-Music'\ndate: 2018-08-28 15:15:59\ncategories:\n- ACM\n- 思维\ntags:\n- 思维\n---\n也是一道思维题，理解了题意就很简单，但是自己理解题意费了好长时间，，还好最后AC了，背景故事蛮有意思的2333.\n<!--more-->\n# 链接\n[CodeForces-569A-Music](http://codeforces.com/problemset/problem/569/A)\n## 题意\n下载一首时长为$T$的歌，首先下载$S$秒，然后边下载边播放，播放到还未下载的位置就立即返回歌的开头重新播放，求需要返回几次才能最终完整听完这首歌。歌的下载速率为每经过$q$秒下载$q - 1$秒的歌。\n# 题解\n一开始没有理解歌的下载速率的问题，是每经过$q$秒直接得到$q - 1$秒的歌，还是在$q$秒内一直在下载，最后累计得到$q-1$秒的歌，看了样例后发现是第二种，（好像也第二种也更符合实际）。平均每秒的下载速率是$(q-1)/q$，这不是一个整数，甚至很可能是无理数，那结果很可能就不精确了，尤其是最后刚好下载完也刚刚听完的那种情况，会多算或者少算一次，所以不能求出平均下载速率然后来模拟计算。\n然后想到了一种思路，因为听的速率是大于下载的速率的，所以考虑最开始下载的$S$秒，求出这$S$秒被消耗完的时间$t$，$$t = \\frac{S}{1 - \\frac{q - 1}{q}}$$化简得$$t = S * q$$同时$t$也表示在这一时刻，听歌的进度正好赶上了下载的速度，此时判断$t$是否大于等于$T$，若大于等于则表示歌已下载完成，否则需返回歌的开头重新播放（此时的$S$更新为$t$，因为已下载的进度现在是$t$）。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 27 Aug 13:48:09 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nlong long T, S, q;\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int cnt = 1;\n    cin >> T >> S >> q;\n    while(1){\n        if(S * q >= T) break;\n        else{\n            S = S * q;\n            cnt++;\n        }\n    }\n    cout << cnt << endl;\n    return 0;\n}\n```","slug":"CodeForces-569A","published":1,"updated":"2019-08-20T14:55:12.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l4000330vn15yqv7cl","content":"<p>也是一道思维题，理解了题意就很简单，但是自己理解题意费了好长时间，，还好最后AC了，背景故事蛮有意思的2333.</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://codeforces.com/problemset/problem/569/A\" target=\"_blank\" rel=\"noopener\">CodeForces-569A-Music</a></p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>下载一首时长为$T$的歌，首先下载$S$秒，然后边下载边播放，播放到还未下载的位置就立即返回歌的开头重新播放，求需要返回几次才能最终完整听完这首歌。歌的下载速率为每经过$q$秒下载$q - 1$秒的歌。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>一开始没有理解歌的下载速率的问题，是每经过$q$秒直接得到$q - 1$秒的歌，还是在$q$秒内一直在下载，最后累计得到$q-1$秒的歌，看了样例后发现是第二种，（好像也第二种也更符合实际）。平均每秒的下载速率是$(q-1)/q$，这不是一个整数，甚至很可能是无理数，那结果很可能就不精确了，尤其是最后刚好下载完也刚刚听完的那种情况，会多算或者少算一次，所以不能求出平均下载速率然后来模拟计算。<br>然后想到了一种思路，因为听的速率是大于下载的速率的，所以考虑最开始下载的$S$秒，求出这$S$秒被消耗完的时间$t$，$$t = \\frac{S}{1 - \\frac{q - 1}{q}}$$化简得$$t = S * q$$同时$t$也表示在这一时刻，听歌的进度正好赶上了下载的速度，此时判断$t$是否大于等于$T$，若大于等于则表示歌已下载完成，否则需返回歌的开头重新播放（此时的$S$更新为$t$，因为已下载的进度现在是$t$）。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 27 Aug 13:48:09 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> T, S, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T &gt;&gt; S &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S * q &gt;= T) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            S = S * q;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; cnt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>也是一道思维题，理解了题意就很简单，但是自己理解题意费了好长时间，，还好最后AC了，背景故事蛮有意思的2333.</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://codeforces.com/problemset/problem/569/A\" target=\"_blank\" rel=\"noopener\">CodeForces-569A-Music</a></p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>下载一首时长为$T$的歌，首先下载$S$秒，然后边下载边播放，播放到还未下载的位置就立即返回歌的开头重新播放，求需要返回几次才能最终完整听完这首歌。歌的下载速率为每经过$q$秒下载$q - 1$秒的歌。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>一开始没有理解歌的下载速率的问题，是每经过$q$秒直接得到$q - 1$秒的歌，还是在$q$秒内一直在下载，最后累计得到$q-1$秒的歌，看了样例后发现是第二种，（好像也第二种也更符合实际）。平均每秒的下载速率是$(q-1)/q$，这不是一个整数，甚至很可能是无理数，那结果很可能就不精确了，尤其是最后刚好下载完也刚刚听完的那种情况，会多算或者少算一次，所以不能求出平均下载速率然后来模拟计算。<br>然后想到了一种思路，因为听的速率是大于下载的速率的，所以考虑最开始下载的$S$秒，求出这$S$秒被消耗完的时间$t$，$$t = \\frac{S}{1 - \\frac{q - 1}{q}}$$化简得$$t = S * q$$同时$t$也表示在这一时刻，听歌的进度正好赶上了下载的速度，此时判断$t$是否大于等于$T$，若大于等于则表示歌已下载完成，否则需返回歌的开头重新播放（此时的$S$更新为$t$，因为已下载的进度现在是$t$）。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 27 Aug 13:48:09 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> T, S, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T &gt;&gt; S &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S * q &gt;= T) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            S = S * q;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; cnt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Codeforces-#498Div3-C-前&&后缀和","date":"2018-07-31T15:08:57.000Z","_content":"好题，虽然比较简单，但是觉得这道题的解题思路挺棒的，用到了前缀和，后缀和以及思路的转换．解出来之后还是很开心的，嚯嚯嚯（一个只能做做Div3的小菜鸡|･ω･｀)）\n<!-- more -->\n# 链接\n[Codeforces-#498Div3-C](http://codeforces.com/contest/1006/problem/C)\n# 题解\n题目大意：给定n个整数（范围1~1e9）,要求把这n个整数划分为连续的三段，使得第一段的数的总和与第三段的数的总和相等且要求这个总和尽量大．\n思路：\n因为n的范围是1~2e5，而且又涉及求和，所以应该可以比较自然的想到前缀和，题目又要求是前后两段的总和相等所以后缀和也要统计一下．接下来就要考虑什么时候两端的和相等且最大了，因为第一段和第三段长度不定，所以相当于是两个变量，想到它们的长度变化其实可以归一到第二段数据的长度变化，这样的话复杂度变为O(n)，就可以通过了．具体做法是对于1~n这n个数据，初始化第二段数据区间为[2, n - 1], 然后判断此时第一段和第三段数据和的大小关系，因为已经统计了前缀和和后缀和，所以这部分复杂度是O(1)．如果第一段数据和等于第三段数据和则记录这个数据和同时缩小第二段数据的区间，变为[3, n - 2]，继续判断，看是否还有更大的数据和满足条件；如果第一段数据和大于第三段数据和则保持第二段区间左端点不变收缩右端点，即变为[2, n - 2];同样的如果第一段数据和小于第三段数据和则保持第二段区间右端点不变，左端点收缩，即变为[3, n - 2];以此类推，直到第二段区间消失，此时最后一次记录的数据和即为结果．\n# 代码\n``` C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 2e5 + 7;\nint d[maxn];\nint n;\nlong long psum[maxn], bsum[maxn];\nvector<long long> vec;\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", d + i);\n        if(i == 0) psum[i] = d[i];\n        else psum[i] = psum[i - 1] + d[i];\n    }\n    for(int i = n - 1; i >= 0; i--){\n        if(i == n - 1) bsum[i] = d[i];\n        else bsum[i] = bsum[i + 1] + d[i];\n    }\n\n    int i, j;\n    for(i = 0, j = n - 1; i < n;){\n        if(i >= j) break;\n        if(psum[i] == bsum[j]){\n            vec.push_back(psum[i]);\n            i++;\n            j--;\n        }\n        else if(psum[i] < bsum[j]) i++;\n        else if(psum[i] > bsum[j]) j--;\n    }\n    if(vec.size() != 0) printf(\"%lld\\n\", vec[vec.size() - 1]);\n    else printf(\"0\\n\");\n    return 0;\n}\n```","source":"_posts/Codeforces-498Div3-C.md","raw":"---\ntitle: 'Codeforces-#498Div3-C-前&&后缀和'\ndate: 2018-07-31 23:08:57\ncategories:\n- ACM\n- 前缀和\ntags:\n- 前缀和\n- 后缀和\n---\n好题，虽然比较简单，但是觉得这道题的解题思路挺棒的，用到了前缀和，后缀和以及思路的转换．解出来之后还是很开心的，嚯嚯嚯（一个只能做做Div3的小菜鸡|･ω･｀)）\n<!-- more -->\n# 链接\n[Codeforces-#498Div3-C](http://codeforces.com/contest/1006/problem/C)\n# 题解\n题目大意：给定n个整数（范围1~1e9）,要求把这n个整数划分为连续的三段，使得第一段的数的总和与第三段的数的总和相等且要求这个总和尽量大．\n思路：\n因为n的范围是1~2e5，而且又涉及求和，所以应该可以比较自然的想到前缀和，题目又要求是前后两段的总和相等所以后缀和也要统计一下．接下来就要考虑什么时候两端的和相等且最大了，因为第一段和第三段长度不定，所以相当于是两个变量，想到它们的长度变化其实可以归一到第二段数据的长度变化，这样的话复杂度变为O(n)，就可以通过了．具体做法是对于1~n这n个数据，初始化第二段数据区间为[2, n - 1], 然后判断此时第一段和第三段数据和的大小关系，因为已经统计了前缀和和后缀和，所以这部分复杂度是O(1)．如果第一段数据和等于第三段数据和则记录这个数据和同时缩小第二段数据的区间，变为[3, n - 2]，继续判断，看是否还有更大的数据和满足条件；如果第一段数据和大于第三段数据和则保持第二段区间左端点不变收缩右端点，即变为[2, n - 2];同样的如果第一段数据和小于第三段数据和则保持第二段区间右端点不变，左端点收缩，即变为[3, n - 2];以此类推，直到第二段区间消失，此时最后一次记录的数据和即为结果．\n# 代码\n``` C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 2e5 + 7;\nint d[maxn];\nint n;\nlong long psum[maxn], bsum[maxn];\nvector<long long> vec;\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", d + i);\n        if(i == 0) psum[i] = d[i];\n        else psum[i] = psum[i - 1] + d[i];\n    }\n    for(int i = n - 1; i >= 0; i--){\n        if(i == n - 1) bsum[i] = d[i];\n        else bsum[i] = bsum[i + 1] + d[i];\n    }\n\n    int i, j;\n    for(i = 0, j = n - 1; i < n;){\n        if(i >= j) break;\n        if(psum[i] == bsum[j]){\n            vec.push_back(psum[i]);\n            i++;\n            j--;\n        }\n        else if(psum[i] < bsum[j]) i++;\n        else if(psum[i] > bsum[j]) j--;\n    }\n    if(vec.size() != 0) printf(\"%lld\\n\", vec[vec.size() - 1]);\n    else printf(\"0\\n\");\n    return 0;\n}\n```","slug":"Codeforces-498Div3-C","published":1,"updated":"2019-08-20T14:55:23.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l4000430vn05ofv0mm","content":"<p>好题，虽然比较简单，但是觉得这道题的解题思路挺棒的，用到了前缀和，后缀和以及思路的转换．解出来之后还是很开心的，嚯嚯嚯（一个只能做做Div3的小菜鸡|･ω･｀)）</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://codeforces.com/contest/1006/problem/C\" target=\"_blank\" rel=\"noopener\">Codeforces-#498Div3-C</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>题目大意：给定n个整数（范围1<del>1e9）,要求把这n个整数划分为连续的三段，使得第一段的数的总和与第三段的数的总和相等且要求这个总和尽量大．<br>思路：<br>因为n的范围是1</del>2e5，而且又涉及求和，所以应该可以比较自然的想到前缀和，题目又要求是前后两段的总和相等所以后缀和也要统计一下．接下来就要考虑什么时候两端的和相等且最大了，因为第一段和第三段长度不定，所以相当于是两个变量，想到它们的长度变化其实可以归一到第二段数据的长度变化，这样的话复杂度变为O(n)，就可以通过了．具体做法是对于1~n这n个数据，初始化第二段数据区间为[2, n - 1], 然后判断此时第一段和第三段数据和的大小关系，因为已经统计了前缀和和后缀和，所以这部分复杂度是O(1)．如果第一段数据和等于第三段数据和则记录这个数据和同时缩小第二段数据的区间，变为[3, n - 2]，继续判断，看是否还有更大的数据和满足条件；如果第一段数据和大于第三段数据和则保持第二段区间左端点不变收缩右端点，即变为[2, n - 2];同样的如果第一段数据和小于第三段数据和则保持第二段区间右端点不变，左端点收缩，即变为[3, n - 2];以此类推，直到第二段区间消失，此时最后一次记录的数据和即为结果．</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> psum[maxn], bsum[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; vec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, d + i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) psum[i] = d[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> psum[i] = psum[i - <span class=\"number\">1</span>] + d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == n - <span class=\"number\">1</span>) bsum[i] = d[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> bsum[i] = bsum[i + <span class=\"number\">1</span>] + d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>, j = n - <span class=\"number\">1</span>; i &lt; n;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(psum[i] == bsum[j])&#123;</span><br><span class=\"line\">            vec.push_back(psum[i]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(psum[i] &lt; bsum[j]) i++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(psum[i] &gt; bsum[j]) j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size() != <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, vec[vec.size() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"0\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>好题，虽然比较简单，但是觉得这道题的解题思路挺棒的，用到了前缀和，后缀和以及思路的转换．解出来之后还是很开心的，嚯嚯嚯（一个只能做做Div3的小菜鸡|･ω･｀)）</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://codeforces.com/contest/1006/problem/C\" target=\"_blank\" rel=\"noopener\">Codeforces-#498Div3-C</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>题目大意：给定n个整数（范围1<del>1e9）,要求把这n个整数划分为连续的三段，使得第一段的数的总和与第三段的数的总和相等且要求这个总和尽量大．<br>思路：<br>因为n的范围是1</del>2e5，而且又涉及求和，所以应该可以比较自然的想到前缀和，题目又要求是前后两段的总和相等所以后缀和也要统计一下．接下来就要考虑什么时候两端的和相等且最大了，因为第一段和第三段长度不定，所以相当于是两个变量，想到它们的长度变化其实可以归一到第二段数据的长度变化，这样的话复杂度变为O(n)，就可以通过了．具体做法是对于1~n这n个数据，初始化第二段数据区间为[2, n - 1], 然后判断此时第一段和第三段数据和的大小关系，因为已经统计了前缀和和后缀和，所以这部分复杂度是O(1)．如果第一段数据和等于第三段数据和则记录这个数据和同时缩小第二段数据的区间，变为[3, n - 2]，继续判断，看是否还有更大的数据和满足条件；如果第一段数据和大于第三段数据和则保持第二段区间左端点不变收缩右端点，即变为[2, n - 2];同样的如果第一段数据和小于第三段数据和则保持第二段区间右端点不变，左端点收缩，即变为[3, n - 2];以此类推，直到第二段区间消失，此时最后一次记录的数据和即为结果．</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> psum[maxn], bsum[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; vec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, d + i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) psum[i] = d[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> psum[i] = psum[i - <span class=\"number\">1</span>] + d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == n - <span class=\"number\">1</span>) bsum[i] = d[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> bsum[i] = bsum[i + <span class=\"number\">1</span>] + d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>, j = n - <span class=\"number\">1</span>; i &lt; n;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(psum[i] == bsum[j])&#123;</span><br><span class=\"line\">            vec.push_back(psum[i]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(psum[i] &lt; bsum[j]) i++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(psum[i] &gt; bsum[j]) j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size() != <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, vec[vec.size() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"0\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Covariance-协方差","date":"2019-03-27T02:26:57.000Z","_content":"*填坑数学系列*\n总结协方差的意义，它可以表示物体间的什么属性，它和相关系数之间的关系，以及协方差矩阵的作用。\n<!--more-->\n\n# 概念\n协方差用在概率论和统计学中于衡量两个变量的总体误差([Wikiwand](https://www.wikiwand.com/zh-hans/%E5%8D%8F%E6%96%B9%E5%B7%AE))。\n简单来说协方差用来描述两个随机变量之间具有什么样的关系。\n\n# 数学定义\n和方差的数学定义类似：$$Var(X)=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(x_i-\\overline{x})}{n-1}$$\n协方差的数学定义：$$Cov(X,Y)=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(y_i-\\overline{y})}{n-1}$$\n通过向量表示为：$$Cov(X,Y)=\\frac{\\vec{x}\\cdot\\vec{y}}{n-1}$$\n\n可以发现协方差看起来很像**点积**。\n\n*除以n-1表示无偏估计,一般我们可以直接除以样本数量n(有偏估计)*\n\n# 相关系数\n协方差可以理解为通过**点积**来计算关系。举一个实际应用的例子。\n假设有A，B，C，D，E，F六本书，甲、乙两个人对它们的评分(满分5分)如下：\n\n```\n　    A  B  C  D  E  F\n甲    4  3  3  0  5  3\n乙    4  2  4  0  4  4\n```\n\n甲的信息可以用向量$\\vec{x} = (4,3,3,0,5,3)^T$来表示。\n乙的信息可以用向量$\\vec{y} = (4,2,4,0,4,4)^T$来表示。\n甲和乙的协方差经过计算可得(有偏计算)：$$Cov(X,Y)=2.4$$\n这个值可以表示甲、乙之间的关系，但是由于点积结果受到向量长度的影响，所以我们最好把**协方差进行归一化**，具体的做法是将得到的协方差(未除以样本总数n均值化之前)除以变量各自的标准差。\n$$r=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(y_i-\\overline{y})}{\\sqrt{\\sum_{i=1}^n(x_i-\\overline{x})^2}\\sqrt{\\sum_{i=1}^n(y_i-\\overline{y})^2}}$$\n这被称作两个变量样本的**相关系数**，其实就是两向量夹角的**余弦**：$$\\cos\\theta=\\frac{\\vec{x}\\cdot\\vec{y}}{\\|\\|\\vec{x}\\|\\|\\|\\|\\vec{y}\\|\\|}$$\n上面的例子通过计算相关系数得到：$$r=\\cos\\theta\\approx0.86$$\n余弦范围为[-1，1]，所以结果表明两者之间应该挺有正向关系的，可以考虑把甲喜欢的书推荐给乙。\n\n# 协方差矩阵\n协方差反映的是两个变量之间的相关性，协方差矩阵反映的是所有变量两两之间的关系。具体来说，包含两个特征变量的矩阵：\n\n$$\nZ=\n \\begin{bmatrix}\n   1 & 2 \\\\\\\\\n   3 & 6 \\\\\\\\\n   4 & 5 \\\\\\\\\n   5 & 2 \\\\\\\\\n  \\end{bmatrix}\n$$\n\n其中两个特征X，Y分别为：\n\n$$\nX=\n \\begin{bmatrix}\n   1 \\\\\\\\\n   3 \\\\\\\\\n   4 \\\\\\\\\n   5 \\\\\\\\\n  \\end{bmatrix}\n，\nY=\n \\begin{bmatrix}\n   2 \\\\\\\\\n   6 \\\\\\\\\n   2 \\\\\\\\\n   2 \\\\\\\\\n  \\end{bmatrix}\n$$\n\n此时协方差矩阵为：\n\n$$\nCov(Z)=\n \\begin{bmatrix}\n   Cov(X,X) & Cov(X,Y) \\\\\\\\\n   Cov(Y,X) & Cov(Y,Y) \\\\\\\\\n \\end{bmatrix}\n$$\n\n*注：自己和自己的协方差等于自己的方差*\n\n# 协方差矩阵的作用\n协方差矩阵经常被用来计算特征之间的某种联系，机器学习中的用于降维的主成分分析(PCA)就用到了协方差矩阵。\n\n# 参考\n\n[如何通俗易懂地解释协方差和相关系数的概念](https://www.zhihu.com/question/20852004/answer/287792087)\n[协方差矩阵-Jermmy's Lazy Blog](http://jermmy.xyz/2017/03/19/2017-3-19-covariance-matrix/)","source":"_posts/Covariance-协方差.md","raw":"---\ntitle: Covariance-协方差\ndate: 2019-03-27 10:26:57\ncategories:\n- Math\ntags:\n- Covariance\n---\n*填坑数学系列*\n总结协方差的意义，它可以表示物体间的什么属性，它和相关系数之间的关系，以及协方差矩阵的作用。\n<!--more-->\n\n# 概念\n协方差用在概率论和统计学中于衡量两个变量的总体误差([Wikiwand](https://www.wikiwand.com/zh-hans/%E5%8D%8F%E6%96%B9%E5%B7%AE))。\n简单来说协方差用来描述两个随机变量之间具有什么样的关系。\n\n# 数学定义\n和方差的数学定义类似：$$Var(X)=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(x_i-\\overline{x})}{n-1}$$\n协方差的数学定义：$$Cov(X,Y)=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(y_i-\\overline{y})}{n-1}$$\n通过向量表示为：$$Cov(X,Y)=\\frac{\\vec{x}\\cdot\\vec{y}}{n-1}$$\n\n可以发现协方差看起来很像**点积**。\n\n*除以n-1表示无偏估计,一般我们可以直接除以样本数量n(有偏估计)*\n\n# 相关系数\n协方差可以理解为通过**点积**来计算关系。举一个实际应用的例子。\n假设有A，B，C，D，E，F六本书，甲、乙两个人对它们的评分(满分5分)如下：\n\n```\n　    A  B  C  D  E  F\n甲    4  3  3  0  5  3\n乙    4  2  4  0  4  4\n```\n\n甲的信息可以用向量$\\vec{x} = (4,3,3,0,5,3)^T$来表示。\n乙的信息可以用向量$\\vec{y} = (4,2,4,0,4,4)^T$来表示。\n甲和乙的协方差经过计算可得(有偏计算)：$$Cov(X,Y)=2.4$$\n这个值可以表示甲、乙之间的关系，但是由于点积结果受到向量长度的影响，所以我们最好把**协方差进行归一化**，具体的做法是将得到的协方差(未除以样本总数n均值化之前)除以变量各自的标准差。\n$$r=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(y_i-\\overline{y})}{\\sqrt{\\sum_{i=1}^n(x_i-\\overline{x})^2}\\sqrt{\\sum_{i=1}^n(y_i-\\overline{y})^2}}$$\n这被称作两个变量样本的**相关系数**，其实就是两向量夹角的**余弦**：$$\\cos\\theta=\\frac{\\vec{x}\\cdot\\vec{y}}{\\|\\|\\vec{x}\\|\\|\\|\\|\\vec{y}\\|\\|}$$\n上面的例子通过计算相关系数得到：$$r=\\cos\\theta\\approx0.86$$\n余弦范围为[-1，1]，所以结果表明两者之间应该挺有正向关系的，可以考虑把甲喜欢的书推荐给乙。\n\n# 协方差矩阵\n协方差反映的是两个变量之间的相关性，协方差矩阵反映的是所有变量两两之间的关系。具体来说，包含两个特征变量的矩阵：\n\n$$\nZ=\n \\begin{bmatrix}\n   1 & 2 \\\\\\\\\n   3 & 6 \\\\\\\\\n   4 & 5 \\\\\\\\\n   5 & 2 \\\\\\\\\n  \\end{bmatrix}\n$$\n\n其中两个特征X，Y分别为：\n\n$$\nX=\n \\begin{bmatrix}\n   1 \\\\\\\\\n   3 \\\\\\\\\n   4 \\\\\\\\\n   5 \\\\\\\\\n  \\end{bmatrix}\n，\nY=\n \\begin{bmatrix}\n   2 \\\\\\\\\n   6 \\\\\\\\\n   2 \\\\\\\\\n   2 \\\\\\\\\n  \\end{bmatrix}\n$$\n\n此时协方差矩阵为：\n\n$$\nCov(Z)=\n \\begin{bmatrix}\n   Cov(X,X) & Cov(X,Y) \\\\\\\\\n   Cov(Y,X) & Cov(Y,Y) \\\\\\\\\n \\end{bmatrix}\n$$\n\n*注：自己和自己的协方差等于自己的方差*\n\n# 协方差矩阵的作用\n协方差矩阵经常被用来计算特征之间的某种联系，机器学习中的用于降维的主成分分析(PCA)就用到了协方差矩阵。\n\n# 参考\n\n[如何通俗易懂地解释协方差和相关系数的概念](https://www.zhihu.com/question/20852004/answer/287792087)\n[协方差矩阵-Jermmy's Lazy Blog](http://jermmy.xyz/2017/03/19/2017-3-19-covariance-matrix/)","slug":"Covariance-协方差","published":1,"updated":"2019-09-01T08:58:04.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l5000530vnai5w6lm7","content":"<p><em>填坑数学系列</em><br>总结协方差的意义，它可以表示物体间的什么属性，它和相关系数之间的关系，以及协方差矩阵的作用。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>协方差用在概率论和统计学中于衡量两个变量的总体误差(<a href=\"https://www.wikiwand.com/zh-hans/%E5%8D%8F%E6%96%B9%E5%B7%AE\" target=\"_blank\" rel=\"noopener\">Wikiwand</a>)。<br>简单来说协方差用来描述两个随机变量之间具有什么样的关系。</p>\n<h1 id=\"数学定义\"><a href=\"#数学定义\" class=\"headerlink\" title=\"数学定义\"></a>数学定义</h1><p>和方差的数学定义类似：$$Var(X)=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(x_i-\\overline{x})}{n-1}$$<br>协方差的数学定义：$$Cov(X,Y)=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(y_i-\\overline{y})}{n-1}$$<br>通过向量表示为：$$Cov(X,Y)=\\frac{\\vec{x}\\cdot\\vec{y}}{n-1}$$</p>\n<p>可以发现协方差看起来很像<strong>点积</strong>。</p>\n<p><em>除以n-1表示无偏估计,一般我们可以直接除以样本数量n(有偏估计)</em></p>\n<h1 id=\"相关系数\"><a href=\"#相关系数\" class=\"headerlink\" title=\"相关系数\"></a>相关系数</h1><p>协方差可以理解为通过<strong>点积</strong>来计算关系。举一个实际应用的例子。<br>假设有A，B，C，D，E，F六本书，甲、乙两个人对它们的评分(满分5分)如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　    A  B  C  D  E  F</span><br><span class=\"line\">甲    4  3  3  0  5  3</span><br><span class=\"line\">乙    4  2  4  0  4  4</span><br></pre></td></tr></table></figure>\n\n<p>甲的信息可以用向量$\\vec{x} = (4,3,3,0,5,3)^T$来表示。<br>乙的信息可以用向量$\\vec{y} = (4,2,4,0,4,4)^T$来表示。<br>甲和乙的协方差经过计算可得(有偏计算)：$$Cov(X,Y)=2.4$$<br>这个值可以表示甲、乙之间的关系，但是由于点积结果受到向量长度的影响，所以我们最好把<strong>协方差进行归一化</strong>，具体的做法是将得到的协方差(未除以样本总数n均值化之前)除以变量各自的标准差。<br>$$r=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(y_i-\\overline{y})}{\\sqrt{\\sum_{i=1}^n(x_i-\\overline{x})^2}\\sqrt{\\sum_{i=1}^n(y_i-\\overline{y})^2}}$$<br>这被称作两个变量样本的<strong>相关系数</strong>，其实就是两向量夹角的<strong>余弦</strong>：$$\\cos\\theta=\\frac{\\vec{x}\\cdot\\vec{y}}{||\\vec{x}||||\\vec{y}||}$$<br>上面的例子通过计算相关系数得到：$$r=\\cos\\theta\\approx0.86$$<br>余弦范围为[-1，1]，所以结果表明两者之间应该挺有正向关系的，可以考虑把甲喜欢的书推荐给乙。</p>\n<h1 id=\"协方差矩阵\"><a href=\"#协方差矩阵\" class=\"headerlink\" title=\"协方差矩阵\"></a>协方差矩阵</h1><p>协方差反映的是两个变量之间的相关性，协方差矩阵反映的是所有变量两两之间的关系。具体来说，包含两个特征变量的矩阵：</p>\n<p>$$<br>Z=<br> \\begin{bmatrix}<br>   1 &amp; 2 \\\\<br>   3 &amp; 6 \\\\<br>   4 &amp; 5 \\\\<br>   5 &amp; 2 \\\\<br>  \\end{bmatrix}<br>$$</p>\n<p>其中两个特征X，Y分别为：</p>\n<p>$$<br>X=<br> \\begin{bmatrix}<br>   1 \\\\<br>   3 \\\\<br>   4 \\\\<br>   5 \\\\<br>  \\end{bmatrix}<br>，<br>Y=<br> \\begin{bmatrix}<br>   2 \\\\<br>   6 \\\\<br>   2 \\\\<br>   2 \\\\<br>  \\end{bmatrix}<br>$$</p>\n<p>此时协方差矩阵为：</p>\n<p>$$<br>Cov(Z)=<br> \\begin{bmatrix}<br>   Cov(X,X) &amp; Cov(X,Y) \\\\<br>   Cov(Y,X) &amp; Cov(Y,Y) \\\\<br> \\end{bmatrix}<br>$$</p>\n<p><em>注：自己和自己的协方差等于自己的方差</em></p>\n<h1 id=\"协方差矩阵的作用\"><a href=\"#协方差矩阵的作用\" class=\"headerlink\" title=\"协方差矩阵的作用\"></a>协方差矩阵的作用</h1><p>协方差矩阵经常被用来计算特征之间的某种联系，机器学习中的用于降维的主成分分析(PCA)就用到了协方差矩阵。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.zhihu.com/question/20852004/answer/287792087\" target=\"_blank\" rel=\"noopener\">如何通俗易懂地解释协方差和相关系数的概念</a><br><a href=\"http://jermmy.xyz/2017/03/19/2017-3-19-covariance-matrix/\" target=\"_blank\" rel=\"noopener\">协方差矩阵-Jermmy’s Lazy Blog</a></p>\n","site":{"data":{}},"excerpt":"<p><em>填坑数学系列</em><br>总结协方差的意义，它可以表示物体间的什么属性，它和相关系数之间的关系，以及协方差矩阵的作用。</p>","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>协方差用在概率论和统计学中于衡量两个变量的总体误差(<a href=\"https://www.wikiwand.com/zh-hans/%E5%8D%8F%E6%96%B9%E5%B7%AE\" target=\"_blank\" rel=\"noopener\">Wikiwand</a>)。<br>简单来说协方差用来描述两个随机变量之间具有什么样的关系。</p>\n<h1 id=\"数学定义\"><a href=\"#数学定义\" class=\"headerlink\" title=\"数学定义\"></a>数学定义</h1><p>和方差的数学定义类似：$$Var(X)=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(x_i-\\overline{x})}{n-1}$$<br>协方差的数学定义：$$Cov(X,Y)=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(y_i-\\overline{y})}{n-1}$$<br>通过向量表示为：$$Cov(X,Y)=\\frac{\\vec{x}\\cdot\\vec{y}}{n-1}$$</p>\n<p>可以发现协方差看起来很像<strong>点积</strong>。</p>\n<p><em>除以n-1表示无偏估计,一般我们可以直接除以样本数量n(有偏估计)</em></p>\n<h1 id=\"相关系数\"><a href=\"#相关系数\" class=\"headerlink\" title=\"相关系数\"></a>相关系数</h1><p>协方差可以理解为通过<strong>点积</strong>来计算关系。举一个实际应用的例子。<br>假设有A，B，C，D，E，F六本书，甲、乙两个人对它们的评分(满分5分)如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　    A  B  C  D  E  F</span><br><span class=\"line\">甲    4  3  3  0  5  3</span><br><span class=\"line\">乙    4  2  4  0  4  4</span><br></pre></td></tr></table></figure>\n\n<p>甲的信息可以用向量$\\vec{x} = (4,3,3,0,5,3)^T$来表示。<br>乙的信息可以用向量$\\vec{y} = (4,2,4,0,4,4)^T$来表示。<br>甲和乙的协方差经过计算可得(有偏计算)：$$Cov(X,Y)=2.4$$<br>这个值可以表示甲、乙之间的关系，但是由于点积结果受到向量长度的影响，所以我们最好把<strong>协方差进行归一化</strong>，具体的做法是将得到的协方差(未除以样本总数n均值化之前)除以变量各自的标准差。<br>$$r=\\frac{\\sum_{i=1}^n(x_i-\\overline{x})(y_i-\\overline{y})}{\\sqrt{\\sum_{i=1}^n(x_i-\\overline{x})^2}\\sqrt{\\sum_{i=1}^n(y_i-\\overline{y})^2}}$$<br>这被称作两个变量样本的<strong>相关系数</strong>，其实就是两向量夹角的<strong>余弦</strong>：$$\\cos\\theta=\\frac{\\vec{x}\\cdot\\vec{y}}{||\\vec{x}||||\\vec{y}||}$$<br>上面的例子通过计算相关系数得到：$$r=\\cos\\theta\\approx0.86$$<br>余弦范围为[-1，1]，所以结果表明两者之间应该挺有正向关系的，可以考虑把甲喜欢的书推荐给乙。</p>\n<h1 id=\"协方差矩阵\"><a href=\"#协方差矩阵\" class=\"headerlink\" title=\"协方差矩阵\"></a>协方差矩阵</h1><p>协方差反映的是两个变量之间的相关性，协方差矩阵反映的是所有变量两两之间的关系。具体来说，包含两个特征变量的矩阵：</p>\n<p>$$<br>Z=<br> \\begin{bmatrix}<br>   1 &amp; 2 \\\\<br>   3 &amp; 6 \\\\<br>   4 &amp; 5 \\\\<br>   5 &amp; 2 \\\\<br>  \\end{bmatrix}<br>$$</p>\n<p>其中两个特征X，Y分别为：</p>\n<p>$$<br>X=<br> \\begin{bmatrix}<br>   1 \\\\<br>   3 \\\\<br>   4 \\\\<br>   5 \\\\<br>  \\end{bmatrix}<br>，<br>Y=<br> \\begin{bmatrix}<br>   2 \\\\<br>   6 \\\\<br>   2 \\\\<br>   2 \\\\<br>  \\end{bmatrix}<br>$$</p>\n<p>此时协方差矩阵为：</p>\n<p>$$<br>Cov(Z)=<br> \\begin{bmatrix}<br>   Cov(X,X) &amp; Cov(X,Y) \\\\<br>   Cov(Y,X) &amp; Cov(Y,Y) \\\\<br> \\end{bmatrix}<br>$$</p>\n<p><em>注：自己和自己的协方差等于自己的方差</em></p>\n<h1 id=\"协方差矩阵的作用\"><a href=\"#协方差矩阵的作用\" class=\"headerlink\" title=\"协方差矩阵的作用\"></a>协方差矩阵的作用</h1><p>协方差矩阵经常被用来计算特征之间的某种联系，机器学习中的用于降维的主成分分析(PCA)就用到了协方差矩阵。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.zhihu.com/question/20852004/answer/287792087\" target=\"_blank\" rel=\"noopener\">如何通俗易懂地解释协方差和相关系数的概念</a><br><a href=\"http://jermmy.xyz/2017/03/19/2017-3-19-covariance-matrix/\" target=\"_blank\" rel=\"noopener\">协方差矩阵-Jermmy’s Lazy Blog</a></p>"},{"title":"C语言编译器工作原理以及.h和.c文件解析","date":"2018-12-02T04:41:00.000Z","_content":"　　在进行多文件编程的时候，虽然很多IDE都可以帮我们完成预处理、编译、链接等过程，但深入理解编译器的这几个过程可以避免很多\"undefined\"，\"undeclared\"以及\"redefined\"的问题。而比较好的实践方式是自己写Makefile（IDE实际上完成的就是帮我们弄清文件依赖关系，然后生成一个Makefile，调用编译器去编译链接生成可执行文件）。\n<!--more-->\n# 编译器工作原理\n1.预处理阶段：\n　　实际上是处理的是\"define\"，\"include\"等宏命令，进行宏替换。例如#include \"xx.h\"实际意思是把当前这一行删掉，把xx.h中的内容原封不动的插入在当前行位置。\n2.编译阶段：\n　　**以.c文件为基本单位进行**，也就是说如果项目中一个.c文件都没有，那么项目无法编译。这一阶段为所有.c文件中的变量、函数分配空间，并将各个全局变量、函数进行符号描述，编译、汇编成二进制码从而生成.o目标文件。\n　　**需要注意的是这个过程并不关心变量的具体定义和函数的具体实现，只要存在变量和函数的相关声明就可以使得编译通过。**因为只要知道了变量/函数的类型和名字，编译器就知道了该如何使用这个变量/函数。\n3.链接阶段:\n　　**以.o文件为基本单位进行**，主要的工作是重定位各个目标文件的函数、变量。这个过程主要是为上一个编译过程中变量和函数的声明找到他们具体的定义和实现。\n\n*下面是一个具体的解释例子：*\n\nadd.h文件\n```C\n#ifndef _ADD_H\n#define _ADD_H\n\nint add(int a, int b);\n\n#endif\n```\n\nadd.c文件\n```C\n#include \"add.h\"\n\nint add(int a, int b){\n    return a + b;\n}\n```\n\nmain.c文件\n```C\n#include <stdio.h>\n#include \"add.h\"\n\nint main(){\n    int a = 1, b = 2;\n    int ans = add(a, b);\n    printf(\"%d\\n\", ans);\n\n    return 0;\n}\n```\n\n1.预处理阶段：编译器会把main.c和add.c中的``#include \"add.h\"``替换成add.h中的全部内容。\n2.编译阶段：为main.c和add.c中的各变量和函数分配内存空间并汇编成目标文件。可以发现在main.c中并没有关于add函数的实现只有由``#include \"add.h\"``替换成的这个函数的声明，但这并不影响编译过程的进行。\n3.链接阶段：经过编译后生成了main.o和add.o文件。因为main.o中用到了add函数但没有它的具体实现，所以编译器会去其它.o文件中寻找该函数的具体实现。在这个例子中add.o提供了add函数的具体实现，链接过程顺利进行，生成可执行文件。\n\n**Ps.关于add.h中#ifndef、#define和#endif的解释：**它们的作用是防止头文件在一个.c文件中被重复包含。\n\n*一个具体的例子：*\n\na.h文件\n```C\nstruct Node{\n    int a;\n    int b;\n};\n```\n\nb.h文件\n```C\n#include \"a.h\"\n```\n\nc.h文件\n```C\n#include \"a.h\"\n```\n\nmain.c文件\n```C\n#include <stdio.h>\n#include \"b.h\"\n#include \"c.h\"\n\nint main(){\n    print(\"hello\\n\");\n    return 0;\n}\n```\n　　a.h中有结构体struct Node的定义，b.h和c.h都包含了a.h，main.c中又包含了b.h和c.h这两个头文件。这会导致a.h中的内容被两次复制到main.c中，产生struct Node的重复重复定义错误，而如果a.h遵循下面的格式：\n```C\n#ifndef _A_H\n#define _A_H\n\nstruct Node{\n    int a;\n    int b;\n};\n\n#endif\n```\n　　那么a.h在main.c中只会被替换一次，这样就避免了头文件的重复包含。\n\n# .h和.c文件解析\n　　**一般情况下我们在.h文件中进行变量、函数和宏的声明，在.c文件中进行变量和函数的具体实现。**\n　　但这只是我们默认的一种规范的做法，实际上我们舍弃.h文件，在.c文件中包含变量、函数的声明以及实现也没有问题，但如果在其它.c文件中用#include去包含这个.c文件就会出现问题。\n\n*具体例子：*\n\nadd.c文件\n```C\nint add(int a, int b);\n\nint add(int a, int b){\n    return a + b;\n}\n```\n\nmain.c文件\n```C\n#include \"add.c\"\n\nint main(){\n    int a = 1, b = 2;\n    int ans = add(a, b);\n    printf(\"%d\\n\", ans);\n\n    return 0;\n}\n```\n　　链接过程会出现add函数重复定义的错误，因为编译后生成的main.o和add.o中都含有add函数的具体实现。这种情况下可以对main.c做如下修改:\n```C\nint add(int a, int b);\n\nint main(){\n    int a = 1, b = 2;\n    int ans = add(a, b);\n    printf(\"%d\\n\", ans);\n\n    return 0;\n}\n```\n　　这样编译后生成的main.o文件中便不再包含add函数的实现，而只包含声明。但是如果add.c中的函数很多，以及调用这些函数的.c文件也很多，这样在每个.c文件中手动挨个添加这些函数的声明会十分不方便，**而可以理解为.h文件就是为了声明函数和变量方便而创建的**，因为这样把所有的变量、函数声明都写在.h中，其它.c文件只需要#include相应的.h文件就好。\n\n# 问答专区\n```\nQ：ifndef后面的标识必须是_ADD_H这种头文件名大写加下划线的形式吗？\nA：不必，你可以自定义，这只是一种习惯性写法，因为一个工程中头文件名是不会重复的，所以这样定义的话标识也不会重复。\n\nQ：工程中可以没有.h文件吗？\nA：可以，只是如上所说这样会有很多不方便。\n\nQ：.h文件必须和相应的.c文件同名吗？\nA：不必，但是通常我们都这样做，因为比较这样比较清晰。\n\nQ：头文件必须是.h后缀吗？\nA：不必，因为头文件只是其中的内容被#include宏命令替换，所以.txt、.doc等作为头文件的后缀都可以，但我们习惯用.h作为头文件后缀。\n\nQ：.c文件必须包含自己的.h文件吗？\nA：不一定，在最初解释编译器工作原理的例子中add.c就可以不包含add.h文件，因为add.h中只是对add函数的声明，而add.c不需要这个声明也可以编译通过。\n```\n\n# 参考链接\n\n[C语言中.h和.c文件解析（很精彩）](https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html)\n[Purpose of #ifndef and #define](https://community.arduboy.com/t/purpose-of-ifndef-and-define/3592/2)\n","source":"_posts/C语言编译连接过程以及-h和-c文件解析.md","raw":"---\ntitle: C语言编译器工作原理以及.h和.c文件解析\ndate: 2018-12-02 12:41:00\ncategories:\n- C++\ntags:\n- C语言\n---\n　　在进行多文件编程的时候，虽然很多IDE都可以帮我们完成预处理、编译、链接等过程，但深入理解编译器的这几个过程可以避免很多\"undefined\"，\"undeclared\"以及\"redefined\"的问题。而比较好的实践方式是自己写Makefile（IDE实际上完成的就是帮我们弄清文件依赖关系，然后生成一个Makefile，调用编译器去编译链接生成可执行文件）。\n<!--more-->\n# 编译器工作原理\n1.预处理阶段：\n　　实际上是处理的是\"define\"，\"include\"等宏命令，进行宏替换。例如#include \"xx.h\"实际意思是把当前这一行删掉，把xx.h中的内容原封不动的插入在当前行位置。\n2.编译阶段：\n　　**以.c文件为基本单位进行**，也就是说如果项目中一个.c文件都没有，那么项目无法编译。这一阶段为所有.c文件中的变量、函数分配空间，并将各个全局变量、函数进行符号描述，编译、汇编成二进制码从而生成.o目标文件。\n　　**需要注意的是这个过程并不关心变量的具体定义和函数的具体实现，只要存在变量和函数的相关声明就可以使得编译通过。**因为只要知道了变量/函数的类型和名字，编译器就知道了该如何使用这个变量/函数。\n3.链接阶段:\n　　**以.o文件为基本单位进行**，主要的工作是重定位各个目标文件的函数、变量。这个过程主要是为上一个编译过程中变量和函数的声明找到他们具体的定义和实现。\n\n*下面是一个具体的解释例子：*\n\nadd.h文件\n```C\n#ifndef _ADD_H\n#define _ADD_H\n\nint add(int a, int b);\n\n#endif\n```\n\nadd.c文件\n```C\n#include \"add.h\"\n\nint add(int a, int b){\n    return a + b;\n}\n```\n\nmain.c文件\n```C\n#include <stdio.h>\n#include \"add.h\"\n\nint main(){\n    int a = 1, b = 2;\n    int ans = add(a, b);\n    printf(\"%d\\n\", ans);\n\n    return 0;\n}\n```\n\n1.预处理阶段：编译器会把main.c和add.c中的``#include \"add.h\"``替换成add.h中的全部内容。\n2.编译阶段：为main.c和add.c中的各变量和函数分配内存空间并汇编成目标文件。可以发现在main.c中并没有关于add函数的实现只有由``#include \"add.h\"``替换成的这个函数的声明，但这并不影响编译过程的进行。\n3.链接阶段：经过编译后生成了main.o和add.o文件。因为main.o中用到了add函数但没有它的具体实现，所以编译器会去其它.o文件中寻找该函数的具体实现。在这个例子中add.o提供了add函数的具体实现，链接过程顺利进行，生成可执行文件。\n\n**Ps.关于add.h中#ifndef、#define和#endif的解释：**它们的作用是防止头文件在一个.c文件中被重复包含。\n\n*一个具体的例子：*\n\na.h文件\n```C\nstruct Node{\n    int a;\n    int b;\n};\n```\n\nb.h文件\n```C\n#include \"a.h\"\n```\n\nc.h文件\n```C\n#include \"a.h\"\n```\n\nmain.c文件\n```C\n#include <stdio.h>\n#include \"b.h\"\n#include \"c.h\"\n\nint main(){\n    print(\"hello\\n\");\n    return 0;\n}\n```\n　　a.h中有结构体struct Node的定义，b.h和c.h都包含了a.h，main.c中又包含了b.h和c.h这两个头文件。这会导致a.h中的内容被两次复制到main.c中，产生struct Node的重复重复定义错误，而如果a.h遵循下面的格式：\n```C\n#ifndef _A_H\n#define _A_H\n\nstruct Node{\n    int a;\n    int b;\n};\n\n#endif\n```\n　　那么a.h在main.c中只会被替换一次，这样就避免了头文件的重复包含。\n\n# .h和.c文件解析\n　　**一般情况下我们在.h文件中进行变量、函数和宏的声明，在.c文件中进行变量和函数的具体实现。**\n　　但这只是我们默认的一种规范的做法，实际上我们舍弃.h文件，在.c文件中包含变量、函数的声明以及实现也没有问题，但如果在其它.c文件中用#include去包含这个.c文件就会出现问题。\n\n*具体例子：*\n\nadd.c文件\n```C\nint add(int a, int b);\n\nint add(int a, int b){\n    return a + b;\n}\n```\n\nmain.c文件\n```C\n#include \"add.c\"\n\nint main(){\n    int a = 1, b = 2;\n    int ans = add(a, b);\n    printf(\"%d\\n\", ans);\n\n    return 0;\n}\n```\n　　链接过程会出现add函数重复定义的错误，因为编译后生成的main.o和add.o中都含有add函数的具体实现。这种情况下可以对main.c做如下修改:\n```C\nint add(int a, int b);\n\nint main(){\n    int a = 1, b = 2;\n    int ans = add(a, b);\n    printf(\"%d\\n\", ans);\n\n    return 0;\n}\n```\n　　这样编译后生成的main.o文件中便不再包含add函数的实现，而只包含声明。但是如果add.c中的函数很多，以及调用这些函数的.c文件也很多，这样在每个.c文件中手动挨个添加这些函数的声明会十分不方便，**而可以理解为.h文件就是为了声明函数和变量方便而创建的**，因为这样把所有的变量、函数声明都写在.h中，其它.c文件只需要#include相应的.h文件就好。\n\n# 问答专区\n```\nQ：ifndef后面的标识必须是_ADD_H这种头文件名大写加下划线的形式吗？\nA：不必，你可以自定义，这只是一种习惯性写法，因为一个工程中头文件名是不会重复的，所以这样定义的话标识也不会重复。\n\nQ：工程中可以没有.h文件吗？\nA：可以，只是如上所说这样会有很多不方便。\n\nQ：.h文件必须和相应的.c文件同名吗？\nA：不必，但是通常我们都这样做，因为比较这样比较清晰。\n\nQ：头文件必须是.h后缀吗？\nA：不必，因为头文件只是其中的内容被#include宏命令替换，所以.txt、.doc等作为头文件的后缀都可以，但我们习惯用.h作为头文件后缀。\n\nQ：.c文件必须包含自己的.h文件吗？\nA：不一定，在最初解释编译器工作原理的例子中add.c就可以不包含add.h文件，因为add.h中只是对add函数的声明，而add.c不需要这个声明也可以编译通过。\n```\n\n# 参考链接\n\n[C语言中.h和.c文件解析（很精彩）](https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html)\n[Purpose of #ifndef and #define](https://community.arduboy.com/t/purpose-of-ifndef-and-define/3592/2)\n","slug":"C语言编译连接过程以及-h和-c文件解析","published":1,"updated":"2019-09-02T02:44:53.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l6000630vnb31clfrm","content":"<p>　　在进行多文件编程的时候，虽然很多IDE都可以帮我们完成预处理、编译、链接等过程，但深入理解编译器的这几个过程可以避免很多”undefined”，”undeclared”以及”redefined”的问题。而比较好的实践方式是自己写Makefile（IDE实际上完成的就是帮我们弄清文件依赖关系，然后生成一个Makefile，调用编译器去编译链接生成可执行文件）。</p>\n<a id=\"more\"></a>\n<h1 id=\"编译器工作原理\"><a href=\"#编译器工作原理\" class=\"headerlink\" title=\"编译器工作原理\"></a>编译器工作原理</h1><p>1.预处理阶段：<br>　　实际上是处理的是”define”，”include”等宏命令，进行宏替换。例如#include “xx.h”实际意思是把当前这一行删掉，把xx.h中的内容原封不动的插入在当前行位置。<br>2.编译阶段：<br>　　<strong>以.c文件为基本单位进行</strong>，也就是说如果项目中一个.c文件都没有，那么项目无法编译。这一阶段为所有.c文件中的变量、函数分配空间，并将各个全局变量、函数进行符号描述，编译、汇编成二进制码从而生成.o目标文件。<br>　　<strong>需要注意的是这个过程并不关心变量的具体定义和函数的具体实现，只要存在变量和函数的相关声明就可以使得编译通过。</strong>因为只要知道了变量/函数的类型和名字，编译器就知道了该如何使用这个变量/函数。<br>3.链接阶段:<br>　　<strong>以.o文件为基本单位进行</strong>，主要的工作是重定位各个目标文件的函数、变量。这个过程主要是为上一个编译过程中变量和函数的声明找到他们具体的定义和实现。</p>\n<p><em>下面是一个具体的解释例子：</em></p>\n<p>add.h文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ADD_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ADD_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>add.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"add.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"add.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = add(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.预处理阶段：编译器会把main.c和add.c中的<code>#include &quot;add.h&quot;</code>替换成add.h中的全部内容。<br>2.编译阶段：为main.c和add.c中的各变量和函数分配内存空间并汇编成目标文件。可以发现在main.c中并没有关于add函数的实现只有由<code>#include &quot;add.h&quot;</code>替换成的这个函数的声明，但这并不影响编译过程的进行。<br>3.链接阶段：经过编译后生成了main.o和add.o文件。因为main.o中用到了add函数但没有它的具体实现，所以编译器会去其它.o文件中寻找该函数的具体实现。在这个例子中add.o提供了add函数的具体实现，链接过程顺利进行，生成可执行文件。</p>\n<p><strong>Ps.关于add.h中#ifndef、#define和#endif的解释：</strong>它们的作用是防止头文件在一个.c文件中被重复包含。</p>\n<p><em>一个具体的例子：</em></p>\n<p>a.h文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>b.h文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>c.h文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>main.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"c.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    print(<span class=\"string\">\"hello\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　a.h中有结构体struct Node的定义，b.h和c.h都包含了a.h，main.c中又包含了b.h和c.h这两个头文件。这会导致a.h中的内容被两次复制到main.c中，产生struct Node的重复重复定义错误，而如果a.h遵循下面的格式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _A_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>　　那么a.h在main.c中只会被替换一次，这样就避免了头文件的重复包含。</p>\n<h1 id=\"h和-c文件解析\"><a href=\"#h和-c文件解析\" class=\"headerlink\" title=\".h和.c文件解析\"></a>.h和.c文件解析</h1><p>　　<strong>一般情况下我们在.h文件中进行变量、函数和宏的声明，在.c文件中进行变量和函数的具体实现。</strong><br>　　但这只是我们默认的一种规范的做法，实际上我们舍弃.h文件，在.c文件中包含变量、函数的声明以及实现也没有问题，但如果在其它.c文件中用#include去包含这个.c文件就会出现问题。</p>\n<p><em>具体例子：</em></p>\n<p>add.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"add.c\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = add(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　链接过程会出现add函数重复定义的错误，因为编译后生成的main.o和add.o中都含有add函数的具体实现。这种情况下可以对main.c做如下修改:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = add(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　这样编译后生成的main.o文件中便不再包含add函数的实现，而只包含声明。但是如果add.c中的函数很多，以及调用这些函数的.c文件也很多，这样在每个.c文件中手动挨个添加这些函数的声明会十分不方便，<strong>而可以理解为.h文件就是为了声明函数和变量方便而创建的</strong>，因为这样把所有的变量、函数声明都写在.h中，其它.c文件只需要#include相应的.h文件就好。</p>\n<h1 id=\"问答专区\"><a href=\"#问答专区\" class=\"headerlink\" title=\"问答专区\"></a>问答专区</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Q：ifndef后面的标识必须是_ADD_H这种头文件名大写加下划线的形式吗？</span><br><span class=\"line\">A：不必，你可以自定义，这只是一种习惯性写法，因为一个工程中头文件名是不会重复的，所以这样定义的话标识也不会重复。</span><br><span class=\"line\"></span><br><span class=\"line\">Q：工程中可以没有.h文件吗？</span><br><span class=\"line\">A：可以，只是如上所说这样会有很多不方便。</span><br><span class=\"line\"></span><br><span class=\"line\">Q：.h文件必须和相应的.c文件同名吗？</span><br><span class=\"line\">A：不必，但是通常我们都这样做，因为比较这样比较清晰。</span><br><span class=\"line\"></span><br><span class=\"line\">Q：头文件必须是.h后缀吗？</span><br><span class=\"line\">A：不必，因为头文件只是其中的内容被#include宏命令替换，所以.txt、.doc等作为头文件的后缀都可以，但我们习惯用.h作为头文件后缀。</span><br><span class=\"line\"></span><br><span class=\"line\">Q：.c文件必须包含自己的.h文件吗？</span><br><span class=\"line\">A：不一定，在最初解释编译器工作原理的例子中add.c就可以不包含add.h文件，因为add.h中只是对add函数的声明，而add.c不需要这个声明也可以编译通过。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html\" target=\"_blank\" rel=\"noopener\">C语言中.h和.c文件解析（很精彩）</a><br><a href=\"https://community.arduboy.com/t/purpose-of-ifndef-and-define/3592/2\" target=\"_blank\" rel=\"noopener\">Purpose of #ifndef and #define</a></p>\n","site":{"data":{}},"excerpt":"<p>　　在进行多文件编程的时候，虽然很多IDE都可以帮我们完成预处理、编译、链接等过程，但深入理解编译器的这几个过程可以避免很多”undefined”，”undeclared”以及”redefined”的问题。而比较好的实践方式是自己写Makefile（IDE实际上完成的就是帮我们弄清文件依赖关系，然后生成一个Makefile，调用编译器去编译链接生成可执行文件）。</p>","more":"<h1 id=\"编译器工作原理\"><a href=\"#编译器工作原理\" class=\"headerlink\" title=\"编译器工作原理\"></a>编译器工作原理</h1><p>1.预处理阶段：<br>　　实际上是处理的是”define”，”include”等宏命令，进行宏替换。例如#include “xx.h”实际意思是把当前这一行删掉，把xx.h中的内容原封不动的插入在当前行位置。<br>2.编译阶段：<br>　　<strong>以.c文件为基本单位进行</strong>，也就是说如果项目中一个.c文件都没有，那么项目无法编译。这一阶段为所有.c文件中的变量、函数分配空间，并将各个全局变量、函数进行符号描述，编译、汇编成二进制码从而生成.o目标文件。<br>　　<strong>需要注意的是这个过程并不关心变量的具体定义和函数的具体实现，只要存在变量和函数的相关声明就可以使得编译通过。</strong>因为只要知道了变量/函数的类型和名字，编译器就知道了该如何使用这个变量/函数。<br>3.链接阶段:<br>　　<strong>以.o文件为基本单位进行</strong>，主要的工作是重定位各个目标文件的函数、变量。这个过程主要是为上一个编译过程中变量和函数的声明找到他们具体的定义和实现。</p>\n<p><em>下面是一个具体的解释例子：</em></p>\n<p>add.h文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ADD_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ADD_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>add.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"add.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"add.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = add(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.预处理阶段：编译器会把main.c和add.c中的<code>#include &quot;add.h&quot;</code>替换成add.h中的全部内容。<br>2.编译阶段：为main.c和add.c中的各变量和函数分配内存空间并汇编成目标文件。可以发现在main.c中并没有关于add函数的实现只有由<code>#include &quot;add.h&quot;</code>替换成的这个函数的声明，但这并不影响编译过程的进行。<br>3.链接阶段：经过编译后生成了main.o和add.o文件。因为main.o中用到了add函数但没有它的具体实现，所以编译器会去其它.o文件中寻找该函数的具体实现。在这个例子中add.o提供了add函数的具体实现，链接过程顺利进行，生成可执行文件。</p>\n<p><strong>Ps.关于add.h中#ifndef、#define和#endif的解释：</strong>它们的作用是防止头文件在一个.c文件中被重复包含。</p>\n<p><em>一个具体的例子：</em></p>\n<p>a.h文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>b.h文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>c.h文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>main.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"c.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    print(<span class=\"string\">\"hello\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　a.h中有结构体struct Node的定义，b.h和c.h都包含了a.h，main.c中又包含了b.h和c.h这两个头文件。这会导致a.h中的内容被两次复制到main.c中，产生struct Node的重复重复定义错误，而如果a.h遵循下面的格式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _A_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>　　那么a.h在main.c中只会被替换一次，这样就避免了头文件的重复包含。</p>\n<h1 id=\"h和-c文件解析\"><a href=\"#h和-c文件解析\" class=\"headerlink\" title=\".h和.c文件解析\"></a>.h和.c文件解析</h1><p>　　<strong>一般情况下我们在.h文件中进行变量、函数和宏的声明，在.c文件中进行变量和函数的具体实现。</strong><br>　　但这只是我们默认的一种规范的做法，实际上我们舍弃.h文件，在.c文件中包含变量、函数的声明以及实现也没有问题，但如果在其它.c文件中用#include去包含这个.c文件就会出现问题。</p>\n<p><em>具体例子：</em></p>\n<p>add.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"add.c\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = add(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　链接过程会出现add函数重复定义的错误，因为编译后生成的main.o和add.o中都含有add函数的具体实现。这种情况下可以对main.c做如下修改:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = add(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　这样编译后生成的main.o文件中便不再包含add函数的实现，而只包含声明。但是如果add.c中的函数很多，以及调用这些函数的.c文件也很多，这样在每个.c文件中手动挨个添加这些函数的声明会十分不方便，<strong>而可以理解为.h文件就是为了声明函数和变量方便而创建的</strong>，因为这样把所有的变量、函数声明都写在.h中，其它.c文件只需要#include相应的.h文件就好。</p>\n<h1 id=\"问答专区\"><a href=\"#问答专区\" class=\"headerlink\" title=\"问答专区\"></a>问答专区</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Q：ifndef后面的标识必须是_ADD_H这种头文件名大写加下划线的形式吗？</span><br><span class=\"line\">A：不必，你可以自定义，这只是一种习惯性写法，因为一个工程中头文件名是不会重复的，所以这样定义的话标识也不会重复。</span><br><span class=\"line\"></span><br><span class=\"line\">Q：工程中可以没有.h文件吗？</span><br><span class=\"line\">A：可以，只是如上所说这样会有很多不方便。</span><br><span class=\"line\"></span><br><span class=\"line\">Q：.h文件必须和相应的.c文件同名吗？</span><br><span class=\"line\">A：不必，但是通常我们都这样做，因为比较这样比较清晰。</span><br><span class=\"line\"></span><br><span class=\"line\">Q：头文件必须是.h后缀吗？</span><br><span class=\"line\">A：不必，因为头文件只是其中的内容被#include宏命令替换，所以.txt、.doc等作为头文件的后缀都可以，但我们习惯用.h作为头文件后缀。</span><br><span class=\"line\"></span><br><span class=\"line\">Q：.c文件必须包含自己的.h文件吗？</span><br><span class=\"line\">A：不一定，在最初解释编译器工作原理的例子中add.c就可以不包含add.h文件，因为add.h中只是对add函数的声明，而add.c不需要这个声明也可以编译通过。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html\" target=\"_blank\" rel=\"noopener\">C语言中.h和.c文件解析（很精彩）</a><br><a href=\"https://community.arduboy.com/t/purpose-of-ifndef-and-define/3592/2\" target=\"_blank\" rel=\"noopener\">Purpose of #ifndef and #define</a></p>"},{"title":"CodeForces-478C-Table Decorations","date":"2018-08-28T06:21:27.000Z","_content":"水题，然而自己WA了orz，看到了一种很有意思的解法。\n[参考连接](http://codeforces.com/blog/entry/18619)\n<!--more-->\n# 链接\n[CodeForces-478C-Table Decorations](http://codeforces.com/problemset/problem/478/C)\n# 题目描述\n给定红黄蓝三种气球的数量，要求每个桌子上放三个气球，且三个气球的颜色不能完全相同，求这些气球最多可以装饰几张桌子。\n# 题解\n假定三种气球的数量分别为``a[0]，a[1]，a[2]``，且已按大小排好序，``a[0] <= a[1] <= a[2]``。\n有两种情况:\n+ ``2 * (a[0] + a[1]) <=  a[2]``。这种情况下可以每取一个``a[0]``取两个``a[2]``组成三气球或者每取一个``a[1]``取两个``a[2]``组成三气球，即取球集合为``(1，0，2)``和``(0，1，2)``。答案为``a[0] + a[1]``。\n+ ``2*(a[0] + a[1]) > a[2]``。这种情况下我们从``a[2]``中取两个气球同时从``max(a[0]，a[1])``中取一个气球，直到``a[2] <= max(a[0]，a[1])``。这时满足``max(a[0]，a[1]) - a[2] <= 1``和``max(a[0]，a[1]) - min(a[0]，a[1]) <= 1``。接下来的按集合``(1，1，1)``继续取球。**可以发现这种取法最后剩余球的数量一定是** ``(a[0]+a[1]+a[2]) mod 3``，**除去剩余的这些球(数量小于3)，其它球每三个装饰一张桌子，所以针对这种情况我们直接可以用** ``(a[0]+a[1]+a[2]) div 3`` **来得到最终结果。**\n\n真是神解orz。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 28 Aug 14:12:13 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nlong long d[5];\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    for(int i = 0; i < 3; i++)\n        cin >> d[i];\n    sort(d, d + 3);\n    long long ans;\n    if(2 * (d[0] + d[1]) <= d[2])\n        ans = d[0] + d[1];\n    else \n        ans = (d[0] + d[1] + d[2]) / 3;\n    cout << ans << endl;\n    \n    return 0;\n}\n```\n","source":"_posts/CodeForces-478C.md","raw":"---\ntitle: CodeForces-478C-Table Decorations\ndate: 2018-08-28 14:21:27\ncategories:\n- ACM\n- 思维\ntags:\n- 思维\n---\n水题，然而自己WA了orz，看到了一种很有意思的解法。\n[参考连接](http://codeforces.com/blog/entry/18619)\n<!--more-->\n# 链接\n[CodeForces-478C-Table Decorations](http://codeforces.com/problemset/problem/478/C)\n# 题目描述\n给定红黄蓝三种气球的数量，要求每个桌子上放三个气球，且三个气球的颜色不能完全相同，求这些气球最多可以装饰几张桌子。\n# 题解\n假定三种气球的数量分别为``a[0]，a[1]，a[2]``，且已按大小排好序，``a[0] <= a[1] <= a[2]``。\n有两种情况:\n+ ``2 * (a[0] + a[1]) <=  a[2]``。这种情况下可以每取一个``a[0]``取两个``a[2]``组成三气球或者每取一个``a[1]``取两个``a[2]``组成三气球，即取球集合为``(1，0，2)``和``(0，1，2)``。答案为``a[0] + a[1]``。\n+ ``2*(a[0] + a[1]) > a[2]``。这种情况下我们从``a[2]``中取两个气球同时从``max(a[0]，a[1])``中取一个气球，直到``a[2] <= max(a[0]，a[1])``。这时满足``max(a[0]，a[1]) - a[2] <= 1``和``max(a[0]，a[1]) - min(a[0]，a[1]) <= 1``。接下来的按集合``(1，1，1)``继续取球。**可以发现这种取法最后剩余球的数量一定是** ``(a[0]+a[1]+a[2]) mod 3``，**除去剩余的这些球(数量小于3)，其它球每三个装饰一张桌子，所以针对这种情况我们直接可以用** ``(a[0]+a[1]+a[2]) div 3`` **来得到最终结果。**\n\n真是神解orz。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 28 Aug 14:12:13 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nlong long d[5];\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    for(int i = 0; i < 3; i++)\n        cin >> d[i];\n    sort(d, d + 3);\n    long long ans;\n    if(2 * (d[0] + d[1]) <= d[2])\n        ans = d[0] + d[1];\n    else \n        ans = (d[0] + d[1] + d[2]) / 3;\n    cout << ans << endl;\n    \n    return 0;\n}\n```\n","slug":"CodeForces-478C","published":1,"updated":"2019-08-20T14:55:36.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l6000730vnpo8404q7","content":"<p>水题，然而自己WA了orz，看到了一种很有意思的解法。<br><a href=\"http://codeforces.com/blog/entry/18619\" target=\"_blank\" rel=\"noopener\">参考连接</a></p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://codeforces.com/problemset/problem/478/C\" target=\"_blank\" rel=\"noopener\">CodeForces-478C-Table Decorations</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>给定红黄蓝三种气球的数量，要求每个桌子上放三个气球，且三个气球的颜色不能完全相同，求这些气球最多可以装饰几张桌子。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>假定三种气球的数量分别为<code>a[0]，a[1]，a[2]</code>，且已按大小排好序，<code>a[0] &lt;= a[1] &lt;= a[2]</code>。<br>有两种情况:</p>\n<ul>\n<li><code>2 * (a[0] + a[1]) &lt;=  a[2]</code>。这种情况下可以每取一个<code>a[0]</code>取两个<code>a[2]</code>组成三气球或者每取一个<code>a[1]</code>取两个<code>a[2]</code>组成三气球，即取球集合为<code>(1，0，2)</code>和<code>(0，1，2)</code>。答案为<code>a[0] + a[1]</code>。</li>\n<li><code>2*(a[0] + a[1]) &gt; a[2]</code>。这种情况下我们从<code>a[2]</code>中取两个气球同时从<code>max(a[0]，a[1])</code>中取一个气球，直到<code>a[2] &lt;= max(a[0]，a[1])</code>。这时满足<code>max(a[0]，a[1]) - a[2] &lt;= 1</code>和<code>max(a[0]，a[1]) - min(a[0]，a[1]) &lt;= 1</code>。接下来的按集合<code>(1，1，1)</code>继续取球。<strong>可以发现这种取法最后剩余球的数量一定是</strong> <code>(a[0]+a[1]+a[2]) mod 3</code>，<strong>除去剩余的这些球(数量小于3)，其它球每三个装饰一张桌子，所以针对这种情况我们直接可以用</strong> <code>(a[0]+a[1]+a[2]) div 3</code> <strong>来得到最终结果。</strong></li>\n</ul>\n<p>真是神解orz。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 28 Aug 14:12:13 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> d[<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">    sort(d, d + <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">2</span> * (d[<span class=\"number\">0</span>] + d[<span class=\"number\">1</span>]) &lt;= d[<span class=\"number\">2</span>])</span><br><span class=\"line\">        ans = d[<span class=\"number\">0</span>] + d[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        ans = (d[<span class=\"number\">0</span>] + d[<span class=\"number\">1</span>] + d[<span class=\"number\">2</span>]) / <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>水题，然而自己WA了orz，看到了一种很有意思的解法。<br><a href=\"http://codeforces.com/blog/entry/18619\" target=\"_blank\" rel=\"noopener\">参考连接</a></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://codeforces.com/problemset/problem/478/C\" target=\"_blank\" rel=\"noopener\">CodeForces-478C-Table Decorations</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>给定红黄蓝三种气球的数量，要求每个桌子上放三个气球，且三个气球的颜色不能完全相同，求这些气球最多可以装饰几张桌子。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>假定三种气球的数量分别为<code>a[0]，a[1]，a[2]</code>，且已按大小排好序，<code>a[0] &lt;= a[1] &lt;= a[2]</code>。<br>有两种情况:</p>\n<ul>\n<li><code>2 * (a[0] + a[1]) &lt;=  a[2]</code>。这种情况下可以每取一个<code>a[0]</code>取两个<code>a[2]</code>组成三气球或者每取一个<code>a[1]</code>取两个<code>a[2]</code>组成三气球，即取球集合为<code>(1，0，2)</code>和<code>(0，1，2)</code>。答案为<code>a[0] + a[1]</code>。</li>\n<li><code>2*(a[0] + a[1]) &gt; a[2]</code>。这种情况下我们从<code>a[2]</code>中取两个气球同时从<code>max(a[0]，a[1])</code>中取一个气球，直到<code>a[2] &lt;= max(a[0]，a[1])</code>。这时满足<code>max(a[0]，a[1]) - a[2] &lt;= 1</code>和<code>max(a[0]，a[1]) - min(a[0]，a[1]) &lt;= 1</code>。接下来的按集合<code>(1，1，1)</code>继续取球。<strong>可以发现这种取法最后剩余球的数量一定是</strong> <code>(a[0]+a[1]+a[2]) mod 3</code>，<strong>除去剩余的这些球(数量小于3)，其它球每三个装饰一张桌子，所以针对这种情况我们直接可以用</strong> <code>(a[0]+a[1]+a[2]) div 3</code> <strong>来得到最终结果。</strong></li>\n</ul>\n<p>真是神解orz。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 28 Aug 14:12:13 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> d[<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">    sort(d, d + <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">2</span> * (d[<span class=\"number\">0</span>] + d[<span class=\"number\">1</span>]) &lt;= d[<span class=\"number\">2</span>])</span><br><span class=\"line\">        ans = d[<span class=\"number\">0</span>] + d[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        ans = (d[<span class=\"number\">0</span>] + d[<span class=\"number\">1</span>] + d[<span class=\"number\">2</span>]) / <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Graph Theory-The shortest path","date":"2018-09-07T11:57:58.000Z","_content":"　　$Bellman-Ford、SPFA、Dijkstra$这些单源最短路算法自己一直都在用，但有时候只是需要的时候拿出来当板子敲上去，没有什么深刻的理解，今天花了一下午把这些算法的原理和一些细节基本搞通了，总结一下。\n<!--more-->\n　　$PS：Floyd-Warshall$多源最短路算法受限于自己对DP的理解，还没有完全搞明白= =，之后再来填坑。\n　　*Bellman-Ford代码、Dijkstra理解和代码部分参考自《挑战程序设计竞赛》。*\n\n# 限制和复杂度\n　　$Bellman-Ford$：不含负圈（可判断出）。运行时间：$O(|V|\\*|E|)$。\n　　$SPFA$：不含负圈（可判断出）。运行时间：$O(k\\*|E|)$，一般情况下$(k <<|V|)$，可以认为近似线性。\n　　$Dijkstra$：不含负权边。运行时间：$O(|E|\\*|log|V|)$（优先队列实现）\n# Bellman-Ford\n　　$Bellman-Ford$算法思想是更新所有的边，每条边都更新$|V|-1$次，由于多余的更新操作是无害的，所有算法可以求得最短路，但同时不可避免的有复杂度冗余的问题。\n　　先说一下为什么是更新$|V|-1$次：\n　　首先每一个节点$v$都有一条相对于起点$s$的最短路，因为最短路是简单路径不包含环（如果是负环，最短路不存在；如果是正环，去掉后变短；如果是零环，去掉后不变），所以节点总数为$|V|$的情况下最长的那条最短路的长度不会超过$|V|-1$，又因为每更新一次都必然会确定最短路径上的一条线段，所以最多只需要更新$|V|-1$次，反之，如果更新次数超过$|V|-1$次则说明图中有负环最短路不存在，可以利用这一点来判断图中是否有负环。\n关于“每更新一次都必然会确定最短路径上的一条线段“的进一步解释：\n\n![graph](/gra.png)\n\n　　以上图为例，假设上图中的最长的一条最短路为$A->F$的最短路\n\n![path](/path.png)\n\n　　从原点$A$开始出发，每次进行所有边的更新，第一次更新结束后$A->B$的最短路确定，第二次更新结束后$A->C$的最短路确定，以此类推四次后这条最长的最短路确定。因为这条最短路是最长的，所以在它确定时其它较短的最短路也肯定已经确定。所以在至多$|V|-1$次更新后$Bellman-Ford$算法可以找到任意一条最短路。\n\n$Bellman-Ford$代码：\n```C++\n//从顶点from指向顶点to的权值为cost的边\nstruct edge{\n    int from;\n    int to;\n    int cost;\n};\n\nedge es[MAX_E]; //边\n\nint d[MAX_V];   //最短距离\nint V, E;       //顶点数和边数\n\n//求解从顶点s出发到所有点的最短距离\nvoid short_path(int s){\n    fill(d, d + V, INF);\n    d[s] = 0;\n    while(true){\n        bool update = false;\n        for(int i = 0; i < E; i++){\n            edge e = es[i];\n            if(d[e.from] != INF && d[e.to] > d[e.from] + e.cost){\n                d[e.to] = d[e.from] + e.cost;\n                update = true;\n            }\n        }\n        if(!update) break;\n    }\n}\n```\n# SPFA\n　　$SPFA$算法可以用一句话概括：”只有被更新了的节点才有资格更新其它节点“。因为如果一个节点自身没有被更新的话，那用它更新与它相邻的其它节点也不会产生新的结果。它用队列来维护那些被更新了节点。值得注意的是虽然一般情况来说$SPFA$的复杂度接近线性，但它不稳定，可以构造出特殊的图使得SPFA的复杂度变为和$Bellman-Ford$一样。\n\n$SPFA$代码：\n```C++\nstruct edge{\n    int to;\n    int cost;\n};\n\nvector<edge> G[MAX_V];  //邻接表\n\nint d[MAX_V];\nbool vis[MAX_V];\n\nvoid spfa(int s) \n{\n    queue<int> q;\n    memset(vis, 0, sizeof(vis));\n    fill(d, d + V, INF);\n    d[s] = 0;\n    q.push(s);\n    vis[s] = true;\n    while (!q.empty()) \n    {\n        int v = q.front(); \n        q.pop(); \n        vis[v] = false;\n        for(int i = 0; i < G[v].size(); i++)\n        {\n            edge e = G[v][i];\n            if (d[e.to] > d[v] + e.cost) \n            {\n                d[e.to] = d[v] + e.cost;\n                if (!vis[e.to])\n                {\n                    vis[e.to] = true;\n                    q.push(e.to);\n                }\n            }\n        }\n    }\n}\n```\n# Dijkstra\n　　考虑没有负边的情况。在$Bellman-Ford$算法中，如果$d[i]$还不是最短距离的话，那么即使进行$d[j]=d[i]+l(i, j)$的更新，$d[j]$也不会变成最短距离。而且，即使$d[i]$没有变化，每一次循环也要检查一遍从$i$出发的所有边。这显然是很浪费时间的。因此可以对算法做如下修改：\n1. 找到最短距离已经确定的顶点，从它出发更新相邻的顶点的最短距离。\n2. 此后不需要再关心$1$中的”最短距离已经确定的顶点“。\n\n　　在$1$和$2$中提到的”最短距离已经确定的顶点“要怎么得到是问题的关键。在最开始时，只有起点的最短距离是确定的。而在尚未使用过的顶点中，距离$d[i]$最小的顶点就是已经确定的顶点。这是因为由于不存在负边，所以$d[i]$不会在之后的更新中变小。\n\n$Dijkstra$代码：\n```C++\nstruct edge{\n    int to;\n    int cost;\n};\ntypedef pair<int, int> P;\n\nint V;\nvector<edge> G[MAX_V];\nint d[MAX_V];\n\nvoid dijkstra(int s){\n    priority_queue<P, vector<P>, greater<P> > que;\n    fill(d, d + V, INF);\n    d[s] = 0;\n    que.push(P(0, s));\n\n    while(!que.empty()){\n        P p = que.top();\n        que.pop();\n        int v = p.second;\n        if(d[v] < p.first) continue;    //v点的距离已被更新为更小的值，队列中的值丢弃\n        for(int i = 0; i < G[v].size(); i++){\n            edge e = G[v][i];\n            if(d[e.to] > d[v] + e.cost){\n                d[e.to] = d[v] + e.cost;\n                que.push(P(d[e.to], e.to));\n            }\n        }\n    }\n}\n```\n","source":"_posts/Graph-Theory-The-shortest-path.md","raw":"---\ntitle: Graph Theory-The shortest path\ndate: 2018-09-07 19:57:58\ncategories:\n- Summary\ntags:\n- 图论\n---\n　　$Bellman-Ford、SPFA、Dijkstra$这些单源最短路算法自己一直都在用，但有时候只是需要的时候拿出来当板子敲上去，没有什么深刻的理解，今天花了一下午把这些算法的原理和一些细节基本搞通了，总结一下。\n<!--more-->\n　　$PS：Floyd-Warshall$多源最短路算法受限于自己对DP的理解，还没有完全搞明白= =，之后再来填坑。\n　　*Bellman-Ford代码、Dijkstra理解和代码部分参考自《挑战程序设计竞赛》。*\n\n# 限制和复杂度\n　　$Bellman-Ford$：不含负圈（可判断出）。运行时间：$O(|V|\\*|E|)$。\n　　$SPFA$：不含负圈（可判断出）。运行时间：$O(k\\*|E|)$，一般情况下$(k <<|V|)$，可以认为近似线性。\n　　$Dijkstra$：不含负权边。运行时间：$O(|E|\\*|log|V|)$（优先队列实现）\n# Bellman-Ford\n　　$Bellman-Ford$算法思想是更新所有的边，每条边都更新$|V|-1$次，由于多余的更新操作是无害的，所有算法可以求得最短路，但同时不可避免的有复杂度冗余的问题。\n　　先说一下为什么是更新$|V|-1$次：\n　　首先每一个节点$v$都有一条相对于起点$s$的最短路，因为最短路是简单路径不包含环（如果是负环，最短路不存在；如果是正环，去掉后变短；如果是零环，去掉后不变），所以节点总数为$|V|$的情况下最长的那条最短路的长度不会超过$|V|-1$，又因为每更新一次都必然会确定最短路径上的一条线段，所以最多只需要更新$|V|-1$次，反之，如果更新次数超过$|V|-1$次则说明图中有负环最短路不存在，可以利用这一点来判断图中是否有负环。\n关于“每更新一次都必然会确定最短路径上的一条线段“的进一步解释：\n\n![graph](/gra.png)\n\n　　以上图为例，假设上图中的最长的一条最短路为$A->F$的最短路\n\n![path](/path.png)\n\n　　从原点$A$开始出发，每次进行所有边的更新，第一次更新结束后$A->B$的最短路确定，第二次更新结束后$A->C$的最短路确定，以此类推四次后这条最长的最短路确定。因为这条最短路是最长的，所以在它确定时其它较短的最短路也肯定已经确定。所以在至多$|V|-1$次更新后$Bellman-Ford$算法可以找到任意一条最短路。\n\n$Bellman-Ford$代码：\n```C++\n//从顶点from指向顶点to的权值为cost的边\nstruct edge{\n    int from;\n    int to;\n    int cost;\n};\n\nedge es[MAX_E]; //边\n\nint d[MAX_V];   //最短距离\nint V, E;       //顶点数和边数\n\n//求解从顶点s出发到所有点的最短距离\nvoid short_path(int s){\n    fill(d, d + V, INF);\n    d[s] = 0;\n    while(true){\n        bool update = false;\n        for(int i = 0; i < E; i++){\n            edge e = es[i];\n            if(d[e.from] != INF && d[e.to] > d[e.from] + e.cost){\n                d[e.to] = d[e.from] + e.cost;\n                update = true;\n            }\n        }\n        if(!update) break;\n    }\n}\n```\n# SPFA\n　　$SPFA$算法可以用一句话概括：”只有被更新了的节点才有资格更新其它节点“。因为如果一个节点自身没有被更新的话，那用它更新与它相邻的其它节点也不会产生新的结果。它用队列来维护那些被更新了节点。值得注意的是虽然一般情况来说$SPFA$的复杂度接近线性，但它不稳定，可以构造出特殊的图使得SPFA的复杂度变为和$Bellman-Ford$一样。\n\n$SPFA$代码：\n```C++\nstruct edge{\n    int to;\n    int cost;\n};\n\nvector<edge> G[MAX_V];  //邻接表\n\nint d[MAX_V];\nbool vis[MAX_V];\n\nvoid spfa(int s) \n{\n    queue<int> q;\n    memset(vis, 0, sizeof(vis));\n    fill(d, d + V, INF);\n    d[s] = 0;\n    q.push(s);\n    vis[s] = true;\n    while (!q.empty()) \n    {\n        int v = q.front(); \n        q.pop(); \n        vis[v] = false;\n        for(int i = 0; i < G[v].size(); i++)\n        {\n            edge e = G[v][i];\n            if (d[e.to] > d[v] + e.cost) \n            {\n                d[e.to] = d[v] + e.cost;\n                if (!vis[e.to])\n                {\n                    vis[e.to] = true;\n                    q.push(e.to);\n                }\n            }\n        }\n    }\n}\n```\n# Dijkstra\n　　考虑没有负边的情况。在$Bellman-Ford$算法中，如果$d[i]$还不是最短距离的话，那么即使进行$d[j]=d[i]+l(i, j)$的更新，$d[j]$也不会变成最短距离。而且，即使$d[i]$没有变化，每一次循环也要检查一遍从$i$出发的所有边。这显然是很浪费时间的。因此可以对算法做如下修改：\n1. 找到最短距离已经确定的顶点，从它出发更新相邻的顶点的最短距离。\n2. 此后不需要再关心$1$中的”最短距离已经确定的顶点“。\n\n　　在$1$和$2$中提到的”最短距离已经确定的顶点“要怎么得到是问题的关键。在最开始时，只有起点的最短距离是确定的。而在尚未使用过的顶点中，距离$d[i]$最小的顶点就是已经确定的顶点。这是因为由于不存在负边，所以$d[i]$不会在之后的更新中变小。\n\n$Dijkstra$代码：\n```C++\nstruct edge{\n    int to;\n    int cost;\n};\ntypedef pair<int, int> P;\n\nint V;\nvector<edge> G[MAX_V];\nint d[MAX_V];\n\nvoid dijkstra(int s){\n    priority_queue<P, vector<P>, greater<P> > que;\n    fill(d, d + V, INF);\n    d[s] = 0;\n    que.push(P(0, s));\n\n    while(!que.empty()){\n        P p = que.top();\n        que.pop();\n        int v = p.second;\n        if(d[v] < p.first) continue;    //v点的距离已被更新为更小的值，队列中的值丢弃\n        for(int i = 0; i < G[v].size(); i++){\n            edge e = G[v][i];\n            if(d[e.to] > d[v] + e.cost){\n                d[e.to] = d[v] + e.cost;\n                que.push(P(d[e.to], e.to));\n            }\n        }\n    }\n}\n```\n","slug":"Graph-Theory-The-shortest-path","published":1,"updated":"2019-09-01T08:55:06.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l7000830vnh8tydej9","content":"<p>　　$Bellman-Ford、SPFA、Dijkstra$这些单源最短路算法自己一直都在用，但有时候只是需要的时候拿出来当板子敲上去，没有什么深刻的理解，今天花了一下午把这些算法的原理和一些细节基本搞通了，总结一下。</p>\n<a id=\"more\"></a>\n<p>　　$PS：Floyd-Warshall$多源最短路算法受限于自己对DP的理解，还没有完全搞明白= =，之后再来填坑。<br>　　<em>Bellman-Ford代码、Dijkstra理解和代码部分参考自《挑战程序设计竞赛》。</em></p>\n<h1 id=\"限制和复杂度\"><a href=\"#限制和复杂度\" class=\"headerlink\" title=\"限制和复杂度\"></a>限制和复杂度</h1><p>　　$Bellman-Ford$：不含负圈（可判断出）。运行时间：$O(|V|*|E|)$。<br>　　$SPFA$：不含负圈（可判断出）。运行时间：$O(k*|E|)$，一般情况下$(k &lt;&lt;|V|)$，可以认为近似线性。<br>　　$Dijkstra$：不含负权边。运行时间：$O(|E|*|log|V|)$（优先队列实现）</p>\n<h1 id=\"Bellman-Ford\"><a href=\"#Bellman-Ford\" class=\"headerlink\" title=\"Bellman-Ford\"></a>Bellman-Ford</h1><p>　　$Bellman-Ford$算法思想是更新所有的边，每条边都更新$|V|-1$次，由于多余的更新操作是无害的，所有算法可以求得最短路，但同时不可避免的有复杂度冗余的问题。<br>　　先说一下为什么是更新$|V|-1$次：<br>　　首先每一个节点$v$都有一条相对于起点$s$的最短路，因为最短路是简单路径不包含环（如果是负环，最短路不存在；如果是正环，去掉后变短；如果是零环，去掉后不变），所以节点总数为$|V|$的情况下最长的那条最短路的长度不会超过$|V|-1$，又因为每更新一次都必然会确定最短路径上的一条线段，所以最多只需要更新$|V|-1$次，反之，如果更新次数超过$|V|-1$次则说明图中有负环最短路不存在，可以利用这一点来判断图中是否有负环。<br>关于“每更新一次都必然会确定最短路径上的一条线段“的进一步解释：</p>\n<p><img src=\"/2018/09/07/Graph-Theory-The-shortest-path/gra.png\" alt=\"graph\"></p>\n<p>　　以上图为例，假设上图中的最长的一条最短路为$A-&gt;F$的最短路</p>\n<p><img src=\"/2018/09/07/Graph-Theory-The-shortest-path/path.png\" alt=\"path\"></p>\n<p>　　从原点$A$开始出发，每次进行所有边的更新，第一次更新结束后$A-&gt;B$的最短路确定，第二次更新结束后$A-&gt;C$的最短路确定，以此类推四次后这条最长的最短路确定。因为这条最短路是最长的，所以在它确定时其它较短的最短路也肯定已经确定。所以在至多$|V|-1$次更新后$Bellman-Ford$算法可以找到任意一条最短路。</p>\n<p>$Bellman-Ford$代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从顶点from指向顶点to的权值为cost的边</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> to;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edge es[MAX_E]; <span class=\"comment\">//边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];   <span class=\"comment\">//最短距离</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> V, E;       <span class=\"comment\">//顶点数和边数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求解从顶点s出发到所有点的最短距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">short_path</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    fill(d, d + V, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> update = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; E; i++)&#123;</span><br><span class=\"line\">            edge e = es[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[e.from] != INF &amp;&amp; d[e.to] &gt; d[e.from] + e.cost)&#123;</span><br><span class=\"line\">                d[e.to] = d[e.from] + e.cost;</span><br><span class=\"line\">                update = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!update) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h1><p>　　$SPFA$算法可以用一句话概括：”只有被更新了的节点才有资格更新其它节点“。因为如果一个节点自身没有被更新的话，那用它更新与它相邻的其它节点也不会产生新的结果。它用队列来维护那些被更新了节点。值得注意的是虽然一般情况来说$SPFA$的复杂度接近线性，但它不稳定，可以构造出特殊的图使得SPFA的复杂度变为和$Bellman-Ford$一样。</p>\n<p>$SPFA$代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;edge&gt; G[MAX_V];  <span class=\"comment\">//邻接表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[MAX_V];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    fill(d, d + V, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = q.front(); </span><br><span class=\"line\">        q.pop(); </span><br><span class=\"line\">        vis[v] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[v].size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            edge e = G[v][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[e.to] &gt; d[v] + e.cost) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[e.to] = d[v] + e.cost;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[e.to])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    vis[e.to] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    q.push(e.to);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dijkstra\"><a href=\"#Dijkstra\" class=\"headerlink\" title=\"Dijkstra\"></a>Dijkstra</h1><p>　　考虑没有负边的情况。在$Bellman-Ford$算法中，如果$d[i]$还不是最短距离的话，那么即使进行$d[j]=d[i]+l(i, j)$的更新，$d[j]$也不会变成最短距离。而且，即使$d[i]$没有变化，每一次循环也要检查一遍从$i$出发的所有边。这显然是很浪费时间的。因此可以对算法做如下修改：</p>\n<ol>\n<li>找到最短距离已经确定的顶点，从它出发更新相邻的顶点的最短距离。</li>\n<li>此后不需要再关心$1$中的”最短距离已经确定的顶点“。</li>\n</ol>\n<p>　　在$1$和$2$中提到的”最短距离已经确定的顶点“要怎么得到是问题的关键。在最开始时，只有起点的最短距离是确定的。而在尚未使用过的顶点中，距离$d[i]$最小的顶点就是已经确定的顶点。这是因为由于不存在负边，所以$d[i]$不会在之后的更新中变小。</p>\n<p>$Dijkstra$代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> V;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;edge&gt; G[MAX_V];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;P, <span class=\"built_in\">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; que;</span><br><span class=\"line\">    fill(d, d + V, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(P(<span class=\"number\">0</span>, s));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        P p = que.top();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[v] &lt; p.first) <span class=\"keyword\">continue</span>;    <span class=\"comment\">//v点的距离已被更新为更小的值，队列中的值丢弃</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[v].size(); i++)&#123;</span><br><span class=\"line\">            edge e = G[v][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[e.to] &gt; d[v] + e.cost)&#123;</span><br><span class=\"line\">                d[e.to] = d[v] + e.cost;</span><br><span class=\"line\">                que.push(P(d[e.to], e.to));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>　　$Bellman-Ford、SPFA、Dijkstra$这些单源最短路算法自己一直都在用，但有时候只是需要的时候拿出来当板子敲上去，没有什么深刻的理解，今天花了一下午把这些算法的原理和一些细节基本搞通了，总结一下。</p>","more":"<p>　　$PS：Floyd-Warshall$多源最短路算法受限于自己对DP的理解，还没有完全搞明白= =，之后再来填坑。<br>　　<em>Bellman-Ford代码、Dijkstra理解和代码部分参考自《挑战程序设计竞赛》。</em></p>\n<h1 id=\"限制和复杂度\"><a href=\"#限制和复杂度\" class=\"headerlink\" title=\"限制和复杂度\"></a>限制和复杂度</h1><p>　　$Bellman-Ford$：不含负圈（可判断出）。运行时间：$O(|V|*|E|)$。<br>　　$SPFA$：不含负圈（可判断出）。运行时间：$O(k*|E|)$，一般情况下$(k &lt;&lt;|V|)$，可以认为近似线性。<br>　　$Dijkstra$：不含负权边。运行时间：$O(|E|*|log|V|)$（优先队列实现）</p>\n<h1 id=\"Bellman-Ford\"><a href=\"#Bellman-Ford\" class=\"headerlink\" title=\"Bellman-Ford\"></a>Bellman-Ford</h1><p>　　$Bellman-Ford$算法思想是更新所有的边，每条边都更新$|V|-1$次，由于多余的更新操作是无害的，所有算法可以求得最短路，但同时不可避免的有复杂度冗余的问题。<br>　　先说一下为什么是更新$|V|-1$次：<br>　　首先每一个节点$v$都有一条相对于起点$s$的最短路，因为最短路是简单路径不包含环（如果是负环，最短路不存在；如果是正环，去掉后变短；如果是零环，去掉后不变），所以节点总数为$|V|$的情况下最长的那条最短路的长度不会超过$|V|-1$，又因为每更新一次都必然会确定最短路径上的一条线段，所以最多只需要更新$|V|-1$次，反之，如果更新次数超过$|V|-1$次则说明图中有负环最短路不存在，可以利用这一点来判断图中是否有负环。<br>关于“每更新一次都必然会确定最短路径上的一条线段“的进一步解释：</p>\n<p><img src=\"/2018/09/07/Graph-Theory-The-shortest-path/gra.png\" alt=\"graph\"></p>\n<p>　　以上图为例，假设上图中的最长的一条最短路为$A-&gt;F$的最短路</p>\n<p><img src=\"/2018/09/07/Graph-Theory-The-shortest-path/path.png\" alt=\"path\"></p>\n<p>　　从原点$A$开始出发，每次进行所有边的更新，第一次更新结束后$A-&gt;B$的最短路确定，第二次更新结束后$A-&gt;C$的最短路确定，以此类推四次后这条最长的最短路确定。因为这条最短路是最长的，所以在它确定时其它较短的最短路也肯定已经确定。所以在至多$|V|-1$次更新后$Bellman-Ford$算法可以找到任意一条最短路。</p>\n<p>$Bellman-Ford$代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从顶点from指向顶点to的权值为cost的边</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> to;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edge es[MAX_E]; <span class=\"comment\">//边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];   <span class=\"comment\">//最短距离</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> V, E;       <span class=\"comment\">//顶点数和边数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求解从顶点s出发到所有点的最短距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">short_path</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    fill(d, d + V, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> update = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; E; i++)&#123;</span><br><span class=\"line\">            edge e = es[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[e.from] != INF &amp;&amp; d[e.to] &gt; d[e.from] + e.cost)&#123;</span><br><span class=\"line\">                d[e.to] = d[e.from] + e.cost;</span><br><span class=\"line\">                update = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!update) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h1><p>　　$SPFA$算法可以用一句话概括：”只有被更新了的节点才有资格更新其它节点“。因为如果一个节点自身没有被更新的话，那用它更新与它相邻的其它节点也不会产生新的结果。它用队列来维护那些被更新了节点。值得注意的是虽然一般情况来说$SPFA$的复杂度接近线性，但它不稳定，可以构造出特殊的图使得SPFA的复杂度变为和$Bellman-Ford$一样。</p>\n<p>$SPFA$代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;edge&gt; G[MAX_V];  <span class=\"comment\">//邻接表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[MAX_V];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    fill(d, d + V, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = q.front(); </span><br><span class=\"line\">        q.pop(); </span><br><span class=\"line\">        vis[v] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[v].size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            edge e = G[v][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[e.to] &gt; d[v] + e.cost) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[e.to] = d[v] + e.cost;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[e.to])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    vis[e.to] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    q.push(e.to);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dijkstra\"><a href=\"#Dijkstra\" class=\"headerlink\" title=\"Dijkstra\"></a>Dijkstra</h1><p>　　考虑没有负边的情况。在$Bellman-Ford$算法中，如果$d[i]$还不是最短距离的话，那么即使进行$d[j]=d[i]+l(i, j)$的更新，$d[j]$也不会变成最短距离。而且，即使$d[i]$没有变化，每一次循环也要检查一遍从$i$出发的所有边。这显然是很浪费时间的。因此可以对算法做如下修改：</p>\n<ol>\n<li>找到最短距离已经确定的顶点，从它出发更新相邻的顶点的最短距离。</li>\n<li>此后不需要再关心$1$中的”最短距离已经确定的顶点“。</li>\n</ol>\n<p>　　在$1$和$2$中提到的”最短距离已经确定的顶点“要怎么得到是问题的关键。在最开始时，只有起点的最短距离是确定的。而在尚未使用过的顶点中，距离$d[i]$最小的顶点就是已经确定的顶点。这是因为由于不存在负边，所以$d[i]$不会在之后的更新中变小。</p>\n<p>$Dijkstra$代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> V;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;edge&gt; G[MAX_V];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;P, <span class=\"built_in\">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; que;</span><br><span class=\"line\">    fill(d, d + V, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(P(<span class=\"number\">0</span>, s));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        P p = que.top();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[v] &lt; p.first) <span class=\"keyword\">continue</span>;    <span class=\"comment\">//v点的距离已被更新为更小的值，队列中的值丢弃</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[v].size(); i++)&#123;</span><br><span class=\"line\">            edge e = G[v][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[e.to] &gt; d[v] + e.cost)&#123;</span><br><span class=\"line\">                d[e.to] = d[v] + e.cost;</span><br><span class=\"line\">                que.push(P(d[e.to], e.to));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Good Bye 2018","date":"2018-12-31T02:54:31.000Z","_content":"　　2018要结束了，做一个总结吧。\n　　2018这一年真的发生了很多事，1月份和女票在一起，5月份到西安参加ACM-ICPC邀请赛，9月份保研北航成功。2018年可以说是我目前为止最不迷茫的一年，因为我找到了目标，真正喜欢想去实现的目标，很多事情也因为它而改变了。\n<!--more-->\n　　很喜欢网易云上看到的一个评论，\n{% centerquote %}\n黄色的树林里分出两条路\n我选择了人迹更少的一条\n从此决定了我一生的道路\n{% endcenterquote %}\n　　ACM之于我大概就是这种感觉吧，从一开始的锻炼编程能力为目的，到现在喜欢上它带给我的愉悦。我想这才是我真正的“进步”吧。昨天参加了Codeforces2018年的最后一场比赛[Good Bye 2018](https://codeforces.com/contest/1091)，才突然意识到原来自己接触ACM已经将近一年了，感谢这一年的陪伴。我希望自己能够继续坚持下去，享受它带给我的快乐，获得由此而带来的进步，并继续在这片田地默默耕耘下去。","source":"_posts/Good-Bye-2018.md","raw":"---\ntitle: Good Bye 2018\ndate: 2018-12-31 10:54:31\ncategories:\n- Diary\ntags:\n---\n　　2018要结束了，做一个总结吧。\n　　2018这一年真的发生了很多事，1月份和女票在一起，5月份到西安参加ACM-ICPC邀请赛，9月份保研北航成功。2018年可以说是我目前为止最不迷茫的一年，因为我找到了目标，真正喜欢想去实现的目标，很多事情也因为它而改变了。\n<!--more-->\n　　很喜欢网易云上看到的一个评论，\n{% centerquote %}\n黄色的树林里分出两条路\n我选择了人迹更少的一条\n从此决定了我一生的道路\n{% endcenterquote %}\n　　ACM之于我大概就是这种感觉吧，从一开始的锻炼编程能力为目的，到现在喜欢上它带给我的愉悦。我想这才是我真正的“进步”吧。昨天参加了Codeforces2018年的最后一场比赛[Good Bye 2018](https://codeforces.com/contest/1091)，才突然意识到原来自己接触ACM已经将近一年了，感谢这一年的陪伴。我希望自己能够继续坚持下去，享受它带给我的快乐，获得由此而带来的进步，并继续在这片田地默默耕耘下去。","slug":"Good-Bye-2018","published":1,"updated":"2019-09-01T08:53:21.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l8000930vn1scyuwor","content":"<p>　　2018要结束了，做一个总结吧。<br>　　2018这一年真的发生了很多事，1月份和女票在一起，5月份到西安参加ACM-ICPC邀请赛，9月份保研北航成功。2018年可以说是我目前为止最不迷茫的一年，因为我找到了目标，真正喜欢想去实现的目标，很多事情也因为它而改变了。</p>\n<a id=\"more\"></a>\n<p>　　很喜欢网易云上看到的一个评论，</p>\n<blockquote class=\"blockquote-center\"><p>黄色的树林里分出两条路<br>我选择了人迹更少的一条<br>从此决定了我一生的道路</p>\n</blockquote>\n<p>　　ACM之于我大概就是这种感觉吧，从一开始的锻炼编程能力为目的，到现在喜欢上它带给我的愉悦。我想这才是我真正的“进步”吧。昨天参加了Codeforces2018年的最后一场比赛<a href=\"https://codeforces.com/contest/1091\" target=\"_blank\" rel=\"noopener\">Good Bye 2018</a>，才突然意识到原来自己接触ACM已经将近一年了，感谢这一年的陪伴。我希望自己能够继续坚持下去，享受它带给我的快乐，获得由此而带来的进步，并继续在这片田地默默耕耘下去。</p>\n","site":{"data":{}},"excerpt":"<p>　　2018要结束了，做一个总结吧。<br>　　2018这一年真的发生了很多事，1月份和女票在一起，5月份到西安参加ACM-ICPC邀请赛，9月份保研北航成功。2018年可以说是我目前为止最不迷茫的一年，因为我找到了目标，真正喜欢想去实现的目标，很多事情也因为它而改变了。</p>","more":"<p>　　很喜欢网易云上看到的一个评论，</p>\n<blockquote class=\"blockquote-center\"><p>黄色的树林里分出两条路<br>我选择了人迹更少的一条<br>从此决定了我一生的道路</p>\n</blockquote>\n<p>　　ACM之于我大概就是这种感觉吧，从一开始的锻炼编程能力为目的，到现在喜欢上它带给我的愉悦。我想这才是我真正的“进步”吧。昨天参加了Codeforces2018年的最后一场比赛<a href=\"https://codeforces.com/contest/1091\" target=\"_blank\" rel=\"noopener\">Good Bye 2018</a>，才突然意识到原来自己接触ACM已经将近一年了，感谢这一年的陪伴。我希望自己能够继续坚持下去，享受它带给我的快乐，获得由此而带来的进步，并继续在这片田地默默耕耘下去。</p>"},{"title":"HDU1016-Prime Ring Problem-DFS","date":"2018-08-12T15:16:27.000Z","_content":"渐渐对深搜类的题有了自信, 虽然还只能做一些简单的题, 但是感觉还不错٩('ω')و .\n题目描述：由$1-n$这$n$个自然数组成一个环,要求任意相邻两数之和为素数, 按顺序输出这些数.\n<!-- more -->\n# 链接\n[HDU1016-Prime Ring Problem](http://acm.hdu.edu.cn/showproblem.php?pid=1016)\n# 原题\nA ring is compose of $n$ circles as shown in diagram. Put natural number $1, 2,...,n$ into each circle separately, and the sum of numbers in two adjacent circles should be a prime.\nNote: the number of first circle should always be 1.\n![example](/dfs.png)\n# 题解\nDFS遍历每一种情况.\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 12 Aug 22:10:25 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 30;\nint n;\nvector<int> vec;\nbool vis[maxn];\n\nvoid ans_print(){\n    int cnt = 1;\n    for(auto x : vec){\n        if(cnt == 1) cout << x;\n        else cout << \" \" << x;\n        cnt++;\n    }\n    cout << endl;\n}\n\nbool is_prime(int x){\n    if(x < 2) return false;\n    int tmp = sqrt(x);\n    for(int i = 2; i <= tmp; i++){\n        if(!(x % i)) return false;\n    }\n    return true;\n}\n\nvoid dfs(int dep){\n    if(dep == n - 1){\n        for(int i = 2; i <= n; i++){\n            if(!vis[i] && is_prime(i + vec[dep - 1]) && is_prime(i + 1)){\n                vec.push_back(i);\n                ans_print();\n                vec.pop_back();\n            }\n        }\n        return;\n    }\n    for(int i = 2; i <= n; i++){\n        if(!vis[i] && is_prime(i + vec[dep - 1])){\n            vec.push_back(i);\n            vis[i] = 1;\n            dfs(dep + 1);\n            vec.pop_back();\n            vis[i] = 0;\n        }\n    }\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int cnt = 1;\n    while(cin >> n){\n        vec.clear();\n        memset(vis, 0, sizeof(0));\n        printf(\"Case %d:\\n\", cnt++);\n        vec.push_back(1);\n        vis[1] = 1;\n        dfs(1);\n        cout << endl;\n    }\n    \n    return 0;\n}\n```\n","source":"_posts/HDU1016-Prime-Ring-Problem-DFS.md","raw":"---\ntitle: HDU1016-Prime Ring Problem-DFS\ndate: 2018-08-12 23:16:27\ncategories:\n- ACM\n- DFS\ntags:\n- DFS\n---\n渐渐对深搜类的题有了自信, 虽然还只能做一些简单的题, 但是感觉还不错٩('ω')و .\n题目描述：由$1-n$这$n$个自然数组成一个环,要求任意相邻两数之和为素数, 按顺序输出这些数.\n<!-- more -->\n# 链接\n[HDU1016-Prime Ring Problem](http://acm.hdu.edu.cn/showproblem.php?pid=1016)\n# 原题\nA ring is compose of $n$ circles as shown in diagram. Put natural number $1, 2,...,n$ into each circle separately, and the sum of numbers in two adjacent circles should be a prime.\nNote: the number of first circle should always be 1.\n![example](/dfs.png)\n# 题解\nDFS遍历每一种情况.\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 12 Aug 22:10:25 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 30;\nint n;\nvector<int> vec;\nbool vis[maxn];\n\nvoid ans_print(){\n    int cnt = 1;\n    for(auto x : vec){\n        if(cnt == 1) cout << x;\n        else cout << \" \" << x;\n        cnt++;\n    }\n    cout << endl;\n}\n\nbool is_prime(int x){\n    if(x < 2) return false;\n    int tmp = sqrt(x);\n    for(int i = 2; i <= tmp; i++){\n        if(!(x % i)) return false;\n    }\n    return true;\n}\n\nvoid dfs(int dep){\n    if(dep == n - 1){\n        for(int i = 2; i <= n; i++){\n            if(!vis[i] && is_prime(i + vec[dep - 1]) && is_prime(i + 1)){\n                vec.push_back(i);\n                ans_print();\n                vec.pop_back();\n            }\n        }\n        return;\n    }\n    for(int i = 2; i <= n; i++){\n        if(!vis[i] && is_prime(i + vec[dep - 1])){\n            vec.push_back(i);\n            vis[i] = 1;\n            dfs(dep + 1);\n            vec.pop_back();\n            vis[i] = 0;\n        }\n    }\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int cnt = 1;\n    while(cin >> n){\n        vec.clear();\n        memset(vis, 0, sizeof(0));\n        printf(\"Case %d:\\n\", cnt++);\n        vec.push_back(1);\n        vis[1] = 1;\n        dfs(1);\n        cout << endl;\n    }\n    \n    return 0;\n}\n```\n","slug":"HDU1016-Prime-Ring-Problem-DFS","published":1,"updated":"2019-08-20T14:54:12.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l8000a30vn81kkefm0","content":"<p>渐渐对深搜类的题有了自信, 虽然还只能做一些简单的题, 但是感觉还不错٩(‘ω’)و .<br>题目描述：由$1-n$这$n$个自然数组成一个环,要求任意相邻两数之和为素数, 按顺序输出这些数.</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1016\" target=\"_blank\" rel=\"noopener\">HDU1016-Prime Ring Problem</a></p>\n<h1 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a>原题</h1><p>A ring is compose of $n$ circles as shown in diagram. Put natural number $1, 2,…,n$ into each circle separately, and the sum of numbers in two adjacent circles should be a prime.<br>Note: the number of first circle should always be 1.<br><img src=\"/2018/08/12/HDU1016-Prime-Ring-Problem-DFS/dfs.png\" alt=\"example\"></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>DFS遍历每一种情况.</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 12 Aug 22:10:25 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ans_print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt == <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"built_in\">sqrt</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= tmp; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(x % i)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep == n - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vis[i] &amp;&amp; is_prime(i + vec[dep - <span class=\"number\">1</span>]) &amp;&amp; is_prime(i + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                vec.push_back(i);</span><br><span class=\"line\">                ans_print();</span><br><span class=\"line\">                vec.pop_back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i] &amp;&amp; is_prime(i + vec[dep - <span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">            vec.push_back(i);</span><br><span class=\"line\">            vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(dep + <span class=\"number\">1</span>);</span><br><span class=\"line\">            vec.pop_back();</span><br><span class=\"line\">            vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case %d:\\n\"</span>, cnt++);</span><br><span class=\"line\">        vec.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        vis[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>渐渐对深搜类的题有了自信, 虽然还只能做一些简单的题, 但是感觉还不错٩(‘ω’)و .<br>题目描述：由$1-n$这$n$个自然数组成一个环,要求任意相邻两数之和为素数, 按顺序输出这些数.</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1016\" target=\"_blank\" rel=\"noopener\">HDU1016-Prime Ring Problem</a></p>\n<h1 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a>原题</h1><p>A ring is compose of $n$ circles as shown in diagram. Put natural number $1, 2,…,n$ into each circle separately, and the sum of numbers in two adjacent circles should be a prime.<br>Note: the number of first circle should always be 1.<br><img src=\"/2018/08/12/HDU1016-Prime-Ring-Problem-DFS/dfs.png\" alt=\"example\"></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>DFS遍历每一种情况.</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 12 Aug 22:10:25 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ans_print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt == <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"built_in\">sqrt</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= tmp; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(x % i)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep == n - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vis[i] &amp;&amp; is_prime(i + vec[dep - <span class=\"number\">1</span>]) &amp;&amp; is_prime(i + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                vec.push_back(i);</span><br><span class=\"line\">                ans_print();</span><br><span class=\"line\">                vec.pop_back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i] &amp;&amp; is_prime(i + vec[dep - <span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">            vec.push_back(i);</span><br><span class=\"line\">            vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(dep + <span class=\"number\">1</span>);</span><br><span class=\"line\">            vec.pop_back();</span><br><span class=\"line\">            vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case %d:\\n\"</span>, cnt++);</span><br><span class=\"line\">        vec.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        vis[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"HDU2050-线切割平面问题-思维+简单dp","date":"2018-04-09T02:42:54.000Z","_content":"和队友一块做这道题，队友们几乎秒杀，而自己想了很久也没有推导出一个清晰的规律...看了[vinacky的线切割平面问题](https://blog.csdn.net/vinacky/article/details/8958326)这篇博客后才豁然开朗,个人感觉一道很好的思维题。\n题目描述就是求n条折线可以分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成七部分。\n![example](/line.jpg)\n<!-- more -->\n# 链接\n[HDU2050](http://acm.hdu.edu.cn/showproblem.php?pid=2050)\n# 题解\n## 直线切割平面\n首先考虑向平面添加直线(简化思维)后的平面分割情况：\n(下面假设新添加的直线与已有直线均相交)\n当平面上没有直线时，有一个平面；\n有１条直线时，没有节点，多出１部分，共２个平面；\n有２条直线时，多了１个节点，多出２部分，共４个平面；\n有３条直线时，多了２个节点，多出３部分，共７个平面；\n...\n至此我们便可以直观的思考一下是什么导致了平面的分割，当添加第i条直线时，因为我们总可以使它和前i-1条直线都相交，所以共有i-1个交点，也即第i条直线被分割成了i段，对每一段来说，它都将自己所在的平面重新分割为两部分。所以添加了第i条直线后，最多可以重新多分割出i个平面。\n所以原始的１个平面,\n添加１条直线后平面数为1+1;\n添加２条直线后平面数为1+1+2;\n添加３条直线后平面数为1+1+2+3；\n...\n得到添加n条直线后的平面数公式：$res = 1 + 1 + 2 + 3 + ... + n = \\frac{n(n+1)}{2} + 1$\n## V型折线切割平面\nV型折线切割平面可以看做同时添加了两条相交直线，但是稍有不同的是，这两条直线的交点有一侧平面合并了,因此而产生的影响是减少了两个平面。\n\n我们仍然可以保证添加的折线与其他折线均有交点，所以添加第i条V型折线时，增加的平面数为：$2\\*i - 1 + 2\\*i - 2$\n得到添加n条折线后的平面数公式：$$res = 1 + (1 + 2) + (3 + 4) + ... + (2n - 1 + 2n) = \\frac{2n(2n + 1)}{2} + 1 - 2n$$\n于是可以公式直接求解，也可以dp求解\n# 代码\n下面给出dp求解代码\n``` C++\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n\nusing namespace std;\nconst int maxn = 1e4 + 7;\nint n;\nlong long dp[maxn] = {1, 2, 7};\n\nint main(){\n    int c;\n    scanf(\"%d\", &c);\n    while(c--){\n    scanf(\"%d\", &n);\n        for(int i = 3; i <= n; i++){\n            dp[i] = dp[i - 1] + ２ * i - 1 + 2 * i - 2;\n        }\n        printf(\"%lld\\n\", dp[n]);\n        \n    }\n    return 0;\n\n}\n```","source":"_posts/HDU2050.md","raw":"---\ntitle: HDU2050-线切割平面问题-思维+简单dp\ndate: 2018-04-09 10:42:54\ncategories:\n- ACM\n- 思维\ntags:\n- HDU\n- 线切割平面\n- math\n- 思维\n---\n和队友一块做这道题，队友们几乎秒杀，而自己想了很久也没有推导出一个清晰的规律...看了[vinacky的线切割平面问题](https://blog.csdn.net/vinacky/article/details/8958326)这篇博客后才豁然开朗,个人感觉一道很好的思维题。\n题目描述就是求n条折线可以分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成七部分。\n![example](/line.jpg)\n<!-- more -->\n# 链接\n[HDU2050](http://acm.hdu.edu.cn/showproblem.php?pid=2050)\n# 题解\n## 直线切割平面\n首先考虑向平面添加直线(简化思维)后的平面分割情况：\n(下面假设新添加的直线与已有直线均相交)\n当平面上没有直线时，有一个平面；\n有１条直线时，没有节点，多出１部分，共２个平面；\n有２条直线时，多了１个节点，多出２部分，共４个平面；\n有３条直线时，多了２个节点，多出３部分，共７个平面；\n...\n至此我们便可以直观的思考一下是什么导致了平面的分割，当添加第i条直线时，因为我们总可以使它和前i-1条直线都相交，所以共有i-1个交点，也即第i条直线被分割成了i段，对每一段来说，它都将自己所在的平面重新分割为两部分。所以添加了第i条直线后，最多可以重新多分割出i个平面。\n所以原始的１个平面,\n添加１条直线后平面数为1+1;\n添加２条直线后平面数为1+1+2;\n添加３条直线后平面数为1+1+2+3；\n...\n得到添加n条直线后的平面数公式：$res = 1 + 1 + 2 + 3 + ... + n = \\frac{n(n+1)}{2} + 1$\n## V型折线切割平面\nV型折线切割平面可以看做同时添加了两条相交直线，但是稍有不同的是，这两条直线的交点有一侧平面合并了,因此而产生的影响是减少了两个平面。\n\n我们仍然可以保证添加的折线与其他折线均有交点，所以添加第i条V型折线时，增加的平面数为：$2\\*i - 1 + 2\\*i - 2$\n得到添加n条折线后的平面数公式：$$res = 1 + (1 + 2) + (3 + 4) + ... + (2n - 1 + 2n) = \\frac{2n(2n + 1)}{2} + 1 - 2n$$\n于是可以公式直接求解，也可以dp求解\n# 代码\n下面给出dp求解代码\n``` C++\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n\nusing namespace std;\nconst int maxn = 1e4 + 7;\nint n;\nlong long dp[maxn] = {1, 2, 7};\n\nint main(){\n    int c;\n    scanf(\"%d\", &c);\n    while(c--){\n    scanf(\"%d\", &n);\n        for(int i = 3; i <= n; i++){\n            dp[i] = dp[i - 1] + ２ * i - 1 + 2 * i - 2;\n        }\n        printf(\"%lld\\n\", dp[n]);\n        \n    }\n    return 0;\n\n}\n```","slug":"HDU2050","published":1,"updated":"2019-08-20T14:53:51.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2l9000b30vn4lmqupus","content":"<p>和队友一块做这道题，队友们几乎秒杀，而自己想了很久也没有推导出一个清晰的规律…看了<a href=\"https://blog.csdn.net/vinacky/article/details/8958326\" target=\"_blank\" rel=\"noopener\">vinacky的线切割平面问题</a>这篇博客后才豁然开朗,个人感觉一道很好的思维题。<br>题目描述就是求n条折线可以分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成七部分。<br><img src=\"/2018/04/09/HDU2050/line.jpg\" alt=\"example\"></p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2050\" target=\"_blank\" rel=\"noopener\">HDU2050</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><h2 id=\"直线切割平面\"><a href=\"#直线切割平面\" class=\"headerlink\" title=\"直线切割平面\"></a>直线切割平面</h2><p>首先考虑向平面添加直线(简化思维)后的平面分割情况：<br>(下面假设新添加的直线与已有直线均相交)<br>当平面上没有直线时，有一个平面；<br>有１条直线时，没有节点，多出１部分，共２个平面；<br>有２条直线时，多了１个节点，多出２部分，共４个平面；<br>有３条直线时，多了２个节点，多出３部分，共７个平面；<br>…<br>至此我们便可以直观的思考一下是什么导致了平面的分割，当添加第i条直线时，因为我们总可以使它和前i-1条直线都相交，所以共有i-1个交点，也即第i条直线被分割成了i段，对每一段来说，它都将自己所在的平面重新分割为两部分。所以添加了第i条直线后，最多可以重新多分割出i个平面。<br>所以原始的１个平面,<br>添加１条直线后平面数为1+1;<br>添加２条直线后平面数为1+1+2;<br>添加３条直线后平面数为1+1+2+3；<br>…<br>得到添加n条直线后的平面数公式：$res = 1 + 1 + 2 + 3 + … + n = \\frac{n(n+1)}{2} + 1$</p>\n<h2 id=\"V型折线切割平面\"><a href=\"#V型折线切割平面\" class=\"headerlink\" title=\"V型折线切割平面\"></a>V型折线切割平面</h2><p>V型折线切割平面可以看做同时添加了两条相交直线，但是稍有不同的是，这两条直线的交点有一侧平面合并了,因此而产生的影响是减少了两个平面。</p>\n<p>我们仍然可以保证添加的折线与其他折线均有交点，所以添加第i条V型折线时，增加的平面数为：$2*i - 1 + 2*i - 2$<br>得到添加n条折线后的平面数公式：$$res = 1 + (1 + 2) + (3 + 4) + … + (2n - 1 + 2n) = \\frac{2n(2n + 1)}{2} + 1 - 2n$$<br>于是可以公式直接求解，也可以dp求解</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>下面给出dp求解代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[maxn] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c--)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + ２ * i - <span class=\"number\">1</span> + <span class=\"number\">2</span> * i - <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, dp[n]);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>和队友一块做这道题，队友们几乎秒杀，而自己想了很久也没有推导出一个清晰的规律…看了<a href=\"https://blog.csdn.net/vinacky/article/details/8958326\" target=\"_blank\" rel=\"noopener\">vinacky的线切割平面问题</a>这篇博客后才豁然开朗,个人感觉一道很好的思维题。<br>题目描述就是求n条折线可以分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成七部分。<br><img src=\"/2018/04/09/HDU2050/line.jpg\" alt=\"example\"></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2050\" target=\"_blank\" rel=\"noopener\">HDU2050</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><h2 id=\"直线切割平面\"><a href=\"#直线切割平面\" class=\"headerlink\" title=\"直线切割平面\"></a>直线切割平面</h2><p>首先考虑向平面添加直线(简化思维)后的平面分割情况：<br>(下面假设新添加的直线与已有直线均相交)<br>当平面上没有直线时，有一个平面；<br>有１条直线时，没有节点，多出１部分，共２个平面；<br>有２条直线时，多了１个节点，多出２部分，共４个平面；<br>有３条直线时，多了２个节点，多出３部分，共７个平面；<br>…<br>至此我们便可以直观的思考一下是什么导致了平面的分割，当添加第i条直线时，因为我们总可以使它和前i-1条直线都相交，所以共有i-1个交点，也即第i条直线被分割成了i段，对每一段来说，它都将自己所在的平面重新分割为两部分。所以添加了第i条直线后，最多可以重新多分割出i个平面。<br>所以原始的１个平面,<br>添加１条直线后平面数为1+1;<br>添加２条直线后平面数为1+1+2;<br>添加３条直线后平面数为1+1+2+3；<br>…<br>得到添加n条直线后的平面数公式：$res = 1 + 1 + 2 + 3 + … + n = \\frac{n(n+1)}{2} + 1$</p>\n<h2 id=\"V型折线切割平面\"><a href=\"#V型折线切割平面\" class=\"headerlink\" title=\"V型折线切割平面\"></a>V型折线切割平面</h2><p>V型折线切割平面可以看做同时添加了两条相交直线，但是稍有不同的是，这两条直线的交点有一侧平面合并了,因此而产生的影响是减少了两个平面。</p>\n<p>我们仍然可以保证添加的折线与其他折线均有交点，所以添加第i条V型折线时，增加的平面数为：$2*i - 1 + 2*i - 2$<br>得到添加n条折线后的平面数公式：$$res = 1 + (1 + 2) + (3 + 4) + … + (2n - 1 + 2n) = \\frac{2n(2n + 1)}{2} + 1 - 2n$$<br>于是可以公式直接求解，也可以dp求解</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>下面给出dp求解代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[maxn] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c--)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + ２ * i - <span class=\"number\">1</span> + <span class=\"number\">2</span> * i - <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, dp[n]);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"HDU4856-Tunnels-BFS+状态压缩DP","date":"2018-05-16T06:03:19.000Z","_content":"最近的几场训练赛做题的时候发现自己对搜索类、动态规划类的题有些恐惧，导致这些类型的题比赛时基本做不出来。仔细想了一下，是自己的递归部分理解的就不够透彻，导致搜索写不出来，动态规划就更无从下手。之前也找了很多递归理解的文章去看，也做了一些递归的题，但是效果不佳。意识到网上的资料对于递归的理解一般会拿经典的斐波那契数列或汉诺塔来举例，这对于递归的理解确实是有帮助的，但是对于锻炼搜索思维的效果不是太有效，于是决定先恶补一部分搜索类的题。\n这道题是准备西安邀请赛时打的模拟赛做到的题，知识点主要用到了BFS和状态压缩DP，可以当做旅行商问题来做，但是最后不返回起点。由于自己DP比较差，所以搞懂这道题还是花了挺长时间。状态压缩DP部分的实现代码参考大白。\n\nPs：在最后会贴几个自己觉得看到的对递归和动态规划理解比较有帮助的文章链接。\n<!-- more -->\n# 题目链接\n[HDU4856-Tunnels](http://acm.hdu.edu.cn/showproblem.php?pid=4856)\n# 题目描述\n一张城市网格图，城市中有m条快速通道，可以从图中任意位置出发，求访问完所有快速通道所用的最少时间，忽略在快速通道内的时间。\n# 题解\n因为在快速通道内的时间是不计的所以只要到达了一个快速通道的入口就相当于访问完了这一条通道，所以可以构造一张$m×m$的邻接表，其中$d[i][j]$表示从第$i$个通道的出口到第$j$个通道的入口的距离，这一部分直接用BFS就能实现，接下来就可以用旅行商问题的解法求解不重复的访问完所有通道所用的时间。\n有两个与旅行商问题不同需要注意的地方：\n**最后不返回起点**\n**起点位置任意，也就是可以将任意一个通道的入口作为起点**\n解决方法详见代码。\n#代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 18;\nconst int maxm = 18;\nconst int inf = 0x3f3f3f3f;\nchar mp[maxn][maxn];\ntypedef pair<int, int> P;\nP in[maxm];\nP out[maxm];\nint n, m;\nint d[maxn][maxn];\nint sx, sy;\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nint dis[maxm][maxm];\nint dp[1 <<  maxm][maxm];\n\n//状态压缩DP\nvoid dpsolve(){\n    for(int S = 0; S < 1 << m; S++){\n        fill(dp[S], dp[S] + m, inf);\n    }\n    for(int i = 0; i < m; i++){\n        dp[(1 << m) - 1][i] = 0;//因为起点未定，所以终点在任意一个通道都可以\n    }\n    for(int S = (1 << m) - 2; S >= 0; S--){\n        for(int v = 0; v < m; v++){\n            for(int u = 0; u < m; u++){\n                if(!(S >> u & 1)){\n                    dp[S][v] = min(dp[S][v], dp[S | 1 << u][u] + dis[v][u]);\n                }\n            }\n        }\n    }\n    int res = inf;\n    for(int i = 0; i < m; i++){\n        res = min(res, dp[1 << i][i]);//判断以不同通道为起点的情况下，哪种用时最短\n    }\n    if(res == inf) printf(\"%d\\n\", -1);\n    else printf(\"%d\\n\", res);\n}\n\n//bfs搜索确定两两通道之间最小距离\nvoid bfs(int sx, int sy){\n    queue<P> que;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            d[i][j] = inf;\n        }\n    }\n    d[sx][sy] = 0;\n    que.push(P(sx, sy));\n\n    while(!que.empty()){\n        P p = que.front();\n        que.pop();\n        for(int i = 0; i < 4; i++){\n            int nx = p.first + dx[i];\n            int ny = p.second + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < n && mp[nx][ny] != '#' && d[nx][ny] == inf){\n\n                d[nx][ny] = d[p.first][p.second] + 1;\n                que.push(P(nx, ny));\n            }\n        }\n\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif // ONLINE_JUDGE\n    while(~scanf(\"%d%d\", &n, &m)){\n        for(int i = 0; i < n; i++){\n            scanf(\"%s\", mp[i]);\n        }\n        for(int i = 0; i < m; i++){\n            scanf(\"%d%d%d%d\", &in[i].first, &in[i].second, &out[i].first, &out[i].second);\n        }\n        //构建邻接表\n        for(int i = 0; i < m; i++){\n            bfs(out[i].first - 1, out[i].second - 1);\n            for(int j = 0; j < m; j++){\n                if(i == j) dis[i][j] = 0;\n                else dis[i][j] = d[in[j].first - 1][in[j].second - 1];\n            }\n        }\n\n        dpsolve();\n    }\n    return 0;\n}\n```\n# 关于递归、动态规划理解的文章链接\n[写递归函数的正确思维方法](https://blog.csdn.net/vagrxie/article/details/8470798)\n[递归算法详解](https://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/)\n[怎么更好地终极理解递归算法](https://blog.csdn.net/StruggleShu/article/details/51051140)\n[如何有效地理解程序中的递归](https://blog.csdn.net/qq_34773981/article/details/79225588)\n\n[一道题看清动态规划的前世今生（一）](http://www.importnew.com/27323.html)\n[一道题看清动态规划的前世今生（二）](http://www.importnew.com/27444.html)\n\n最后对这些文章的博主表示感谢！\n","source":"_posts/HDU4856-Tunnels.md","raw":"---\ntitle: HDU4856-Tunnels-BFS+状态压缩DP\ndate: 2018-05-16 14:03:19\ncategories:\n- ACM\n- 动态规划\ntags:\n- HDU\n- 状态压缩DP\n- BFS\n---\n最近的几场训练赛做题的时候发现自己对搜索类、动态规划类的题有些恐惧，导致这些类型的题比赛时基本做不出来。仔细想了一下，是自己的递归部分理解的就不够透彻，导致搜索写不出来，动态规划就更无从下手。之前也找了很多递归理解的文章去看，也做了一些递归的题，但是效果不佳。意识到网上的资料对于递归的理解一般会拿经典的斐波那契数列或汉诺塔来举例，这对于递归的理解确实是有帮助的，但是对于锻炼搜索思维的效果不是太有效，于是决定先恶补一部分搜索类的题。\n这道题是准备西安邀请赛时打的模拟赛做到的题，知识点主要用到了BFS和状态压缩DP，可以当做旅行商问题来做，但是最后不返回起点。由于自己DP比较差，所以搞懂这道题还是花了挺长时间。状态压缩DP部分的实现代码参考大白。\n\nPs：在最后会贴几个自己觉得看到的对递归和动态规划理解比较有帮助的文章链接。\n<!-- more -->\n# 题目链接\n[HDU4856-Tunnels](http://acm.hdu.edu.cn/showproblem.php?pid=4856)\n# 题目描述\n一张城市网格图，城市中有m条快速通道，可以从图中任意位置出发，求访问完所有快速通道所用的最少时间，忽略在快速通道内的时间。\n# 题解\n因为在快速通道内的时间是不计的所以只要到达了一个快速通道的入口就相当于访问完了这一条通道，所以可以构造一张$m×m$的邻接表，其中$d[i][j]$表示从第$i$个通道的出口到第$j$个通道的入口的距离，这一部分直接用BFS就能实现，接下来就可以用旅行商问题的解法求解不重复的访问完所有通道所用的时间。\n有两个与旅行商问题不同需要注意的地方：\n**最后不返回起点**\n**起点位置任意，也就是可以将任意一个通道的入口作为起点**\n解决方法详见代码。\n#代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 18;\nconst int maxm = 18;\nconst int inf = 0x3f3f3f3f;\nchar mp[maxn][maxn];\ntypedef pair<int, int> P;\nP in[maxm];\nP out[maxm];\nint n, m;\nint d[maxn][maxn];\nint sx, sy;\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nint dis[maxm][maxm];\nint dp[1 <<  maxm][maxm];\n\n//状态压缩DP\nvoid dpsolve(){\n    for(int S = 0; S < 1 << m; S++){\n        fill(dp[S], dp[S] + m, inf);\n    }\n    for(int i = 0; i < m; i++){\n        dp[(1 << m) - 1][i] = 0;//因为起点未定，所以终点在任意一个通道都可以\n    }\n    for(int S = (1 << m) - 2; S >= 0; S--){\n        for(int v = 0; v < m; v++){\n            for(int u = 0; u < m; u++){\n                if(!(S >> u & 1)){\n                    dp[S][v] = min(dp[S][v], dp[S | 1 << u][u] + dis[v][u]);\n                }\n            }\n        }\n    }\n    int res = inf;\n    for(int i = 0; i < m; i++){\n        res = min(res, dp[1 << i][i]);//判断以不同通道为起点的情况下，哪种用时最短\n    }\n    if(res == inf) printf(\"%d\\n\", -1);\n    else printf(\"%d\\n\", res);\n}\n\n//bfs搜索确定两两通道之间最小距离\nvoid bfs(int sx, int sy){\n    queue<P> que;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            d[i][j] = inf;\n        }\n    }\n    d[sx][sy] = 0;\n    que.push(P(sx, sy));\n\n    while(!que.empty()){\n        P p = que.front();\n        que.pop();\n        for(int i = 0; i < 4; i++){\n            int nx = p.first + dx[i];\n            int ny = p.second + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < n && mp[nx][ny] != '#' && d[nx][ny] == inf){\n\n                d[nx][ny] = d[p.first][p.second] + 1;\n                que.push(P(nx, ny));\n            }\n        }\n\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif // ONLINE_JUDGE\n    while(~scanf(\"%d%d\", &n, &m)){\n        for(int i = 0; i < n; i++){\n            scanf(\"%s\", mp[i]);\n        }\n        for(int i = 0; i < m; i++){\n            scanf(\"%d%d%d%d\", &in[i].first, &in[i].second, &out[i].first, &out[i].second);\n        }\n        //构建邻接表\n        for(int i = 0; i < m; i++){\n            bfs(out[i].first - 1, out[i].second - 1);\n            for(int j = 0; j < m; j++){\n                if(i == j) dis[i][j] = 0;\n                else dis[i][j] = d[in[j].first - 1][in[j].second - 1];\n            }\n        }\n\n        dpsolve();\n    }\n    return 0;\n}\n```\n# 关于递归、动态规划理解的文章链接\n[写递归函数的正确思维方法](https://blog.csdn.net/vagrxie/article/details/8470798)\n[递归算法详解](https://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/)\n[怎么更好地终极理解递归算法](https://blog.csdn.net/StruggleShu/article/details/51051140)\n[如何有效地理解程序中的递归](https://blog.csdn.net/qq_34773981/article/details/79225588)\n\n[一道题看清动态规划的前世今生（一）](http://www.importnew.com/27323.html)\n[一道题看清动态规划的前世今生（二）](http://www.importnew.com/27444.html)\n\n最后对这些文章的博主表示感谢！\n","slug":"HDU4856-Tunnels","published":1,"updated":"2019-08-20T14:53:41.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2la000c30vn9luu2jtv","content":"<p>最近的几场训练赛做题的时候发现自己对搜索类、动态规划类的题有些恐惧，导致这些类型的题比赛时基本做不出来。仔细想了一下，是自己的递归部分理解的就不够透彻，导致搜索写不出来，动态规划就更无从下手。之前也找了很多递归理解的文章去看，也做了一些递归的题，但是效果不佳。意识到网上的资料对于递归的理解一般会拿经典的斐波那契数列或汉诺塔来举例，这对于递归的理解确实是有帮助的，但是对于锻炼搜索思维的效果不是太有效，于是决定先恶补一部分搜索类的题。<br>这道题是准备西安邀请赛时打的模拟赛做到的题，知识点主要用到了BFS和状态压缩DP，可以当做旅行商问题来做，但是最后不返回起点。由于自己DP比较差，所以搞懂这道题还是花了挺长时间。状态压缩DP部分的实现代码参考大白。</p>\n<p>Ps：在最后会贴几个自己觉得看到的对递归和动态规划理解比较有帮助的文章链接。</p>\n<a id=\"more\"></a>\n<h1 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4856\" target=\"_blank\" rel=\"noopener\">HDU4856-Tunnels</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>一张城市网格图，城市中有m条快速通道，可以从图中任意位置出发，求访问完所有快速通道所用的最少时间，忽略在快速通道内的时间。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>因为在快速通道内的时间是不计的所以只要到达了一个快速通道的入口就相当于访问完了这一条通道，所以可以构造一张$m×m$的邻接表，其中$d[i][j]$表示从第$i$个通道的出口到第$j$个通道的入口的距离，这一部分直接用BFS就能实现，接下来就可以用旅行商问题的解法求解不重复的访问完所有通道所用的时间。<br>有两个与旅行商问题不同需要注意的地方：<br><strong>最后不返回起点</strong><br><strong>起点位置任意，也就是可以将任意一个通道的入口作为起点</strong><br>解决方法详见代码。</p>\n<p>#代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\">P in[maxm];</span><br><span class=\"line\">P out[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sx, sy;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxm][maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span> &lt;&lt;  maxm][maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//状态压缩DP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dpsolve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> S = <span class=\"number\">0</span>; S &lt; <span class=\"number\">1</span> &lt;&lt; m; S++)&#123;</span><br><span class=\"line\">        fill(dp[S], dp[S] + m, inf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[(<span class=\"number\">1</span> &lt;&lt; m) - <span class=\"number\">1</span>][i] = <span class=\"number\">0</span>;<span class=\"comment\">//因为起点未定，所以终点在任意一个通道都可以</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> S = (<span class=\"number\">1</span> &lt;&lt; m) - <span class=\"number\">2</span>; S &gt;= <span class=\"number\">0</span>; S--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; m; v++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>; u &lt; m; u++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!(S &gt;&gt; u &amp; <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    dp[S][v] = min(dp[S][v], dp[S | <span class=\"number\">1</span> &lt;&lt; u][u] + dis[v][u]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = inf;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        res = min(res, dp[<span class=\"number\">1</span> &lt;&lt; i][i]);<span class=\"comment\">//判断以不同通道为起点的情况下，哪种用时最短</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res == inf) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bfs搜索确定两两通道之间最小距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> sx, <span class=\"keyword\">int</span> sy)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;P&gt; que;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            d[i][j] = inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[sx][sy] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(P(sx, sy));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        P p = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = p.first + dx[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = p.second + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; mp[nx][ny] != <span class=\"string\">'#'</span> &amp;&amp; d[nx][ny] == inf)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                d[nx][ny] = d[p.first][p.second] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.push(P(nx, ny));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// ONLINE_JUDGE</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, mp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;in[i].first, &amp;in[i].second, &amp;out[i].first, &amp;out[i].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//构建邻接表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            bfs(out[i].first - <span class=\"number\">1</span>, out[i].second - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) dis[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> dis[i][j] = d[in[j].first - <span class=\"number\">1</span>][in[j].second - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dpsolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"关于递归、动态规划理解的文章链接\"><a href=\"#关于递归、动态规划理解的文章链接\" class=\"headerlink\" title=\"关于递归、动态规划理解的文章链接\"></a>关于递归、动态规划理解的文章链接</h1><p><a href=\"https://blog.csdn.net/vagrxie/article/details/8470798\" target=\"_blank\" rel=\"noopener\">写递归函数的正确思维方法</a><br><a href=\"https://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/\" target=\"_blank\" rel=\"noopener\">递归算法详解</a><br><a href=\"https://blog.csdn.net/StruggleShu/article/details/51051140\" target=\"_blank\" rel=\"noopener\">怎么更好地终极理解递归算法</a><br><a href=\"https://blog.csdn.net/qq_34773981/article/details/79225588\" target=\"_blank\" rel=\"noopener\">如何有效地理解程序中的递归</a></p>\n<p><a href=\"http://www.importnew.com/27323.html\" target=\"_blank\" rel=\"noopener\">一道题看清动态规划的前世今生（一）</a><br><a href=\"http://www.importnew.com/27444.html\" target=\"_blank\" rel=\"noopener\">一道题看清动态规划的前世今生（二）</a></p>\n<p>最后对这些文章的博主表示感谢！</p>\n","site":{"data":{}},"excerpt":"<p>最近的几场训练赛做题的时候发现自己对搜索类、动态规划类的题有些恐惧，导致这些类型的题比赛时基本做不出来。仔细想了一下，是自己的递归部分理解的就不够透彻，导致搜索写不出来，动态规划就更无从下手。之前也找了很多递归理解的文章去看，也做了一些递归的题，但是效果不佳。意识到网上的资料对于递归的理解一般会拿经典的斐波那契数列或汉诺塔来举例，这对于递归的理解确实是有帮助的，但是对于锻炼搜索思维的效果不是太有效，于是决定先恶补一部分搜索类的题。<br>这道题是准备西安邀请赛时打的模拟赛做到的题，知识点主要用到了BFS和状态压缩DP，可以当做旅行商问题来做，但是最后不返回起点。由于自己DP比较差，所以搞懂这道题还是花了挺长时间。状态压缩DP部分的实现代码参考大白。</p>\n<p>Ps：在最后会贴几个自己觉得看到的对递归和动态规划理解比较有帮助的文章链接。</p>","more":"<h1 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4856\" target=\"_blank\" rel=\"noopener\">HDU4856-Tunnels</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>一张城市网格图，城市中有m条快速通道，可以从图中任意位置出发，求访问完所有快速通道所用的最少时间，忽略在快速通道内的时间。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>因为在快速通道内的时间是不计的所以只要到达了一个快速通道的入口就相当于访问完了这一条通道，所以可以构造一张$m×m$的邻接表，其中$d[i][j]$表示从第$i$个通道的出口到第$j$个通道的入口的距离，这一部分直接用BFS就能实现，接下来就可以用旅行商问题的解法求解不重复的访问完所有通道所用的时间。<br>有两个与旅行商问题不同需要注意的地方：<br><strong>最后不返回起点</strong><br><strong>起点位置任意，也就是可以将任意一个通道的入口作为起点</strong><br>解决方法详见代码。</p>\n<p>#代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\">P in[maxm];</span><br><span class=\"line\">P out[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sx, sy;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxm][maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span> &lt;&lt;  maxm][maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//状态压缩DP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dpsolve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> S = <span class=\"number\">0</span>; S &lt; <span class=\"number\">1</span> &lt;&lt; m; S++)&#123;</span><br><span class=\"line\">        fill(dp[S], dp[S] + m, inf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[(<span class=\"number\">1</span> &lt;&lt; m) - <span class=\"number\">1</span>][i] = <span class=\"number\">0</span>;<span class=\"comment\">//因为起点未定，所以终点在任意一个通道都可以</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> S = (<span class=\"number\">1</span> &lt;&lt; m) - <span class=\"number\">2</span>; S &gt;= <span class=\"number\">0</span>; S--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; m; v++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>; u &lt; m; u++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!(S &gt;&gt; u &amp; <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    dp[S][v] = min(dp[S][v], dp[S | <span class=\"number\">1</span> &lt;&lt; u][u] + dis[v][u]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = inf;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        res = min(res, dp[<span class=\"number\">1</span> &lt;&lt; i][i]);<span class=\"comment\">//判断以不同通道为起点的情况下，哪种用时最短</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res == inf) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bfs搜索确定两两通道之间最小距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> sx, <span class=\"keyword\">int</span> sy)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;P&gt; que;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            d[i][j] = inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[sx][sy] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(P(sx, sy));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        P p = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = p.first + dx[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = p.second + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; mp[nx][ny] != <span class=\"string\">'#'</span> &amp;&amp; d[nx][ny] == inf)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                d[nx][ny] = d[p.first][p.second] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.push(P(nx, ny));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// ONLINE_JUDGE</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, mp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;in[i].first, &amp;in[i].second, &amp;out[i].first, &amp;out[i].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//构建邻接表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            bfs(out[i].first - <span class=\"number\">1</span>, out[i].second - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) dis[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> dis[i][j] = d[in[j].first - <span class=\"number\">1</span>][in[j].second - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dpsolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"关于递归、动态规划理解的文章链接\"><a href=\"#关于递归、动态规划理解的文章链接\" class=\"headerlink\" title=\"关于递归、动态规划理解的文章链接\"></a>关于递归、动态规划理解的文章链接</h1><p><a href=\"https://blog.csdn.net/vagrxie/article/details/8470798\" target=\"_blank\" rel=\"noopener\">写递归函数的正确思维方法</a><br><a href=\"https://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/\" target=\"_blank\" rel=\"noopener\">递归算法详解</a><br><a href=\"https://blog.csdn.net/StruggleShu/article/details/51051140\" target=\"_blank\" rel=\"noopener\">怎么更好地终极理解递归算法</a><br><a href=\"https://blog.csdn.net/qq_34773981/article/details/79225588\" target=\"_blank\" rel=\"noopener\">如何有效地理解程序中的递归</a></p>\n<p><a href=\"http://www.importnew.com/27323.html\" target=\"_blank\" rel=\"noopener\">一道题看清动态规划的前世今生（一）</a><br><a href=\"http://www.importnew.com/27444.html\" target=\"_blank\" rel=\"noopener\">一道题看清动态规划的前世今生（二）</a></p>\n<p>最后对这些文章的博主表示感谢！</p>"},{"title":"hdu-5092","date":"2018-06-05T12:28:06.000Z","_content":"","source":"_posts/HDU5092.md","raw":"---\ntitle: hdu-5092\ndate: 2018-06-05 20:28:06\ncategories:\ntags:\n---\n","slug":"HDU5092","published":1,"updated":"2019-08-20T13:05:23.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lb000d30vnfqwpog8d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Learn CMake(1)--HelloWorld","date":"2019-04-02T08:38:14.000Z","_content":"之前的博客[C语言编译器工作原理以及.h和.c文件解析](https://ain-crad.github.io/2018/12/02/C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A-h%E5%92%8C-c%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/)中比较详细的介绍了编译器的工作原理，以及它是如何处理多文件编译问题的。但是在工程项目比较庞大以及需要链接外部库的时候，手动编写Makefile往往比较繁琐，一个比较好的解决方式是使用CMake工具自动生成工程项目的Makefile。\n<!--more-->\n# CMake介绍\nCMake是一个开源的跨平台自动化构建系统。它可以产生不同系统平台的构建文件(e.g., 类Unix系统的Makefile，Window系统的.vcproj)。可以方便的用于工程项目的管理。\n\n*大部分内容来自[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)*\n\n# CMake 安装(Ubuntu)\n```bash\n$ sudo apt-get install cmake    //install CMake\n$ cmake -version    //check version of CMake\n```\n\n# The Hello World Example\n首先创建一个HelloWorld.cpp文件，包含以下代码:\n```c++\n#include <iostream>\n\nint main(int argc, char *argv[]){\n    std::cout << \"Hello World!\" << std::endl;\n    return 0;\n}\n```\n在相同目录下创建一个CMakeLists.txt文件(存放CMake命令的标准文件)，包含一下内容:\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld)\nadd_executable(hello HelloWorld.cpp)\n```\nCMakeLists.txt中包含三行：\n- 第一行的``cmake_minimum_required()``命令指定了该工程的最小CMake版本，设置为自己系统中的CMake版本即可。\n- 第二行的``project()``命令设置了工程的名字。\n- 第三行的``add_executable()``命令，第一个参数为生成的可执行文件的名字，第二个参数指定需要编译的源文件。两个参数之间用空格隔开。\n\n接下来在CMakeLists.txt同一目录下执行以下命令：\n```bash\n$ cmake .\n```\n\".\"表示当前目录。\n\n执行完毕后，在同一目录下会生成一些文件，最重要的是生成了Makefile文件，接下来用make命令来编译链接以生成可执行文件：\n```bash\n$ make\n```\n之后会在同一目录下生成``hello``可执行文件，运行：\n```bash\n$ ./hello\n```\n会在终端中打印出以下信息：\n```\nHello World!\n```\n\n# 补充\n执行``cmake .``命令后我们发现多出的一些文件会使得整个工程看起来比较混乱，而我们只需要用到其中的Makefile文件。所以比较推荐的做法是，在同一目录下新建一个``build``文件夹用来存放cmake命令之后产生的文件，而当我们不需要这些文件的时候只需要将build文件夹下的文件删除。下面是具体的命令：\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n```\n清除cmake文件\n```bash\n$ sudo rm -rf build/*\n```\n\n# 总结\n虽然只编译一个HelloWorld.cpp我们完全没有必要使用CMake，但我们通过这个例子解释了CMake的一些基本操作，可以用于后面更复杂的例子。\n\n# 参考链接\n[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)\n[Jermmy's Lazy Blog--cmake学习笔记](http://jermmy.xyz/2017/04/25/2017-4-25-learn-cmake-1/)","source":"_posts/Learn-CMake-1-HelloWorld.md","raw":"---\ntitle: Learn CMake(1)--HelloWorld\ndate: 2019-04-02 16:38:14\ncategories:\n- Summary\ntags:\n- CMake\n---\n之前的博客[C语言编译器工作原理以及.h和.c文件解析](https://ain-crad.github.io/2018/12/02/C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A-h%E5%92%8C-c%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/)中比较详细的介绍了编译器的工作原理，以及它是如何处理多文件编译问题的。但是在工程项目比较庞大以及需要链接外部库的时候，手动编写Makefile往往比较繁琐，一个比较好的解决方式是使用CMake工具自动生成工程项目的Makefile。\n<!--more-->\n# CMake介绍\nCMake是一个开源的跨平台自动化构建系统。它可以产生不同系统平台的构建文件(e.g., 类Unix系统的Makefile，Window系统的.vcproj)。可以方便的用于工程项目的管理。\n\n*大部分内容来自[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)*\n\n# CMake 安装(Ubuntu)\n```bash\n$ sudo apt-get install cmake    //install CMake\n$ cmake -version    //check version of CMake\n```\n\n# The Hello World Example\n首先创建一个HelloWorld.cpp文件，包含以下代码:\n```c++\n#include <iostream>\n\nint main(int argc, char *argv[]){\n    std::cout << \"Hello World!\" << std::endl;\n    return 0;\n}\n```\n在相同目录下创建一个CMakeLists.txt文件(存放CMake命令的标准文件)，包含一下内容:\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld)\nadd_executable(hello HelloWorld.cpp)\n```\nCMakeLists.txt中包含三行：\n- 第一行的``cmake_minimum_required()``命令指定了该工程的最小CMake版本，设置为自己系统中的CMake版本即可。\n- 第二行的``project()``命令设置了工程的名字。\n- 第三行的``add_executable()``命令，第一个参数为生成的可执行文件的名字，第二个参数指定需要编译的源文件。两个参数之间用空格隔开。\n\n接下来在CMakeLists.txt同一目录下执行以下命令：\n```bash\n$ cmake .\n```\n\".\"表示当前目录。\n\n执行完毕后，在同一目录下会生成一些文件，最重要的是生成了Makefile文件，接下来用make命令来编译链接以生成可执行文件：\n```bash\n$ make\n```\n之后会在同一目录下生成``hello``可执行文件，运行：\n```bash\n$ ./hello\n```\n会在终端中打印出以下信息：\n```\nHello World!\n```\n\n# 补充\n执行``cmake .``命令后我们发现多出的一些文件会使得整个工程看起来比较混乱，而我们只需要用到其中的Makefile文件。所以比较推荐的做法是，在同一目录下新建一个``build``文件夹用来存放cmake命令之后产生的文件，而当我们不需要这些文件的时候只需要将build文件夹下的文件删除。下面是具体的命令：\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n```\n清除cmake文件\n```bash\n$ sudo rm -rf build/*\n```\n\n# 总结\n虽然只编译一个HelloWorld.cpp我们完全没有必要使用CMake，但我们通过这个例子解释了CMake的一些基本操作，可以用于后面更复杂的例子。\n\n# 参考链接\n[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)\n[Jermmy's Lazy Blog--cmake学习笔记](http://jermmy.xyz/2017/04/25/2017-4-25-learn-cmake-1/)","slug":"Learn-CMake-1-HelloWorld","published":1,"updated":"2019-08-20T14:52:54.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lb000e30vndokiv9pv","content":"<p>之前的博客<a href=\"https://ain-crad.github.io/2018/12/02/C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A-h%E5%92%8C-c%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">C语言编译器工作原理以及.h和.c文件解析</a>中比较详细的介绍了编译器的工作原理，以及它是如何处理多文件编译问题的。但是在工程项目比较庞大以及需要链接外部库的时候，手动编写Makefile往往比较繁琐，一个比较好的解决方式是使用CMake工具自动生成工程项目的Makefile。</p>\n<a id=\"more\"></a>\n<h1 id=\"CMake介绍\"><a href=\"#CMake介绍\" class=\"headerlink\" title=\"CMake介绍\"></a>CMake介绍</h1><p>CMake是一个开源的跨平台自动化构建系统。它可以产生不同系统平台的构建文件(e.g., 类Unix系统的Makefile，Window系统的.vcproj)。可以方便的用于工程项目的管理。</p>\n<p><em>大部分内容来自<a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a></em></p>\n<h1 id=\"CMake-安装-Ubuntu\"><a href=\"#CMake-安装-Ubuntu\" class=\"headerlink\" title=\"CMake 安装(Ubuntu)\"></a>CMake 安装(Ubuntu)</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install cmake    //install CMake</span><br><span class=\"line\">$ cmake -version    //check version of CMake</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-Hello-World-Example\"><a href=\"#The-Hello-World-Example\" class=\"headerlink\" title=\"The Hello World Example\"></a>The Hello World Example</h1><p>首先创建一个HelloWorld.cpp文件，包含以下代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在相同目录下创建一个CMakeLists.txt文件(存放CMake命令的标准文件)，包含一下内容:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld)</span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello HelloWorld.cpp)</span><br></pre></td></tr></table></figure>\n\n<p>CMakeLists.txt中包含三行：</p>\n<ul>\n<li>第一行的<code>cmake_minimum_required()</code>命令指定了该工程的最小CMake版本，设置为自己系统中的CMake版本即可。</li>\n<li>第二行的<code>project()</code>命令设置了工程的名字。</li>\n<li>第三行的<code>add_executable()</code>命令，第一个参数为生成的可执行文件的名字，第二个参数指定需要编译的源文件。两个参数之间用空格隔开。</li>\n</ul>\n<p>接下来在CMakeLists.txt同一目录下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake .</span><br></pre></td></tr></table></figure>\n\n<p>“.”表示当前目录。</p>\n<p>执行完毕后，在同一目录下会生成一些文件，最重要的是生成了Makefile文件，接下来用make命令来编译链接以生成可执行文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n\n<p>之后会在同一目录下生成<code>hello</code>可执行文件，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./hello</span><br></pre></td></tr></table></figure>\n\n<p>会在终端中打印出以下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>执行<code>cmake .</code>命令后我们发现多出的一些文件会使得整个工程看起来比较混乱，而我们只需要用到其中的Makefile文件。所以比较推荐的做法是，在同一目录下新建一个<code>build</code>文件夹用来存放cmake命令之后产生的文件，而当我们不需要这些文件的时候只需要将build文件夹下的文件删除。下面是具体的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">$ cmake ..</span><br><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n\n<p>清除cmake文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo rm -rf build/*</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>虽然只编译一个HelloWorld.cpp我们完全没有必要使用CMake，但我们通过这个例子解释了CMake的一些基本操作，可以用于后面更复杂的例子。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a><br><a href=\"http://jermmy.xyz/2017/04/25/2017-4-25-learn-cmake-1/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog–cmake学习笔记</a></p>\n","site":{"data":{}},"excerpt":"<p>之前的博客<a href=\"https://ain-crad.github.io/2018/12/02/C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A-h%E5%92%8C-c%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">C语言编译器工作原理以及.h和.c文件解析</a>中比较详细的介绍了编译器的工作原理，以及它是如何处理多文件编译问题的。但是在工程项目比较庞大以及需要链接外部库的时候，手动编写Makefile往往比较繁琐，一个比较好的解决方式是使用CMake工具自动生成工程项目的Makefile。</p>","more":"<h1 id=\"CMake介绍\"><a href=\"#CMake介绍\" class=\"headerlink\" title=\"CMake介绍\"></a>CMake介绍</h1><p>CMake是一个开源的跨平台自动化构建系统。它可以产生不同系统平台的构建文件(e.g., 类Unix系统的Makefile，Window系统的.vcproj)。可以方便的用于工程项目的管理。</p>\n<p><em>大部分内容来自<a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a></em></p>\n<h1 id=\"CMake-安装-Ubuntu\"><a href=\"#CMake-安装-Ubuntu\" class=\"headerlink\" title=\"CMake 安装(Ubuntu)\"></a>CMake 安装(Ubuntu)</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install cmake    //install CMake</span><br><span class=\"line\">$ cmake -version    //check version of CMake</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-Hello-World-Example\"><a href=\"#The-Hello-World-Example\" class=\"headerlink\" title=\"The Hello World Example\"></a>The Hello World Example</h1><p>首先创建一个HelloWorld.cpp文件，包含以下代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在相同目录下创建一个CMakeLists.txt文件(存放CMake命令的标准文件)，包含一下内容:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld)</span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello HelloWorld.cpp)</span><br></pre></td></tr></table></figure>\n\n<p>CMakeLists.txt中包含三行：</p>\n<ul>\n<li>第一行的<code>cmake_minimum_required()</code>命令指定了该工程的最小CMake版本，设置为自己系统中的CMake版本即可。</li>\n<li>第二行的<code>project()</code>命令设置了工程的名字。</li>\n<li>第三行的<code>add_executable()</code>命令，第一个参数为生成的可执行文件的名字，第二个参数指定需要编译的源文件。两个参数之间用空格隔开。</li>\n</ul>\n<p>接下来在CMakeLists.txt同一目录下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake .</span><br></pre></td></tr></table></figure>\n\n<p>“.”表示当前目录。</p>\n<p>执行完毕后，在同一目录下会生成一些文件，最重要的是生成了Makefile文件，接下来用make命令来编译链接以生成可执行文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n\n<p>之后会在同一目录下生成<code>hello</code>可执行文件，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./hello</span><br></pre></td></tr></table></figure>\n\n<p>会在终端中打印出以下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>执行<code>cmake .</code>命令后我们发现多出的一些文件会使得整个工程看起来比较混乱，而我们只需要用到其中的Makefile文件。所以比较推荐的做法是，在同一目录下新建一个<code>build</code>文件夹用来存放cmake命令之后产生的文件，而当我们不需要这些文件的时候只需要将build文件夹下的文件删除。下面是具体的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">$ cmake ..</span><br><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n\n<p>清除cmake文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo rm -rf build/*</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>虽然只编译一个HelloWorld.cpp我们完全没有必要使用CMake，但我们通过这个例子解释了CMake的一些基本操作，可以用于后面更复杂的例子。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a><br><a href=\"http://jermmy.xyz/2017/04/25/2017-4-25-learn-cmake-1/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog–cmake学习笔记</a></p>"},{"title":"Learn CMake(2)--多文件/目录","date":"2019-04-03T02:16:23.000Z","_content":"随着工程的不断扩大，我们会将工程分成不同的子模块，每个子模块用一个子文件夹管理。传统的编译方法是在每一个子目录下创建一个Makefile，然后这些Makefile由父目录中的Makefile调用。使用CMake可以有效的简化这种情况。\n<!--more-->\n# A Project with Directories\n我们把HelloWorld封装成一个类，头文件``HelloWorld.h``放在``include``文件夹里，源文件``HelloWorld.cpp``和``main.cpp``放在``src``文件夹里。(文件中具体代码在最后给出)。目录结构如下：\n```bash\naincrad@Inspiron:~/Desktop/HelloWorld$ tree\n.\n├── CMakeLists.txt\n├── include\n│   └── HelloWorld.h\n└── src\n    ├── HelloWorld.cpp\n    └── main.cpp\n\n2 directories, 4 files\n```\n这时候CMakeLists.txt中的内容如下：\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld)\n\n#Bring the headers, such as HelloWorld.h into the project\ninclude_directories(include)\n\n#Can manually add the sources using the set command as follows:\n#set(SOURCES src/main.cpp src/HelloWorld.cpp)\n\n#However, the file(GLOB ...) allows for wildcard additions:\nfile(GLOB SOURCES \"src/*.cpp\")\n\nadd_executable(hello ${SOURCES})\n```\n解释一下CMakeLists.txt中新出现的内容：\n- ``include_directories()``命令用来把头文件加入环境中，它的参数是包含头文件的目录。另外还有一个``target_include_directories()``可以在添加头文件目录的同时指定头文件作用的目标(target)。\n- ``set()``命令可以用来设置变量，这里我们把``SOURCES``变量设置为``main.cpp``和``HelloWorld.cpp``，表示包含这两个源文件。但是因为需要手动添加所有的源文件，比较繁琐，所以这条命令被注释了，用下一行的命令代替。\n- ``file()``命令将所有的源文件添加到工程中。``GLOB``用来创建一个文件列表，读取了``src/*.cpp``中的所有源文件，并将它们赋值给``SOURCES``变量。\n- ``add_executable()``和上一个例子中直接显式使用源文件不同的是使用了``SOURCES``变量作为参数，来生成``hello``可执行文件。\n\n下面是用CMake进行编译的命令：\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n$ ./hello \n```\n成功编译、运行后终端打印出结果：\n```\nHello World!\n```\n\n# 文件中代码\n**HelloWorld.h**\n```c++\n#ifndef _HelloWorld_H\n#define _HelloWorld_H\n\n#include <iostream>\n\nclass HelloWorld{\npublic:\n    void sayHello(void);\n};\n\n#endif\n```\n\n**HelloWorld.cpp**\n```c++\n#include \"HelloWorld.h\"\n\nvoid HelloWorld::sayHello(){\n    std::cout << \"Hello World!\" << std::endl;\n}\n```\n\n**main.cpp**\n```c++\n#include \"../include/HelloWorld.h\"\n\nint main(int argc, char* argv[]){\n    HelloWorld hi;\n    hi.sayHello();\n    return 0;\n}\n```\n\n# 参考链接\n[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)\n[Jermmy's Lazy Blog--cmake学习笔记](http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-2/)","source":"_posts/Learn-CMake-2-多文件-目录.md","raw":"---\ntitle: Learn CMake(2)--多文件/目录\ndate: 2019-04-03 10:16:23\ncategories:\n- Summary\ntags:\n- CMake\n---\n随着工程的不断扩大，我们会将工程分成不同的子模块，每个子模块用一个子文件夹管理。传统的编译方法是在每一个子目录下创建一个Makefile，然后这些Makefile由父目录中的Makefile调用。使用CMake可以有效的简化这种情况。\n<!--more-->\n# A Project with Directories\n我们把HelloWorld封装成一个类，头文件``HelloWorld.h``放在``include``文件夹里，源文件``HelloWorld.cpp``和``main.cpp``放在``src``文件夹里。(文件中具体代码在最后给出)。目录结构如下：\n```bash\naincrad@Inspiron:~/Desktop/HelloWorld$ tree\n.\n├── CMakeLists.txt\n├── include\n│   └── HelloWorld.h\n└── src\n    ├── HelloWorld.cpp\n    └── main.cpp\n\n2 directories, 4 files\n```\n这时候CMakeLists.txt中的内容如下：\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld)\n\n#Bring the headers, such as HelloWorld.h into the project\ninclude_directories(include)\n\n#Can manually add the sources using the set command as follows:\n#set(SOURCES src/main.cpp src/HelloWorld.cpp)\n\n#However, the file(GLOB ...) allows for wildcard additions:\nfile(GLOB SOURCES \"src/*.cpp\")\n\nadd_executable(hello ${SOURCES})\n```\n解释一下CMakeLists.txt中新出现的内容：\n- ``include_directories()``命令用来把头文件加入环境中，它的参数是包含头文件的目录。另外还有一个``target_include_directories()``可以在添加头文件目录的同时指定头文件作用的目标(target)。\n- ``set()``命令可以用来设置变量，这里我们把``SOURCES``变量设置为``main.cpp``和``HelloWorld.cpp``，表示包含这两个源文件。但是因为需要手动添加所有的源文件，比较繁琐，所以这条命令被注释了，用下一行的命令代替。\n- ``file()``命令将所有的源文件添加到工程中。``GLOB``用来创建一个文件列表，读取了``src/*.cpp``中的所有源文件，并将它们赋值给``SOURCES``变量。\n- ``add_executable()``和上一个例子中直接显式使用源文件不同的是使用了``SOURCES``变量作为参数，来生成``hello``可执行文件。\n\n下面是用CMake进行编译的命令：\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n$ ./hello \n```\n成功编译、运行后终端打印出结果：\n```\nHello World!\n```\n\n# 文件中代码\n**HelloWorld.h**\n```c++\n#ifndef _HelloWorld_H\n#define _HelloWorld_H\n\n#include <iostream>\n\nclass HelloWorld{\npublic:\n    void sayHello(void);\n};\n\n#endif\n```\n\n**HelloWorld.cpp**\n```c++\n#include \"HelloWorld.h\"\n\nvoid HelloWorld::sayHello(){\n    std::cout << \"Hello World!\" << std::endl;\n}\n```\n\n**main.cpp**\n```c++\n#include \"../include/HelloWorld.h\"\n\nint main(int argc, char* argv[]){\n    HelloWorld hi;\n    hi.sayHello();\n    return 0;\n}\n```\n\n# 参考链接\n[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)\n[Jermmy's Lazy Blog--cmake学习笔记](http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-2/)","slug":"Learn-CMake-2-多文件-目录","published":1,"updated":"2019-08-20T14:52:23.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lc000f30vnp9r411tv","content":"<p>随着工程的不断扩大，我们会将工程分成不同的子模块，每个子模块用一个子文件夹管理。传统的编译方法是在每一个子目录下创建一个Makefile，然后这些Makefile由父目录中的Makefile调用。使用CMake可以有效的简化这种情况。</p>\n<a id=\"more\"></a>\n<h1 id=\"A-Project-with-Directories\"><a href=\"#A-Project-with-Directories\" class=\"headerlink\" title=\"A Project with Directories\"></a>A Project with Directories</h1><p>我们把HelloWorld封装成一个类，头文件<code>HelloWorld.h</code>放在<code>include</code>文件夹里，源文件<code>HelloWorld.cpp</code>和<code>main.cpp</code>放在<code>src</code>文件夹里。(文件中具体代码在最后给出)。目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/HelloWorld$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── include</span><br><span class=\"line\">│   └── HelloWorld.h</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── HelloWorld.cpp</span><br><span class=\"line\">    └── main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 4 files</span><br></pre></td></tr></table></figure>\n\n<p>这时候CMakeLists.txt中的内容如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Bring the headers, such as HelloWorld.h into the project</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Can manually add the sources using the set command as follows:</span></span><br><span class=\"line\"><span class=\"comment\">#set(SOURCES src/main.cpp src/HelloWorld.cpp)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#However, the file(GLOB ...) allows for wildcard additions:</span></span><br><span class=\"line\">file(GLOB SOURCES <span class=\"string\">\"src/*.cpp\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello <span class=\"variable\">$&#123;SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>解释一下CMakeLists.txt中新出现的内容：</p>\n<ul>\n<li><code>include_directories()</code>命令用来把头文件加入环境中，它的参数是包含头文件的目录。另外还有一个<code>target_include_directories()</code>可以在添加头文件目录的同时指定头文件作用的目标(target)。</li>\n<li><code>set()</code>命令可以用来设置变量，这里我们把<code>SOURCES</code>变量设置为<code>main.cpp</code>和<code>HelloWorld.cpp</code>，表示包含这两个源文件。但是因为需要手动添加所有的源文件，比较繁琐，所以这条命令被注释了，用下一行的命令代替。</li>\n<li><code>file()</code>命令将所有的源文件添加到工程中。<code>GLOB</code>用来创建一个文件列表，读取了<code>src/*.cpp</code>中的所有源文件，并将它们赋值给<code>SOURCES</code>变量。</li>\n<li><code>add_executable()</code>和上一个例子中直接显式使用源文件不同的是使用了<code>SOURCES</code>变量作为参数，来生成<code>hello</code>可执行文件。</li>\n</ul>\n<p>下面是用CMake进行编译的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">$ cmake ..</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ ./hello</span><br></pre></td></tr></table></figure>\n\n<p>成功编译、运行后终端打印出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件中代码\"><a href=\"#文件中代码\" class=\"headerlink\" title=\"文件中代码\"></a>文件中代码</h1><p><strong>HelloWorld.h</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _HelloWorld_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _HelloWorld_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>HelloWorld.cpp</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"HelloWorld.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> HelloWorld::sayHello()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>main.cpp</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"../include/HelloWorld.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    HelloWorld hi;</span><br><span class=\"line\">    hi.sayHello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a><br><a href=\"http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-2/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog–cmake学习笔记</a></p>\n","site":{"data":{}},"excerpt":"<p>随着工程的不断扩大，我们会将工程分成不同的子模块，每个子模块用一个子文件夹管理。传统的编译方法是在每一个子目录下创建一个Makefile，然后这些Makefile由父目录中的Makefile调用。使用CMake可以有效的简化这种情况。</p>","more":"<h1 id=\"A-Project-with-Directories\"><a href=\"#A-Project-with-Directories\" class=\"headerlink\" title=\"A Project with Directories\"></a>A Project with Directories</h1><p>我们把HelloWorld封装成一个类，头文件<code>HelloWorld.h</code>放在<code>include</code>文件夹里，源文件<code>HelloWorld.cpp</code>和<code>main.cpp</code>放在<code>src</code>文件夹里。(文件中具体代码在最后给出)。目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/HelloWorld$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── include</span><br><span class=\"line\">│   └── HelloWorld.h</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── HelloWorld.cpp</span><br><span class=\"line\">    └── main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 4 files</span><br></pre></td></tr></table></figure>\n\n<p>这时候CMakeLists.txt中的内容如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Bring the headers, such as HelloWorld.h into the project</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Can manually add the sources using the set command as follows:</span></span><br><span class=\"line\"><span class=\"comment\">#set(SOURCES src/main.cpp src/HelloWorld.cpp)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#However, the file(GLOB ...) allows for wildcard additions:</span></span><br><span class=\"line\">file(GLOB SOURCES <span class=\"string\">\"src/*.cpp\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello <span class=\"variable\">$&#123;SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>解释一下CMakeLists.txt中新出现的内容：</p>\n<ul>\n<li><code>include_directories()</code>命令用来把头文件加入环境中，它的参数是包含头文件的目录。另外还有一个<code>target_include_directories()</code>可以在添加头文件目录的同时指定头文件作用的目标(target)。</li>\n<li><code>set()</code>命令可以用来设置变量，这里我们把<code>SOURCES</code>变量设置为<code>main.cpp</code>和<code>HelloWorld.cpp</code>，表示包含这两个源文件。但是因为需要手动添加所有的源文件，比较繁琐，所以这条命令被注释了，用下一行的命令代替。</li>\n<li><code>file()</code>命令将所有的源文件添加到工程中。<code>GLOB</code>用来创建一个文件列表，读取了<code>src/*.cpp</code>中的所有源文件，并将它们赋值给<code>SOURCES</code>变量。</li>\n<li><code>add_executable()</code>和上一个例子中直接显式使用源文件不同的是使用了<code>SOURCES</code>变量作为参数，来生成<code>hello</code>可执行文件。</li>\n</ul>\n<p>下面是用CMake进行编译的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">$ cmake ..</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ ./hello</span><br></pre></td></tr></table></figure>\n\n<p>成功编译、运行后终端打印出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件中代码\"><a href=\"#文件中代码\" class=\"headerlink\" title=\"文件中代码\"></a>文件中代码</h1><p><strong>HelloWorld.h</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _HelloWorld_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _HelloWorld_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>HelloWorld.cpp</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"HelloWorld.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> HelloWorld::sayHello()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>main.cpp</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"../include/HelloWorld.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    HelloWorld hi;</span><br><span class=\"line\">    hi.sayHello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a><br><a href=\"http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-2/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog–cmake学习笔记</a></p>"},{"title":"Learn CMake(3)--创建库文件","date":"2019-04-03T07:45:26.000Z","_content":"介绍如何用CMake编译生成动态链接库和静态链接库。\n<!--more-->\n# 静态库和动态库的区别\n[静态链接库(STATIC)和动态链接库(SHARED)](https://ain-crad.github.io/2019/04/03/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-STATIC-%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-SHARED/)\n\n# 建立动态链接库(.so/.dll)\n我们把上一个示例中的HelloWorld类编译成动态链接库。\n文件目录如下：\n```bash\naincrad@Inspiron:~/Desktop/HelloWorld$ tree\n.\n├── CMakeLists.txt\n├── include\n│   └── HelloWorld.h\n└── src\n    └── HelloWorld.cpp\n\n2 directories, 3 files\n```\n由于目标是建立库，而不是生成可执行文件，所以我们不需要``main.cpp``。\n\n下面是CMakeLists.txt中的内容：\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld_lib)\nset(CMAKE_BUILD_TYPE Release)\n\n#Bring the headers, such as HelloWorld.h into the project\ninclude_directories(include)\n\n#However, the file(GLOB ...) allows for wildcard additions:\nfile(GLOB SOURCES \"src/*.cpp\")\n\n#Generate the shared library from the sources\nadd_library(HelloWorld SHARED ${SOURCES})\n\n#Set the location for library installation -- i.e., /usr/lib in this case\n# not really necessary in this example. Use \"sudo make install \" to apply\ninstall(TARGETS HelloWorld DESTINATION /usr/lib)\n```\n解释CMakeLists.txt中新出现的内容：\n- ``set(CMAKE_BUILD_TYPE Release)``表示此次编译为正式发布版本。另外还有``Debug``等模式。这个参数决定了在编译时进不进行优化或者包不包含debug信息。详细参见[Build types in CMake](https://codeyarns.com/2015/05/14/build-types-in-cmake/)\n- ``add_library()``和之前的``add_executable()``类似。不过是用来创建库文件的，``SHARED``参数表明这是一个动态库（其它选项：STATIC or MODULE）。\n- ``install()``指定了库的安装位置。使用``sudo make install``来激发，用来把链接库安装到系统中。\n\n下面是具体的编译命令：\n```cmake\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n$ sudo make install\n```\n成功编译后会在build文件夹里生成库文件libHelloWorld.so，使用``sudo make install``安装成功后的信息：\n```bash\naincrad@Inspiron:~/Desktop/HelloWorld/build$ sudo make install\n[100%] Built target HelloWorld\nInstall the project...\n-- Install configuration: \"Release\"\n-- Installing: /usr/lib/libHelloWorld.so\n```\n\n# 建立静态链接库(.a/.lib)\n编译静态库和编译动态库的方式几乎完全一样，唯一的区别就是把``add_library()``中的``SHARED``参数改成``STATIC``。\n\n# 参考链接\n[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)\n[Jermmy's Lazy Blog--cmake学习笔记](http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-3/)","source":"_posts/Learn-CMake-3-创建库文件.md","raw":"---\ntitle: Learn CMake(3)--创建库文件\ndate: 2019-04-03 15:45:26\ncategories:\n- Summary\ntags:\n- CMake\n---\n介绍如何用CMake编译生成动态链接库和静态链接库。\n<!--more-->\n# 静态库和动态库的区别\n[静态链接库(STATIC)和动态链接库(SHARED)](https://ain-crad.github.io/2019/04/03/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-STATIC-%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-SHARED/)\n\n# 建立动态链接库(.so/.dll)\n我们把上一个示例中的HelloWorld类编译成动态链接库。\n文件目录如下：\n```bash\naincrad@Inspiron:~/Desktop/HelloWorld$ tree\n.\n├── CMakeLists.txt\n├── include\n│   └── HelloWorld.h\n└── src\n    └── HelloWorld.cpp\n\n2 directories, 3 files\n```\n由于目标是建立库，而不是生成可执行文件，所以我们不需要``main.cpp``。\n\n下面是CMakeLists.txt中的内容：\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld_lib)\nset(CMAKE_BUILD_TYPE Release)\n\n#Bring the headers, such as HelloWorld.h into the project\ninclude_directories(include)\n\n#However, the file(GLOB ...) allows for wildcard additions:\nfile(GLOB SOURCES \"src/*.cpp\")\n\n#Generate the shared library from the sources\nadd_library(HelloWorld SHARED ${SOURCES})\n\n#Set the location for library installation -- i.e., /usr/lib in this case\n# not really necessary in this example. Use \"sudo make install \" to apply\ninstall(TARGETS HelloWorld DESTINATION /usr/lib)\n```\n解释CMakeLists.txt中新出现的内容：\n- ``set(CMAKE_BUILD_TYPE Release)``表示此次编译为正式发布版本。另外还有``Debug``等模式。这个参数决定了在编译时进不进行优化或者包不包含debug信息。详细参见[Build types in CMake](https://codeyarns.com/2015/05/14/build-types-in-cmake/)\n- ``add_library()``和之前的``add_executable()``类似。不过是用来创建库文件的，``SHARED``参数表明这是一个动态库（其它选项：STATIC or MODULE）。\n- ``install()``指定了库的安装位置。使用``sudo make install``来激发，用来把链接库安装到系统中。\n\n下面是具体的编译命令：\n```cmake\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n$ sudo make install\n```\n成功编译后会在build文件夹里生成库文件libHelloWorld.so，使用``sudo make install``安装成功后的信息：\n```bash\naincrad@Inspiron:~/Desktop/HelloWorld/build$ sudo make install\n[100%] Built target HelloWorld\nInstall the project...\n-- Install configuration: \"Release\"\n-- Installing: /usr/lib/libHelloWorld.so\n```\n\n# 建立静态链接库(.a/.lib)\n编译静态库和编译动态库的方式几乎完全一样，唯一的区别就是把``add_library()``中的``SHARED``参数改成``STATIC``。\n\n# 参考链接\n[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)\n[Jermmy's Lazy Blog--cmake学习笔记](http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-3/)","slug":"Learn-CMake-3-创建库文件","published":1,"updated":"2019-08-20T14:52:13.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lc000g30vnvhtjkurk","content":"<p>介绍如何用CMake编译生成动态链接库和静态链接库。</p>\n<a id=\"more\"></a>\n<h1 id=\"静态库和动态库的区别\"><a href=\"#静态库和动态库的区别\" class=\"headerlink\" title=\"静态库和动态库的区别\"></a>静态库和动态库的区别</h1><p><a href=\"https://ain-crad.github.io/2019/04/03/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-STATIC-%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-SHARED/\" target=\"_blank\" rel=\"noopener\">静态链接库(STATIC)和动态链接库(SHARED)</a></p>\n<h1 id=\"建立动态链接库-so-dll\"><a href=\"#建立动态链接库-so-dll\" class=\"headerlink\" title=\"建立动态链接库(.so/.dll)\"></a>建立动态链接库(.so/.dll)</h1><p>我们把上一个示例中的HelloWorld类编译成动态链接库。<br>文件目录如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/HelloWorld$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── include</span><br><span class=\"line\">│   └── HelloWorld.h</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── HelloWorld.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 3 files</span><br></pre></td></tr></table></figure>\n\n<p>由于目标是建立库，而不是生成可执行文件，所以我们不需要<code>main.cpp</code>。</p>\n<p>下面是CMakeLists.txt中的内容：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld_lib)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE Release)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Bring the headers, such as HelloWorld.h into the project</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#However, the file(GLOB ...) allows for wildcard additions:</span></span><br><span class=\"line\">file(GLOB SOURCES <span class=\"string\">\"src/*.cpp\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Generate the shared library from the sources</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(HelloWorld SHARED <span class=\"variable\">$&#123;SOURCES&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Set the location for library installation -- i.e., /usr/lib in this case</span></span><br><span class=\"line\"><span class=\"comment\"># not really necessary in this example. Use \"sudo make install \" to apply</span></span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS HelloWorld DESTINATION /usr/lib)</span><br></pre></td></tr></table></figure>\n\n<p>解释CMakeLists.txt中新出现的内容：</p>\n<ul>\n<li><code>set(CMAKE_BUILD_TYPE Release)</code>表示此次编译为正式发布版本。另外还有<code>Debug</code>等模式。这个参数决定了在编译时进不进行优化或者包不包含debug信息。详细参见<a href=\"https://codeyarns.com/2015/05/14/build-types-in-cmake/\" target=\"_blank\" rel=\"noopener\">Build types in CMake</a></li>\n<li><code>add_library()</code>和之前的<code>add_executable()</code>类似。不过是用来创建库文件的，<code>SHARED</code>参数表明这是一个动态库（其它选项：STATIC or MODULE）。</li>\n<li><code>install()</code>指定了库的安装位置。使用<code>sudo make install</code>来激发，用来把链接库安装到系统中。</li>\n</ul>\n<p>下面是具体的编译命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ cd build</span><br><span class=\"line\">$ cmake ..</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n\n<p>成功编译后会在build文件夹里生成库文件libHelloWorld.so，使用<code>sudo make install</code>安装成功后的信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/HelloWorld/build$ sudo make install</span><br><span class=\"line\">[100%] Built target HelloWorld</span><br><span class=\"line\">Install the project...</span><br><span class=\"line\">-- Install configuration: <span class=\"string\">\"Release\"</span></span><br><span class=\"line\">-- Installing: /usr/lib/libHelloWorld.so</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"建立静态链接库-a-lib\"><a href=\"#建立静态链接库-a-lib\" class=\"headerlink\" title=\"建立静态链接库(.a/.lib)\"></a>建立静态链接库(.a/.lib)</h1><p>编译静态库和编译动态库的方式几乎完全一样，唯一的区别就是把<code>add_library()</code>中的<code>SHARED</code>参数改成<code>STATIC</code>。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a><br><a href=\"http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-3/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog–cmake学习笔记</a></p>\n","site":{"data":{}},"excerpt":"<p>介绍如何用CMake编译生成动态链接库和静态链接库。</p>","more":"<h1 id=\"静态库和动态库的区别\"><a href=\"#静态库和动态库的区别\" class=\"headerlink\" title=\"静态库和动态库的区别\"></a>静态库和动态库的区别</h1><p><a href=\"https://ain-crad.github.io/2019/04/03/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-STATIC-%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-SHARED/\" target=\"_blank\" rel=\"noopener\">静态链接库(STATIC)和动态链接库(SHARED)</a></p>\n<h1 id=\"建立动态链接库-so-dll\"><a href=\"#建立动态链接库-so-dll\" class=\"headerlink\" title=\"建立动态链接库(.so/.dll)\"></a>建立动态链接库(.so/.dll)</h1><p>我们把上一个示例中的HelloWorld类编译成动态链接库。<br>文件目录如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/HelloWorld$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── include</span><br><span class=\"line\">│   └── HelloWorld.h</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── HelloWorld.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 3 files</span><br></pre></td></tr></table></figure>\n\n<p>由于目标是建立库，而不是生成可执行文件，所以我们不需要<code>main.cpp</code>。</p>\n<p>下面是CMakeLists.txt中的内容：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld_lib)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE Release)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Bring the headers, such as HelloWorld.h into the project</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#However, the file(GLOB ...) allows for wildcard additions:</span></span><br><span class=\"line\">file(GLOB SOURCES <span class=\"string\">\"src/*.cpp\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Generate the shared library from the sources</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(HelloWorld SHARED <span class=\"variable\">$&#123;SOURCES&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Set the location for library installation -- i.e., /usr/lib in this case</span></span><br><span class=\"line\"><span class=\"comment\"># not really necessary in this example. Use \"sudo make install \" to apply</span></span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS HelloWorld DESTINATION /usr/lib)</span><br></pre></td></tr></table></figure>\n\n<p>解释CMakeLists.txt中新出现的内容：</p>\n<ul>\n<li><code>set(CMAKE_BUILD_TYPE Release)</code>表示此次编译为正式发布版本。另外还有<code>Debug</code>等模式。这个参数决定了在编译时进不进行优化或者包不包含debug信息。详细参见<a href=\"https://codeyarns.com/2015/05/14/build-types-in-cmake/\" target=\"_blank\" rel=\"noopener\">Build types in CMake</a></li>\n<li><code>add_library()</code>和之前的<code>add_executable()</code>类似。不过是用来创建库文件的，<code>SHARED</code>参数表明这是一个动态库（其它选项：STATIC or MODULE）。</li>\n<li><code>install()</code>指定了库的安装位置。使用<code>sudo make install</code>来激发，用来把链接库安装到系统中。</li>\n</ul>\n<p>下面是具体的编译命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ cd build</span><br><span class=\"line\">$ cmake ..</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n\n<p>成功编译后会在build文件夹里生成库文件libHelloWorld.so，使用<code>sudo make install</code>安装成功后的信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/HelloWorld/build$ sudo make install</span><br><span class=\"line\">[100%] Built target HelloWorld</span><br><span class=\"line\">Install the project...</span><br><span class=\"line\">-- Install configuration: <span class=\"string\">\"Release\"</span></span><br><span class=\"line\">-- Installing: /usr/lib/libHelloWorld.so</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"建立静态链接库-a-lib\"><a href=\"#建立静态链接库-a-lib\" class=\"headerlink\" title=\"建立静态链接库(.a/.lib)\"></a>建立静态链接库(.a/.lib)</h1><p>编译静态库和编译动态库的方式几乎完全一样，唯一的区别就是把<code>add_library()</code>中的<code>SHARED</code>参数改成<code>STATIC</code>。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a><br><a href=\"http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-3/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog–cmake学习笔记</a></p>"},{"title":"Learn CMake(4)--链接库文件","date":"2019-04-03T09:38:42.000Z","_content":"很多时候我们都要在程序中链接外部库文件，不论是我们自己创建的，还是第三方的（例如OpenCV）。这里介绍如何使用CMake来方便的在项目中链接库文件。\n<!--more-->\n# 链接自己的创建的库文件\n沿用上一个示例中创建的库文件，文件目录：\n```bash\naincrad@Inspiron:~/Desktop/HelloWorld$ tree\n.\n├── CMakeLists.txt\n├── include\n│   └── HelloWorld.h\n├── lib\n│   ├── libHelloWorld.a\n│   └── libHelloWorld.so\n└── src\n    └── main.cpp\n\n3 directories, 5 files\n```\n将库文件放在了lib文件夹中，因为有了库文件所以我们不再需要HelloWorld.cpp。\n\nCMakeLists.txt中的内容：\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld_lib)\n\n#For the shared library:\nset(PROJECT_LINK_LIBS libHelloWorld.so)\nlink_directories(lib)\n\n#For the static library:\n#set(PROJECT_LINK_LIBS libHelloWorld.a)\n#link_directories(lib)\n\ninclude_directories(include)\n\nadd_executable(hello src/main.cpp)\ntarget_link_libraries(hello ${PROJECT_LINK_LIBS})\n```\n源文件main.cpp中的内容：\n```c++\n#include \"../include/HelloWorld.h\"\n\nint main(int argc, char* argv[]){\n    HelloWorld hi;\n    hi.sayHello();\n    return 0;\n}\n```\n\n# 链接第三方库文件\nCMake提供了一个``find_package()``命令来搜寻这些依赖库。比如，如果我们需要链接OpenCV库文件，可以加入以下几条命令：\n```cmake\nfind_package(OpenCV REQUIRED)\ninclude_directories(${OpenCV_INCLUDE_DIRS})\n```\n然后在``add_executable()``之后链接库文件：\n```cmake\ntarget_link_libraries(hello ${OpenCV_LIBS})\n```\n``<NAME>_FOUND``，``<NAME>_INCLUDE_DIRS``和``<NAME>_LIBS``是相应库的.cmake文件中定义好的。\n\n``find_package()``并不能保证一定可以找到相应的库，如果找不到，就需要我们手动添加路径了，类Unix系统一般都在``/usr/local/include``和``/usr/local/lib``路径下。在CMakeLists.txt文件中添加以下路径。\n```cmake\ninclude_directories(/usr/local/include)\nlink_directories(/usr/local/lib)\n```\n或者如果我们知道库源文件的具体位置(以OpenCV为例)，但其没有安装到系统目录中，添加以下命令：\n```cmake\nset(OpenCV_DIR /home/aincrad/opencv/_build)\n```\n其中第二个参数是对应库在自己计算机上的路径。\n\n# OpenCV示例\n文件目录：\n```bash\naincrad@Inspiron:~/Desktop/opencv$ tree\n.\n├── CMakeLists.txt\n├── lena_color.png\n└── main.cpp\n\n0 directories, 3 files\n```\nCMakeLists.txt中的内容：\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld_lib)\n\nfind_package(OpenCV REQUIRED)\ninclude_directories(${OpenCV_INCLUDE_DIRS})\n\nadd_executable(img main.cpp)\ntarget_link_libraries(img ${OpenCV_LIBS})\n```\nmain.cpp中的内容：\n```c++\n#include <stdio.h>\n#include <opencv2/opencv.hpp>\n\nusing namespace cv;\n\nint main(int argc, char** argv ){\n    if ( argc != 2 )\n    {\n        printf(\"usage: DisplayImage.out <Image_Path>\\n\");\n        return -1;\n    }\n    Mat image;\n    image = imread(argv[1], 1);\n    if ( !image.data )\n    {\n        printf(\"No image data \\n\");\n        return -1;\n    }\n    namedWindow(\"Display Image\", WINDOW_AUTOSIZE );\n    imshow(\"Display Image\", image);\n    waitKey(0);\n    return 0;\n}\n```\n终端中执行以下命令后：\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n$ ./img ../lena_color.png\n```\n显示出lena的图片：\n![lena](/lena_color.png)\n\n# 参考链接\n[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)\n[Jermmy's Lazy Blog--cmake学习笔记](http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-3/)\n[Using OpenCV with gcc and CMake](https://docs.opencv.org/3.3.0/db/df5/tutorial_linux_gcc_cmake.html)\n[CMake如何查找链接库---find_package的使用方法](https://blog.csdn.net/u011092188/article/details/61425924)\n[CMake之find_package](https://www.jianshu.com/p/46e9b8a6cb6a)","source":"_posts/Learn-CMake-4-链接库文件.md","raw":"---\ntitle: Learn CMake(4)--链接库文件\ndate: 2019-04-03 17:38:42\ncategories:\n- Summary\ntags:\n- CMake\n---\n很多时候我们都要在程序中链接外部库文件，不论是我们自己创建的，还是第三方的（例如OpenCV）。这里介绍如何使用CMake来方便的在项目中链接库文件。\n<!--more-->\n# 链接自己的创建的库文件\n沿用上一个示例中创建的库文件，文件目录：\n```bash\naincrad@Inspiron:~/Desktop/HelloWorld$ tree\n.\n├── CMakeLists.txt\n├── include\n│   └── HelloWorld.h\n├── lib\n│   ├── libHelloWorld.a\n│   └── libHelloWorld.so\n└── src\n    └── main.cpp\n\n3 directories, 5 files\n```\n将库文件放在了lib文件夹中，因为有了库文件所以我们不再需要HelloWorld.cpp。\n\nCMakeLists.txt中的内容：\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld_lib)\n\n#For the shared library:\nset(PROJECT_LINK_LIBS libHelloWorld.so)\nlink_directories(lib)\n\n#For the static library:\n#set(PROJECT_LINK_LIBS libHelloWorld.a)\n#link_directories(lib)\n\ninclude_directories(include)\n\nadd_executable(hello src/main.cpp)\ntarget_link_libraries(hello ${PROJECT_LINK_LIBS})\n```\n源文件main.cpp中的内容：\n```c++\n#include \"../include/HelloWorld.h\"\n\nint main(int argc, char* argv[]){\n    HelloWorld hi;\n    hi.sayHello();\n    return 0;\n}\n```\n\n# 链接第三方库文件\nCMake提供了一个``find_package()``命令来搜寻这些依赖库。比如，如果我们需要链接OpenCV库文件，可以加入以下几条命令：\n```cmake\nfind_package(OpenCV REQUIRED)\ninclude_directories(${OpenCV_INCLUDE_DIRS})\n```\n然后在``add_executable()``之后链接库文件：\n```cmake\ntarget_link_libraries(hello ${OpenCV_LIBS})\n```\n``<NAME>_FOUND``，``<NAME>_INCLUDE_DIRS``和``<NAME>_LIBS``是相应库的.cmake文件中定义好的。\n\n``find_package()``并不能保证一定可以找到相应的库，如果找不到，就需要我们手动添加路径了，类Unix系统一般都在``/usr/local/include``和``/usr/local/lib``路径下。在CMakeLists.txt文件中添加以下路径。\n```cmake\ninclude_directories(/usr/local/include)\nlink_directories(/usr/local/lib)\n```\n或者如果我们知道库源文件的具体位置(以OpenCV为例)，但其没有安装到系统目录中，添加以下命令：\n```cmake\nset(OpenCV_DIR /home/aincrad/opencv/_build)\n```\n其中第二个参数是对应库在自己计算机上的路径。\n\n# OpenCV示例\n文件目录：\n```bash\naincrad@Inspiron:~/Desktop/opencv$ tree\n.\n├── CMakeLists.txt\n├── lena_color.png\n└── main.cpp\n\n0 directories, 3 files\n```\nCMakeLists.txt中的内容：\n```cmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(HelloWorld_lib)\n\nfind_package(OpenCV REQUIRED)\ninclude_directories(${OpenCV_INCLUDE_DIRS})\n\nadd_executable(img main.cpp)\ntarget_link_libraries(img ${OpenCV_LIBS})\n```\nmain.cpp中的内容：\n```c++\n#include <stdio.h>\n#include <opencv2/opencv.hpp>\n\nusing namespace cv;\n\nint main(int argc, char** argv ){\n    if ( argc != 2 )\n    {\n        printf(\"usage: DisplayImage.out <Image_Path>\\n\");\n        return -1;\n    }\n    Mat image;\n    image = imread(argv[1], 1);\n    if ( !image.data )\n    {\n        printf(\"No image data \\n\");\n        return -1;\n    }\n    namedWindow(\"Display Image\", WINDOW_AUTOSIZE );\n    imshow(\"Display Image\", image);\n    waitKey(0);\n    return 0;\n}\n```\n终端中执行以下命令后：\n```bash\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n$ ./img ../lena_color.png\n```\n显示出lena的图片：\n![lena](/lena_color.png)\n\n# 参考链接\n[Introduction to CMake by Example](http://derekmolloy.ie/hello-world-introductions-to-cmake/)\n[Jermmy's Lazy Blog--cmake学习笔记](http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-3/)\n[Using OpenCV with gcc and CMake](https://docs.opencv.org/3.3.0/db/df5/tutorial_linux_gcc_cmake.html)\n[CMake如何查找链接库---find_package的使用方法](https://blog.csdn.net/u011092188/article/details/61425924)\n[CMake之find_package](https://www.jianshu.com/p/46e9b8a6cb6a)","slug":"Learn-CMake-4-链接库文件","published":1,"updated":"2019-08-20T14:52:04.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ld000h30vnbh5pwy9h","content":"<p>很多时候我们都要在程序中链接外部库文件，不论是我们自己创建的，还是第三方的（例如OpenCV）。这里介绍如何使用CMake来方便的在项目中链接库文件。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接自己的创建的库文件\"><a href=\"#链接自己的创建的库文件\" class=\"headerlink\" title=\"链接自己的创建的库文件\"></a>链接自己的创建的库文件</h1><p>沿用上一个示例中创建的库文件，文件目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/HelloWorld$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── include</span><br><span class=\"line\">│   └── HelloWorld.h</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">│   ├── libHelloWorld.a</span><br><span class=\"line\">│   └── libHelloWorld.so</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">3 directories, 5 files</span><br></pre></td></tr></table></figure>\n\n<p>将库文件放在了lib文件夹中，因为有了库文件所以我们不再需要HelloWorld.cpp。</p>\n<p>CMakeLists.txt中的内容：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld_lib)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#For the shared library:</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(PROJECT_LINK_LIBS libHelloWorld.so)</span><br><span class=\"line\"><span class=\"keyword\">link_directories</span>(lib)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#For the static library:</span></span><br><span class=\"line\"><span class=\"comment\">#set(PROJECT_LINK_LIBS libHelloWorld.a)</span></span><br><span class=\"line\"><span class=\"comment\">#link_directories(lib)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello src/main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello <span class=\"variable\">$&#123;PROJECT_LINK_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>源文件main.cpp中的内容：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"../include/HelloWorld.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    HelloWorld hi;</span><br><span class=\"line\">    hi.sayHello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链接第三方库文件\"><a href=\"#链接第三方库文件\" class=\"headerlink\" title=\"链接第三方库文件\"></a>链接第三方库文件</h1><p>CMake提供了一个<code>find_package()</code>命令来搜寻这些依赖库。比如，如果我们需要链接OpenCV库文件，可以加入以下几条命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">find_package</span>(OpenCV REQUIRED)</span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>add_executable()</code>之后链接库文件：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello <span class=\"variable\">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;NAME&gt;_FOUND</code>，<code>&lt;NAME&gt;_INCLUDE_DIRS</code>和<code>&lt;NAME&gt;_LIBS</code>是相应库的.cmake文件中定义好的。</p>\n<p><code>find_package()</code>并不能保证一定可以找到相应的库，如果找不到，就需要我们手动添加路径了，类Unix系统一般都在<code>/usr/local/include</code>和<code>/usr/local/lib</code>路径下。在CMakeLists.txt文件中添加以下路径。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>(/usr/local/<span class=\"keyword\">include</span>)</span><br><span class=\"line\"><span class=\"keyword\">link_directories</span>(/usr/local/lib)</span><br></pre></td></tr></table></figure>\n\n<p>或者如果我们知道库源文件的具体位置(以OpenCV为例)，但其没有安装到系统目录中，添加以下命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(OpenCV_DIR /home/aincrad/opencv/_build)</span><br></pre></td></tr></table></figure>\n\n<p>其中第二个参数是对应库在自己计算机上的路径。</p>\n<h1 id=\"OpenCV示例\"><a href=\"#OpenCV示例\" class=\"headerlink\" title=\"OpenCV示例\"></a>OpenCV示例</h1><p>文件目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/opencv$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── lena_color.png</span><br><span class=\"line\">└── main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">0 directories, 3 files</span><br></pre></td></tr></table></figure>\n\n<p>CMakeLists.txt中的内容：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld_lib)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(OpenCV REQUIRED)</span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(img main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(img <span class=\"variable\">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>main.cpp中的内容：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( argc != <span class=\"number\">2</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"usage: DisplayImage.out &lt;Image_Path&gt;\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Mat image;</span><br><span class=\"line\">    image = imread(argv[<span class=\"number\">1</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !image.data )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"No image data \\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"Display Image\"</span>, WINDOW_AUTOSIZE );</span><br><span class=\"line\">    imshow(<span class=\"string\">\"Display Image\"</span>, image);</span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>终端中执行以下命令后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">$ cmake ..</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ ./img ../lena_color.png</span><br></pre></td></tr></table></figure>\n\n<p>显示出lena的图片：<br><img src=\"/2019/04/03/Learn-CMake-4-链接库文件/lena_color.png\" alt=\"lena\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a><br><a href=\"http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-3/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog–cmake学习笔记</a><br><a href=\"https://docs.opencv.org/3.3.0/db/df5/tutorial_linux_gcc_cmake.html\" target=\"_blank\" rel=\"noopener\">Using OpenCV with gcc and CMake</a><br><a href=\"https://blog.csdn.net/u011092188/article/details/61425924\" target=\"_blank\" rel=\"noopener\">CMake如何查找链接库—find_package的使用方法</a><br><a href=\"https://www.jianshu.com/p/46e9b8a6cb6a\" target=\"_blank\" rel=\"noopener\">CMake之find_package</a></p>\n","site":{"data":{}},"excerpt":"<p>很多时候我们都要在程序中链接外部库文件，不论是我们自己创建的，还是第三方的（例如OpenCV）。这里介绍如何使用CMake来方便的在项目中链接库文件。</p>","more":"<h1 id=\"链接自己的创建的库文件\"><a href=\"#链接自己的创建的库文件\" class=\"headerlink\" title=\"链接自己的创建的库文件\"></a>链接自己的创建的库文件</h1><p>沿用上一个示例中创建的库文件，文件目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/HelloWorld$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── include</span><br><span class=\"line\">│   └── HelloWorld.h</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">│   ├── libHelloWorld.a</span><br><span class=\"line\">│   └── libHelloWorld.so</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">3 directories, 5 files</span><br></pre></td></tr></table></figure>\n\n<p>将库文件放在了lib文件夹中，因为有了库文件所以我们不再需要HelloWorld.cpp。</p>\n<p>CMakeLists.txt中的内容：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld_lib)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#For the shared library:</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(PROJECT_LINK_LIBS libHelloWorld.so)</span><br><span class=\"line\"><span class=\"keyword\">link_directories</span>(lib)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#For the static library:</span></span><br><span class=\"line\"><span class=\"comment\">#set(PROJECT_LINK_LIBS libHelloWorld.a)</span></span><br><span class=\"line\"><span class=\"comment\">#link_directories(lib)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"keyword\">include</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello src/main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello <span class=\"variable\">$&#123;PROJECT_LINK_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>源文件main.cpp中的内容：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"../include/HelloWorld.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    HelloWorld hi;</span><br><span class=\"line\">    hi.sayHello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链接第三方库文件\"><a href=\"#链接第三方库文件\" class=\"headerlink\" title=\"链接第三方库文件\"></a>链接第三方库文件</h1><p>CMake提供了一个<code>find_package()</code>命令来搜寻这些依赖库。比如，如果我们需要链接OpenCV库文件，可以加入以下几条命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">find_package</span>(OpenCV REQUIRED)</span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>add_executable()</code>之后链接库文件：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(hello <span class=\"variable\">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;NAME&gt;_FOUND</code>，<code>&lt;NAME&gt;_INCLUDE_DIRS</code>和<code>&lt;NAME&gt;_LIBS</code>是相应库的.cmake文件中定义好的。</p>\n<p><code>find_package()</code>并不能保证一定可以找到相应的库，如果找不到，就需要我们手动添加路径了，类Unix系统一般都在<code>/usr/local/include</code>和<code>/usr/local/lib</code>路径下。在CMakeLists.txt文件中添加以下路径。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>(/usr/local/<span class=\"keyword\">include</span>)</span><br><span class=\"line\"><span class=\"keyword\">link_directories</span>(/usr/local/lib)</span><br></pre></td></tr></table></figure>\n\n<p>或者如果我们知道库源文件的具体位置(以OpenCV为例)，但其没有安装到系统目录中，添加以下命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(OpenCV_DIR /home/aincrad/opencv/_build)</span><br></pre></td></tr></table></figure>\n\n<p>其中第二个参数是对应库在自己计算机上的路径。</p>\n<h1 id=\"OpenCV示例\"><a href=\"#OpenCV示例\" class=\"headerlink\" title=\"OpenCV示例\"></a>OpenCV示例</h1><p>文件目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aincrad@Inspiron:~/Desktop/opencv$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── lena_color.png</span><br><span class=\"line\">└── main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">0 directories, 3 files</span><br></pre></td></tr></table></figure>\n\n<p>CMakeLists.txt中的内容：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(HelloWorld_lib)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(OpenCV REQUIRED)</span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(img main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(img <span class=\"variable\">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>main.cpp中的内容：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( argc != <span class=\"number\">2</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"usage: DisplayImage.out &lt;Image_Path&gt;\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Mat image;</span><br><span class=\"line\">    image = imread(argv[<span class=\"number\">1</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !image.data )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"No image data \\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"Display Image\"</span>, WINDOW_AUTOSIZE );</span><br><span class=\"line\">    imshow(<span class=\"string\">\"Display Image\"</span>, image);</span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>终端中执行以下命令后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">$ cmake ..</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ ./img ../lena_color.png</span><br></pre></td></tr></table></figure>\n\n<p>显示出lena的图片：<br><img src=\"/2019/04/03/Learn-CMake-4-链接库文件/lena_color.png\" alt=\"lena\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://derekmolloy.ie/hello-world-introductions-to-cmake/\" target=\"_blank\" rel=\"noopener\">Introduction to CMake by Example</a><br><a href=\"http://jermmy.xyz/2017/04/26/2017-4-26-learn-cmake-3/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog–cmake学习笔记</a><br><a href=\"https://docs.opencv.org/3.3.0/db/df5/tutorial_linux_gcc_cmake.html\" target=\"_blank\" rel=\"noopener\">Using OpenCV with gcc and CMake</a><br><a href=\"https://blog.csdn.net/u011092188/article/details/61425924\" target=\"_blank\" rel=\"noopener\">CMake如何查找链接库—find_package的使用方法</a><br><a href=\"https://www.jianshu.com/p/46e9b8a6cb6a\" target=\"_blank\" rel=\"noopener\">CMake之find_package</a></p>"},{"title":"直观理解线性代数-点积","date":"2018-10-24T13:56:50.000Z","_content":"我们都知道两个向量 $\\vec{a}$，$\\vec{b}$ 的点积可以想象为 $\\vec{a}$ 朝 $\\vec{b}$ 方向上的投影长度乘以 $\\vec{b}$ 的长度。其中结果的正负代表方向，两个向量成锐角则大于$0$，成钝角则小于$0$。\n\n可是为什么可以这样做呢，这要从线性代数的本质说起。致敬[3Blue1Brown](http://www.3blue1brown.com/)，一个热爱数学，并教你如何从直观上去理解数学的团队，将只停留在数值运算和公式的线性代数推进到可视化几何直观的领悟上，在B站上可以找到搬运的系列视频[线性代数的本质](https://www.bilibili.com/video/av5977466/?spm_id_from=333.788.videocard.8)。\n<!-- more -->\n```\n卡尔文：你知道吗，我觉得数学不是一门科学，而是一种宗教\n霍布斯：一种宗教？\n卡尔文：是啊。这些公式就像奇迹一般。你取出两个数，把它们相加时，它们神奇地成为了一个全新\n的数！没人能说清这到底是怎么发生的。你要么完全相信，要么完全不信。\n```\n# 点积与投影\n视频里关于点积和投影对应的那一部分个人觉得不太好理解，自己也花了挺久才理解，在这里记录一下，并提供一种理解方式。\n\n***以下图片均来自3Blue1Brown发布的线性代数的本质系列视频，直接来源为[Go Further的博客](https://charlesliuyx.github.io/2017/10/06/%E3%80%90%E7%9B%B4%E8%A7%82%E8%AF%A6%E8%A7%A3%E3%80%91%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/#%E7%82%B9%E7%A7%AF%E4%B8%8E%E5%AF%B9%E5%81%B6%E6%80%A7)***\n\n**首先来看点积的运算：**\n\n两个维数相同的向量做点积，就是把他们对应坐标相乘再相加。\n\n<div style=\"width: 300px; margin: auto\">\n    ![1.gif](/1.gif)\n</div>\n\n我们假设图中的两个向量分别为 $\\vec{a}$ 和 $\\vec{b}$， 我们可以发现点积的运算和将向量 $\\vec{a}$ 转置为 $1*4$ 的矩阵再和 $\\vec{b}$ 做相乘的结果是一样的。从这里入手我们来分析一下矩阵相乘和投影的关系。\n\n**投影：**\n\n任取坐标系中的一条直线作为投影直线，同时在这条直线上取一个单位向量 $\\vec{u}$，设它的坐标为$(u_x，u_y)$。\n\n<div style=\"width: 500px; margin: auto\">\n    ![2.gif](/2.gif)\n</div>\n\n投影是一种线性变换，矩阵的意义就是表示线性变换，所以这个二维空间中的任意一个向量在这条直线上的投影变换都可以用一个矩阵表示出来，至于这个矩阵是什么，我们只需要考虑基向量的变换。(***至于为什么矩阵的意义是线性变换以及为什么用矩阵描述一个变换只需要考虑基向量的变换请移步[线性代数的本质](https://www.bilibili.com/video/av5977466/?spm_id_from=333.788.videocard.8)***)\n\n<div style=\"width: 500px; margin: auto\">\n    ![3.gif](/3.gif)\n</div>\n\n上图运用对称性得到基向量 $\\vec{i}$ 和 $\\vec{j}$ 在直线上的投影分别为$u_x$ 和 $u_y$，所以这个投影变换的矩阵也就是\n\n$$\n \\begin{bmatrix}\n   u_x & u_y\n  \\end{bmatrix}\n$$\n\n所以二维空间中任一向量 $\\begin{bmatrix} x \\\\\\\\ y \\end{bmatrix}$ 在单位向量 $\\vec{u}$ 所在直线上的投影值为\n\n$$\n \\left[\n \\begin{matrix}\n   u_x & u_y\n  \\end{matrix}\n  \\right]\n  \\left[\n  \\begin{matrix}\n   x \\\\\\\\\n   y\n  \\end{matrix}\n  \\right]\n$$\n\n**把矩阵$\\begin{bmatrix} u_x & u_y \\end{bmatrix}$转置一下，就变成了点积的定义，这也就是为什么向量的点积可以和几何投影对应起来。**\n\n上面是以单位向量 $\\vec{u}$ 为例，如果 $\\vec{u}$ 不是单位向量怎么理解呢？\n\n其实也很简单，把 $\\vec{u}$ 归一化成单位向量 $\\vec{u_0}$，前面提取出一个系数 $c$，这个系数也就是 $\\vec{u}$ 的长度。那么空间中任意向量 $\\begin{bmatrix} x \\\\\\\\ y \\end{bmatrix}$ 和 $\\vec{u}$ 的点积可以先看做 $\\begin{bmatrix} x \\\\\\\\ y \\end{bmatrix}$ 和 $\\vec{u_0}$ 的点积，也就是上面的投影过程，最后再乘以 $c$，也就是 $\\vec{u}$ 的长度。\n\n完美对应。\n","source":"_posts/Linear algebra-Dot product.md","raw":"---\ntitle: 直观理解线性代数-点积\ndate: 2018-10-24 21:56:50\ncategories:\n- Math\ntags:\n- 总结\n- Liner algebra\n---\n我们都知道两个向量 $\\vec{a}$，$\\vec{b}$ 的点积可以想象为 $\\vec{a}$ 朝 $\\vec{b}$ 方向上的投影长度乘以 $\\vec{b}$ 的长度。其中结果的正负代表方向，两个向量成锐角则大于$0$，成钝角则小于$0$。\n\n可是为什么可以这样做呢，这要从线性代数的本质说起。致敬[3Blue1Brown](http://www.3blue1brown.com/)，一个热爱数学，并教你如何从直观上去理解数学的团队，将只停留在数值运算和公式的线性代数推进到可视化几何直观的领悟上，在B站上可以找到搬运的系列视频[线性代数的本质](https://www.bilibili.com/video/av5977466/?spm_id_from=333.788.videocard.8)。\n<!-- more -->\n```\n卡尔文：你知道吗，我觉得数学不是一门科学，而是一种宗教\n霍布斯：一种宗教？\n卡尔文：是啊。这些公式就像奇迹一般。你取出两个数，把它们相加时，它们神奇地成为了一个全新\n的数！没人能说清这到底是怎么发生的。你要么完全相信，要么完全不信。\n```\n# 点积与投影\n视频里关于点积和投影对应的那一部分个人觉得不太好理解，自己也花了挺久才理解，在这里记录一下，并提供一种理解方式。\n\n***以下图片均来自3Blue1Brown发布的线性代数的本质系列视频，直接来源为[Go Further的博客](https://charlesliuyx.github.io/2017/10/06/%E3%80%90%E7%9B%B4%E8%A7%82%E8%AF%A6%E8%A7%A3%E3%80%91%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/#%E7%82%B9%E7%A7%AF%E4%B8%8E%E5%AF%B9%E5%81%B6%E6%80%A7)***\n\n**首先来看点积的运算：**\n\n两个维数相同的向量做点积，就是把他们对应坐标相乘再相加。\n\n<div style=\"width: 300px; margin: auto\">\n    ![1.gif](/1.gif)\n</div>\n\n我们假设图中的两个向量分别为 $\\vec{a}$ 和 $\\vec{b}$， 我们可以发现点积的运算和将向量 $\\vec{a}$ 转置为 $1*4$ 的矩阵再和 $\\vec{b}$ 做相乘的结果是一样的。从这里入手我们来分析一下矩阵相乘和投影的关系。\n\n**投影：**\n\n任取坐标系中的一条直线作为投影直线，同时在这条直线上取一个单位向量 $\\vec{u}$，设它的坐标为$(u_x，u_y)$。\n\n<div style=\"width: 500px; margin: auto\">\n    ![2.gif](/2.gif)\n</div>\n\n投影是一种线性变换，矩阵的意义就是表示线性变换，所以这个二维空间中的任意一个向量在这条直线上的投影变换都可以用一个矩阵表示出来，至于这个矩阵是什么，我们只需要考虑基向量的变换。(***至于为什么矩阵的意义是线性变换以及为什么用矩阵描述一个变换只需要考虑基向量的变换请移步[线性代数的本质](https://www.bilibili.com/video/av5977466/?spm_id_from=333.788.videocard.8)***)\n\n<div style=\"width: 500px; margin: auto\">\n    ![3.gif](/3.gif)\n</div>\n\n上图运用对称性得到基向量 $\\vec{i}$ 和 $\\vec{j}$ 在直线上的投影分别为$u_x$ 和 $u_y$，所以这个投影变换的矩阵也就是\n\n$$\n \\begin{bmatrix}\n   u_x & u_y\n  \\end{bmatrix}\n$$\n\n所以二维空间中任一向量 $\\begin{bmatrix} x \\\\\\\\ y \\end{bmatrix}$ 在单位向量 $\\vec{u}$ 所在直线上的投影值为\n\n$$\n \\left[\n \\begin{matrix}\n   u_x & u_y\n  \\end{matrix}\n  \\right]\n  \\left[\n  \\begin{matrix}\n   x \\\\\\\\\n   y\n  \\end{matrix}\n  \\right]\n$$\n\n**把矩阵$\\begin{bmatrix} u_x & u_y \\end{bmatrix}$转置一下，就变成了点积的定义，这也就是为什么向量的点积可以和几何投影对应起来。**\n\n上面是以单位向量 $\\vec{u}$ 为例，如果 $\\vec{u}$ 不是单位向量怎么理解呢？\n\n其实也很简单，把 $\\vec{u}$ 归一化成单位向量 $\\vec{u_0}$，前面提取出一个系数 $c$，这个系数也就是 $\\vec{u}$ 的长度。那么空间中任意向量 $\\begin{bmatrix} x \\\\\\\\ y \\end{bmatrix}$ 和 $\\vec{u}$ 的点积可以先看做 $\\begin{bmatrix} x \\\\\\\\ y \\end{bmatrix}$ 和 $\\vec{u_0}$ 的点积，也就是上面的投影过程，最后再乘以 $c$，也就是 $\\vec{u}$ 的长度。\n\n完美对应。\n","slug":"Linear algebra-Dot product","published":1,"updated":"2019-08-29T04:39:54.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ld000i30vndyf5u31r","content":"<p>我们都知道两个向量 $\\vec{a}$，$\\vec{b}$ 的点积可以想象为 $\\vec{a}$ 朝 $\\vec{b}$ 方向上的投影长度乘以 $\\vec{b}$ 的长度。其中结果的正负代表方向，两个向量成锐角则大于$0$，成钝角则小于$0$。</p>\n<p>可是为什么可以这样做呢，这要从线性代数的本质说起。致敬<a href=\"http://www.3blue1brown.com/\" target=\"_blank\" rel=\"noopener\">3Blue1Brown</a>，一个热爱数学，并教你如何从直观上去理解数学的团队，将只停留在数值运算和公式的线性代数推进到可视化几何直观的领悟上，在B站上可以找到搬运的系列视频<a href=\"https://www.bilibili.com/video/av5977466/?spm_id_from=333.788.videocard.8\" target=\"_blank\" rel=\"noopener\">线性代数的本质</a>。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">卡尔文：你知道吗，我觉得数学不是一门科学，而是一种宗教</span><br><span class=\"line\">霍布斯：一种宗教？</span><br><span class=\"line\">卡尔文：是啊。这些公式就像奇迹一般。你取出两个数，把它们相加时，它们神奇地成为了一个全新</span><br><span class=\"line\">的数！没人能说清这到底是怎么发生的。你要么完全相信，要么完全不信。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"点积与投影\"><a href=\"#点积与投影\" class=\"headerlink\" title=\"点积与投影\"></a>点积与投影</h1><p>视频里关于点积和投影对应的那一部分个人觉得不太好理解，自己也花了挺久才理解，在这里记录一下，并提供一种理解方式。</p>\n<p><strong><em>以下图片均来自3Blue1Brown发布的线性代数的本质系列视频，直接来源为<a href=\"https://charlesliuyx.github.io/2017/10/06/%E3%80%90%E7%9B%B4%E8%A7%82%E8%AF%A6%E8%A7%A3%E3%80%91%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/#%E7%82%B9%E7%A7%AF%E4%B8%8E%E5%AF%B9%E5%81%B6%E6%80%A7\" target=\"_blank\" rel=\"noopener\">Go Further的博客</a></em></strong></p>\n<p><strong>首先来看点积的运算：</strong></p>\n<p>两个维数相同的向量做点积，就是把他们对应坐标相乘再相加。</p>\n<div style=\"width: 300px; margin: auto\">\n    ![1.gif](/1.gif)\n</div>\n\n<p>我们假设图中的两个向量分别为 $\\vec{a}$ 和 $\\vec{b}$， 我们可以发现点积的运算和将向量 $\\vec{a}$ 转置为 $1*4$ 的矩阵再和 $\\vec{b}$ 做相乘的结果是一样的。从这里入手我们来分析一下矩阵相乘和投影的关系。</p>\n<p><strong>投影：</strong></p>\n<p>任取坐标系中的一条直线作为投影直线，同时在这条直线上取一个单位向量 $\\vec{u}$，设它的坐标为$(u_x，u_y)$。</p>\n<div style=\"width: 500px; margin: auto\">\n    ![2.gif](/2.gif)\n</div>\n\n<p>投影是一种线性变换，矩阵的意义就是表示线性变换，所以这个二维空间中的任意一个向量在这条直线上的投影变换都可以用一个矩阵表示出来，至于这个矩阵是什么，我们只需要考虑基向量的变换。(<strong><em>至于为什么矩阵的意义是线性变换以及为什么用矩阵描述一个变换只需要考虑基向量的变换请移步<a href=\"https://www.bilibili.com/video/av5977466/?spm_id_from=333.788.videocard.8\" target=\"_blank\" rel=\"noopener\">线性代数的本质</a></em></strong>)</p>\n<div style=\"width: 500px; margin: auto\">\n    ![3.gif](/3.gif)\n</div>\n\n<p>上图运用对称性得到基向量 $\\vec{i}$ 和 $\\vec{j}$ 在直线上的投影分别为$u_x$ 和 $u_y$，所以这个投影变换的矩阵也就是</p>\n<p>$$<br> \\begin{bmatrix}<br>   u_x &amp; u_y<br>  \\end{bmatrix}<br>$$</p>\n<p>所以二维空间中任一向量 $\\begin{bmatrix} x \\\\ y \\end{bmatrix}$ 在单位向量 $\\vec{u}$ 所在直线上的投影值为</p>\n<p>$$<br> \\left[<br> \\begin{matrix}<br>   u_x &amp; u_y<br>  \\end{matrix}<br>  \\right]<br>  \\left[<br>  \\begin{matrix}<br>   x \\\\<br>   y<br>  \\end{matrix}<br>  \\right]<br>$$</p>\n<p><strong>把矩阵$\\begin{bmatrix} u_x &amp; u_y \\end{bmatrix}$转置一下，就变成了点积的定义，这也就是为什么向量的点积可以和几何投影对应起来。</strong></p>\n<p>上面是以单位向量 $\\vec{u}$ 为例，如果 $\\vec{u}$ 不是单位向量怎么理解呢？</p>\n<p>其实也很简单，把 $\\vec{u}$ 归一化成单位向量 $\\vec{u_0}$，前面提取出一个系数 $c$，这个系数也就是 $\\vec{u}$ 的长度。那么空间中任意向量 $\\begin{bmatrix} x \\\\ y \\end{bmatrix}$ 和 $\\vec{u}$ 的点积可以先看做 $\\begin{bmatrix} x \\\\ y \\end{bmatrix}$ 和 $\\vec{u_0}$ 的点积，也就是上面的投影过程，最后再乘以 $c$，也就是 $\\vec{u}$ 的长度。</p>\n<p>完美对应。</p>\n","site":{"data":{}},"excerpt":"<p>我们都知道两个向量 $\\vec{a}$，$\\vec{b}$ 的点积可以想象为 $\\vec{a}$ 朝 $\\vec{b}$ 方向上的投影长度乘以 $\\vec{b}$ 的长度。其中结果的正负代表方向，两个向量成锐角则大于$0$，成钝角则小于$0$。</p>\n<p>可是为什么可以这样做呢，这要从线性代数的本质说起。致敬<a href=\"http://www.3blue1brown.com/\" target=\"_blank\" rel=\"noopener\">3Blue1Brown</a>，一个热爱数学，并教你如何从直观上去理解数学的团队，将只停留在数值运算和公式的线性代数推进到可视化几何直观的领悟上，在B站上可以找到搬运的系列视频<a href=\"https://www.bilibili.com/video/av5977466/?spm_id_from=333.788.videocard.8\" target=\"_blank\" rel=\"noopener\">线性代数的本质</a>。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">卡尔文：你知道吗，我觉得数学不是一门科学，而是一种宗教</span><br><span class=\"line\">霍布斯：一种宗教？</span><br><span class=\"line\">卡尔文：是啊。这些公式就像奇迹一般。你取出两个数，把它们相加时，它们神奇地成为了一个全新</span><br><span class=\"line\">的数！没人能说清这到底是怎么发生的。你要么完全相信，要么完全不信。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"点积与投影\"><a href=\"#点积与投影\" class=\"headerlink\" title=\"点积与投影\"></a>点积与投影</h1><p>视频里关于点积和投影对应的那一部分个人觉得不太好理解，自己也花了挺久才理解，在这里记录一下，并提供一种理解方式。</p>\n<p><strong><em>以下图片均来自3Blue1Brown发布的线性代数的本质系列视频，直接来源为<a href=\"https://charlesliuyx.github.io/2017/10/06/%E3%80%90%E7%9B%B4%E8%A7%82%E8%AF%A6%E8%A7%A3%E3%80%91%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/#%E7%82%B9%E7%A7%AF%E4%B8%8E%E5%AF%B9%E5%81%B6%E6%80%A7\" target=\"_blank\" rel=\"noopener\">Go Further的博客</a></em></strong></p>\n<p><strong>首先来看点积的运算：</strong></p>\n<p>两个维数相同的向量做点积，就是把他们对应坐标相乘再相加。</p>\n<div style=\"width: 300px; margin: auto\">\n    ![1.gif](/1.gif)\n</div>\n\n<p>我们假设图中的两个向量分别为 $\\vec{a}$ 和 $\\vec{b}$， 我们可以发现点积的运算和将向量 $\\vec{a}$ 转置为 $1*4$ 的矩阵再和 $\\vec{b}$ 做相乘的结果是一样的。从这里入手我们来分析一下矩阵相乘和投影的关系。</p>\n<p><strong>投影：</strong></p>\n<p>任取坐标系中的一条直线作为投影直线，同时在这条直线上取一个单位向量 $\\vec{u}$，设它的坐标为$(u_x，u_y)$。</p>\n<div style=\"width: 500px; margin: auto\">\n    ![2.gif](/2.gif)\n</div>\n\n<p>投影是一种线性变换，矩阵的意义就是表示线性变换，所以这个二维空间中的任意一个向量在这条直线上的投影变换都可以用一个矩阵表示出来，至于这个矩阵是什么，我们只需要考虑基向量的变换。(<strong><em>至于为什么矩阵的意义是线性变换以及为什么用矩阵描述一个变换只需要考虑基向量的变换请移步<a href=\"https://www.bilibili.com/video/av5977466/?spm_id_from=333.788.videocard.8\" target=\"_blank\" rel=\"noopener\">线性代数的本质</a></em></strong>)</p>\n<div style=\"width: 500px; margin: auto\">\n    ![3.gif](/3.gif)\n</div>\n\n<p>上图运用对称性得到基向量 $\\vec{i}$ 和 $\\vec{j}$ 在直线上的投影分别为$u_x$ 和 $u_y$，所以这个投影变换的矩阵也就是</p>\n<p>$$<br> \\begin{bmatrix}<br>   u_x &amp; u_y<br>  \\end{bmatrix}<br>$$</p>\n<p>所以二维空间中任一向量 $\\begin{bmatrix} x \\\\ y \\end{bmatrix}$ 在单位向量 $\\vec{u}$ 所在直线上的投影值为</p>\n<p>$$<br> \\left[<br> \\begin{matrix}<br>   u_x &amp; u_y<br>  \\end{matrix}<br>  \\right]<br>  \\left[<br>  \\begin{matrix}<br>   x \\\\<br>   y<br>  \\end{matrix}<br>  \\right]<br>$$</p>\n<p><strong>把矩阵$\\begin{bmatrix} u_x &amp; u_y \\end{bmatrix}$转置一下，就变成了点积的定义，这也就是为什么向量的点积可以和几何投影对应起来。</strong></p>\n<p>上面是以单位向量 $\\vec{u}$ 为例，如果 $\\vec{u}$ 不是单位向量怎么理解呢？</p>\n<p>其实也很简单，把 $\\vec{u}$ 归一化成单位向量 $\\vec{u_0}$，前面提取出一个系数 $c$，这个系数也就是 $\\vec{u}$ 的长度。那么空间中任意向量 $\\begin{bmatrix} x \\\\ y \\end{bmatrix}$ 和 $\\vec{u}$ 的点积可以先看做 $\\begin{bmatrix} x \\\\ y \\end{bmatrix}$ 和 $\\vec{u_0}$ 的点积，也就是上面的投影过程，最后再乘以 $c$，也就是 $\\vec{u}$ 的长度。</p>\n<p>完美对应。</p>"},{"title":"Maze","date":"2019-03-26T05:23:44.000Z","_content":"第十届蓝桥杯省赛D题，迷宫求从(0，0)－>(n，m)的最短路径。\n本来如果只是求最短路的话倒没什么，一遍BFS就可以解决。但是要求如果存在多条最短路，取路径字典序最小的那条。其中路径由``U D L R``四种字符组成，分别表示``上 下 左 右``。\n譬如，下面这个迷宫的最短路为``DRRURRDDDR``。\n![maze](/maze.png)\n<!--more-->\n# 题解\n*这道题和之前整理过的[Uva1599](https://ain-crad.github.io/2018/11/18/Uva1599-Ideal-Path/)有点类似。*\n一种策略是和Uva1599的做法一样，先从终点开始反向求一遍BFS，再根据距离信息从起点出发选择方向字典序小的走直到终点。\n和Uva1599不同的是，这道题中每个位置相邻的四个可走方向优先级固定，且不存在优先级相同的情况，所以另一种策略是直接从起点BFS每次优先把方向字典序小的位置加入队列中，并记录路径。\n\n# 代码\n*题目中给定了一个maze.txt，代码是根据文件中的迷宫来写的。*\n*[maze.txt以及原题pdf链接](https://github.com/Ain-Crad/ACM/tree/master/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF/Problems)*\n## 策略1\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 26 Mar 13:55:33 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 100;\nchar maze[maxn][maxn];\nint dis[maxn][maxn];\nbool vis[maxn][maxn];\nint n = 30, m = 50;\nint dx[] = {1, 0, 0, -1};\nint dy[] = {0, -1, 1, 0};\nchar dir[] = {'D', 'L', 'R', 'U'};\nstruct Node{\n    int x, y;\n    Node(int x = 0, int y = 0):x(x), y(y){}\n};\n\nvoid back_bfs(){\n    queue<Node> que;\n    que.push(Node(n - 1, m - 1));\n    dis[n - 1][m - 1] = 0;\n    vis[n - 1][m - 1] = 1;\n\n    while(!que.empty()){\n        Node node = que.front();\n        que.pop();\n        for(int i = 0; i < 4; i++){\n            int nx = node.x + dx[i], ny = node.y + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < m && !vis[nx][ny] && maze[nx][ny] == '0'){\n                que.push(Node(nx, ny));\n                dis[nx][ny] = dis[node.x][node.y] + 1;\n                vis[nx][ny] = 1;\n            }\n        }\n    }\n}\n\nvoid bfs(){\n    vector<char> vec;\n    queue<Node> que;\n    que.push(Node(0, 0));\n    int len = dis[0][0];\n    for(int k = 0; k < len; k++){\n        Node node = que.front();\n        que.pop();\n        if(node.x == n - 1 && node.y == m - 1) break;\n        for(int i = 0; i < 4; i++){\n            int nx = node.x + dx[i], ny = node.y + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < m && dis[nx][ny] == dis[node.x][node.y] - 1){\n                vec.push_back(dir[i]);\n                que.push(Node(nx, ny));\n                break;\n            }\n        }\n    }\n\n    for(auto x : vec){\n        cout << x;\n    }\n    cout << endl;\n}\n\nint main(){\n    freopen(\"maze.txt\", \"r\", stdin);\n    memset(dis, -1, sizeof(dis));\n    memset(vis, 0, sizeof(vis));\n    for(int i = 0; i < n; i++){\n        gets(maze[i]);\n    }\n    back_bfs();\n    bfs();\n\n    return 0;\n}\n```\n## 策略2\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 26 Mar 20:02:33 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 100;\nint n = 30, m = 50;\nchar maze[maxn][maxn];\nbool vis[maxn][maxn];\nint dis[maxn][maxn];\nint dx[] = {1, 0, 0, -1};\nint dy[] = {0, -1, 1, 0};\n\nstruct Node{\n    int x, y;\n    Node(int x = 0, int y = 0):x(x), y(y){}\n};\nNode pre[maxn][maxn];\n\nvoid bfs(){\n    queue<Node> que;\n    que.push(Node(0, 0));\n    vis[0][0] = 1;\n    dis[0][0] = 0;\n\n    while(!que.empty()){\n        Node node = que.front();\n        que.pop();\n        if(node.x == n - 1 && node.y == m - 1) break;\n        for(int i = 0; i < 4; i++){\n            int nx = node.x + dx[i], ny = node.y + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < m && !vis[nx][ny] && maze[nx][ny] == '0'){\n                dis[nx][ny] = dis[node.x][node.y] + 1;\n                vis[nx][ny] = 1;\n                pre[nx][ny] = node;\n                que.push(Node(nx, ny));\n            }\n        }\n    }\n}\n\nvoid printPath(){\n    vector<char> vec;\n    int len = dis[n - 1][m - 1];\n    int x = n - 1, y = m - 1;\n    for(int i = 0; i < len; i++){\n        if(pre[x][y].x - x == -1 && pre[x][y].y - y == 0)\n            vec.push_back('D');\n        else if(pre[x][y].x - x == 0 && pre[x][y].y - y == 1)\n            vec.push_back('L');\n        else if(pre[x][y].x - x == 0 && pre[x][y].y - y == -1)\n            vec.push_back('R');\n        else if(pre[x][y].x - x == 1 && pre[x][y].y - y == 0)\n            vec.push_back('U');\n\n        //坑点，卡了好久，一开始直接另x = pre[x][y].x, y = pre[x][y].y, 这样就在赋值过程中改变了原始值。\n        int x_tmp = pre[x][y].x, y_tmp = pre[x][y].y; \n        x = x_tmp, y = y_tmp;\n    }\n\n    reverse(vec.begin(), vec.end());\n\n    for(auto x : vec){\n        cout << x;\n    }\n    cout << endl;\n}\n\nint main(){\n    freopen(\"maze.txt\", \"r\", stdin);\n    freopen(\"c1out.txt\", \"w\", stdout);\n    memset(vis, 0, sizeof(vis));\n    memset(dis, -1, sizeof(dis));\n    for(int i = 0; i < n; i++){\n        fgets(maze[i], sizeof(maze[i]), stdin);\n    }\n\n    bfs();\n    printPath();\n\n    return 0;\n}\n```\n","source":"_posts/Maze.md","raw":"---\ntitle: Maze\ndate: 2019-03-26 13:23:44\ncategories:\n- ACM\ntags:\n- BFS\n---\n第十届蓝桥杯省赛D题，迷宫求从(0，0)－>(n，m)的最短路径。\n本来如果只是求最短路的话倒没什么，一遍BFS就可以解决。但是要求如果存在多条最短路，取路径字典序最小的那条。其中路径由``U D L R``四种字符组成，分别表示``上 下 左 右``。\n譬如，下面这个迷宫的最短路为``DRRURRDDDR``。\n![maze](/maze.png)\n<!--more-->\n# 题解\n*这道题和之前整理过的[Uva1599](https://ain-crad.github.io/2018/11/18/Uva1599-Ideal-Path/)有点类似。*\n一种策略是和Uva1599的做法一样，先从终点开始反向求一遍BFS，再根据距离信息从起点出发选择方向字典序小的走直到终点。\n和Uva1599不同的是，这道题中每个位置相邻的四个可走方向优先级固定，且不存在优先级相同的情况，所以另一种策略是直接从起点BFS每次优先把方向字典序小的位置加入队列中，并记录路径。\n\n# 代码\n*题目中给定了一个maze.txt，代码是根据文件中的迷宫来写的。*\n*[maze.txt以及原题pdf链接](https://github.com/Ain-Crad/ACM/tree/master/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF/Problems)*\n## 策略1\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 26 Mar 13:55:33 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 100;\nchar maze[maxn][maxn];\nint dis[maxn][maxn];\nbool vis[maxn][maxn];\nint n = 30, m = 50;\nint dx[] = {1, 0, 0, -1};\nint dy[] = {0, -1, 1, 0};\nchar dir[] = {'D', 'L', 'R', 'U'};\nstruct Node{\n    int x, y;\n    Node(int x = 0, int y = 0):x(x), y(y){}\n};\n\nvoid back_bfs(){\n    queue<Node> que;\n    que.push(Node(n - 1, m - 1));\n    dis[n - 1][m - 1] = 0;\n    vis[n - 1][m - 1] = 1;\n\n    while(!que.empty()){\n        Node node = que.front();\n        que.pop();\n        for(int i = 0; i < 4; i++){\n            int nx = node.x + dx[i], ny = node.y + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < m && !vis[nx][ny] && maze[nx][ny] == '0'){\n                que.push(Node(nx, ny));\n                dis[nx][ny] = dis[node.x][node.y] + 1;\n                vis[nx][ny] = 1;\n            }\n        }\n    }\n}\n\nvoid bfs(){\n    vector<char> vec;\n    queue<Node> que;\n    que.push(Node(0, 0));\n    int len = dis[0][0];\n    for(int k = 0; k < len; k++){\n        Node node = que.front();\n        que.pop();\n        if(node.x == n - 1 && node.y == m - 1) break;\n        for(int i = 0; i < 4; i++){\n            int nx = node.x + dx[i], ny = node.y + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < m && dis[nx][ny] == dis[node.x][node.y] - 1){\n                vec.push_back(dir[i]);\n                que.push(Node(nx, ny));\n                break;\n            }\n        }\n    }\n\n    for(auto x : vec){\n        cout << x;\n    }\n    cout << endl;\n}\n\nint main(){\n    freopen(\"maze.txt\", \"r\", stdin);\n    memset(dis, -1, sizeof(dis));\n    memset(vis, 0, sizeof(vis));\n    for(int i = 0; i < n; i++){\n        gets(maze[i]);\n    }\n    back_bfs();\n    bfs();\n\n    return 0;\n}\n```\n## 策略2\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 26 Mar 20:02:33 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 100;\nint n = 30, m = 50;\nchar maze[maxn][maxn];\nbool vis[maxn][maxn];\nint dis[maxn][maxn];\nint dx[] = {1, 0, 0, -1};\nint dy[] = {0, -1, 1, 0};\n\nstruct Node{\n    int x, y;\n    Node(int x = 0, int y = 0):x(x), y(y){}\n};\nNode pre[maxn][maxn];\n\nvoid bfs(){\n    queue<Node> que;\n    que.push(Node(0, 0));\n    vis[0][0] = 1;\n    dis[0][0] = 0;\n\n    while(!que.empty()){\n        Node node = que.front();\n        que.pop();\n        if(node.x == n - 1 && node.y == m - 1) break;\n        for(int i = 0; i < 4; i++){\n            int nx = node.x + dx[i], ny = node.y + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < m && !vis[nx][ny] && maze[nx][ny] == '0'){\n                dis[nx][ny] = dis[node.x][node.y] + 1;\n                vis[nx][ny] = 1;\n                pre[nx][ny] = node;\n                que.push(Node(nx, ny));\n            }\n        }\n    }\n}\n\nvoid printPath(){\n    vector<char> vec;\n    int len = dis[n - 1][m - 1];\n    int x = n - 1, y = m - 1;\n    for(int i = 0; i < len; i++){\n        if(pre[x][y].x - x == -1 && pre[x][y].y - y == 0)\n            vec.push_back('D');\n        else if(pre[x][y].x - x == 0 && pre[x][y].y - y == 1)\n            vec.push_back('L');\n        else if(pre[x][y].x - x == 0 && pre[x][y].y - y == -1)\n            vec.push_back('R');\n        else if(pre[x][y].x - x == 1 && pre[x][y].y - y == 0)\n            vec.push_back('U');\n\n        //坑点，卡了好久，一开始直接另x = pre[x][y].x, y = pre[x][y].y, 这样就在赋值过程中改变了原始值。\n        int x_tmp = pre[x][y].x, y_tmp = pre[x][y].y; \n        x = x_tmp, y = y_tmp;\n    }\n\n    reverse(vec.begin(), vec.end());\n\n    for(auto x : vec){\n        cout << x;\n    }\n    cout << endl;\n}\n\nint main(){\n    freopen(\"maze.txt\", \"r\", stdin);\n    freopen(\"c1out.txt\", \"w\", stdout);\n    memset(vis, 0, sizeof(vis));\n    memset(dis, -1, sizeof(dis));\n    for(int i = 0; i < n; i++){\n        fgets(maze[i], sizeof(maze[i]), stdin);\n    }\n\n    bfs();\n    printPath();\n\n    return 0;\n}\n```\n","slug":"Maze","published":1,"updated":"2019-08-20T14:51:30.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2le000j30vn5b98zrui","content":"<p>第十届蓝桥杯省赛D题，迷宫求从(0，0)－&gt;(n，m)的最短路径。<br>本来如果只是求最短路的话倒没什么，一遍BFS就可以解决。但是要求如果存在多条最短路，取路径字典序最小的那条。其中路径由<code>U D L R</code>四种字符组成，分别表示<code>上 下 左 右</code>。<br>譬如，下面这个迷宫的最短路为<code>DRRURRDDDR</code>。<br><img src=\"/2019/03/26/Maze/maze.png\" alt=\"maze\"></p>\n<a id=\"more\"></a>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><em>这道题和之前整理过的<a href=\"https://ain-crad.github.io/2018/11/18/Uva1599-Ideal-Path/\" target=\"_blank\" rel=\"noopener\">Uva1599</a>有点类似。</em><br>一种策略是和Uva1599的做法一样，先从终点开始反向求一遍BFS，再根据距离信息从起点出发选择方向字典序小的走直到终点。<br>和Uva1599不同的是，这道题中每个位置相邻的四个可走方向优先级固定，且不存在优先级相同的情况，所以另一种策略是直接从起点BFS每次优先把方向字典序小的位置加入队列中，并记录路径。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p><em>题目中给定了一个maze.txt，代码是根据文件中的迷宫来写的。</em><br><em><a href=\"https://github.com/Ain-Crad/ACM/tree/master/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF/Problems\" target=\"_blank\" rel=\"noopener\">maze.txt以及原题pdf链接</a></em></p>\n<h2 id=\"策略1\"><a href=\"#策略1\" class=\"headerlink\" title=\"策略1\"></a>策略1</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 26 Mar 13:55:33 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> maze[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">30</span>, m = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">char</span> dir[] = &#123;<span class=\"string\">'D'</span>, <span class=\"string\">'L'</span>, <span class=\"string\">'R'</span>, <span class=\"string\">'U'</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>):x(x), y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">back_bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    que.push(Node(n - <span class=\"number\">1</span>, m - <span class=\"number\">1</span>));</span><br><span class=\"line\">    dis[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node node = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = node.x + dx[i], ny = node.y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; m &amp;&amp; !vis[nx][ny] &amp;&amp; maze[nx][ny] == <span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">                que.push(Node(nx, ny));</span><br><span class=\"line\">                dis[nx][ny] = dis[node.x][node.y] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[nx][ny] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    que.push(Node(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = dis[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; len; k++)&#123;</span><br><span class=\"line\">        Node node = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.x == n - <span class=\"number\">1</span> &amp;&amp; node.y == m - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = node.x + dx[i], ny = node.y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; m &amp;&amp; dis[nx][ny] == dis[node.x][node.y] - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                vec.push_back(dir[i]);</span><br><span class=\"line\">                que.push(Node(nx, ny));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"maze.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        gets(maze[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    back_bfs();</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"策略2\"><a href=\"#策略2\" class=\"headerlink\" title=\"策略2\"></a>策略2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 26 Mar 20:02:33 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">30</span>, m = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> maze[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>):x(x), y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node pre[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    que.push(Node(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dis[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node node = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.x == n - <span class=\"number\">1</span> &amp;&amp; node.y == m - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = node.x + dx[i], ny = node.y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; m &amp;&amp; !vis[nx][ny] &amp;&amp; maze[nx][ny] == <span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">                dis[nx][ny] = dis[node.x][node.y] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[nx][ny] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                pre[nx][ny] = node;</span><br><span class=\"line\">                que.push(Node(nx, ny));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printPath</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = dis[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = n - <span class=\"number\">1</span>, y = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre[x][y].x - x == <span class=\"number\">-1</span> &amp;&amp; pre[x][y].y - y == <span class=\"number\">0</span>)</span><br><span class=\"line\">            vec.push_back(<span class=\"string\">'D'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pre[x][y].x - x == <span class=\"number\">0</span> &amp;&amp; pre[x][y].y - y == <span class=\"number\">1</span>)</span><br><span class=\"line\">            vec.push_back(<span class=\"string\">'L'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pre[x][y].x - x == <span class=\"number\">0</span> &amp;&amp; pre[x][y].y - y == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            vec.push_back(<span class=\"string\">'R'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pre[x][y].x - x == <span class=\"number\">1</span> &amp;&amp; pre[x][y].y - y == <span class=\"number\">0</span>)</span><br><span class=\"line\">            vec.push_back(<span class=\"string\">'U'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//坑点，卡了好久，一开始直接另x = pre[x][y].x, y = pre[x][y].y, 这样就在赋值过程中改变了原始值。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> x_tmp = pre[x][y].x, y_tmp = pre[x][y].y; </span><br><span class=\"line\">        x = x_tmp, y = y_tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    reverse(vec.begin(), vec.end());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"maze.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"c1out.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        fgets(maze[i], <span class=\"keyword\">sizeof</span>(maze[i]), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    printPath();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>第十届蓝桥杯省赛D题，迷宫求从(0，0)－&gt;(n，m)的最短路径。<br>本来如果只是求最短路的话倒没什么，一遍BFS就可以解决。但是要求如果存在多条最短路，取路径字典序最小的那条。其中路径由<code>U D L R</code>四种字符组成，分别表示<code>上 下 左 右</code>。<br>譬如，下面这个迷宫的最短路为<code>DRRURRDDDR</code>。<br><img src=\"/2019/03/26/Maze/maze.png\" alt=\"maze\"></p>","more":"<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><em>这道题和之前整理过的<a href=\"https://ain-crad.github.io/2018/11/18/Uva1599-Ideal-Path/\" target=\"_blank\" rel=\"noopener\">Uva1599</a>有点类似。</em><br>一种策略是和Uva1599的做法一样，先从终点开始反向求一遍BFS，再根据距离信息从起点出发选择方向字典序小的走直到终点。<br>和Uva1599不同的是，这道题中每个位置相邻的四个可走方向优先级固定，且不存在优先级相同的情况，所以另一种策略是直接从起点BFS每次优先把方向字典序小的位置加入队列中，并记录路径。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p><em>题目中给定了一个maze.txt，代码是根据文件中的迷宫来写的。</em><br><em><a href=\"https://github.com/Ain-Crad/ACM/tree/master/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF/Problems\" target=\"_blank\" rel=\"noopener\">maze.txt以及原题pdf链接</a></em></p>\n<h2 id=\"策略1\"><a href=\"#策略1\" class=\"headerlink\" title=\"策略1\"></a>策略1</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 26 Mar 13:55:33 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> maze[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">30</span>, m = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">char</span> dir[] = &#123;<span class=\"string\">'D'</span>, <span class=\"string\">'L'</span>, <span class=\"string\">'R'</span>, <span class=\"string\">'U'</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>):x(x), y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">back_bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    que.push(Node(n - <span class=\"number\">1</span>, m - <span class=\"number\">1</span>));</span><br><span class=\"line\">    dis[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node node = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = node.x + dx[i], ny = node.y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; m &amp;&amp; !vis[nx][ny] &amp;&amp; maze[nx][ny] == <span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">                que.push(Node(nx, ny));</span><br><span class=\"line\">                dis[nx][ny] = dis[node.x][node.y] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[nx][ny] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    que.push(Node(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = dis[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; len; k++)&#123;</span><br><span class=\"line\">        Node node = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.x == n - <span class=\"number\">1</span> &amp;&amp; node.y == m - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = node.x + dx[i], ny = node.y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; m &amp;&amp; dis[nx][ny] == dis[node.x][node.y] - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                vec.push_back(dir[i]);</span><br><span class=\"line\">                que.push(Node(nx, ny));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"maze.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        gets(maze[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    back_bfs();</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"策略2\"><a href=\"#策略2\" class=\"headerlink\" title=\"策略2\"></a>策略2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 26 Mar 20:02:33 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">30</span>, m = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> maze[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>):x(x), y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node pre[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    que.push(Node(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dis[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node node = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.x == n - <span class=\"number\">1</span> &amp;&amp; node.y == m - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = node.x + dx[i], ny = node.y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; m &amp;&amp; !vis[nx][ny] &amp;&amp; maze[nx][ny] == <span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">                dis[nx][ny] = dis[node.x][node.y] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                vis[nx][ny] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                pre[nx][ny] = node;</span><br><span class=\"line\">                que.push(Node(nx, ny));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printPath</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = dis[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = n - <span class=\"number\">1</span>, y = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre[x][y].x - x == <span class=\"number\">-1</span> &amp;&amp; pre[x][y].y - y == <span class=\"number\">0</span>)</span><br><span class=\"line\">            vec.push_back(<span class=\"string\">'D'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pre[x][y].x - x == <span class=\"number\">0</span> &amp;&amp; pre[x][y].y - y == <span class=\"number\">1</span>)</span><br><span class=\"line\">            vec.push_back(<span class=\"string\">'L'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pre[x][y].x - x == <span class=\"number\">0</span> &amp;&amp; pre[x][y].y - y == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            vec.push_back(<span class=\"string\">'R'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pre[x][y].x - x == <span class=\"number\">1</span> &amp;&amp; pre[x][y].y - y == <span class=\"number\">0</span>)</span><br><span class=\"line\">            vec.push_back(<span class=\"string\">'U'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//坑点，卡了好久，一开始直接另x = pre[x][y].x, y = pre[x][y].y, 这样就在赋值过程中改变了原始值。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> x_tmp = pre[x][y].x, y_tmp = pre[x][y].y; </span><br><span class=\"line\">        x = x_tmp, y = y_tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    reverse(vec.begin(), vec.end());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"maze.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"c1out.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        fgets(maze[i], <span class=\"keyword\">sizeof</span>(maze[i]), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    printPath();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"My little angel","date":"2018-06-10T01:57:06.000Z","_content":"\n# 重庆之旅\n　　和邱小笨蛋在一起四个多月了，但是快一年没见了，她在重庆，我在北京，她读高中，我读大学。感觉有些不可思议，能够遇到，能够在一起。感谢女票的勇敢，我是非常怂的，，，。\n　　在重庆度过了非常非常开心的几天，刚到的那天晚上给女票发消息说到了之后激动的睡不着，第二天早上终于见到了穿着裙裙来找我的女票票～(｡･ω･｡)ﾉ♡\n\n![邱小雁](/qxy1.jpg)\n<!--more-->\n\n　　女票比印象中要瘦了，可能是高中太累了吧，有些心疼，让她多长些肉肉她还不愿意Ծ‸ Ծ 。之后两人一起牵爪爪去逛商场玩了和女票期待已久的密室逃脱，可惜太菜了，小哥哥可能是可怜我们哈哈让我们看了最后的一关。\n　　一直想去女票学校看看的心愿也达成了，想感受一下女票平时给我发的照片里的地方、花花到底是什么样子的。去了女票平时自习的自习室，稍微有点冷，女票下次去的时候多穿一点啊。竟然还遇到了抓早恋的老师＝＝（害怕.jpg），女票好机智，话说我都大三了为什么还怕这种老师。。\n　　第三天早上和女票在一起吃的早餐，还是要说一下女票吃的太少了，多长肉肉啊亲爱的，不用担心，男票抱得动的(•̀⌄•́)。吃了早餐一起去女票住的小区里打了篮球，之前说要教女票投篮可是自己投了十几个才中了一个，，呜呜呜T^T树立了一个篮球小菜鸡的形象，不过一起吃了可爱多很开心(๑❛ᴗ❛๑)。中午去吃了自助，女票怕我吃不了太辣点了清汤的小火锅，委屈重庆小妹纸了。下午一起做了情侣必做的事情，看电影！而且是小哆啦哈哈，抱着女票看电影的感觉好幸福。\n　　女票怕妈妈担心本来是要在家吃晚饭的，我晚上不知道吃什么和女票说想点外卖，女票就从家跑出来陪我了，感动::>_<::（虽然最后在一起抱了好久连外卖也没吃成哈哈哈），感谢我女票票。晚上送女票回家一起在长江边散步也超级开心，女票还热情的给我介绍了重庆的“移动公厕”哈哈。\n\n![邱小雁](/moon1.jpg)\n\n![邱小雁](/together1.jpg)\n\n　　周五要回学校了，女票早上发消息说她准备来找我了，昨晚梦到我突然就不见了，我骗女票说我是9:45的飞机，我已经走了（其实是11:45的飞机，那时候大概7:40左右我刚醒），本来我以为傻女票不会相信，没想到她直接哭着给我打电话问我“你干嘛啊”，天啊，心都要化了。可能是之前和她说机场有点远不想让她送我，所以她才相信我真的走了吧♡。见到女票后果然被打了，，但是那句“你是猪吗”我却听的如痴如醉，怎么会有这么可爱的女孩子啊。\n　　我爱你，傻女票。","source":"_posts/My-little-angel.md","raw":"---\ntitle: My little angel\ndate: 2018-06-10 09:57:06\ncategories:\n- Diary\ntags:\n- Lover\n---\n\n# 重庆之旅\n　　和邱小笨蛋在一起四个多月了，但是快一年没见了，她在重庆，我在北京，她读高中，我读大学。感觉有些不可思议，能够遇到，能够在一起。感谢女票的勇敢，我是非常怂的，，，。\n　　在重庆度过了非常非常开心的几天，刚到的那天晚上给女票发消息说到了之后激动的睡不着，第二天早上终于见到了穿着裙裙来找我的女票票～(｡･ω･｡)ﾉ♡\n\n![邱小雁](/qxy1.jpg)\n<!--more-->\n\n　　女票比印象中要瘦了，可能是高中太累了吧，有些心疼，让她多长些肉肉她还不愿意Ծ‸ Ծ 。之后两人一起牵爪爪去逛商场玩了和女票期待已久的密室逃脱，可惜太菜了，小哥哥可能是可怜我们哈哈让我们看了最后的一关。\n　　一直想去女票学校看看的心愿也达成了，想感受一下女票平时给我发的照片里的地方、花花到底是什么样子的。去了女票平时自习的自习室，稍微有点冷，女票下次去的时候多穿一点啊。竟然还遇到了抓早恋的老师＝＝（害怕.jpg），女票好机智，话说我都大三了为什么还怕这种老师。。\n　　第三天早上和女票在一起吃的早餐，还是要说一下女票吃的太少了，多长肉肉啊亲爱的，不用担心，男票抱得动的(•̀⌄•́)。吃了早餐一起去女票住的小区里打了篮球，之前说要教女票投篮可是自己投了十几个才中了一个，，呜呜呜T^T树立了一个篮球小菜鸡的形象，不过一起吃了可爱多很开心(๑❛ᴗ❛๑)。中午去吃了自助，女票怕我吃不了太辣点了清汤的小火锅，委屈重庆小妹纸了。下午一起做了情侣必做的事情，看电影！而且是小哆啦哈哈，抱着女票看电影的感觉好幸福。\n　　女票怕妈妈担心本来是要在家吃晚饭的，我晚上不知道吃什么和女票说想点外卖，女票就从家跑出来陪我了，感动::>_<::（虽然最后在一起抱了好久连外卖也没吃成哈哈哈），感谢我女票票。晚上送女票回家一起在长江边散步也超级开心，女票还热情的给我介绍了重庆的“移动公厕”哈哈。\n\n![邱小雁](/moon1.jpg)\n\n![邱小雁](/together1.jpg)\n\n　　周五要回学校了，女票早上发消息说她准备来找我了，昨晚梦到我突然就不见了，我骗女票说我是9:45的飞机，我已经走了（其实是11:45的飞机，那时候大概7:40左右我刚醒），本来我以为傻女票不会相信，没想到她直接哭着给我打电话问我“你干嘛啊”，天啊，心都要化了。可能是之前和她说机场有点远不想让她送我，所以她才相信我真的走了吧♡。见到女票后果然被打了，，但是那句“你是猪吗”我却听的如痴如醉，怎么会有这么可爱的女孩子啊。\n　　我爱你，傻女票。","slug":"My-little-angel","published":1,"updated":"2019-09-01T08:59:39.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2le000k30vnwgpu95rp","content":"<h1 id=\"重庆之旅\"><a href=\"#重庆之旅\" class=\"headerlink\" title=\"重庆之旅\"></a>重庆之旅</h1><p>　　和邱小笨蛋在一起四个多月了，但是快一年没见了，她在重庆，我在北京，她读高中，我读大学。感觉有些不可思议，能够遇到，能够在一起。感谢女票的勇敢，我是非常怂的，，，。<br>　　在重庆度过了非常非常开心的几天，刚到的那天晚上给女票发消息说到了之后激动的睡不着，第二天早上终于见到了穿着裙裙来找我的女票票～(｡･ω･｡)ﾉ♡</p>\n<p><img src=\"/2018/06/10/My-little-angel/qxy1.jpg\" alt=\"邱小雁\"></p>\n<a id=\"more\"></a>\n\n<p>　　女票比印象中要瘦了，可能是高中太累了吧，有些心疼，让她多长些肉肉她还不愿意Ծ‸ Ծ 。之后两人一起牵爪爪去逛商场玩了和女票期待已久的密室逃脱，可惜太菜了，小哥哥可能是可怜我们哈哈让我们看了最后的一关。<br>　　一直想去女票学校看看的心愿也达成了，想感受一下女票平时给我发的照片里的地方、花花到底是什么样子的。去了女票平时自习的自习室，稍微有点冷，女票下次去的时候多穿一点啊。竟然还遇到了抓早恋的老师＝＝（害怕.jpg），女票好机智，话说我都大三了为什么还怕这种老师。。<br>　　第三天早上和女票在一起吃的早餐，还是要说一下女票吃的太少了，多长肉肉啊亲爱的，不用担心，男票抱得动的(•̀⌄•́)。吃了早餐一起去女票住的小区里打了篮球，之前说要教女票投篮可是自己投了十几个才中了一个，，呜呜呜T^T树立了一个篮球小菜鸡的形象，不过一起吃了可爱多很开心(๑❛ᴗ❛๑)。中午去吃了自助，女票怕我吃不了太辣点了清汤的小火锅，委屈重庆小妹纸了。下午一起做了情侣必做的事情，看电影！而且是小哆啦哈哈，抱着女票看电影的感觉好幸福。<br>　　女票怕妈妈担心本来是要在家吃晚饭的，我晚上不知道吃什么和女票说想点外卖，女票就从家跑出来陪我了，感动::&gt;_&lt;::（虽然最后在一起抱了好久连外卖也没吃成哈哈哈），感谢我女票票。晚上送女票回家一起在长江边散步也超级开心，女票还热情的给我介绍了重庆的“移动公厕”哈哈。</p>\n<p><img src=\"/2018/06/10/My-little-angel/moon1.jpg\" alt=\"邱小雁\"></p>\n<p><img src=\"/2018/06/10/My-little-angel/together1.jpg\" alt=\"邱小雁\"></p>\n<p>　　周五要回学校了，女票早上发消息说她准备来找我了，昨晚梦到我突然就不见了，我骗女票说我是9:45的飞机，我已经走了（其实是11:45的飞机，那时候大概7:40左右我刚醒），本来我以为傻女票不会相信，没想到她直接哭着给我打电话问我“你干嘛啊”，天啊，心都要化了。可能是之前和她说机场有点远不想让她送我，所以她才相信我真的走了吧♡。见到女票后果然被打了，，但是那句“你是猪吗”我却听的如痴如醉，怎么会有这么可爱的女孩子啊。<br>　　我爱你，傻女票。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"重庆之旅\"><a href=\"#重庆之旅\" class=\"headerlink\" title=\"重庆之旅\"></a>重庆之旅</h1><p>　　和邱小笨蛋在一起四个多月了，但是快一年没见了，她在重庆，我在北京，她读高中，我读大学。感觉有些不可思议，能够遇到，能够在一起。感谢女票的勇敢，我是非常怂的，，，。<br>　　在重庆度过了非常非常开心的几天，刚到的那天晚上给女票发消息说到了之后激动的睡不着，第二天早上终于见到了穿着裙裙来找我的女票票～(｡･ω･｡)ﾉ♡</p>\n<p><img src=\"/2018/06/10/My-little-angel/qxy1.jpg\" alt=\"邱小雁\"></p>","more":"<p>　　女票比印象中要瘦了，可能是高中太累了吧，有些心疼，让她多长些肉肉她还不愿意Ծ‸ Ծ 。之后两人一起牵爪爪去逛商场玩了和女票期待已久的密室逃脱，可惜太菜了，小哥哥可能是可怜我们哈哈让我们看了最后的一关。<br>　　一直想去女票学校看看的心愿也达成了，想感受一下女票平时给我发的照片里的地方、花花到底是什么样子的。去了女票平时自习的自习室，稍微有点冷，女票下次去的时候多穿一点啊。竟然还遇到了抓早恋的老师＝＝（害怕.jpg），女票好机智，话说我都大三了为什么还怕这种老师。。<br>　　第三天早上和女票在一起吃的早餐，还是要说一下女票吃的太少了，多长肉肉啊亲爱的，不用担心，男票抱得动的(•̀⌄•́)。吃了早餐一起去女票住的小区里打了篮球，之前说要教女票投篮可是自己投了十几个才中了一个，，呜呜呜T^T树立了一个篮球小菜鸡的形象，不过一起吃了可爱多很开心(๑❛ᴗ❛๑)。中午去吃了自助，女票怕我吃不了太辣点了清汤的小火锅，委屈重庆小妹纸了。下午一起做了情侣必做的事情，看电影！而且是小哆啦哈哈，抱着女票看电影的感觉好幸福。<br>　　女票怕妈妈担心本来是要在家吃晚饭的，我晚上不知道吃什么和女票说想点外卖，女票就从家跑出来陪我了，感动::&gt;_&lt;::（虽然最后在一起抱了好久连外卖也没吃成哈哈哈），感谢我女票票。晚上送女票回家一起在长江边散步也超级开心，女票还热情的给我介绍了重庆的“移动公厕”哈哈。</p>\n<p><img src=\"/2018/06/10/My-little-angel/moon1.jpg\" alt=\"邱小雁\"></p>\n<p><img src=\"/2018/06/10/My-little-angel/together1.jpg\" alt=\"邱小雁\"></p>\n<p>　　周五要回学校了，女票早上发消息说她准备来找我了，昨晚梦到我突然就不见了，我骗女票说我是9:45的飞机，我已经走了（其实是11:45的飞机，那时候大概7:40左右我刚醒），本来我以为傻女票不会相信，没想到她直接哭着给我打电话问我“你干嘛啊”，天啊，心都要化了。可能是之前和她说机场有点远不想让她送我，所以她才相信我真的走了吧♡。见到女票后果然被打了，，但是那句“你是猪吗”我却听的如痴如醉，怎么会有这么可爱的女孩子啊。<br>　　我爱你，傻女票。</p>"},{"title":"牛客暑期ACM多校训练营(第四场)G题-Maxinum Mode-思维+map","date":"2018-07-29T12:06:46.000Z","_content":"一道逆向思维的好题,比赛的时候没有做出来,赛后补题的时候按原来的思路写出来了,然而代码超时了= =,阅读了别人的代码后发现自己想复杂了,从逆向来考虑感觉非常巧妙,思路也很顺畅.从正向考虑反而要顾及很多情况,可能就是因为考虑的太多代码冗余就TLE了.\n<!-- more -->\n# 链接\n[Nowcoder-Fourth-G](https://www.nowcoder.com/acm/contest/142/G)\n# 题目描述\nThe mode of an integer sequence is the value that appears most often. Chiaki has n integers a1,a2,...,an. She woud like to delete exactly m of them such that: the rest integers have only one mode and the mode is maximum.\n输入描述:\nThere are multiple test cases. The first line of input contains an integer T, indicating the number of test cases. For each test case:\nThe first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m < n) -- the length of the sequence and the number of integers to delete.\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) denoting the sequence.\nIt is guaranteed that the sum of all n does not exceed 106.\n输出描述:\nFor each test case, output an integer denoting the only maximum mode, or -1 if Chiaki cannot achieve it.\n输入:\n5\n5 0\n2 2 3 3 4\n5 1\n2 2 3 3 4\n5 2\n2 2 3 3 4\n5 3\n2 2 3 3 4\n5 4\n2 2 3 3 4\n输出:\n-1\n3\n3\n3\n4\n# 题解\n题目大意是给定n个数,从这n个数中删掉m个数,使得出现次数最多的数只有一个且要求尽量大.求解这个出现次数最多的数.\n思路:\nmap存数据及数据个数, 按键值从大到小排(实际上map会按键值从小到大自动排列,那么就从后往前判断就好了).然后不考虑删除数的情况而是考虑剩余数(逆向思维)的情况,首先判断剩余数的个数是否小于等于最大值的个数,若满足则最终的结果就是最大值;若不满足则把剩余的数进行分配,看是否可以在满足min(d[max] - 1,d[i])的分配条件下将剩余的数分配完(其中d[i]表示第i个数的个数,用d[max]表示了最大的数的个数),如果可以分配完则最终结果就是最大值.若最大值不能满足上述情况则考虑次大值,以此类推,若全都不满足则无解,输出-1.\n\n# 代码\n``` C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\ntypedef pair<int, int> P;\nP d[maxn];\nint t;\nint n, m;\nmap<int, int> mp;\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    scanf(\"%d\", &t);\n    while(t--){\n        mp.clear();\n        scanf(\"%d%d\", &n, &m);\n        int tmp;\n        for(int i = 0; i < n; i++){\n            scanf(\"%d\", &tmp);\n            mp[tmp]++;\n        }\n        \n        int cnt = 0;\n        for(auto x : mp){\n            d[cnt].first = x.first;\n            d[cnt].second = x.second;\n            cnt++;\n        }\n        \n        int flag = 0;\n        int rem = n - m;//剩余数的个数\n        int i;\n        for(i = cnt - 1; i >= 0; i--){\n            int res = rem - d[i].second;\n            if(res <= 0){\n                flag = 1;\n                break;\n            }\n            for(int j = 0; j < cnt; j++){\n                if(j == i) continue;\n                res -= min(d[i].second - 1, d[j].second);\n                if(res <= 0){\n                    flag = 1;\n                    break;\n                }\n            }\n            if(flag) break;\n        }\n        \n        if(flag) printf(\"%d\\n\", d[i].first);\n        else printf(\"-1\\n\");\n    }\n    \n    return 0;\n}\n```","source":"_posts/Nowcoder-Fourth-G.md","raw":"---\ntitle: 牛客暑期ACM多校训练营(第四场)G题-Maxinum Mode-思维+map\ndate: 2018-07-29 20:06:46\ncategories:\n- ACM\n- 思维\ntags:\n- 逆向思维\n---\n一道逆向思维的好题,比赛的时候没有做出来,赛后补题的时候按原来的思路写出来了,然而代码超时了= =,阅读了别人的代码后发现自己想复杂了,从逆向来考虑感觉非常巧妙,思路也很顺畅.从正向考虑反而要顾及很多情况,可能就是因为考虑的太多代码冗余就TLE了.\n<!-- more -->\n# 链接\n[Nowcoder-Fourth-G](https://www.nowcoder.com/acm/contest/142/G)\n# 题目描述\nThe mode of an integer sequence is the value that appears most often. Chiaki has n integers a1,a2,...,an. She woud like to delete exactly m of them such that: the rest integers have only one mode and the mode is maximum.\n输入描述:\nThere are multiple test cases. The first line of input contains an integer T, indicating the number of test cases. For each test case:\nThe first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m < n) -- the length of the sequence and the number of integers to delete.\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) denoting the sequence.\nIt is guaranteed that the sum of all n does not exceed 106.\n输出描述:\nFor each test case, output an integer denoting the only maximum mode, or -1 if Chiaki cannot achieve it.\n输入:\n5\n5 0\n2 2 3 3 4\n5 1\n2 2 3 3 4\n5 2\n2 2 3 3 4\n5 3\n2 2 3 3 4\n5 4\n2 2 3 3 4\n输出:\n-1\n3\n3\n3\n4\n# 题解\n题目大意是给定n个数,从这n个数中删掉m个数,使得出现次数最多的数只有一个且要求尽量大.求解这个出现次数最多的数.\n思路:\nmap存数据及数据个数, 按键值从大到小排(实际上map会按键值从小到大自动排列,那么就从后往前判断就好了).然后不考虑删除数的情况而是考虑剩余数(逆向思维)的情况,首先判断剩余数的个数是否小于等于最大值的个数,若满足则最终的结果就是最大值;若不满足则把剩余的数进行分配,看是否可以在满足min(d[max] - 1,d[i])的分配条件下将剩余的数分配完(其中d[i]表示第i个数的个数,用d[max]表示了最大的数的个数),如果可以分配完则最终结果就是最大值.若最大值不能满足上述情况则考虑次大值,以此类推,若全都不满足则无解,输出-1.\n\n# 代码\n``` C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\ntypedef pair<int, int> P;\nP d[maxn];\nint t;\nint n, m;\nmap<int, int> mp;\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    scanf(\"%d\", &t);\n    while(t--){\n        mp.clear();\n        scanf(\"%d%d\", &n, &m);\n        int tmp;\n        for(int i = 0; i < n; i++){\n            scanf(\"%d\", &tmp);\n            mp[tmp]++;\n        }\n        \n        int cnt = 0;\n        for(auto x : mp){\n            d[cnt].first = x.first;\n            d[cnt].second = x.second;\n            cnt++;\n        }\n        \n        int flag = 0;\n        int rem = n - m;//剩余数的个数\n        int i;\n        for(i = cnt - 1; i >= 0; i--){\n            int res = rem - d[i].second;\n            if(res <= 0){\n                flag = 1;\n                break;\n            }\n            for(int j = 0; j < cnt; j++){\n                if(j == i) continue;\n                res -= min(d[i].second - 1, d[j].second);\n                if(res <= 0){\n                    flag = 1;\n                    break;\n                }\n            }\n            if(flag) break;\n        }\n        \n        if(flag) printf(\"%d\\n\", d[i].first);\n        else printf(\"-1\\n\");\n    }\n    \n    return 0;\n}\n```","slug":"Nowcoder-Fourth-G","published":1,"updated":"2019-08-20T14:50:31.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2le000l30vn3yyd25ck","content":"<p>一道逆向思维的好题,比赛的时候没有做出来,赛后补题的时候按原来的思路写出来了,然而代码超时了= =,阅读了别人的代码后发现自己想复杂了,从逆向来考虑感觉非常巧妙,思路也很顺畅.从正向考虑反而要顾及很多情况,可能就是因为考虑的太多代码冗余就TLE了.</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://www.nowcoder.com/acm/contest/142/G\" target=\"_blank\" rel=\"noopener\">Nowcoder-Fourth-G</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>The mode of an integer sequence is the value that appears most often. Chiaki has n integers a1,a2,…,an. She woud like to delete exactly m of them such that: the rest integers have only one mode and the mode is maximum.<br>输入描述:<br>There are multiple test cases. The first line of input contains an integer T, indicating the number of test cases. For each test case:<br>The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m &lt; n) – the length of the sequence and the number of integers to delete.<br>The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ 109) denoting the sequence.<br>It is guaranteed that the sum of all n does not exceed 106.<br>输出描述:<br>For each test case, output an integer denoting the only maximum mode, or -1 if Chiaki cannot achieve it.<br>输入:<br>5<br>5 0<br>2 2 3 3 4<br>5 1<br>2 2 3 3 4<br>5 2<br>2 2 3 3 4<br>5 3<br>2 2 3 3 4<br>5 4<br>2 2 3 3 4<br>输出:<br>-1<br>3<br>3<br>3<br>4</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>题目大意是给定n个数,从这n个数中删掉m个数,使得出现次数最多的数只有一个且要求尽量大.求解这个出现次数最多的数.<br>思路:<br>map存数据及数据个数, 按键值从大到小排(实际上map会按键值从小到大自动排列,那么就从后往前判断就好了).然后不考虑删除数的情况而是考虑剩余数(逆向思维)的情况,首先判断剩余数的个数是否小于等于最大值的个数,若满足则最终的结果就是最大值;若不满足则把剩余的数进行分配,看是否可以在满足min(d[max] - 1,d[i])的分配条件下将剩余的数分配完(其中d[i]表示第i个数的个数,用d[max]表示了最大的数的个数),如果可以分配完则最终结果就是最大值.若最大值不能满足上述情况则考虑次大值,以此类推,若全都不满足则无解,输出-1.</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\">P d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        mp.clear();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;tmp);</span><br><span class=\"line\">            mp[tmp]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : mp)&#123;</span><br><span class=\"line\">            d[cnt].first = x.first;</span><br><span class=\"line\">            d[cnt].second = x.second;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rem = n - m;<span class=\"comment\">//剩余数的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = cnt - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> res = rem - d[i].second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; cnt; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j == i) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                res -= min(d[i].second - <span class=\"number\">1</span>, d[j].second);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, d[i].first);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>一道逆向思维的好题,比赛的时候没有做出来,赛后补题的时候按原来的思路写出来了,然而代码超时了= =,阅读了别人的代码后发现自己想复杂了,从逆向来考虑感觉非常巧妙,思路也很顺畅.从正向考虑反而要顾及很多情况,可能就是因为考虑的太多代码冗余就TLE了.</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://www.nowcoder.com/acm/contest/142/G\" target=\"_blank\" rel=\"noopener\">Nowcoder-Fourth-G</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>The mode of an integer sequence is the value that appears most often. Chiaki has n integers a1,a2,…,an. She woud like to delete exactly m of them such that: the rest integers have only one mode and the mode is maximum.<br>输入描述:<br>There are multiple test cases. The first line of input contains an integer T, indicating the number of test cases. For each test case:<br>The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m &lt; n) – the length of the sequence and the number of integers to delete.<br>The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ 109) denoting the sequence.<br>It is guaranteed that the sum of all n does not exceed 106.<br>输出描述:<br>For each test case, output an integer denoting the only maximum mode, or -1 if Chiaki cannot achieve it.<br>输入:<br>5<br>5 0<br>2 2 3 3 4<br>5 1<br>2 2 3 3 4<br>5 2<br>2 2 3 3 4<br>5 3<br>2 2 3 3 4<br>5 4<br>2 2 3 3 4<br>输出:<br>-1<br>3<br>3<br>3<br>4</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>题目大意是给定n个数,从这n个数中删掉m个数,使得出现次数最多的数只有一个且要求尽量大.求解这个出现次数最多的数.<br>思路:<br>map存数据及数据个数, 按键值从大到小排(实际上map会按键值从小到大自动排列,那么就从后往前判断就好了).然后不考虑删除数的情况而是考虑剩余数(逆向思维)的情况,首先判断剩余数的个数是否小于等于最大值的个数,若满足则最终的结果就是最大值;若不满足则把剩余的数进行分配,看是否可以在满足min(d[max] - 1,d[i])的分配条件下将剩余的数分配完(其中d[i]表示第i个数的个数,用d[max]表示了最大的数的个数),如果可以分配完则最终结果就是最大值.若最大值不能满足上述情况则考虑次大值,以此类推,若全都不满足则无解,输出-1.</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\">P d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        mp.clear();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;tmp);</span><br><span class=\"line\">            mp[tmp]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : mp)&#123;</span><br><span class=\"line\">            d[cnt].first = x.first;</span><br><span class=\"line\">            d[cnt].second = x.second;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rem = n - m;<span class=\"comment\">//剩余数的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = cnt - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> res = rem - d[i].second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; cnt; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j == i) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                res -= min(d[i].second - <span class=\"number\">1</span>, d[j].second);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, d[i].first);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"牛客暑期ACM多校训练营(第三场)A题-PACM Team-多维01背包+记录路径","date":"2018-07-26T15:16:37.000Z","_content":"DP果然是最弱的，记录路径更是十分懵，在多校训练营里被虐的抬不起头，，，算了，只要不死，就会更强(赛亚人的特性其实也就是人的特性)\n<!-- more -->\n# 题目描述\nEddy was a contestant participating in ACM ICPC contests. ACM is short for Algorithm, Coding, Math. Since in the ACM contest, the most important knowledge is about algorithm, followed by coding(implementation ability), then math. However, in the ACM ICPC World Finals 2018, Eddy failed to solve a physics equation, which pushed him away from a potential medal.\n\nSince then on, Eddy found that physics is actually the most important thing in the contest. Thus, he wants to form a team to guide the following contestants to conquer the PACM contests(PACM is short for Physics, Algorithm, Coding, Math). \n\nThere are N candidate groups each composed of pi physics experts, ai algorithm experts, ci coding experts, mi math experts. For each group, Eddy can either invite all of them or none of them. If i-th team is invited, they will bring gi knowledge points which is calculated by Eddy's magic formula. Eddy believes that the higher the total knowledge points is, the better a team could place in a contest. But, Eddy doesn't want too many experts in the same area in the invited groups. Thus, the number of invited physics experts should not exceed P, and A for algorithm experts, C for coding experts, M for math experts.\n\nEddy is still busy in studying Physics. You come to help him to figure out which groups should be invited such that they doesn't exceed the constraint and will bring the most knowledge points in total.\n\n输入描述:\nThe first line contains a positive integer N indicating the number of candidate groups.\nEach of following N lines contains five space-separated integer pi, ai, ci, mi, gi indicating that i-th team consists of pi physics experts, ai algorithm experts, ci coding experts, mi math experts, and will bring gi knowledge points.\nThe last line contains four space-separated integer P, A, C, M indicating the maximum possible number of physics experts, algorithm experts, coding experts, and math experts, respectively.\n\n 1 ≤ N ≤ 36\n 0 ≤ pi,ai,ci,mi,gi ≤ 36\n 0 ≤ P, A, C, M ≤ 36\n输出描述:\n\nThe first line should contain a non-negative integer K indicating the number of invited groups.\nThe second line should contain K space-separated integer indicating the index of invited groups(groups are indexed from 0).\n\nYou can output index in any order as long as each index appears at most once. If there are multiple way to reach the most total knowledge points, you can output any one of them. If none of the groups will be invited, you could either output one line or output a blank line in the second line.\n示例1:\n\n输入:\n2\n1 0 2 1 10\n1 0 2 1 21\n1 0 2 1\n输出:\n1\n1\n\n示例2:\n\n输入:\n1\n2 1 1 0 31\n1 0 2 1\n输出：\n0\n\n# 代码\n``` C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 40;\nint p[maxn], a[maxn], c[maxn], m[maxn];\nint v[maxn];\nshort d[maxn][maxn][maxn][maxn][maxn];\nint n;\nint Pm, Am, Cm, Mm;\nint used[maxn];//记录路径\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    memset(used, 0, sizeof(used));\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d%d%d%d%d\", p + i, a + i, c + i, m + i, v + i);\n    }\n\n    scanf(\"%d%d%d%d\", &Pm, &Am, &Cm, &Mm);\n    for(int i = 0; i <= Pm; i++){\n        for(int j = 0; j <= Am; j++){\n            for(int k = 0; k <= Cm; k++){\n                for(int l = 0; l <= Mm; l++){\n                    d[0][i][j][k][l] = 0;\n                }\n            }\n        }\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j <= Pm; j++){\n            for(int k = 0; k <= Am; k++){\n                for(int l = 0; l <= Cm; l++){\n                    for(int q = 0; q <= Mm; q++){\n                        d[i + 1][j][k][l][q] = d[i][j][k][l][q];\n                        if(j >= p[i] && k >= a[i] && l >= c[i] && q >= m[i]){\n                            int tmp = v[i] + d[i][j - p[i]][k - a[i]][l - c[i]][q - m[i]];\n                            if(tmp > d[i + 1][j][k][l][q]) {\n                                d[i + 1][j][k][l][q] = tmp;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    //记录路径部分\n    for(int i = n - 1; i >= 0; i--){\n        if(d[i + 1][Pm][Am][Cm][Mm] != d[i][Pm][Am][Cm][Mm]){\n            used[i] = 1;\n            Pm -= p[i];\n            Am -= a[i];\n            Cm -= c[i];\n            Mm -= m[i];\n        }\n    }\n    int cnt = 0;\n    for(int i = 0; i < n; i++){\n        if(used[i] == 1){\n            cnt++;\n        }\n    }\n    printf(\"%d\\n\", cnt);\n    if(cnt){\n        for(int i = 0; i < n; i++){\n            if(used[i]) printf(\"%d \", i);\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n# 坑点\n数据d的类型要是short类型，int类型会爆内存，char类型会数据溢出．\n\n# 背包记录路径问题总结\n## 方法一核心代码\n``` C++\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j <= W; j++){\n            if(j < w[i]){\n                d[i + 1][j] = d[i][j];\n            }\n            else{\n                d[i + 1][j] = max(d[i][j], d[i][j - w[i]] + v[i]);\n            }\n        }\n    }\n\n    for(int i = n - 1; i >= 0; i--){\n        if(d[i + 1][W] != d[i][W]){\n            used[i] = 1;\n            W -= w[i];\n        }\n    }\n```\n## 方法二核心代码\n``` C++\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j <= W; j++){\n            d[i + 1][j] = d[i][j];\n            if(j >= w[i]){\n                int tmp = d[i][j - w[i]] + v[i];\n                if(tmp > d[i + 1][j]){\n                    d[i + 1][j] = tmp;\n                    path[i][j] = 1;\n                }\n            }\n        }\n    }\n\n    for(int i = n - 1; i >= 0; i--){\n        if(path[i][W] == 1){\n            used[i] = 1;\n            W -= w[i];\n        }\n    }\n```\n","source":"_posts/Nowcoder-Third-A.md","raw":"---\ntitle: 牛客暑期ACM多校训练营(第三场)A题-PACM Team-多维01背包+记录路径\ndate: 2018-07-26 23:16:37\ncategories:\n- ACM\n- 背包\ntags:\n- DP\n- 01背包\n---\nDP果然是最弱的，记录路径更是十分懵，在多校训练营里被虐的抬不起头，，，算了，只要不死，就会更强(赛亚人的特性其实也就是人的特性)\n<!-- more -->\n# 题目描述\nEddy was a contestant participating in ACM ICPC contests. ACM is short for Algorithm, Coding, Math. Since in the ACM contest, the most important knowledge is about algorithm, followed by coding(implementation ability), then math. However, in the ACM ICPC World Finals 2018, Eddy failed to solve a physics equation, which pushed him away from a potential medal.\n\nSince then on, Eddy found that physics is actually the most important thing in the contest. Thus, he wants to form a team to guide the following contestants to conquer the PACM contests(PACM is short for Physics, Algorithm, Coding, Math). \n\nThere are N candidate groups each composed of pi physics experts, ai algorithm experts, ci coding experts, mi math experts. For each group, Eddy can either invite all of them or none of them. If i-th team is invited, they will bring gi knowledge points which is calculated by Eddy's magic formula. Eddy believes that the higher the total knowledge points is, the better a team could place in a contest. But, Eddy doesn't want too many experts in the same area in the invited groups. Thus, the number of invited physics experts should not exceed P, and A for algorithm experts, C for coding experts, M for math experts.\n\nEddy is still busy in studying Physics. You come to help him to figure out which groups should be invited such that they doesn't exceed the constraint and will bring the most knowledge points in total.\n\n输入描述:\nThe first line contains a positive integer N indicating the number of candidate groups.\nEach of following N lines contains five space-separated integer pi, ai, ci, mi, gi indicating that i-th team consists of pi physics experts, ai algorithm experts, ci coding experts, mi math experts, and will bring gi knowledge points.\nThe last line contains four space-separated integer P, A, C, M indicating the maximum possible number of physics experts, algorithm experts, coding experts, and math experts, respectively.\n\n 1 ≤ N ≤ 36\n 0 ≤ pi,ai,ci,mi,gi ≤ 36\n 0 ≤ P, A, C, M ≤ 36\n输出描述:\n\nThe first line should contain a non-negative integer K indicating the number of invited groups.\nThe second line should contain K space-separated integer indicating the index of invited groups(groups are indexed from 0).\n\nYou can output index in any order as long as each index appears at most once. If there are multiple way to reach the most total knowledge points, you can output any one of them. If none of the groups will be invited, you could either output one line or output a blank line in the second line.\n示例1:\n\n输入:\n2\n1 0 2 1 10\n1 0 2 1 21\n1 0 2 1\n输出:\n1\n1\n\n示例2:\n\n输入:\n1\n2 1 1 0 31\n1 0 2 1\n输出：\n0\n\n# 代码\n``` C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 40;\nint p[maxn], a[maxn], c[maxn], m[maxn];\nint v[maxn];\nshort d[maxn][maxn][maxn][maxn][maxn];\nint n;\nint Pm, Am, Cm, Mm;\nint used[maxn];//记录路径\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    memset(used, 0, sizeof(used));\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d%d%d%d%d\", p + i, a + i, c + i, m + i, v + i);\n    }\n\n    scanf(\"%d%d%d%d\", &Pm, &Am, &Cm, &Mm);\n    for(int i = 0; i <= Pm; i++){\n        for(int j = 0; j <= Am; j++){\n            for(int k = 0; k <= Cm; k++){\n                for(int l = 0; l <= Mm; l++){\n                    d[0][i][j][k][l] = 0;\n                }\n            }\n        }\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j <= Pm; j++){\n            for(int k = 0; k <= Am; k++){\n                for(int l = 0; l <= Cm; l++){\n                    for(int q = 0; q <= Mm; q++){\n                        d[i + 1][j][k][l][q] = d[i][j][k][l][q];\n                        if(j >= p[i] && k >= a[i] && l >= c[i] && q >= m[i]){\n                            int tmp = v[i] + d[i][j - p[i]][k - a[i]][l - c[i]][q - m[i]];\n                            if(tmp > d[i + 1][j][k][l][q]) {\n                                d[i + 1][j][k][l][q] = tmp;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    //记录路径部分\n    for(int i = n - 1; i >= 0; i--){\n        if(d[i + 1][Pm][Am][Cm][Mm] != d[i][Pm][Am][Cm][Mm]){\n            used[i] = 1;\n            Pm -= p[i];\n            Am -= a[i];\n            Cm -= c[i];\n            Mm -= m[i];\n        }\n    }\n    int cnt = 0;\n    for(int i = 0; i < n; i++){\n        if(used[i] == 1){\n            cnt++;\n        }\n    }\n    printf(\"%d\\n\", cnt);\n    if(cnt){\n        for(int i = 0; i < n; i++){\n            if(used[i]) printf(\"%d \", i);\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n# 坑点\n数据d的类型要是short类型，int类型会爆内存，char类型会数据溢出．\n\n# 背包记录路径问题总结\n## 方法一核心代码\n``` C++\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j <= W; j++){\n            if(j < w[i]){\n                d[i + 1][j] = d[i][j];\n            }\n            else{\n                d[i + 1][j] = max(d[i][j], d[i][j - w[i]] + v[i]);\n            }\n        }\n    }\n\n    for(int i = n - 1; i >= 0; i--){\n        if(d[i + 1][W] != d[i][W]){\n            used[i] = 1;\n            W -= w[i];\n        }\n    }\n```\n## 方法二核心代码\n``` C++\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j <= W; j++){\n            d[i + 1][j] = d[i][j];\n            if(j >= w[i]){\n                int tmp = d[i][j - w[i]] + v[i];\n                if(tmp > d[i + 1][j]){\n                    d[i + 1][j] = tmp;\n                    path[i][j] = 1;\n                }\n            }\n        }\n    }\n\n    for(int i = n - 1; i >= 0; i--){\n        if(path[i][W] == 1){\n            used[i] = 1;\n            W -= w[i];\n        }\n    }\n```\n","slug":"Nowcoder-Third-A","published":1,"updated":"2019-08-20T14:50:04.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lf000m30vn9mecg7kj","content":"<p>DP果然是最弱的，记录路径更是十分懵，在多校训练营里被虐的抬不起头，，，算了，只要不死，就会更强(赛亚人的特性其实也就是人的特性)</p>\n<a id=\"more\"></a>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>Eddy was a contestant participating in ACM ICPC contests. ACM is short for Algorithm, Coding, Math. Since in the ACM contest, the most important knowledge is about algorithm, followed by coding(implementation ability), then math. However, in the ACM ICPC World Finals 2018, Eddy failed to solve a physics equation, which pushed him away from a potential medal.</p>\n<p>Since then on, Eddy found that physics is actually the most important thing in the contest. Thus, he wants to form a team to guide the following contestants to conquer the PACM contests(PACM is short for Physics, Algorithm, Coding, Math). </p>\n<p>There are N candidate groups each composed of pi physics experts, ai algorithm experts, ci coding experts, mi math experts. For each group, Eddy can either invite all of them or none of them. If i-th team is invited, they will bring gi knowledge points which is calculated by Eddy’s magic formula. Eddy believes that the higher the total knowledge points is, the better a team could place in a contest. But, Eddy doesn’t want too many experts in the same area in the invited groups. Thus, the number of invited physics experts should not exceed P, and A for algorithm experts, C for coding experts, M for math experts.</p>\n<p>Eddy is still busy in studying Physics. You come to help him to figure out which groups should be invited such that they doesn’t exceed the constraint and will bring the most knowledge points in total.</p>\n<p>输入描述:<br>The first line contains a positive integer N indicating the number of candidate groups.<br>Each of following N lines contains five space-separated integer pi, ai, ci, mi, gi indicating that i-th team consists of pi physics experts, ai algorithm experts, ci coding experts, mi math experts, and will bring gi knowledge points.<br>The last line contains four space-separated integer P, A, C, M indicating the maximum possible number of physics experts, algorithm experts, coding experts, and math experts, respectively.</p>\n<p> 1 ≤ N ≤ 36<br> 0 ≤ pi,ai,ci,mi,gi ≤ 36<br> 0 ≤ P, A, C, M ≤ 36<br>输出描述:</p>\n<p>The first line should contain a non-negative integer K indicating the number of invited groups.<br>The second line should contain K space-separated integer indicating the index of invited groups(groups are indexed from 0).</p>\n<p>You can output index in any order as long as each index appears at most once. If there are multiple way to reach the most total knowledge points, you can output any one of them. If none of the groups will be invited, you could either output one line or output a blank line in the second line.<br>示例1:</p>\n<p>输入:<br>2<br>1 0 2 1 10<br>1 0 2 1 21<br>1 0 2 1<br>输出:<br>1<br>1</p>\n<p>示例2:</p>\n<p>输入:<br>1<br>2 1 1 0 31<br>1 0 2 1<br>输出：<br>0</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> p[maxn], a[maxn], c[maxn], m[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[maxn];</span><br><span class=\"line\"><span class=\"keyword\">short</span> d[maxn][maxn][maxn][maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Pm, Am, Cm, Mm;</span><br><span class=\"line\"><span class=\"keyword\">int</span> used[maxn];<span class=\"comment\">//记录路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(used, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(used));</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d%d\"</span>, p + i, a + i, c + i, m + i, v + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;Pm, &amp;Am, &amp;Cm, &amp;Mm);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= Pm; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= Am; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= Cm; k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt;= Mm; l++)&#123;</span><br><span class=\"line\">                    d[<span class=\"number\">0</span>][i][j][k][l] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= Pm; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= Am; k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt;= Cm; l++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q = <span class=\"number\">0</span>; q &lt;= Mm; q++)&#123;</span><br><span class=\"line\">                        d[i + <span class=\"number\">1</span>][j][k][l][q] = d[i][j][k][l][q];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(j &gt;= p[i] &amp;&amp; k &gt;= a[i] &amp;&amp; l &gt;= c[i] &amp;&amp; q &gt;= m[i])&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> tmp = v[i] + d[i][j - p[i]][k - a[i]][l - c[i]][q - m[i]];</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(tmp &gt; d[i + <span class=\"number\">1</span>][j][k][l][q]) &#123;</span><br><span class=\"line\">                                d[i + <span class=\"number\">1</span>][j][k][l][q] = tmp;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//记录路径部分</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i + <span class=\"number\">1</span>][Pm][Am][Cm][Mm] != d[i][Pm][Am][Cm][Mm])&#123;</span><br><span class=\"line\">            used[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            Pm -= p[i];</span><br><span class=\"line\">            Am -= a[i];</span><br><span class=\"line\">            Cm -= c[i];</span><br><span class=\"line\">            Mm -= m[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used[i] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, cnt);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i]) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点\"></a>坑点</h1><p>数据d的类型要是short类型，int类型会爆内存，char类型会数据溢出．</p>\n<h1 id=\"背包记录路径问题总结\"><a href=\"#背包记录路径问题总结\" class=\"headerlink\" title=\"背包记录路径问题总结\"></a>背包记录路径问题总结</h1><h2 id=\"方法一核心代码\"><a href=\"#方法一核心代码\" class=\"headerlink\" title=\"方法一核心代码\"></a>方法一核心代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= W; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; w[i])&#123;</span><br><span class=\"line\">            d[i + <span class=\"number\">1</span>][j] = d[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            d[i + <span class=\"number\">1</span>][j] = max(d[i][j], d[i][j - w[i]] + v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[i + <span class=\"number\">1</span>][W] != d[i][W])&#123;</span><br><span class=\"line\">        used[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        W -= w[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法二核心代码\"><a href=\"#方法二核心代码\" class=\"headerlink\" title=\"方法二核心代码\"></a>方法二核心代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= W; j++)&#123;</span><br><span class=\"line\">        d[i + <span class=\"number\">1</span>][j] = d[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= w[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = d[i][j - w[i]] + v[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp &gt; d[i + <span class=\"number\">1</span>][j])&#123;</span><br><span class=\"line\">                d[i + <span class=\"number\">1</span>][j] = tmp;</span><br><span class=\"line\">                path[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(path[i][W] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        used[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        W -= w[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>DP果然是最弱的，记录路径更是十分懵，在多校训练营里被虐的抬不起头，，，算了，只要不死，就会更强(赛亚人的特性其实也就是人的特性)</p>","more":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>Eddy was a contestant participating in ACM ICPC contests. ACM is short for Algorithm, Coding, Math. Since in the ACM contest, the most important knowledge is about algorithm, followed by coding(implementation ability), then math. However, in the ACM ICPC World Finals 2018, Eddy failed to solve a physics equation, which pushed him away from a potential medal.</p>\n<p>Since then on, Eddy found that physics is actually the most important thing in the contest. Thus, he wants to form a team to guide the following contestants to conquer the PACM contests(PACM is short for Physics, Algorithm, Coding, Math). </p>\n<p>There are N candidate groups each composed of pi physics experts, ai algorithm experts, ci coding experts, mi math experts. For each group, Eddy can either invite all of them or none of them. If i-th team is invited, they will bring gi knowledge points which is calculated by Eddy’s magic formula. Eddy believes that the higher the total knowledge points is, the better a team could place in a contest. But, Eddy doesn’t want too many experts in the same area in the invited groups. Thus, the number of invited physics experts should not exceed P, and A for algorithm experts, C for coding experts, M for math experts.</p>\n<p>Eddy is still busy in studying Physics. You come to help him to figure out which groups should be invited such that they doesn’t exceed the constraint and will bring the most knowledge points in total.</p>\n<p>输入描述:<br>The first line contains a positive integer N indicating the number of candidate groups.<br>Each of following N lines contains five space-separated integer pi, ai, ci, mi, gi indicating that i-th team consists of pi physics experts, ai algorithm experts, ci coding experts, mi math experts, and will bring gi knowledge points.<br>The last line contains four space-separated integer P, A, C, M indicating the maximum possible number of physics experts, algorithm experts, coding experts, and math experts, respectively.</p>\n<p> 1 ≤ N ≤ 36<br> 0 ≤ pi,ai,ci,mi,gi ≤ 36<br> 0 ≤ P, A, C, M ≤ 36<br>输出描述:</p>\n<p>The first line should contain a non-negative integer K indicating the number of invited groups.<br>The second line should contain K space-separated integer indicating the index of invited groups(groups are indexed from 0).</p>\n<p>You can output index in any order as long as each index appears at most once. If there are multiple way to reach the most total knowledge points, you can output any one of them. If none of the groups will be invited, you could either output one line or output a blank line in the second line.<br>示例1:</p>\n<p>输入:<br>2<br>1 0 2 1 10<br>1 0 2 1 21<br>1 0 2 1<br>输出:<br>1<br>1</p>\n<p>示例2:</p>\n<p>输入:<br>1<br>2 1 1 0 31<br>1 0 2 1<br>输出：<br>0</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> p[maxn], a[maxn], c[maxn], m[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[maxn];</span><br><span class=\"line\"><span class=\"keyword\">short</span> d[maxn][maxn][maxn][maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Pm, Am, Cm, Mm;</span><br><span class=\"line\"><span class=\"keyword\">int</span> used[maxn];<span class=\"comment\">//记录路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(used, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(used));</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d%d\"</span>, p + i, a + i, c + i, m + i, v + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;Pm, &amp;Am, &amp;Cm, &amp;Mm);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= Pm; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= Am; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= Cm; k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt;= Mm; l++)&#123;</span><br><span class=\"line\">                    d[<span class=\"number\">0</span>][i][j][k][l] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= Pm; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= Am; k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt;= Cm; l++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q = <span class=\"number\">0</span>; q &lt;= Mm; q++)&#123;</span><br><span class=\"line\">                        d[i + <span class=\"number\">1</span>][j][k][l][q] = d[i][j][k][l][q];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(j &gt;= p[i] &amp;&amp; k &gt;= a[i] &amp;&amp; l &gt;= c[i] &amp;&amp; q &gt;= m[i])&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> tmp = v[i] + d[i][j - p[i]][k - a[i]][l - c[i]][q - m[i]];</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(tmp &gt; d[i + <span class=\"number\">1</span>][j][k][l][q]) &#123;</span><br><span class=\"line\">                                d[i + <span class=\"number\">1</span>][j][k][l][q] = tmp;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//记录路径部分</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i + <span class=\"number\">1</span>][Pm][Am][Cm][Mm] != d[i][Pm][Am][Cm][Mm])&#123;</span><br><span class=\"line\">            used[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            Pm -= p[i];</span><br><span class=\"line\">            Am -= a[i];</span><br><span class=\"line\">            Cm -= c[i];</span><br><span class=\"line\">            Mm -= m[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used[i] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, cnt);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(used[i]) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点\"></a>坑点</h1><p>数据d的类型要是short类型，int类型会爆内存，char类型会数据溢出．</p>\n<h1 id=\"背包记录路径问题总结\"><a href=\"#背包记录路径问题总结\" class=\"headerlink\" title=\"背包记录路径问题总结\"></a>背包记录路径问题总结</h1><h2 id=\"方法一核心代码\"><a href=\"#方法一核心代码\" class=\"headerlink\" title=\"方法一核心代码\"></a>方法一核心代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= W; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; w[i])&#123;</span><br><span class=\"line\">            d[i + <span class=\"number\">1</span>][j] = d[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            d[i + <span class=\"number\">1</span>][j] = max(d[i][j], d[i][j - w[i]] + v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[i + <span class=\"number\">1</span>][W] != d[i][W])&#123;</span><br><span class=\"line\">        used[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        W -= w[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法二核心代码\"><a href=\"#方法二核心代码\" class=\"headerlink\" title=\"方法二核心代码\"></a>方法二核心代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= W; j++)&#123;</span><br><span class=\"line\">        d[i + <span class=\"number\">1</span>][j] = d[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= w[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = d[i][j - w[i]] + v[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp &gt; d[i + <span class=\"number\">1</span>][j])&#123;</span><br><span class=\"line\">                d[i + <span class=\"number\">1</span>][j] = tmp;</span><br><span class=\"line\">                path[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(path[i][W] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        used[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        W -= w[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PCA-主成分分析","date":"2019-03-27T08:20:45.000Z","_content":"重温了线性代数基变换、特征值、特征向量和协方差矩阵。趁热打铁，记录一下它们在PCA中的应用。\n![pca](/pca.jpeg)\n*图片来源[Jermmy's Lazy Blog-PCA，到底在做什么](http://jermmy.xyz/2017/12/14/2017-12-15-PCA-another-view/)*\n<!--more-->\n# 概念\n[Wikiwand](https://www.wikiwand.com/zh-hans/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90)：主成分分析(PCA)是一种分析、简化数据集的技术。经常用于减少数据集的维数，同时保持数据集中的对方差贡献最大的特征。\n简单来说，PCA可以将数据进行压缩，并且是在尽量少的丢失信息的情况下进行压缩，方便加速对数据的处理速度。\n\n# 算法流程\n```\n    样本数据中心化、标准化 //变量减去均值，再除以标准差\n\n    计算样本数据的协方差矩阵Cov\n\n    计算Cov的特征向量，构造特征向量矩阵A\n\n    把Cov变换到以A中各特征向量为基向量的空间中 //已A的视角来看Cov\n\n    根据变换的Cov，提取特征值最大的前k个特征向量，组成新的变换矩阵B\n\n    将样本数据进行矩阵B表示的变换，得到新的降维后样本数据\n```\n*数据中心化和标准化是为了使得不同的特征数据具有相同的尺度*\n\n假设数据样本矩阵$D(n\\times{m})$表示m个样本n维特征，则协方差矩阵$Cov(n\\times{n})$，其特征向量矩阵$A(n\\times{n})$，取前k维特征向量$B(n\\times{k})$，那么降维后的数据：\n$$\nD_{PCA}(k\\times{m})=B^T(k\\times{n})\\cdot{D(n\\times{m})}\n$$\n\n# PCA的意义\nPCA的意义要从协方差矩阵说起，协方差矩阵表示各个变量之间的关系，包括各自变量之间的方差。将Cov在以其特征向量为基向量构成的空间中的来观察：\n$$\nA^{-1}CovA=\n    \\begin{bmatrix}\n    \\lambda_{1} & \\quad & \\quad & 0 \\\\\\\\\n    \\quad & \\lambda_{2} & \\quad & \\quad \\\\\\\\\n    \\quad & \\quad & \\ddots & \\quad \\\\\\\\\n    0 & \\quad & \\quad & \\lambda_{n}\n    \\end{bmatrix}\n$$\n\n关于为什么矩阵在以其特征向量为基向量的空间中来看是一个**对角阵**，且对角元素为各个**特征值**，可以参考3Blue1Brown的线性代数教程的[9-基变换](https://www.bilibili.com/video/av6500834/?spm_id_from=333.788.videocard.2)和[10-特征向量和特征值](https://www.bilibili.com/video/av6540378/?spm_id_from=333.788.videocard.1)。看完后会对这个变换过程有一个非常直观的理解。\n上面说到协方差矩阵表示了各个变量之间和自身的关系，现在变换后的协方差矩阵除了对角线元素外，其它位置都变成0了，也就是说**各个变量之间被去相关性了！**在这空间下各个变量是**独立的**，去除了数据之间的冗余。\n接下来我们选取特征值最大的前k个特征向量，由其组成新的变换矩阵B。之所以选择特征值大的，是因为**特征值**所在的对角位置是协方差矩阵表示**方差**的位置，方差越大，说明该特征变量越分散，信息量越大，压缩后越不容易恢复，所以我们保留它们而舍弃那些包含信息量小的特征变量。\n最后我们只需要把样本数据投影到以提取出的k个特征向量为基向量的空间中。\n\n*如最开始的图中，在三维数据中找到两个独立的主特征，并将三维数据投影降维到了二维平面上实现数据降维。*\n\n# 参考\n[Jermmy's Lazy Blog-PCA，到底在做什么](http://jermmy.xyz/2017/12/14/2017-12-15-PCA-another-view/)\n[3Blue1Brown线性代数的本质-9-基变换](https://www.bilibili.com/video/av6500834/?spm_id_from=333.788.videocard.2)\n[3Blue1Brown线性代数的本质-10-特征向量和特征值](https://www.bilibili.com/video/av6540378/?spm_id_from=333.788.videocard.1)","source":"_posts/PCA-主成分分析.md","raw":"---\ntitle: PCA-主成分分析\ndate: 2019-03-27 16:20:45\ncategories:\n- Math\ntags:\n- PCA\n---\n重温了线性代数基变换、特征值、特征向量和协方差矩阵。趁热打铁，记录一下它们在PCA中的应用。\n![pca](/pca.jpeg)\n*图片来源[Jermmy's Lazy Blog-PCA，到底在做什么](http://jermmy.xyz/2017/12/14/2017-12-15-PCA-another-view/)*\n<!--more-->\n# 概念\n[Wikiwand](https://www.wikiwand.com/zh-hans/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90)：主成分分析(PCA)是一种分析、简化数据集的技术。经常用于减少数据集的维数，同时保持数据集中的对方差贡献最大的特征。\n简单来说，PCA可以将数据进行压缩，并且是在尽量少的丢失信息的情况下进行压缩，方便加速对数据的处理速度。\n\n# 算法流程\n```\n    样本数据中心化、标准化 //变量减去均值，再除以标准差\n\n    计算样本数据的协方差矩阵Cov\n\n    计算Cov的特征向量，构造特征向量矩阵A\n\n    把Cov变换到以A中各特征向量为基向量的空间中 //已A的视角来看Cov\n\n    根据变换的Cov，提取特征值最大的前k个特征向量，组成新的变换矩阵B\n\n    将样本数据进行矩阵B表示的变换，得到新的降维后样本数据\n```\n*数据中心化和标准化是为了使得不同的特征数据具有相同的尺度*\n\n假设数据样本矩阵$D(n\\times{m})$表示m个样本n维特征，则协方差矩阵$Cov(n\\times{n})$，其特征向量矩阵$A(n\\times{n})$，取前k维特征向量$B(n\\times{k})$，那么降维后的数据：\n$$\nD_{PCA}(k\\times{m})=B^T(k\\times{n})\\cdot{D(n\\times{m})}\n$$\n\n# PCA的意义\nPCA的意义要从协方差矩阵说起，协方差矩阵表示各个变量之间的关系，包括各自变量之间的方差。将Cov在以其特征向量为基向量构成的空间中的来观察：\n$$\nA^{-1}CovA=\n    \\begin{bmatrix}\n    \\lambda_{1} & \\quad & \\quad & 0 \\\\\\\\\n    \\quad & \\lambda_{2} & \\quad & \\quad \\\\\\\\\n    \\quad & \\quad & \\ddots & \\quad \\\\\\\\\n    0 & \\quad & \\quad & \\lambda_{n}\n    \\end{bmatrix}\n$$\n\n关于为什么矩阵在以其特征向量为基向量的空间中来看是一个**对角阵**，且对角元素为各个**特征值**，可以参考3Blue1Brown的线性代数教程的[9-基变换](https://www.bilibili.com/video/av6500834/?spm_id_from=333.788.videocard.2)和[10-特征向量和特征值](https://www.bilibili.com/video/av6540378/?spm_id_from=333.788.videocard.1)。看完后会对这个变换过程有一个非常直观的理解。\n上面说到协方差矩阵表示了各个变量之间和自身的关系，现在变换后的协方差矩阵除了对角线元素外，其它位置都变成0了，也就是说**各个变量之间被去相关性了！**在这空间下各个变量是**独立的**，去除了数据之间的冗余。\n接下来我们选取特征值最大的前k个特征向量，由其组成新的变换矩阵B。之所以选择特征值大的，是因为**特征值**所在的对角位置是协方差矩阵表示**方差**的位置，方差越大，说明该特征变量越分散，信息量越大，压缩后越不容易恢复，所以我们保留它们而舍弃那些包含信息量小的特征变量。\n最后我们只需要把样本数据投影到以提取出的k个特征向量为基向量的空间中。\n\n*如最开始的图中，在三维数据中找到两个独立的主特征，并将三维数据投影降维到了二维平面上实现数据降维。*\n\n# 参考\n[Jermmy's Lazy Blog-PCA，到底在做什么](http://jermmy.xyz/2017/12/14/2017-12-15-PCA-another-view/)\n[3Blue1Brown线性代数的本质-9-基变换](https://www.bilibili.com/video/av6500834/?spm_id_from=333.788.videocard.2)\n[3Blue1Brown线性代数的本质-10-特征向量和特征值](https://www.bilibili.com/video/av6540378/?spm_id_from=333.788.videocard.1)","slug":"PCA-主成分分析","published":1,"updated":"2019-08-20T14:49:49.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lf000n30vnev5sigyl","content":"<p>重温了线性代数基变换、特征值、特征向量和协方差矩阵。趁热打铁，记录一下它们在PCA中的应用。<br><img src=\"/2019/03/27/PCA-主成分分析/pca.jpeg\" alt=\"pca\"><br><em>图片来源<a href=\"http://jermmy.xyz/2017/12/14/2017-12-15-PCA-another-view/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog-PCA，到底在做什么</a></em></p>\n<a id=\"more\"></a>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p><a href=\"https://www.wikiwand.com/zh-hans/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90\" target=\"_blank\" rel=\"noopener\">Wikiwand</a>：主成分分析(PCA)是一种分析、简化数据集的技术。经常用于减少数据集的维数，同时保持数据集中的对方差贡献最大的特征。<br>简单来说，PCA可以将数据进行压缩，并且是在尽量少的丢失信息的情况下进行压缩，方便加速对数据的处理速度。</p>\n<h1 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样本数据中心化、标准化 //变量减去均值，再除以标准差</span><br><span class=\"line\"></span><br><span class=\"line\">计算样本数据的协方差矩阵Cov</span><br><span class=\"line\"></span><br><span class=\"line\">计算Cov的特征向量，构造特征向量矩阵A</span><br><span class=\"line\"></span><br><span class=\"line\">把Cov变换到以A中各特征向量为基向量的空间中 //已A的视角来看Cov</span><br><span class=\"line\"></span><br><span class=\"line\">根据变换的Cov，提取特征值最大的前k个特征向量，组成新的变换矩阵B</span><br><span class=\"line\"></span><br><span class=\"line\">将样本数据进行矩阵B表示的变换，得到新的降维后样本数据</span><br></pre></td></tr></table></figure>\n\n<p><em>数据中心化和标准化是为了使得不同的特征数据具有相同的尺度</em></p>\n<p>假设数据样本矩阵$D(n\\times{m})$表示m个样本n维特征，则协方差矩阵$Cov(n\\times{n})$，其特征向量矩阵$A(n\\times{n})$，取前k维特征向量$B(n\\times{k})$，那么降维后的数据：<br>$$<br>D_{PCA}(k\\times{m})=B^T(k\\times{n})\\cdot{D(n\\times{m})}<br>$$</p>\n<h1 id=\"PCA的意义\"><a href=\"#PCA的意义\" class=\"headerlink\" title=\"PCA的意义\"></a>PCA的意义</h1><p>PCA的意义要从协方差矩阵说起，协方差矩阵表示各个变量之间的关系，包括各自变量之间的方差。将Cov在以其特征向量为基向量构成的空间中的来观察：<br>$$<br>A^{-1}CovA=<br>    \\begin{bmatrix}<br>    \\lambda_{1} &amp; \\quad &amp; \\quad &amp; 0 \\\\<br>    \\quad &amp; \\lambda_{2} &amp; \\quad &amp; \\quad \\\\<br>    \\quad &amp; \\quad &amp; \\ddots &amp; \\quad \\\\<br>    0 &amp; \\quad &amp; \\quad &amp; \\lambda_{n}<br>    \\end{bmatrix}<br>$$</p>\n<p>关于为什么矩阵在以其特征向量为基向量的空间中来看是一个<strong>对角阵</strong>，且对角元素为各个<strong>特征值</strong>，可以参考3Blue1Brown的线性代数教程的<a href=\"https://www.bilibili.com/video/av6500834/?spm_id_from=333.788.videocard.2\" target=\"_blank\" rel=\"noopener\">9-基变换</a>和<a href=\"https://www.bilibili.com/video/av6540378/?spm_id_from=333.788.videocard.1\" target=\"_blank\" rel=\"noopener\">10-特征向量和特征值</a>。看完后会对这个变换过程有一个非常直观的理解。<br>上面说到协方差矩阵表示了各个变量之间和自身的关系，现在变换后的协方差矩阵除了对角线元素外，其它位置都变成0了，也就是说<strong>各个变量之间被去相关性了！</strong>在这空间下各个变量是<strong>独立的</strong>，去除了数据之间的冗余。<br>接下来我们选取特征值最大的前k个特征向量，由其组成新的变换矩阵B。之所以选择特征值大的，是因为<strong>特征值</strong>所在的对角位置是协方差矩阵表示<strong>方差</strong>的位置，方差越大，说明该特征变量越分散，信息量越大，压缩后越不容易恢复，所以我们保留它们而舍弃那些包含信息量小的特征变量。<br>最后我们只需要把样本数据投影到以提取出的k个特征向量为基向量的空间中。</p>\n<p><em>如最开始的图中，在三维数据中找到两个独立的主特征，并将三维数据投影降维到了二维平面上实现数据降维。</em></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://jermmy.xyz/2017/12/14/2017-12-15-PCA-another-view/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog-PCA，到底在做什么</a><br><a href=\"https://www.bilibili.com/video/av6500834/?spm_id_from=333.788.videocard.2\" target=\"_blank\" rel=\"noopener\">3Blue1Brown线性代数的本质-9-基变换</a><br><a href=\"https://www.bilibili.com/video/av6540378/?spm_id_from=333.788.videocard.1\" target=\"_blank\" rel=\"noopener\">3Blue1Brown线性代数的本质-10-特征向量和特征值</a></p>\n","site":{"data":{}},"excerpt":"<p>重温了线性代数基变换、特征值、特征向量和协方差矩阵。趁热打铁，记录一下它们在PCA中的应用。<br><img src=\"/2019/03/27/PCA-主成分分析/pca.jpeg\" alt=\"pca\"><br><em>图片来源<a href=\"http://jermmy.xyz/2017/12/14/2017-12-15-PCA-another-view/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog-PCA，到底在做什么</a></em></p>","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p><a href=\"https://www.wikiwand.com/zh-hans/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90\" target=\"_blank\" rel=\"noopener\">Wikiwand</a>：主成分分析(PCA)是一种分析、简化数据集的技术。经常用于减少数据集的维数，同时保持数据集中的对方差贡献最大的特征。<br>简单来说，PCA可以将数据进行压缩，并且是在尽量少的丢失信息的情况下进行压缩，方便加速对数据的处理速度。</p>\n<h1 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样本数据中心化、标准化 //变量减去均值，再除以标准差</span><br><span class=\"line\"></span><br><span class=\"line\">计算样本数据的协方差矩阵Cov</span><br><span class=\"line\"></span><br><span class=\"line\">计算Cov的特征向量，构造特征向量矩阵A</span><br><span class=\"line\"></span><br><span class=\"line\">把Cov变换到以A中各特征向量为基向量的空间中 //已A的视角来看Cov</span><br><span class=\"line\"></span><br><span class=\"line\">根据变换的Cov，提取特征值最大的前k个特征向量，组成新的变换矩阵B</span><br><span class=\"line\"></span><br><span class=\"line\">将样本数据进行矩阵B表示的变换，得到新的降维后样本数据</span><br></pre></td></tr></table></figure>\n\n<p><em>数据中心化和标准化是为了使得不同的特征数据具有相同的尺度</em></p>\n<p>假设数据样本矩阵$D(n\\times{m})$表示m个样本n维特征，则协方差矩阵$Cov(n\\times{n})$，其特征向量矩阵$A(n\\times{n})$，取前k维特征向量$B(n\\times{k})$，那么降维后的数据：<br>$$<br>D_{PCA}(k\\times{m})=B^T(k\\times{n})\\cdot{D(n\\times{m})}<br>$$</p>\n<h1 id=\"PCA的意义\"><a href=\"#PCA的意义\" class=\"headerlink\" title=\"PCA的意义\"></a>PCA的意义</h1><p>PCA的意义要从协方差矩阵说起，协方差矩阵表示各个变量之间的关系，包括各自变量之间的方差。将Cov在以其特征向量为基向量构成的空间中的来观察：<br>$$<br>A^{-1}CovA=<br>    \\begin{bmatrix}<br>    \\lambda_{1} &amp; \\quad &amp; \\quad &amp; 0 \\\\<br>    \\quad &amp; \\lambda_{2} &amp; \\quad &amp; \\quad \\\\<br>    \\quad &amp; \\quad &amp; \\ddots &amp; \\quad \\\\<br>    0 &amp; \\quad &amp; \\quad &amp; \\lambda_{n}<br>    \\end{bmatrix}<br>$$</p>\n<p>关于为什么矩阵在以其特征向量为基向量的空间中来看是一个<strong>对角阵</strong>，且对角元素为各个<strong>特征值</strong>，可以参考3Blue1Brown的线性代数教程的<a href=\"https://www.bilibili.com/video/av6500834/?spm_id_from=333.788.videocard.2\" target=\"_blank\" rel=\"noopener\">9-基变换</a>和<a href=\"https://www.bilibili.com/video/av6540378/?spm_id_from=333.788.videocard.1\" target=\"_blank\" rel=\"noopener\">10-特征向量和特征值</a>。看完后会对这个变换过程有一个非常直观的理解。<br>上面说到协方差矩阵表示了各个变量之间和自身的关系，现在变换后的协方差矩阵除了对角线元素外，其它位置都变成0了，也就是说<strong>各个变量之间被去相关性了！</strong>在这空间下各个变量是<strong>独立的</strong>，去除了数据之间的冗余。<br>接下来我们选取特征值最大的前k个特征向量，由其组成新的变换矩阵B。之所以选择特征值大的，是因为<strong>特征值</strong>所在的对角位置是协方差矩阵表示<strong>方差</strong>的位置，方差越大，说明该特征变量越分散，信息量越大，压缩后越不容易恢复，所以我们保留它们而舍弃那些包含信息量小的特征变量。<br>最后我们只需要把样本数据投影到以提取出的k个特征向量为基向量的空间中。</p>\n<p><em>如最开始的图中，在三维数据中找到两个独立的主特征，并将三维数据投影降维到了二维平面上实现数据降维。</em></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://jermmy.xyz/2017/12/14/2017-12-15-PCA-another-view/\" target=\"_blank\" rel=\"noopener\">Jermmy’s Lazy Blog-PCA，到底在做什么</a><br><a href=\"https://www.bilibili.com/video/av6500834/?spm_id_from=333.788.videocard.2\" target=\"_blank\" rel=\"noopener\">3Blue1Brown线性代数的本质-9-基变换</a><br><a href=\"https://www.bilibili.com/video/av6540378/?spm_id_from=333.788.videocard.1\" target=\"_blank\" rel=\"noopener\">3Blue1Brown线性代数的本质-10-特征向量和特征值</a></p>"},{"title":"POJ1970-The Game-DFS","date":"2018-08-14T11:39:48.000Z","_content":"在一个$19×19$的棋盘上有一局五子棋的棋局，要求判断是白棋获胜还是黑棋获胜，并输出获胜一方获胜棋子部分的最左上一个棋子的位置．\n相比其它迷宫问题稍微变化了一点点，多了一个方向因素，通过这道题对迷宫问题和DFS有了更进一步的理解．\n<!-- more -->\n# 链接\n[POJ1970-The Game](http://poj.org/problem?id=1970)\n# 原题描述\nA game of Renju is played on a 19*19 board by two players. One player uses black stones and the other uses white stones. The game begins in an empty board and two players alternate in placing black stones and white stones. Black always goes first. There are 19 horizontal lines and 19 vertical lines in the board and the stones are placed on the intersections of the lines. \nHorizontal lines are marked 1, 2, ..., 19 from up to down and vertical lines are marked 1, 2, ..., 19 from left to right. \n![example](/Renju.png)\nThe objective of this game is to put five stones of the same color consecutively along a horizontal, vertical, or diagonal line. So, black wins in the above figure. But, a player does not win the game if more than five stones of the same color were put consecutively. \nGiven a configuration of the game, write a program to determine whether white has won or black has won or nobody has won yet. There will be no input data where the black and the white both win at the same time. Also there will be no input data where the white or the black wins in more than one place. \n# 题解\n相比于其它迷宫问题的搜索，这个问题要求每一次DFS始终沿一个方向进行搜索判断，判断出一方的某一个方向上的棋子个数等于5时该方获胜，所以在DFS函数上加上一个控制方向的参数，并把方向的选择放在DFS外部（main函数中）．还有一个需要注意的地方是连续棋子个数大于5的情况不算获胜．\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 14 Aug 17:36:47 CST 2018\n *\n */\n \n//#include <bits/stdc++.h>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nint d[25][25];\nint t;\n/**/\n//搜索方向为向下，向右，右斜上，右斜下（方便获得最左上的棋子坐标）\nint dx[4] = {1, 0, -1, 1};\nint dy[4] = {0, 1, 1, 1};\n/**/\nint cnt = 0;\n\n//参数k为方向参数\nvoid dfs(int x, int y, int k){\n    cnt++;\n    int nx = x + dx[k], ny = y + dy[k];\n    if(nx >= 1 && nx <= 19 && ny >= 1 && ny <= 19 && d[nx][ny] == d[x][y])\n        dfs(nx, ny, k);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    cin >> t;\n    while(t--){\n        int leftx = 0, lefty = 0;\n        int win = 0;\n        for(int i = 1; i <= 19; i++){\n            for(int j = 1; j <= 19; j++){\n                cin >> d[i][j];\n                //cout << d[i][j] << \" \";\n            }\n            //cout << endl;\n        }\n        for(int i = 1; i <= 19; i++){\n            for(int j = 1; j <= 19; j++){\n                if(!d[i][j]) continue;\n                for(int k = 0; k < 4; k++){\n                    cnt = 0;\n                    dfs(i, j, k);\n                    if(cnt == 5){\n                        int xx = i - dx[k], yy = j - dy[k];\n                        //判断是否连续棋子个数大于5\n                        if(xx >= 1 && xx <= 19 && yy >= 1 && yy <= 19){\n                            if(d[xx][yy] != d[i][j]){\n                                win = d[i][j], leftx = i, lefty = j;\n                                break;\n                            }\n                        }\n                        else{\n                            win = d[i][j], leftx = i, lefty = j;\n                            break;\n                        }\n                    }\n                }\n                if(win) break;\n            }\n            if(win) break;\n        }\n        cout << win << endl;\n        if(win) cout << leftx << \" \" << lefty << endl;\n    }\n    \n    return 0;\n}\n```","source":"_posts/POJ1970-The-Game-DFS.md","raw":"---\ntitle: POJ1970-The Game-DFS\ndate: 2018-08-14 19:39:48\ncategories:\n- ACM\n- DFS\ntags:\n- POJ\n- DFS\n- 迷宫问题\n---\n在一个$19×19$的棋盘上有一局五子棋的棋局，要求判断是白棋获胜还是黑棋获胜，并输出获胜一方获胜棋子部分的最左上一个棋子的位置．\n相比其它迷宫问题稍微变化了一点点，多了一个方向因素，通过这道题对迷宫问题和DFS有了更进一步的理解．\n<!-- more -->\n# 链接\n[POJ1970-The Game](http://poj.org/problem?id=1970)\n# 原题描述\nA game of Renju is played on a 19*19 board by two players. One player uses black stones and the other uses white stones. The game begins in an empty board and two players alternate in placing black stones and white stones. Black always goes first. There are 19 horizontal lines and 19 vertical lines in the board and the stones are placed on the intersections of the lines. \nHorizontal lines are marked 1, 2, ..., 19 from up to down and vertical lines are marked 1, 2, ..., 19 from left to right. \n![example](/Renju.png)\nThe objective of this game is to put five stones of the same color consecutively along a horizontal, vertical, or diagonal line. So, black wins in the above figure. But, a player does not win the game if more than five stones of the same color were put consecutively. \nGiven a configuration of the game, write a program to determine whether white has won or black has won or nobody has won yet. There will be no input data where the black and the white both win at the same time. Also there will be no input data where the white or the black wins in more than one place. \n# 题解\n相比于其它迷宫问题的搜索，这个问题要求每一次DFS始终沿一个方向进行搜索判断，判断出一方的某一个方向上的棋子个数等于5时该方获胜，所以在DFS函数上加上一个控制方向的参数，并把方向的选择放在DFS外部（main函数中）．还有一个需要注意的地方是连续棋子个数大于5的情况不算获胜．\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 14 Aug 17:36:47 CST 2018\n *\n */\n \n//#include <bits/stdc++.h>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nint d[25][25];\nint t;\n/**/\n//搜索方向为向下，向右，右斜上，右斜下（方便获得最左上的棋子坐标）\nint dx[4] = {1, 0, -1, 1};\nint dy[4] = {0, 1, 1, 1};\n/**/\nint cnt = 0;\n\n//参数k为方向参数\nvoid dfs(int x, int y, int k){\n    cnt++;\n    int nx = x + dx[k], ny = y + dy[k];\n    if(nx >= 1 && nx <= 19 && ny >= 1 && ny <= 19 && d[nx][ny] == d[x][y])\n        dfs(nx, ny, k);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    cin >> t;\n    while(t--){\n        int leftx = 0, lefty = 0;\n        int win = 0;\n        for(int i = 1; i <= 19; i++){\n            for(int j = 1; j <= 19; j++){\n                cin >> d[i][j];\n                //cout << d[i][j] << \" \";\n            }\n            //cout << endl;\n        }\n        for(int i = 1; i <= 19; i++){\n            for(int j = 1; j <= 19; j++){\n                if(!d[i][j]) continue;\n                for(int k = 0; k < 4; k++){\n                    cnt = 0;\n                    dfs(i, j, k);\n                    if(cnt == 5){\n                        int xx = i - dx[k], yy = j - dy[k];\n                        //判断是否连续棋子个数大于5\n                        if(xx >= 1 && xx <= 19 && yy >= 1 && yy <= 19){\n                            if(d[xx][yy] != d[i][j]){\n                                win = d[i][j], leftx = i, lefty = j;\n                                break;\n                            }\n                        }\n                        else{\n                            win = d[i][j], leftx = i, lefty = j;\n                            break;\n                        }\n                    }\n                }\n                if(win) break;\n            }\n            if(win) break;\n        }\n        cout << win << endl;\n        if(win) cout << leftx << \" \" << lefty << endl;\n    }\n    \n    return 0;\n}\n```","slug":"POJ1970-The-Game-DFS","published":1,"updated":"2019-08-20T14:49:32.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lg000o30vnebjsc1vp","content":"<p>在一个$19×19$的棋盘上有一局五子棋的棋局，要求判断是白棋获胜还是黑棋获胜，并输出获胜一方获胜棋子部分的最左上一个棋子的位置．<br>相比其它迷宫问题稍微变化了一点点，多了一个方向因素，通过这道题对迷宫问题和DFS有了更进一步的理解．</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://poj.org/problem?id=1970\" target=\"_blank\" rel=\"noopener\">POJ1970-The Game</a></p>\n<h1 id=\"原题描述\"><a href=\"#原题描述\" class=\"headerlink\" title=\"原题描述\"></a>原题描述</h1><p>A game of Renju is played on a 19*19 board by two players. One player uses black stones and the other uses white stones. The game begins in an empty board and two players alternate in placing black stones and white stones. Black always goes first. There are 19 horizontal lines and 19 vertical lines in the board and the stones are placed on the intersections of the lines.<br>Horizontal lines are marked 1, 2, …, 19 from up to down and vertical lines are marked 1, 2, …, 19 from left to right.<br><img src=\"/2018/08/14/POJ1970-The-Game-DFS/Renju.png\" alt=\"example\"><br>The objective of this game is to put five stones of the same color consecutively along a horizontal, vertical, or diagonal line. So, black wins in the above figure. But, a player does not win the game if more than five stones of the same color were put consecutively.<br>Given a configuration of the game, write a program to determine whether white has won or black has won or nobody has won yet. There will be no input data where the black and the white both win at the same time. Also there will be no input data where the white or the black wins in more than one place. </p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>相比于其它迷宫问题的搜索，这个问题要求每一次DFS始终沿一个方向进行搜索判断，判断出一方的某一个方向上的棋子个数等于5时该方获胜，所以在DFS函数上加上一个控制方向的参数，并把方向的选择放在DFS外部（main函数中）．还有一个需要注意的地方是连续棋子个数大于5的情况不算获胜．</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 14 Aug 17:36:47 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">25</span>][<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"comment\">/**/</span></span><br><span class=\"line\"><span class=\"comment\">//搜索方向为向下，向右，右斜上，右斜下（方便获得最左上的棋子坐标）</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参数k为方向参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    cnt++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nx = x + dx[k], ny = y + dy[k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= <span class=\"number\">19</span> &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= <span class=\"number\">19</span> &amp;&amp; d[nx][ny] == d[x][y])</span><br><span class=\"line\">        dfs(nx, ny, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftx = <span class=\"number\">0</span>, lefty = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> win = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">19</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">19</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span> &gt;&gt; d[i][j];</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; d[i][j] &lt;&lt; \" \";</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">19</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">19</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!d[i][j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++)&#123;</span><br><span class=\"line\">                    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    dfs(i, j, k);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt == <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> xx = i - dx[k], yy = j - dy[k];</span><br><span class=\"line\">                        <span class=\"comment\">//判断是否连续棋子个数大于5</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(xx &gt;= <span class=\"number\">1</span> &amp;&amp; xx &lt;= <span class=\"number\">19</span> &amp;&amp; yy &gt;= <span class=\"number\">1</span> &amp;&amp; yy &lt;= <span class=\"number\">19</span>)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(d[xx][yy] != d[i][j])&#123;</span><br><span class=\"line\">                                win = d[i][j], leftx = i, lefty = j;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            win = d[i][j], leftx = i, lefty = j;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(win) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(win) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; win &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(win) <span class=\"built_in\">cout</span> &lt;&lt; leftx &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; lefty &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在一个$19×19$的棋盘上有一局五子棋的棋局，要求判断是白棋获胜还是黑棋获胜，并输出获胜一方获胜棋子部分的最左上一个棋子的位置．<br>相比其它迷宫问题稍微变化了一点点，多了一个方向因素，通过这道题对迷宫问题和DFS有了更进一步的理解．</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://poj.org/problem?id=1970\" target=\"_blank\" rel=\"noopener\">POJ1970-The Game</a></p>\n<h1 id=\"原题描述\"><a href=\"#原题描述\" class=\"headerlink\" title=\"原题描述\"></a>原题描述</h1><p>A game of Renju is played on a 19*19 board by two players. One player uses black stones and the other uses white stones. The game begins in an empty board and two players alternate in placing black stones and white stones. Black always goes first. There are 19 horizontal lines and 19 vertical lines in the board and the stones are placed on the intersections of the lines.<br>Horizontal lines are marked 1, 2, …, 19 from up to down and vertical lines are marked 1, 2, …, 19 from left to right.<br><img src=\"/2018/08/14/POJ1970-The-Game-DFS/Renju.png\" alt=\"example\"><br>The objective of this game is to put five stones of the same color consecutively along a horizontal, vertical, or diagonal line. So, black wins in the above figure. But, a player does not win the game if more than five stones of the same color were put consecutively.<br>Given a configuration of the game, write a program to determine whether white has won or black has won or nobody has won yet. There will be no input data where the black and the white both win at the same time. Also there will be no input data where the white or the black wins in more than one place. </p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>相比于其它迷宫问题的搜索，这个问题要求每一次DFS始终沿一个方向进行搜索判断，判断出一方的某一个方向上的棋子个数等于5时该方获胜，所以在DFS函数上加上一个控制方向的参数，并把方向的选择放在DFS外部（main函数中）．还有一个需要注意的地方是连续棋子个数大于5的情况不算获胜．</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 14 Aug 17:36:47 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">25</span>][<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"comment\">/**/</span></span><br><span class=\"line\"><span class=\"comment\">//搜索方向为向下，向右，右斜上，右斜下（方便获得最左上的棋子坐标）</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参数k为方向参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    cnt++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nx = x + dx[k], ny = y + dy[k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= <span class=\"number\">19</span> &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= <span class=\"number\">19</span> &amp;&amp; d[nx][ny] == d[x][y])</span><br><span class=\"line\">        dfs(nx, ny, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftx = <span class=\"number\">0</span>, lefty = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> win = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">19</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">19</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span> &gt;&gt; d[i][j];</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; d[i][j] &lt;&lt; \" \";</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">19</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">19</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!d[i][j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++)&#123;</span><br><span class=\"line\">                    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    dfs(i, j, k);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt == <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> xx = i - dx[k], yy = j - dy[k];</span><br><span class=\"line\">                        <span class=\"comment\">//判断是否连续棋子个数大于5</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(xx &gt;= <span class=\"number\">1</span> &amp;&amp; xx &lt;= <span class=\"number\">19</span> &amp;&amp; yy &gt;= <span class=\"number\">1</span> &amp;&amp; yy &lt;= <span class=\"number\">19</span>)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(d[xx][yy] != d[i][j])&#123;</span><br><span class=\"line\">                                win = d[i][j], leftx = i, lefty = j;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            win = d[i][j], leftx = i, lefty = j;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(win) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(win) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; win &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(win) <span class=\"built_in\">cout</span> &lt;&lt; leftx &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; lefty &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"POJ2481-线段树单点更新","date":"2018-04-22T08:51:50.000Z","_content":"最近刚刚开始做线段树相关的题目，很艰难...依照现在的理解其实线段树的题的暴力求解思路比较容易想到，但是暴力求解的时间复杂度一般肯会超，而线段树也正是这样一种通过区间更新来解决大量输入数据问题、降低时间复杂度的高级数据结构。线段树的关键是确定每个节点维护的是什么数据，以及以什么参数为依据进行区间的查询。\n被POJ上的这道题卡了很久，一开始是思路问题，后来是一些细节问题，总之还是熟练度不高...\n[参考博客链接](http://111qqz.com/2015/08/poj2481/)\n<!-- more -->\n# 题目链接\n[POJ2481](http://poj.org/problem?id=2481)\n# 题目描述\n共有N头牛，每头牛对应一个进食区间[$S$,$E$], 对两头牛$i$,$j$来说，假设它们对应的区间分别为[$S\\_i$,$E\\_i$]和[$S\\_j$,$E\\_j$]，如果满足$S\\_i<=S\\_j，E\\_j<=E\\_i$且$E\\_i-S\\_i>E\\_j-S\\_j$,那么我们可以说牛$i$要比牛$j$强壮。\n现对于每头牛来说计算比它强壮的牛的数量。\n# 题解\n先对区间进行排序，右端点降序为第一关键字，左端点升序为第二关键字。这样进行处理后第$i$个区间的右端点一定小于前$i-1$个区间的右端点了，那么只要进行左端点的判决就可以了，具体做法为：\n每次处理一个区间后都将该区间的左端点更新到线段树中（插入后相对应叶节点数值+1，插入前为0）。\n那么当我们查询第$i$个区间时其实也就是查询线段树中从1到$i-1$的区间内左端点的标记个数。\n**于是线段树每个节点维护的就是以该节点为根节点的子树所代表的区间中左端点的个数，而进行区间查询依据的参数也就是每个区间的左端点。**\n*需要注意的问题*:\n**两个区间重合时的情况要特殊处理，这种情况不算在内，做法可以是对排好序的每个区间进行处理前先检查它是否和上一查询区间重合，若重合则直接将上一区间的查询结果赋予该区间，并将该区间对应的左端点在线段树中再次更新（再次加1）,而后跳过该区间的查询。**详见代码：\n# 代码\n关于线段树的实现部分基于《挑战程序设计竞赛》一书中的实现模板，也可参考其它实现模板，形成自己的书写习惯。\n``` C++\n//#include <bits/stdc++.h> //POJ上大部分题不支持该头文件\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nconst int maxn = 1 << 18;\ntypedef struct node{\n    int vl;\n    int vr;\n    int id;\n} nod;\nnod a[maxn];\nint d[2 * maxn];\nint n, pn;\nint ans[maxn];\n//排序部分\nbool cmp(const nod& a, const nod& b){\n    if(a.vr == b.vr) \n        return a.vl < b.vl;\n    else\n        return a.vr > b.vr;\n}\n//初始化\nvoid init(int _n){\n    n = 1;\n    while(n < _n) n *= 2;\n    for(int i = 0; i < 2 * n - 1; i++){\n        d[i] = 0;\n    }\n}\n//查询操作\nint query(int a, int b, int k, int l, int r){\n    if(a <= l && b >= r) return d[k];\n    if(b <= l) return 0;\n    else{\n        int res1 = query(a, b, 2 * k + 1, l, (l + r) / 2);\n        int res2 = query(a, b, 2 * k + 2, (l + r) / 2, r);\n        return res1 + res2;\n    }\n}\n//更新操作\nvoid update(int k){\n    k += n - 1;\n    d[k] += 1;\n    while(k > 0){\n        k = (k - 1) / 2;\n        d[k] = d[2 *k + 1] + d[2 * k + 2];\n    }\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int t1, t2;\n    while(~scanf(\"%d\", &n)){\n        memset(ans, 0, sizeof(ans));\n        memset(d, 0, sizeof(d));\n\t    if(n == 0) break;\n\t    for(int i = 0; i < n; i++){\n            scanf(\"%d%d\", &t1, &t2);\n            a[i].vl = t1;\n            a[i].vr = t2;\n            a[i].id = i;\n        }\n        sort(a, a + n, cmp);\n        pn = n;\n        init(n);\n        for(int i = 0; i < pn; i++){\n            //if内为判断重合区间部分\n            if(i >= 1 && a[i].vl == a[i - 1].vl && a[i].vr == a[i - 1].vr){\n                ans[a[i].id] = ans[a[i - 1].id];\n                update(a[i].vl);\n                continue;\n            }\n            ans[a[i].id] = query(0, a[i].vl + 1, 0, 0, n);\n            update(a[i].vl);\n\t\t\t\n        }\n        for(int i = 0; i < pn; i++){\n            printf(\"%d%c\", ans[i], i < pn - 1 ? ' ' : '\\n');\n        }\n    }\n\t\n    return 0;\n}\n```","source":"_posts/POJ2481.md","raw":"---\ntitle: POJ2481-线段树单点更新\ndate: 2018-04-22 16:51:50\ncategories: \n- ACM\n- 线段树\ntags:\n- POJ\n- 线段树\n---\n最近刚刚开始做线段树相关的题目，很艰难...依照现在的理解其实线段树的题的暴力求解思路比较容易想到，但是暴力求解的时间复杂度一般肯会超，而线段树也正是这样一种通过区间更新来解决大量输入数据问题、降低时间复杂度的高级数据结构。线段树的关键是确定每个节点维护的是什么数据，以及以什么参数为依据进行区间的查询。\n被POJ上的这道题卡了很久，一开始是思路问题，后来是一些细节问题，总之还是熟练度不高...\n[参考博客链接](http://111qqz.com/2015/08/poj2481/)\n<!-- more -->\n# 题目链接\n[POJ2481](http://poj.org/problem?id=2481)\n# 题目描述\n共有N头牛，每头牛对应一个进食区间[$S$,$E$], 对两头牛$i$,$j$来说，假设它们对应的区间分别为[$S\\_i$,$E\\_i$]和[$S\\_j$,$E\\_j$]，如果满足$S\\_i<=S\\_j，E\\_j<=E\\_i$且$E\\_i-S\\_i>E\\_j-S\\_j$,那么我们可以说牛$i$要比牛$j$强壮。\n现对于每头牛来说计算比它强壮的牛的数量。\n# 题解\n先对区间进行排序，右端点降序为第一关键字，左端点升序为第二关键字。这样进行处理后第$i$个区间的右端点一定小于前$i-1$个区间的右端点了，那么只要进行左端点的判决就可以了，具体做法为：\n每次处理一个区间后都将该区间的左端点更新到线段树中（插入后相对应叶节点数值+1，插入前为0）。\n那么当我们查询第$i$个区间时其实也就是查询线段树中从1到$i-1$的区间内左端点的标记个数。\n**于是线段树每个节点维护的就是以该节点为根节点的子树所代表的区间中左端点的个数，而进行区间查询依据的参数也就是每个区间的左端点。**\n*需要注意的问题*:\n**两个区间重合时的情况要特殊处理，这种情况不算在内，做法可以是对排好序的每个区间进行处理前先检查它是否和上一查询区间重合，若重合则直接将上一区间的查询结果赋予该区间，并将该区间对应的左端点在线段树中再次更新（再次加1）,而后跳过该区间的查询。**详见代码：\n# 代码\n关于线段树的实现部分基于《挑战程序设计竞赛》一书中的实现模板，也可参考其它实现模板，形成自己的书写习惯。\n``` C++\n//#include <bits/stdc++.h> //POJ上大部分题不支持该头文件\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nconst int maxn = 1 << 18;\ntypedef struct node{\n    int vl;\n    int vr;\n    int id;\n} nod;\nnod a[maxn];\nint d[2 * maxn];\nint n, pn;\nint ans[maxn];\n//排序部分\nbool cmp(const nod& a, const nod& b){\n    if(a.vr == b.vr) \n        return a.vl < b.vl;\n    else\n        return a.vr > b.vr;\n}\n//初始化\nvoid init(int _n){\n    n = 1;\n    while(n < _n) n *= 2;\n    for(int i = 0; i < 2 * n - 1; i++){\n        d[i] = 0;\n    }\n}\n//查询操作\nint query(int a, int b, int k, int l, int r){\n    if(a <= l && b >= r) return d[k];\n    if(b <= l) return 0;\n    else{\n        int res1 = query(a, b, 2 * k + 1, l, (l + r) / 2);\n        int res2 = query(a, b, 2 * k + 2, (l + r) / 2, r);\n        return res1 + res2;\n    }\n}\n//更新操作\nvoid update(int k){\n    k += n - 1;\n    d[k] += 1;\n    while(k > 0){\n        k = (k - 1) / 2;\n        d[k] = d[2 *k + 1] + d[2 * k + 2];\n    }\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int t1, t2;\n    while(~scanf(\"%d\", &n)){\n        memset(ans, 0, sizeof(ans));\n        memset(d, 0, sizeof(d));\n\t    if(n == 0) break;\n\t    for(int i = 0; i < n; i++){\n            scanf(\"%d%d\", &t1, &t2);\n            a[i].vl = t1;\n            a[i].vr = t2;\n            a[i].id = i;\n        }\n        sort(a, a + n, cmp);\n        pn = n;\n        init(n);\n        for(int i = 0; i < pn; i++){\n            //if内为判断重合区间部分\n            if(i >= 1 && a[i].vl == a[i - 1].vl && a[i].vr == a[i - 1].vr){\n                ans[a[i].id] = ans[a[i - 1].id];\n                update(a[i].vl);\n                continue;\n            }\n            ans[a[i].id] = query(0, a[i].vl + 1, 0, 0, n);\n            update(a[i].vl);\n\t\t\t\n        }\n        for(int i = 0; i < pn; i++){\n            printf(\"%d%c\", ans[i], i < pn - 1 ? ' ' : '\\n');\n        }\n    }\n\t\n    return 0;\n}\n```","slug":"POJ2481","published":1,"updated":"2019-08-20T14:49:21.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lg000p30vnziaof3gn","content":"<p>最近刚刚开始做线段树相关的题目，很艰难…依照现在的理解其实线段树的题的暴力求解思路比较容易想到，但是暴力求解的时间复杂度一般肯会超，而线段树也正是这样一种通过区间更新来解决大量输入数据问题、降低时间复杂度的高级数据结构。线段树的关键是确定每个节点维护的是什么数据，以及以什么参数为依据进行区间的查询。<br>被POJ上的这道题卡了很久，一开始是思路问题，后来是一些细节问题，总之还是熟练度不高…<br><a href=\"http://111qqz.com/2015/08/poj2481/\" target=\"_blank\" rel=\"noopener\">参考博客链接</a></p>\n<a id=\"more\"></a>\n<h1 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h1><p><a href=\"http://poj.org/problem?id=2481\" target=\"_blank\" rel=\"noopener\">POJ2481</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>共有N头牛，每头牛对应一个进食区间[$S$,$E$], 对两头牛$i$,$j$来说，假设它们对应的区间分别为[$S_i$,$E_i$]和[$S_j$,$E_j$]，如果满足$S_i&lt;=S_j，E_j&lt;=E_i$且$E_i-S_i&gt;E_j-S_j$,那么我们可以说牛$i$要比牛$j$强壮。<br>现对于每头牛来说计算比它强壮的牛的数量。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>先对区间进行排序，右端点降序为第一关键字，左端点升序为第二关键字。这样进行处理后第$i$个区间的右端点一定小于前$i-1$个区间的右端点了，那么只要进行左端点的判决就可以了，具体做法为：<br>每次处理一个区间后都将该区间的左端点更新到线段树中（插入后相对应叶节点数值+1，插入前为0）。<br>那么当我们查询第$i$个区间时其实也就是查询线段树中从1到$i-1$的区间内左端点的标记个数。<br><strong>于是线段树每个节点维护的就是以该节点为根节点的子树所代表的区间中左端点的个数，而进行区间查询依据的参数也就是每个区间的左端点。</strong><br><em>需要注意的问题</em>:<br><strong>两个区间重合时的情况要特殊处理，这种情况不算在内，做法可以是对排好序的每个区间进行处理前先检查它是否和上一查询区间重合，若重合则直接将上一区间的查询结果赋予该区间，并将该区间对应的左端点在线段树中再次更新（再次加1）,而后跳过该区间的查询。</strong>详见代码：</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>关于线段树的实现部分基于《挑战程序设计竞赛》一书中的实现模板，也可参考其它实现模板，形成自己的书写习惯。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt; //POJ上大部分题不支持该头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> vr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">&#125; nod;</span><br><span class=\"line\">nod a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">2</span> * maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, pn;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"><span class=\"comment\">//排序部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> nod&amp; a, <span class=\"keyword\">const</span> nod&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.vr == b.vr) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.vl &lt; b.vl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.vr &gt; b.vr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> _n)</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &lt; _n) n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        d[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查询操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class=\"keyword\">return</span> d[k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b &lt;= l) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res1 = query(a, b, <span class=\"number\">2</span> * k + <span class=\"number\">1</span>, l, (l + r) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res2 = query(a, b, <span class=\"number\">2</span> * k + <span class=\"number\">2</span>, (l + r) / <span class=\"number\">2</span>, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res1 + res2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    k += n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    d[k] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        k = (k - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        d[k] = d[<span class=\"number\">2</span> *k + <span class=\"number\">1</span>] + d[<span class=\"number\">2</span> * k + <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1, t2;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;t1, &amp;t2);</span><br><span class=\"line\">            a[i].vl = t1;</span><br><span class=\"line\">            a[i].vr = t2;</span><br><span class=\"line\">            a[i].id = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(a, a + n, cmp);</span><br><span class=\"line\">        pn = n;</span><br><span class=\"line\">        init(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pn; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//if内为判断重合区间部分</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">1</span> &amp;&amp; a[i].vl == a[i - <span class=\"number\">1</span>].vl &amp;&amp; a[i].vr == a[i - <span class=\"number\">1</span>].vr)&#123;</span><br><span class=\"line\">                ans[a[i].id] = ans[a[i - <span class=\"number\">1</span>].id];</span><br><span class=\"line\">                update(a[i].vl);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans[a[i].id] = query(<span class=\"number\">0</span>, a[i].vl + <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">            update(a[i].vl);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pn; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, ans[i], i &lt; pn - <span class=\"number\">1</span> ? <span class=\"string\">' '</span> : <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近刚刚开始做线段树相关的题目，很艰难…依照现在的理解其实线段树的题的暴力求解思路比较容易想到，但是暴力求解的时间复杂度一般肯会超，而线段树也正是这样一种通过区间更新来解决大量输入数据问题、降低时间复杂度的高级数据结构。线段树的关键是确定每个节点维护的是什么数据，以及以什么参数为依据进行区间的查询。<br>被POJ上的这道题卡了很久，一开始是思路问题，后来是一些细节问题，总之还是熟练度不高…<br><a href=\"http://111qqz.com/2015/08/poj2481/\" target=\"_blank\" rel=\"noopener\">参考博客链接</a></p>","more":"<h1 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h1><p><a href=\"http://poj.org/problem?id=2481\" target=\"_blank\" rel=\"noopener\">POJ2481</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>共有N头牛，每头牛对应一个进食区间[$S$,$E$], 对两头牛$i$,$j$来说，假设它们对应的区间分别为[$S_i$,$E_i$]和[$S_j$,$E_j$]，如果满足$S_i&lt;=S_j，E_j&lt;=E_i$且$E_i-S_i&gt;E_j-S_j$,那么我们可以说牛$i$要比牛$j$强壮。<br>现对于每头牛来说计算比它强壮的牛的数量。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>先对区间进行排序，右端点降序为第一关键字，左端点升序为第二关键字。这样进行处理后第$i$个区间的右端点一定小于前$i-1$个区间的右端点了，那么只要进行左端点的判决就可以了，具体做法为：<br>每次处理一个区间后都将该区间的左端点更新到线段树中（插入后相对应叶节点数值+1，插入前为0）。<br>那么当我们查询第$i$个区间时其实也就是查询线段树中从1到$i-1$的区间内左端点的标记个数。<br><strong>于是线段树每个节点维护的就是以该节点为根节点的子树所代表的区间中左端点的个数，而进行区间查询依据的参数也就是每个区间的左端点。</strong><br><em>需要注意的问题</em>:<br><strong>两个区间重合时的情况要特殊处理，这种情况不算在内，做法可以是对排好序的每个区间进行处理前先检查它是否和上一查询区间重合，若重合则直接将上一区间的查询结果赋予该区间，并将该区间对应的左端点在线段树中再次更新（再次加1）,而后跳过该区间的查询。</strong>详见代码：</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>关于线段树的实现部分基于《挑战程序设计竞赛》一书中的实现模板，也可参考其它实现模板，形成自己的书写习惯。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt; //POJ上大部分题不支持该头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> vr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">&#125; nod;</span><br><span class=\"line\">nod a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">2</span> * maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, pn;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"><span class=\"comment\">//排序部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> nod&amp; a, <span class=\"keyword\">const</span> nod&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.vr == b.vr) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.vl &lt; b.vl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.vr &gt; b.vr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> _n)</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &lt; _n) n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        d[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查询操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class=\"keyword\">return</span> d[k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b &lt;= l) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res1 = query(a, b, <span class=\"number\">2</span> * k + <span class=\"number\">1</span>, l, (l + r) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res2 = query(a, b, <span class=\"number\">2</span> * k + <span class=\"number\">2</span>, (l + r) / <span class=\"number\">2</span>, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res1 + res2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    k += n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    d[k] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        k = (k - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        d[k] = d[<span class=\"number\">2</span> *k + <span class=\"number\">1</span>] + d[<span class=\"number\">2</span> * k + <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1, t2;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;t1, &amp;t2);</span><br><span class=\"line\">            a[i].vl = t1;</span><br><span class=\"line\">            a[i].vr = t2;</span><br><span class=\"line\">            a[i].id = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(a, a + n, cmp);</span><br><span class=\"line\">        pn = n;</span><br><span class=\"line\">        init(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pn; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//if内为判断重合区间部分</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">1</span> &amp;&amp; a[i].vl == a[i - <span class=\"number\">1</span>].vl &amp;&amp; a[i].vr == a[i - <span class=\"number\">1</span>].vr)&#123;</span><br><span class=\"line\">                ans[a[i].id] = ans[a[i - <span class=\"number\">1</span>].id];</span><br><span class=\"line\">                update(a[i].vl);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans[a[i].id] = query(<span class=\"number\">0</span>, a[i].vl + <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">            update(a[i].vl);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pn; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, ans[i], i &lt; pn - <span class=\"number\">1</span> ? <span class=\"string\">' '</span> : <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Rand-C++随机数","date":"2019-04-28T10:55:29.000Z","_content":"![random](/random.jpg)\n\n　　*C++随机数发生器。*\n<!--more-->\n\n# rand()\n　　生成随机整数的核心函数是``cstdlib``中的``rand()``，它生成一个闭区间 [0, RAND_MAX] 内的均匀随机数（均匀的含义是：该区间内每个整数被随机获取的概率相同），其中``RAND_MAX``是定义在cstdlib中的一个宏变量，在不同环境下的值可能不同，但是保证至少为$32767(2^{15} - 1)$。\n　　*严格地说，这里的随机数是“伪随机数”，因为它也是由数学公式计算出来的，不过在算法领域，多数情况下可以把它当作真正的随机数。*\n\n# 产生[0, n]之间的整数\n　　可以用``rand() % n``的方式产生区间 $[0, n - 1]$ 内的一个随机整数。但是一方面这会破坏产生的整数分布的均匀性，另一方面只要``n``大于 ``RAND_MAX``这种方法就不能得到期望的结果。由于``RAND_MAX``可能只有 32767 这么小，所以在使用这种方法的时候要小心。\n　　另一个方法是执行``rand()``后先除以``RAND_MAX``，得到 $[0, 1]$ 之间的随机实数，扩大``n``倍后四舍五入，得到 $[0, n]$ 之间的均匀整数。\n\n# 具体用法\n　　需要随机数的程序在最开始时一般会执行一次``srand(time(NULL))``，目的是初始化“随机数种子”。简单来说，种子是生成随机数的计算依据。**种子相同，计算出来的“随机数”序列总是相同**。譬如运行下面的程序：\n\n```C++\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\nint main(){\n    srand(100);\n    for(int i = 0; i < 3; i++){\n        cout << rand() << endl;\n    }\n    return 0;\n}\n```\n　　可以得到这样的一组随机数：\n```\n677741240\n611911301\n516687479\n```\n　　但是当我们第二次运行这段代码的时候，我们会得到相同的一组随机数，原因就在于，我们每次运行时``srand``函数中初始化的种子始终是``100``。\n　　而当我们使用``srand(time(NULL))``来替代上面的``srand(100)``时，由于``time()``函数会返回系统当前时间，所以每次运行程序时这个值都会不一样，也就使得每次运行生成的随机数序列不同。\n　　*如果不调用``srand``而直接使用``rand()``，相当于调用过一次``srand(1)``。*\n　　另外，**不要在同一个程序每次生成随机数之前都重新调用一次srand。**譬如运行下面的程序：\n```C++\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\nint main(){\n    for(int i = 0; i < 3; i++){\n        srand(time(NULL));\n        cout << rand() << endl;\n    }\n    return 0;\n}\n```\n　　会发现生成的三个随机数是相同的（随机数的具体值因人而异）：\n```\n805428961\n805428961\n805428961\n```\n　　仔细思考一下就很可以分析出原因：生成随机数的序列是由“种子”决定的，在这段代码里的种子就是``time(NULL)``的返回值了，也就是系统当前时间（准确来说是自UTC时间1970年1月1日0点依赖经过的“秒数”），它**每秒变化一次**，但是程序在上面三次运行的**时间间隔过短**，应该毫秒甚至微秒级的，因此上面三个随机数是同一个种子生成的，而且因为每次都被重新初始化，所以都是同一个随机数序列的第一个值。\n\n　　*“同一套随机数”可能是好事也可能是坏事。例如，若要反复测试程序对不同随机数据的响应，需要每次得到的随机数不同。另一方面，如果发现某一程序对于一组随机数据报错，就需要在调试时“重现”这组数据。另外，不同的编译器计算随机数的方法可能不同。如果是不同编译器编译出来的程序，即使是用相同参数调用``srand()``，也可能的都不同的随机序列。*\n\n# 参考\n\n　　主要参考了刘汝佳老师的《算法竞赛入门经典》(第2版)第五章中5.2.6-测试STL一节中的内容。\n\n","source":"_posts/Rand-C-随机数.md","raw":"---\ntitle: Rand-C++随机数\ndate: 2019-04-28 18:55:29\ncategories:\n- C++\ntags:\n- Random\n---\n![random](/random.jpg)\n\n　　*C++随机数发生器。*\n<!--more-->\n\n# rand()\n　　生成随机整数的核心函数是``cstdlib``中的``rand()``，它生成一个闭区间 [0, RAND_MAX] 内的均匀随机数（均匀的含义是：该区间内每个整数被随机获取的概率相同），其中``RAND_MAX``是定义在cstdlib中的一个宏变量，在不同环境下的值可能不同，但是保证至少为$32767(2^{15} - 1)$。\n　　*严格地说，这里的随机数是“伪随机数”，因为它也是由数学公式计算出来的，不过在算法领域，多数情况下可以把它当作真正的随机数。*\n\n# 产生[0, n]之间的整数\n　　可以用``rand() % n``的方式产生区间 $[0, n - 1]$ 内的一个随机整数。但是一方面这会破坏产生的整数分布的均匀性，另一方面只要``n``大于 ``RAND_MAX``这种方法就不能得到期望的结果。由于``RAND_MAX``可能只有 32767 这么小，所以在使用这种方法的时候要小心。\n　　另一个方法是执行``rand()``后先除以``RAND_MAX``，得到 $[0, 1]$ 之间的随机实数，扩大``n``倍后四舍五入，得到 $[0, n]$ 之间的均匀整数。\n\n# 具体用法\n　　需要随机数的程序在最开始时一般会执行一次``srand(time(NULL))``，目的是初始化“随机数种子”。简单来说，种子是生成随机数的计算依据。**种子相同，计算出来的“随机数”序列总是相同**。譬如运行下面的程序：\n\n```C++\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\nint main(){\n    srand(100);\n    for(int i = 0; i < 3; i++){\n        cout << rand() << endl;\n    }\n    return 0;\n}\n```\n　　可以得到这样的一组随机数：\n```\n677741240\n611911301\n516687479\n```\n　　但是当我们第二次运行这段代码的时候，我们会得到相同的一组随机数，原因就在于，我们每次运行时``srand``函数中初始化的种子始终是``100``。\n　　而当我们使用``srand(time(NULL))``来替代上面的``srand(100)``时，由于``time()``函数会返回系统当前时间，所以每次运行程序时这个值都会不一样，也就使得每次运行生成的随机数序列不同。\n　　*如果不调用``srand``而直接使用``rand()``，相当于调用过一次``srand(1)``。*\n　　另外，**不要在同一个程序每次生成随机数之前都重新调用一次srand。**譬如运行下面的程序：\n```C++\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\nint main(){\n    for(int i = 0; i < 3; i++){\n        srand(time(NULL));\n        cout << rand() << endl;\n    }\n    return 0;\n}\n```\n　　会发现生成的三个随机数是相同的（随机数的具体值因人而异）：\n```\n805428961\n805428961\n805428961\n```\n　　仔细思考一下就很可以分析出原因：生成随机数的序列是由“种子”决定的，在这段代码里的种子就是``time(NULL)``的返回值了，也就是系统当前时间（准确来说是自UTC时间1970年1月1日0点依赖经过的“秒数”），它**每秒变化一次**，但是程序在上面三次运行的**时间间隔过短**，应该毫秒甚至微秒级的，因此上面三个随机数是同一个种子生成的，而且因为每次都被重新初始化，所以都是同一个随机数序列的第一个值。\n\n　　*“同一套随机数”可能是好事也可能是坏事。例如，若要反复测试程序对不同随机数据的响应，需要每次得到的随机数不同。另一方面，如果发现某一程序对于一组随机数据报错，就需要在调试时“重现”这组数据。另外，不同的编译器计算随机数的方法可能不同。如果是不同编译器编译出来的程序，即使是用相同参数调用``srand()``，也可能的都不同的随机序列。*\n\n# 参考\n\n　　主要参考了刘汝佳老师的《算法竞赛入门经典》(第2版)第五章中5.2.6-测试STL一节中的内容。\n\n","slug":"Rand-C-随机数","published":1,"updated":"2019-09-01T08:41:46.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lh000q30vnoazwntli","content":"<p><img src=\"/2019/04/28/Rand-C-随机数/random.jpg\" alt=\"random\"></p>\n<p>　　<em>C++随机数发生器。</em></p>\n<a id=\"more\"></a>\n\n<h1 id=\"rand\"><a href=\"#rand\" class=\"headerlink\" title=\"rand()\"></a>rand()</h1><p>　　生成随机整数的核心函数是<code>cstdlib</code>中的<code>rand()</code>，它生成一个闭区间 [0, RAND_MAX] 内的均匀随机数（均匀的含义是：该区间内每个整数被随机获取的概率相同），其中<code>RAND_MAX</code>是定义在cstdlib中的一个宏变量，在不同环境下的值可能不同，但是保证至少为$32767(2^{15} - 1)$。<br>　　<em>严格地说，这里的随机数是“伪随机数”，因为它也是由数学公式计算出来的，不过在算法领域，多数情况下可以把它当作真正的随机数。</em></p>\n<h1 id=\"产生-0-n-之间的整数\"><a href=\"#产生-0-n-之间的整数\" class=\"headerlink\" title=\"产生[0, n]之间的整数\"></a>产生[0, n]之间的整数</h1><p>　　可以用<code>rand() % n</code>的方式产生区间 $[0, n - 1]$ 内的一个随机整数。但是一方面这会破坏产生的整数分布的均匀性，另一方面只要<code>n</code>大于 <code>RAND_MAX</code>这种方法就不能得到期望的结果。由于<code>RAND_MAX</code>可能只有 32767 这么小，所以在使用这种方法的时候要小心。<br>　　另一个方法是执行<code>rand()</code>后先除以<code>RAND_MAX</code>，得到 $[0, 1]$ 之间的随机实数，扩大<code>n</code>倍后四舍五入，得到 $[0, n]$ 之间的均匀整数。</p>\n<h1 id=\"具体用法\"><a href=\"#具体用法\" class=\"headerlink\" title=\"具体用法\"></a>具体用法</h1><p>　　需要随机数的程序在最开始时一般会执行一次<code>srand(time(NULL))</code>，目的是初始化“随机数种子”。简单来说，种子是生成随机数的计算依据。<strong>种子相同，计算出来的“随机数”序列总是相同</strong>。譬如运行下面的程序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    srand(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; rand() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　可以得到这样的一组随机数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">677741240</span><br><span class=\"line\">611911301</span><br><span class=\"line\">516687479</span><br></pre></td></tr></table></figure>\n\n<p>　　但是当我们第二次运行这段代码的时候，我们会得到相同的一组随机数，原因就在于，我们每次运行时<code>srand</code>函数中初始化的种子始终是<code>100</code>。<br>　　而当我们使用<code>srand(time(NULL))</code>来替代上面的<code>srand(100)</code>时，由于<code>time()</code>函数会返回系统当前时间，所以每次运行程序时这个值都会不一样，也就使得每次运行生成的随机数序列不同。<br>　　<em>如果不调用<code>srand</code>而直接使用<code>rand()</code>，相当于调用过一次<code>srand(1)</code>。</em><br>　　另外，<strong>不要在同一个程序每次生成随机数之前都重新调用一次srand。</strong>譬如运行下面的程序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; rand() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　会发现生成的三个随机数是相同的（随机数的具体值因人而异）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">805428961</span><br><span class=\"line\">805428961</span><br><span class=\"line\">805428961</span><br></pre></td></tr></table></figure>\n\n<p>　　仔细思考一下就很可以分析出原因：生成随机数的序列是由“种子”决定的，在这段代码里的种子就是<code>time(NULL)</code>的返回值了，也就是系统当前时间（准确来说是自UTC时间1970年1月1日0点依赖经过的“秒数”），它<strong>每秒变化一次</strong>，但是程序在上面三次运行的<strong>时间间隔过短</strong>，应该毫秒甚至微秒级的，因此上面三个随机数是同一个种子生成的，而且因为每次都被重新初始化，所以都是同一个随机数序列的第一个值。</p>\n<p>　　<em>“同一套随机数”可能是好事也可能是坏事。例如，若要反复测试程序对不同随机数据的响应，需要每次得到的随机数不同。另一方面，如果发现某一程序对于一组随机数据报错，就需要在调试时“重现”这组数据。另外，不同的编译器计算随机数的方法可能不同。如果是不同编译器编译出来的程序，即使是用相同参数调用<code>srand()</code>，也可能的都不同的随机序列。</em></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>　　主要参考了刘汝佳老师的《算法竞赛入门经典》(第2版)第五章中5.2.6-测试STL一节中的内容。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/04/28/Rand-C-随机数/random.jpg\" alt=\"random\"></p>\n<p>　　<em>C++随机数发生器。</em></p>","more":"<h1 id=\"rand\"><a href=\"#rand\" class=\"headerlink\" title=\"rand()\"></a>rand()</h1><p>　　生成随机整数的核心函数是<code>cstdlib</code>中的<code>rand()</code>，它生成一个闭区间 [0, RAND_MAX] 内的均匀随机数（均匀的含义是：该区间内每个整数被随机获取的概率相同），其中<code>RAND_MAX</code>是定义在cstdlib中的一个宏变量，在不同环境下的值可能不同，但是保证至少为$32767(2^{15} - 1)$。<br>　　<em>严格地说，这里的随机数是“伪随机数”，因为它也是由数学公式计算出来的，不过在算法领域，多数情况下可以把它当作真正的随机数。</em></p>\n<h1 id=\"产生-0-n-之间的整数\"><a href=\"#产生-0-n-之间的整数\" class=\"headerlink\" title=\"产生[0, n]之间的整数\"></a>产生[0, n]之间的整数</h1><p>　　可以用<code>rand() % n</code>的方式产生区间 $[0, n - 1]$ 内的一个随机整数。但是一方面这会破坏产生的整数分布的均匀性，另一方面只要<code>n</code>大于 <code>RAND_MAX</code>这种方法就不能得到期望的结果。由于<code>RAND_MAX</code>可能只有 32767 这么小，所以在使用这种方法的时候要小心。<br>　　另一个方法是执行<code>rand()</code>后先除以<code>RAND_MAX</code>，得到 $[0, 1]$ 之间的随机实数，扩大<code>n</code>倍后四舍五入，得到 $[0, n]$ 之间的均匀整数。</p>\n<h1 id=\"具体用法\"><a href=\"#具体用法\" class=\"headerlink\" title=\"具体用法\"></a>具体用法</h1><p>　　需要随机数的程序在最开始时一般会执行一次<code>srand(time(NULL))</code>，目的是初始化“随机数种子”。简单来说，种子是生成随机数的计算依据。<strong>种子相同，计算出来的“随机数”序列总是相同</strong>。譬如运行下面的程序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    srand(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; rand() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　可以得到这样的一组随机数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">677741240</span><br><span class=\"line\">611911301</span><br><span class=\"line\">516687479</span><br></pre></td></tr></table></figure>\n\n<p>　　但是当我们第二次运行这段代码的时候，我们会得到相同的一组随机数，原因就在于，我们每次运行时<code>srand</code>函数中初始化的种子始终是<code>100</code>。<br>　　而当我们使用<code>srand(time(NULL))</code>来替代上面的<code>srand(100)</code>时，由于<code>time()</code>函数会返回系统当前时间，所以每次运行程序时这个值都会不一样，也就使得每次运行生成的随机数序列不同。<br>　　<em>如果不调用<code>srand</code>而直接使用<code>rand()</code>，相当于调用过一次<code>srand(1)</code>。</em><br>　　另外，<strong>不要在同一个程序每次生成随机数之前都重新调用一次srand。</strong>譬如运行下面的程序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; rand() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　会发现生成的三个随机数是相同的（随机数的具体值因人而异）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">805428961</span><br><span class=\"line\">805428961</span><br><span class=\"line\">805428961</span><br></pre></td></tr></table></figure>\n\n<p>　　仔细思考一下就很可以分析出原因：生成随机数的序列是由“种子”决定的，在这段代码里的种子就是<code>time(NULL)</code>的返回值了，也就是系统当前时间（准确来说是自UTC时间1970年1月1日0点依赖经过的“秒数”），它<strong>每秒变化一次</strong>，但是程序在上面三次运行的<strong>时间间隔过短</strong>，应该毫秒甚至微秒级的，因此上面三个随机数是同一个种子生成的，而且因为每次都被重新初始化，所以都是同一个随机数序列的第一个值。</p>\n<p>　　<em>“同一套随机数”可能是好事也可能是坏事。例如，若要反复测试程序对不同随机数据的响应，需要每次得到的随机数不同。另一方面，如果发现某一程序对于一组随机数据报错，就需要在调试时“重现”这组数据。另外，不同的编译器计算随机数的方法可能不同。如果是不同编译器编译出来的程序，即使是用相同参数调用<code>srand()</code>，也可能的都不同的随机序列。</em></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>　　主要参考了刘汝佳老师的《算法竞赛入门经典》(第2版)第五章中5.2.6-测试STL一节中的内容。</p>"},{"title":"开源的NES游戏模拟器","date":"2018-12-02T16:28:38.000Z","_content":"偶然发现一个博主分享的开源NES游戏模拟器，安装后只要再去下载rom游戏就可以重温小时候的小霸王游戏机上的游戏！安装之后迫不及待的下载了超级马里奥，还是当年的感觉！激动(≧▽≦)\n![SuperMario](/SuperMario.png)\n<!--more-->\n# 参考链接\n[WTF Daily Blog](http://blog.topspeedsnail.com/archives/4249)\n感谢博主！下面只列出了开源的NES游戏模拟器，更多类型的模拟器请转到博主博客原文。\n\n[NES游戏下载地址](http://nesyouxi.net/)\n\n# NES模拟器\n\n## FCEUX\n[FCEUX](http://www.fceux.com/web/home.html)是开源的NES模拟器，使用C++编写，大概也是Linux上最好用的NES模拟器。它同样支持Windows、Mac os x。如果你使用的是Ubuntu，执行``sudo apt-get install fceux``安装fceux。如果你使用其他Linux发型版，可以从[这里](http://www.fceux.com/web/download.html)下载源代码编译安装 。\n\nPs.你可能会遇到无法解析安装包的情况，可以``sudo apt-get update``之后重新安装。如果依旧安装失败，可以尝试更新软件源。\n\n## Nestopia\n[Nestopia](http://nestopia.sourceforge.net/)另一个开源的NES模拟器，貌似很久没有更新了，它支持Windows、Linux、Mac os x系统。Nestopia也是使用c++编写，并且使用了大量的模版（难读）。它的执行效率还是挺高的。去年，我（指WTF Daily Blog的博主）把它移植到了andorid上，在低端手机上可以流畅运行。\n\n## My Nes\n[My Nes](https://sourceforge.net/projects/mynes/)是使用C#编写的开源NES模拟器，它只支持Windows系统。My Nes的代码非常易读，也许是因为这个原因，导致执行效率不高。","source":"_posts/Super-Mario.md","raw":"---\ntitle: 开源的NES游戏模拟器\ndate: 2018-12-03 00:28:38\ncategories:\n- Messy article\ntags:\n- Game\n---\n偶然发现一个博主分享的开源NES游戏模拟器，安装后只要再去下载rom游戏就可以重温小时候的小霸王游戏机上的游戏！安装之后迫不及待的下载了超级马里奥，还是当年的感觉！激动(≧▽≦)\n![SuperMario](/SuperMario.png)\n<!--more-->\n# 参考链接\n[WTF Daily Blog](http://blog.topspeedsnail.com/archives/4249)\n感谢博主！下面只列出了开源的NES游戏模拟器，更多类型的模拟器请转到博主博客原文。\n\n[NES游戏下载地址](http://nesyouxi.net/)\n\n# NES模拟器\n\n## FCEUX\n[FCEUX](http://www.fceux.com/web/home.html)是开源的NES模拟器，使用C++编写，大概也是Linux上最好用的NES模拟器。它同样支持Windows、Mac os x。如果你使用的是Ubuntu，执行``sudo apt-get install fceux``安装fceux。如果你使用其他Linux发型版，可以从[这里](http://www.fceux.com/web/download.html)下载源代码编译安装 。\n\nPs.你可能会遇到无法解析安装包的情况，可以``sudo apt-get update``之后重新安装。如果依旧安装失败，可以尝试更新软件源。\n\n## Nestopia\n[Nestopia](http://nestopia.sourceforge.net/)另一个开源的NES模拟器，貌似很久没有更新了，它支持Windows、Linux、Mac os x系统。Nestopia也是使用c++编写，并且使用了大量的模版（难读）。它的执行效率还是挺高的。去年，我（指WTF Daily Blog的博主）把它移植到了andorid上，在低端手机上可以流畅运行。\n\n## My Nes\n[My Nes](https://sourceforge.net/projects/mynes/)是使用C#编写的开源NES模拟器，它只支持Windows系统。My Nes的代码非常易读，也许是因为这个原因，导致执行效率不高。","slug":"Super-Mario","published":1,"updated":"2019-08-20T14:47:34.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lh000r30vns9wdc0dc","content":"<p>偶然发现一个博主分享的开源NES游戏模拟器，安装后只要再去下载rom游戏就可以重温小时候的小霸王游戏机上的游戏！安装之后迫不及待的下载了超级马里奥，还是当年的感觉！激动(≧▽≦)<br><img src=\"/2018/12/03/Super-Mario/SuperMario.png\" alt=\"SuperMario\"></p>\n<a id=\"more\"></a>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://blog.topspeedsnail.com/archives/4249\" target=\"_blank\" rel=\"noopener\">WTF Daily Blog</a><br>感谢博主！下面只列出了开源的NES游戏模拟器，更多类型的模拟器请转到博主博客原文。</p>\n<p><a href=\"http://nesyouxi.net/\" target=\"_blank\" rel=\"noopener\">NES游戏下载地址</a></p>\n<h1 id=\"NES模拟器\"><a href=\"#NES模拟器\" class=\"headerlink\" title=\"NES模拟器\"></a>NES模拟器</h1><h2 id=\"FCEUX\"><a href=\"#FCEUX\" class=\"headerlink\" title=\"FCEUX\"></a>FCEUX</h2><p><a href=\"http://www.fceux.com/web/home.html\" target=\"_blank\" rel=\"noopener\">FCEUX</a>是开源的NES模拟器，使用C++编写，大概也是Linux上最好用的NES模拟器。它同样支持Windows、Mac os x。如果你使用的是Ubuntu，执行<code>sudo apt-get install fceux</code>安装fceux。如果你使用其他Linux发型版，可以从<a href=\"http://www.fceux.com/web/download.html\" target=\"_blank\" rel=\"noopener\">这里</a>下载源代码编译安装 。</p>\n<p>Ps.你可能会遇到无法解析安装包的情况，可以<code>sudo apt-get update</code>之后重新安装。如果依旧安装失败，可以尝试更新软件源。</p>\n<h2 id=\"Nestopia\"><a href=\"#Nestopia\" class=\"headerlink\" title=\"Nestopia\"></a>Nestopia</h2><p><a href=\"http://nestopia.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Nestopia</a>另一个开源的NES模拟器，貌似很久没有更新了，它支持Windows、Linux、Mac os x系统。Nestopia也是使用c++编写，并且使用了大量的模版（难读）。它的执行效率还是挺高的。去年，我（指WTF Daily Blog的博主）把它移植到了andorid上，在低端手机上可以流畅运行。</p>\n<h2 id=\"My-Nes\"><a href=\"#My-Nes\" class=\"headerlink\" title=\"My Nes\"></a>My Nes</h2><p><a href=\"https://sourceforge.net/projects/mynes/\" target=\"_blank\" rel=\"noopener\">My Nes</a>是使用C#编写的开源NES模拟器，它只支持Windows系统。My Nes的代码非常易读，也许是因为这个原因，导致执行效率不高。</p>\n","site":{"data":{}},"excerpt":"<p>偶然发现一个博主分享的开源NES游戏模拟器，安装后只要再去下载rom游戏就可以重温小时候的小霸王游戏机上的游戏！安装之后迫不及待的下载了超级马里奥，还是当年的感觉！激动(≧▽≦)<br><img src=\"/2018/12/03/Super-Mario/SuperMario.png\" alt=\"SuperMario\"></p>","more":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://blog.topspeedsnail.com/archives/4249\" target=\"_blank\" rel=\"noopener\">WTF Daily Blog</a><br>感谢博主！下面只列出了开源的NES游戏模拟器，更多类型的模拟器请转到博主博客原文。</p>\n<p><a href=\"http://nesyouxi.net/\" target=\"_blank\" rel=\"noopener\">NES游戏下载地址</a></p>\n<h1 id=\"NES模拟器\"><a href=\"#NES模拟器\" class=\"headerlink\" title=\"NES模拟器\"></a>NES模拟器</h1><h2 id=\"FCEUX\"><a href=\"#FCEUX\" class=\"headerlink\" title=\"FCEUX\"></a>FCEUX</h2><p><a href=\"http://www.fceux.com/web/home.html\" target=\"_blank\" rel=\"noopener\">FCEUX</a>是开源的NES模拟器，使用C++编写，大概也是Linux上最好用的NES模拟器。它同样支持Windows、Mac os x。如果你使用的是Ubuntu，执行<code>sudo apt-get install fceux</code>安装fceux。如果你使用其他Linux发型版，可以从<a href=\"http://www.fceux.com/web/download.html\" target=\"_blank\" rel=\"noopener\">这里</a>下载源代码编译安装 。</p>\n<p>Ps.你可能会遇到无法解析安装包的情况，可以<code>sudo apt-get update</code>之后重新安装。如果依旧安装失败，可以尝试更新软件源。</p>\n<h2 id=\"Nestopia\"><a href=\"#Nestopia\" class=\"headerlink\" title=\"Nestopia\"></a>Nestopia</h2><p><a href=\"http://nestopia.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Nestopia</a>另一个开源的NES模拟器，貌似很久没有更新了，它支持Windows、Linux、Mac os x系统。Nestopia也是使用c++编写，并且使用了大量的模版（难读）。它的执行效率还是挺高的。去年，我（指WTF Daily Blog的博主）把它移植到了andorid上，在低端手机上可以流畅运行。</p>\n<h2 id=\"My-Nes\"><a href=\"#My-Nes\" class=\"headerlink\" title=\"My Nes\"></a>My Nes</h2><p><a href=\"https://sourceforge.net/projects/mynes/\" target=\"_blank\" rel=\"noopener\">My Nes</a>是使用C#编写的开源NES模拟器，它只支持Windows系统。My Nes的代码非常易读，也许是因为这个原因，导致执行效率不高。</p>"},{"title":"STL中自定义比较函数和重载运算符总结","date":"2018-08-07T14:13:16.000Z","_content":"\nSTL中自定义比较函数和重载运算符总结。部分内容转载自[Ohazyi Zone's blog](https://www.ohazyi.com/c_cmp/)\n<!-- more -->\n\n# sort\n## 自定义比较函数\n```C++\n//示例\nstruct node{\n    int x, y;\n};\n\nbool cmp(const node& a, const node& b){\n    return a.x > b.x //对x降序排列\n}\n\nnode d[maxn];\n\nint main(){\n    sort(d, d + n, cmp);\n    return 0;\n}\n```\n注：自定义比较函数的形式同样也适用于pair类型数据排序。\n\n## 重载运算符<\n```C++\n//示例\nstruct node{\n    int x, y;\n};\n\nbool operator <(const node& a, const node& b){\n    return a.x > b.x; //重载为降序排列\n}\n\nnode d[maxn];\n\nint main(){\n    sort(d, d + n);\n    return 0;\n}\n```\n注：由于sort默认less(升序),所以重载'<'运算符。重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。\n\n# priority_queue\n## 重载运算符< (运算符重载函数放到结构体外)\n```C++\nstruct node{\n    int x, y;\n};\n\nbool operator <(const node& a, const node& b){\n    return a.x > b.x //less默认大顶堆，改为小顶堆\n}\n\n//bool operator >(const node& a, const node& b){\n//    return a.x < b.x //greater默认小顶堆，改为大顶堆\n//}\n\nint main(){\n    priority_queue<node, vector<node>, less<node> > que;\n    //priority_queue<node, vector<node>, greater<node> > que;\n    return 0;\n}\n```\n注：同样重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。\n\n## 重载运算符< (运算符重载函数放到结构体内)\n```C++\nstruct node{\n    int x, y;\n    bool operator <(const node& a) const { //必须加const\n        return x > a.x;\n    }\n    //bool operator >(const node& a) const { //必须加const\n    //    return x < a.x;\n    //}\n};\n\nint main(){\n    priority_queue<node, vector<node>, less<node> > que;\n    //priority_queue<node, vector<node>, greater<node> > que;\n    return 0;\n}\n```\n注：同上。\n\n## 自定义比较函数\n```C++\nstruct node{\n    int x, y;\n};\n\nstruct cmp1{\n    bool operator()(node a, node b){\n        return a.x > b.x; //小顶堆\n    }\n}\n\nstruct cmp2{\n    bool operator()(node a, node b){\n        return a.x < b.x; //大顶堆\n    }\n}\n\nint main(){\n    priority_queue<node, vector<node>, cmp1> que1; //小顶堆\n    priority_queue<node, vector<node>, cmp2> que2; //大顶堆\n    return 0;\n}\n```\n注：同样适用于pair类型数据排序。\n\n# 其它\n```C++\nset<int, greater<int> > st; //按照从大到小，默认是less<int>\ntypedef pair <int,int> P;\nset<P> st; //按照pair的第一个元素来排，第一个相等的话按第二个来排\nset<P, greater<P> > st;//按照从大到小的greater来排\n```\n注：set、map的自定义比较函数和重载运算符与优先队列priority_queue类似。","source":"_posts/STL-cmp.md","raw":"---\ntitle: STL中自定义比较函数和重载运算符总结\ndate: 2018-08-07 22:13:16\ncategories:\n- C++\ntags:\n- STL\n---\n\nSTL中自定义比较函数和重载运算符总结。部分内容转载自[Ohazyi Zone's blog](https://www.ohazyi.com/c_cmp/)\n<!-- more -->\n\n# sort\n## 自定义比较函数\n```C++\n//示例\nstruct node{\n    int x, y;\n};\n\nbool cmp(const node& a, const node& b){\n    return a.x > b.x //对x降序排列\n}\n\nnode d[maxn];\n\nint main(){\n    sort(d, d + n, cmp);\n    return 0;\n}\n```\n注：自定义比较函数的形式同样也适用于pair类型数据排序。\n\n## 重载运算符<\n```C++\n//示例\nstruct node{\n    int x, y;\n};\n\nbool operator <(const node& a, const node& b){\n    return a.x > b.x; //重载为降序排列\n}\n\nnode d[maxn];\n\nint main(){\n    sort(d, d + n);\n    return 0;\n}\n```\n注：由于sort默认less(升序),所以重载'<'运算符。重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。\n\n# priority_queue\n## 重载运算符< (运算符重载函数放到结构体外)\n```C++\nstruct node{\n    int x, y;\n};\n\nbool operator <(const node& a, const node& b){\n    return a.x > b.x //less默认大顶堆，改为小顶堆\n}\n\n//bool operator >(const node& a, const node& b){\n//    return a.x < b.x //greater默认小顶堆，改为大顶堆\n//}\n\nint main(){\n    priority_queue<node, vector<node>, less<node> > que;\n    //priority_queue<node, vector<node>, greater<node> > que;\n    return 0;\n}\n```\n注：同样重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。\n\n## 重载运算符< (运算符重载函数放到结构体内)\n```C++\nstruct node{\n    int x, y;\n    bool operator <(const node& a) const { //必须加const\n        return x > a.x;\n    }\n    //bool operator >(const node& a) const { //必须加const\n    //    return x < a.x;\n    //}\n};\n\nint main(){\n    priority_queue<node, vector<node>, less<node> > que;\n    //priority_queue<node, vector<node>, greater<node> > que;\n    return 0;\n}\n```\n注：同上。\n\n## 自定义比较函数\n```C++\nstruct node{\n    int x, y;\n};\n\nstruct cmp1{\n    bool operator()(node a, node b){\n        return a.x > b.x; //小顶堆\n    }\n}\n\nstruct cmp2{\n    bool operator()(node a, node b){\n        return a.x < b.x; //大顶堆\n    }\n}\n\nint main(){\n    priority_queue<node, vector<node>, cmp1> que1; //小顶堆\n    priority_queue<node, vector<node>, cmp2> que2; //大顶堆\n    return 0;\n}\n```\n注：同样适用于pair类型数据排序。\n\n# 其它\n```C++\nset<int, greater<int> > st; //按照从大到小，默认是less<int>\ntypedef pair <int,int> P;\nset<P> st; //按照pair的第一个元素来排，第一个相等的话按第二个来排\nset<P, greater<P> > st;//按照从大到小的greater来排\n```\n注：set、map的自定义比较函数和重载运算符与优先队列priority_queue类似。","slug":"STL-cmp","published":1,"updated":"2019-08-29T04:44:30.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2li000s30vn31kch3ae","content":"<p>STL中自定义比较函数和重载运算符总结。部分内容转载自<a href=\"https://www.ohazyi.com/c_cmp/\" target=\"_blank\" rel=\"noopener\">Ohazyi Zone’s blog</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h1><h2 id=\"自定义比较函数\"><a href=\"#自定义比较函数\" class=\"headerlink\" title=\"自定义比较函数\"></a>自定义比较函数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> node&amp; a, <span class=\"keyword\">const</span> node&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &gt; b.x <span class=\"comment\">//对x降序排列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">node d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    sort(d, d + n, cmp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：自定义比较函数的形式同样也适用于pair类型数据排序。</p>\n<h2 id=\"重载运算符-lt\"><a href=\"#重载运算符-lt\" class=\"headerlink\" title=\"重载运算符&lt;\"></a>重载运算符&lt;</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; a, <span class=\"keyword\">const</span> node&amp; b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &gt; b.x; <span class=\"comment\">//重载为降序排列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">node d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    sort(d, d + n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：由于sort默认less(升序),所以重载’&lt;’运算符。重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。</p>\n<h1 id=\"priority-queue\"><a href=\"#priority-queue\" class=\"headerlink\" title=\"priority_queue\"></a>priority_queue</h1><h2 id=\"重载运算符-lt-运算符重载函数放到结构体外\"><a href=\"#重载运算符-lt-运算符重载函数放到结构体外\" class=\"headerlink\" title=\"重载运算符&lt; (运算符重载函数放到结构体外)\"></a>重载运算符&lt; (运算符重载函数放到结构体外)</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; a, <span class=\"keyword\">const</span> node&amp; b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &gt; b.x <span class=\"comment\">//less默认大顶堆，改为小顶堆</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bool operator &gt;(const node&amp; a, const node&amp; b)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    return a.x &lt; b.x //greater默认小顶堆，改为大顶堆</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main()&#123;</span><br><span class=\"line\">    priority_queue&lt;node, <span class=\"built_in\">vector</span>&lt;node&gt;, less&lt;node&gt; &gt; que;</span><br><span class=\"line\">    <span class=\"comment\">//priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; que;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：同样重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。</p>\n<h2 id=\"重载运算符-lt-运算符重载函数放到结构体内\"><a href=\"#重载运算符-lt-运算符重载函数放到结构体内\" class=\"headerlink\" title=\"重载运算符&lt; (运算符重载函数放到结构体内)\"></a>重载运算符&lt; (运算符重载函数放到结构体内)</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; a) <span class=\"keyword\">const</span> &#123; <span class=\"comment\">//必须加const</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; a.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//bool operator &gt;(const node&amp; a) const &#123; //必须加const</span></span><br><span class=\"line\">    <span class=\"comment\">//    return x &lt; a.x;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node, <span class=\"built_in\">vector</span>&lt;node&gt;, less&lt;node&gt; &gt; que;</span><br><span class=\"line\">    <span class=\"comment\">//priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; que;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：同上。</p>\n<h2 id=\"自定义比较函数-1\"><a href=\"#自定义比较函数-1\" class=\"headerlink\" title=\"自定义比较函数\"></a>自定义比较函数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp1</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(node a, node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x &gt; b.x; <span class=\"comment\">//小顶堆</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp2</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(node a, node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x &lt; b.x; <span class=\"comment\">//大顶堆</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node, <span class=\"built_in\">vector</span>&lt;node&gt;, cmp1&gt; que1; <span class=\"comment\">//小顶堆</span></span><br><span class=\"line\">    priority_queue&lt;node, <span class=\"built_in\">vector</span>&lt;node&gt;, cmp2&gt; que2; <span class=\"comment\">//大顶堆</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：同样适用于pair类型数据排序。</p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>, greater&lt;<span class=\"keyword\">int</span>&gt; &gt; st; <span class=\"comment\">//按照从大到小，默认是less&lt;int&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair &lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;P&gt; st; <span class=\"comment\">//按照pair的第一个元素来排，第一个相等的话按第二个来排</span></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;P, greater&lt;P&gt; &gt; st;<span class=\"comment\">//按照从大到小的greater来排</span></span><br></pre></td></tr></table></figure>\n\n<p>注：set、map的自定义比较函数和重载运算符与优先队列priority_queue类似。</p>\n","site":{"data":{}},"excerpt":"<p>STL中自定义比较函数和重载运算符总结。部分内容转载自<a href=\"https://www.ohazyi.com/c_cmp/\" target=\"_blank\" rel=\"noopener\">Ohazyi Zone’s blog</a></p>","more":"<h1 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h1><h2 id=\"自定义比较函数\"><a href=\"#自定义比较函数\" class=\"headerlink\" title=\"自定义比较函数\"></a>自定义比较函数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> node&amp; a, <span class=\"keyword\">const</span> node&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &gt; b.x <span class=\"comment\">//对x降序排列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">node d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    sort(d, d + n, cmp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：自定义比较函数的形式同样也适用于pair类型数据排序。</p>\n<h2 id=\"重载运算符-lt\"><a href=\"#重载运算符-lt\" class=\"headerlink\" title=\"重载运算符&lt;\"></a>重载运算符&lt;</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; a, <span class=\"keyword\">const</span> node&amp; b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &gt; b.x; <span class=\"comment\">//重载为降序排列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">node d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    sort(d, d + n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：由于sort默认less(升序),所以重载’&lt;’运算符。重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。</p>\n<h1 id=\"priority-queue\"><a href=\"#priority-queue\" class=\"headerlink\" title=\"priority_queue\"></a>priority_queue</h1><h2 id=\"重载运算符-lt-运算符重载函数放到结构体外\"><a href=\"#重载运算符-lt-运算符重载函数放到结构体外\" class=\"headerlink\" title=\"重载运算符&lt; (运算符重载函数放到结构体外)\"></a>重载运算符&lt; (运算符重载函数放到结构体外)</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; a, <span class=\"keyword\">const</span> node&amp; b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &gt; b.x <span class=\"comment\">//less默认大顶堆，改为小顶堆</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bool operator &gt;(const node&amp; a, const node&amp; b)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    return a.x &lt; b.x //greater默认小顶堆，改为大顶堆</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main()&#123;</span><br><span class=\"line\">    priority_queue&lt;node, <span class=\"built_in\">vector</span>&lt;node&gt;, less&lt;node&gt; &gt; que;</span><br><span class=\"line\">    <span class=\"comment\">//priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; que;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：同样重载运算符的操作不能用于pair类型数据的排序，只能作用于结构体或类对象。</p>\n<h2 id=\"重载运算符-lt-运算符重载函数放到结构体内\"><a href=\"#重载运算符-lt-运算符重载函数放到结构体内\" class=\"headerlink\" title=\"重载运算符&lt; (运算符重载函数放到结构体内)\"></a>重载运算符&lt; (运算符重载函数放到结构体内)</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; a) <span class=\"keyword\">const</span> &#123; <span class=\"comment\">//必须加const</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; a.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//bool operator &gt;(const node&amp; a) const &#123; //必须加const</span></span><br><span class=\"line\">    <span class=\"comment\">//    return x &lt; a.x;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node, <span class=\"built_in\">vector</span>&lt;node&gt;, less&lt;node&gt; &gt; que;</span><br><span class=\"line\">    <span class=\"comment\">//priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; que;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：同上。</p>\n<h2 id=\"自定义比较函数-1\"><a href=\"#自定义比较函数-1\" class=\"headerlink\" title=\"自定义比较函数\"></a>自定义比较函数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp1</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(node a, node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x &gt; b.x; <span class=\"comment\">//小顶堆</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp2</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(node a, node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x &lt; b.x; <span class=\"comment\">//大顶堆</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node, <span class=\"built_in\">vector</span>&lt;node&gt;, cmp1&gt; que1; <span class=\"comment\">//小顶堆</span></span><br><span class=\"line\">    priority_queue&lt;node, <span class=\"built_in\">vector</span>&lt;node&gt;, cmp2&gt; que2; <span class=\"comment\">//大顶堆</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：同样适用于pair类型数据排序。</p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>, greater&lt;<span class=\"keyword\">int</span>&gt; &gt; st; <span class=\"comment\">//按照从大到小，默认是less&lt;int&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair &lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;P&gt; st; <span class=\"comment\">//按照pair的第一个元素来排，第一个相等的话按第二个来排</span></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;P, greater&lt;P&gt; &gt; st;<span class=\"comment\">//按照从大到小的greater来排</span></span><br></pre></td></tr></table></figure>\n\n<p>注：set、map的自定义比较函数和重载运算符与优先队列priority_queue类似。</p>"},{"title":"Uva10129-Play on Words-欧拉路","date":"2018-11-11T23:25:48.000Z","_content":"输入n个单词，是否可以把所有这些单词排成一个序列，使得每个单词的第一个字母和上一个单词的最后一个字母相同。\n<!--more-->\n# 链接\n[Uva10129-Play on Words](https://vjudge.net/problem/UVA-10129)\n\n# 题解\n建图。将字母看做结点，单词看做有向边。例如单词acm, mouse建图为a->m->e。如果该图存在一条欧拉路则问题有解。首先判断忽略边方向后的无向图是否连通，有两种方法来判断，一种是DFS，另一种是并查集（此代码采用DFS判断）。然后依据建图时统计的各个结点的出度和入度信息判断是否有欧拉路存在。\n**有一个需要注意的地方是，可能两个结点之间存在多条边，但是判断连通性的时候可以忽略，多边存在时按单边处理，不影响连通性。**\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon  12 Nov 07:00:18 CST 2018\n *`\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Degree{\n\tint in;\n\tint out;\n};\nint G[30][30];\nDegree d[30];\nint T, n;\n\nvoid dfs(int x){\n\tfor(int i = 0; i < 26; i++){\n\t\tif(G[x][i]){\n\t\t\tG[x][i] = G[i][0] = 0;\n\t\t\tdfs(i);\n\t\t}\n\t}\n}\n\nbool JudgeEulr(){\n\tvector<int> vec;\n\tfor(int i = 0; i < 26; i++){\n\t\tif(d[i].in != d[i].out){\n\t\t\tvec.push_back(i);\n\t\t} \n\t}\n\tint len = vec.size();\n\tif(len == 0) \n\t\treturn true;\n\telse if(len == 2){\n\t\tif((d[vec[0]].in - 1 == d[vec[0]].out && d[vec[1]].out - 1 == d[vec[1]].in) || (d[vec[0]].out - 1 == d[vec[0]].in && d[vec[1]].in - 1 == d[vec[1]].out))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn false;\n}\n\nint main(){\n\t//ios::sync_with_stdio(false);\n\t//cin.tie(0);\n\t//cout.tie(0);\n\t#ifndef ONLINE_JUDGE\n\t\tfreopen(\"in.txt\", \"r\", stdin);\n\t#endif\n\n\tcin >> T;\n\twhile(T--){\n\t\tcin >> n;\n\t\tmemset(G, 0, sizeof(G));\n\t\tmemset(d, 0, sizeof(d));\n\t\tstring s;\n\t\tint a, b;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcin >> s;\n\t\t\tint len = s.length();\n\t\t\ta = s[0] - 'a', b = s[len - 1] - 'a';\n\t\t\tG[a][b] = 1, G[b][a] = 1;\n\t\t\td[a].out++, d[b].in++;\n\t\t}\n\t\tint cnt = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(G[i][j]){\n\t\t\t\t\tdfs(i);\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//cout << cnt << endl;\n\t\tif(cnt > 1){\n\t\t\tcout << \"The door cannot be opened.\" << endl;\n\t\t}\n\t\telse{\n\t\t\tif(JudgeEulr())\n\t\t\t\tcout << \"Ordering is possible.\" << endl;\n\t\t\telse\n\t\t\t\tcout << \"The door cannot be opened.\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n```","source":"_posts/Uva10129-Play-on-Words.md","raw":"---\ntitle: Uva10129-Play on Words-欧拉路\ndate: 2018-11-12 07:25:48\ncategories:\n- ACM\n- 欧拉路\ntags:\n- 欧拉路\n- DFS\n---\n输入n个单词，是否可以把所有这些单词排成一个序列，使得每个单词的第一个字母和上一个单词的最后一个字母相同。\n<!--more-->\n# 链接\n[Uva10129-Play on Words](https://vjudge.net/problem/UVA-10129)\n\n# 题解\n建图。将字母看做结点，单词看做有向边。例如单词acm, mouse建图为a->m->e。如果该图存在一条欧拉路则问题有解。首先判断忽略边方向后的无向图是否连通，有两种方法来判断，一种是DFS，另一种是并查集（此代码采用DFS判断）。然后依据建图时统计的各个结点的出度和入度信息判断是否有欧拉路存在。\n**有一个需要注意的地方是，可能两个结点之间存在多条边，但是判断连通性的时候可以忽略，多边存在时按单边处理，不影响连通性。**\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon  12 Nov 07:00:18 CST 2018\n *`\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Degree{\n\tint in;\n\tint out;\n};\nint G[30][30];\nDegree d[30];\nint T, n;\n\nvoid dfs(int x){\n\tfor(int i = 0; i < 26; i++){\n\t\tif(G[x][i]){\n\t\t\tG[x][i] = G[i][0] = 0;\n\t\t\tdfs(i);\n\t\t}\n\t}\n}\n\nbool JudgeEulr(){\n\tvector<int> vec;\n\tfor(int i = 0; i < 26; i++){\n\t\tif(d[i].in != d[i].out){\n\t\t\tvec.push_back(i);\n\t\t} \n\t}\n\tint len = vec.size();\n\tif(len == 0) \n\t\treturn true;\n\telse if(len == 2){\n\t\tif((d[vec[0]].in - 1 == d[vec[0]].out && d[vec[1]].out - 1 == d[vec[1]].in) || (d[vec[0]].out - 1 == d[vec[0]].in && d[vec[1]].in - 1 == d[vec[1]].out))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn false;\n}\n\nint main(){\n\t//ios::sync_with_stdio(false);\n\t//cin.tie(0);\n\t//cout.tie(0);\n\t#ifndef ONLINE_JUDGE\n\t\tfreopen(\"in.txt\", \"r\", stdin);\n\t#endif\n\n\tcin >> T;\n\twhile(T--){\n\t\tcin >> n;\n\t\tmemset(G, 0, sizeof(G));\n\t\tmemset(d, 0, sizeof(d));\n\t\tstring s;\n\t\tint a, b;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcin >> s;\n\t\t\tint len = s.length();\n\t\t\ta = s[0] - 'a', b = s[len - 1] - 'a';\n\t\t\tG[a][b] = 1, G[b][a] = 1;\n\t\t\td[a].out++, d[b].in++;\n\t\t}\n\t\tint cnt = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(G[i][j]){\n\t\t\t\t\tdfs(i);\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//cout << cnt << endl;\n\t\tif(cnt > 1){\n\t\t\tcout << \"The door cannot be opened.\" << endl;\n\t\t}\n\t\telse{\n\t\t\tif(JudgeEulr())\n\t\t\t\tcout << \"Ordering is possible.\" << endl;\n\t\t\telse\n\t\t\t\tcout << \"The door cannot be opened.\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n```","slug":"Uva10129-Play-on-Words","published":1,"updated":"2019-08-20T14:43:49.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2li000t30vnt3iecy25","content":"<p>输入n个单词，是否可以把所有这些单词排成一个序列，使得每个单词的第一个字母和上一个单词的最后一个字母相同。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-10129\" target=\"_blank\" rel=\"noopener\">Uva10129-Play on Words</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>建图。将字母看做结点，单词看做有向边。例如单词acm, mouse建图为a-&gt;m-&gt;e。如果该图存在一条欧拉路则问题有解。首先判断忽略边方向后的无向图是否连通，有两种方法来判断，一种是DFS，另一种是并查集（此代码采用DFS判断）。然后依据建图时统计的各个结点的出度和入度信息判断是否有欧拉路存在。<br><strong>有一个需要注意的地方是，可能两个结点之间存在多条边，但是判断连通性的时候可以忽略，多边存在时按单边处理，不影响连通性。</strong></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon  12 Nov 07:00:18 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *`</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Degree</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> in;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> out;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> G[<span class=\"number\">30</span>][<span class=\"number\">30</span>];</span><br><span class=\"line\">Degree d[<span class=\"number\">30</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(G[x][i])&#123;</span><br><span class=\"line\">\t\t\tG[x][i] = G[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tdfs(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">JudgeEulr</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(d[i].in != d[i].out)&#123;</span><br><span class=\"line\">\t\t\tvec.push_back(i);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = vec.size();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(len == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((d[vec[<span class=\"number\">0</span>]].in - <span class=\"number\">1</span> == d[vec[<span class=\"number\">0</span>]].out &amp;&amp; d[vec[<span class=\"number\">1</span>]].out - <span class=\"number\">1</span> == d[vec[<span class=\"number\">1</span>]].in) || (d[vec[<span class=\"number\">0</span>]].out - <span class=\"number\">1</span> == d[vec[<span class=\"number\">0</span>]].in &amp;&amp; d[vec[<span class=\"number\">1</span>]].in - <span class=\"number\">1</span> == d[vec[<span class=\"number\">1</span>]].out))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">\t<span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">\t\tfreopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(G, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(G));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">\t\t\ta = s[<span class=\"number\">0</span>] - <span class=\"string\">'a'</span>, b = s[len - <span class=\"number\">1</span>] - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t\t\tG[a][b] = <span class=\"number\">1</span>, G[b][a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\td[a].out++, d[b].in++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">26</span>; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(G[i][j])&#123;</span><br><span class=\"line\">\t\t\t\t\tdfs(i);</span><br><span class=\"line\">\t\t\t\t\tcnt++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The door cannot be opened.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(JudgeEulr())</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Ordering is possible.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The door cannot be opened.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>输入n个单词，是否可以把所有这些单词排成一个序列，使得每个单词的第一个字母和上一个单词的最后一个字母相同。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-10129\" target=\"_blank\" rel=\"noopener\">Uva10129-Play on Words</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>建图。将字母看做结点，单词看做有向边。例如单词acm, mouse建图为a-&gt;m-&gt;e。如果该图存在一条欧拉路则问题有解。首先判断忽略边方向后的无向图是否连通，有两种方法来判断，一种是DFS，另一种是并查集（此代码采用DFS判断）。然后依据建图时统计的各个结点的出度和入度信息判断是否有欧拉路存在。<br><strong>有一个需要注意的地方是，可能两个结点之间存在多条边，但是判断连通性的时候可以忽略，多边存在时按单边处理，不影响连通性。</strong></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon  12 Nov 07:00:18 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *`</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Degree</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> in;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> out;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> G[<span class=\"number\">30</span>][<span class=\"number\">30</span>];</span><br><span class=\"line\">Degree d[<span class=\"number\">30</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(G[x][i])&#123;</span><br><span class=\"line\">\t\t\tG[x][i] = G[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tdfs(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">JudgeEulr</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(d[i].in != d[i].out)&#123;</span><br><span class=\"line\">\t\t\tvec.push_back(i);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = vec.size();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(len == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((d[vec[<span class=\"number\">0</span>]].in - <span class=\"number\">1</span> == d[vec[<span class=\"number\">0</span>]].out &amp;&amp; d[vec[<span class=\"number\">1</span>]].out - <span class=\"number\">1</span> == d[vec[<span class=\"number\">1</span>]].in) || (d[vec[<span class=\"number\">0</span>]].out - <span class=\"number\">1</span> == d[vec[<span class=\"number\">0</span>]].in &amp;&amp; d[vec[<span class=\"number\">1</span>]].in - <span class=\"number\">1</span> == d[vec[<span class=\"number\">1</span>]].out))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">\t<span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">\t\tfreopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(G, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(G));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">\t\t\ta = s[<span class=\"number\">0</span>] - <span class=\"string\">'a'</span>, b = s[len - <span class=\"number\">1</span>] - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t\t\tG[a][b] = <span class=\"number\">1</span>, G[b][a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\td[a].out++, d[b].in++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">26</span>; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(G[i][j])&#123;</span><br><span class=\"line\">\t\t\t\t\tdfs(i);</span><br><span class=\"line\">\t\t\t\t\tcnt++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The door cannot be opened.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(JudgeEulr())</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Ordering is possible.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The door cannot be opened.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva10305-Ordering Tasks-拓扑排序","date":"2018-11-04T11:47:51.000Z","_content":"有n个变量，m个二元组(u, v), 分别表示u小于v。要求给出一种所有变量从小到大排列的可能。\n<!--more-->\n# 链接\n[Uva10305-Ordering Tasks](https://vjudge.net/problem/UVA-10305)\n# 题解\n建图，以变量为顶点，“小于”关系为有向边。问题变为求这个图的拓扑排序。借助DFS来完成排序。\n```\n在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序：\n1. 每个顶点出现且只出现一次；\n2. 若A在序列中排在B的前面，则在图中不存在从B到A的路径。\n```\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun  4 Nov 18:47:13 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 107;\nint n, m;\nint c[maxn];\nint res[maxn];\nint G[maxn][maxn];\nint t;\n\nbool dfs(int u){\n    c[u] = -1;\n    for(int i = 1; i <= n; i++){\n        if(G[u][i]){\n            if(c[i] == -1) return false;\n            else if(c[i] == 0 && !dfs(i)) return false;\n        }\n        //c[u] = 1, res[--t] = u;\n    }\n    c[u] = 1, res[--t] = u;\n    return true;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(cin >> n >> m){\n        if(n == 0 && m == 0) break;\n        t = n;\n        memset(c, 0, sizeof(c));\n        memset(res, 0, sizeof(res));\n        memset(G, 0, sizeof(G));\n        int x, y;\n        for(int i = 0; i < m; i++){\n            cin >> x >> y;\n            G[x][y] = 1;\n        }\n        for(int i = 1; i <= n; i++){\n            if(!c[i]){\n                //cout << \"i: \" << i << endl;\n                dfs(i);\n            }\n        }\n        for(int i = 0; i < n; i++){\n            if(!i) cout << res[i];\n            else cout << \" \" << res[i];\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}\n```\n# 拓展\n拓扑等价：\n有多个解释，其中一个几何上的解释是，一个曲面经过扭转、弯曲、拉长或收缩得到另一个曲面，期间没有出现任何点的重叠与断开，那么可以说这两个曲面是拓扑等价的。\n```\n//知乎上看到的一个笑话\n“美女和丑女在数学上是不是拓扑等价的？”\n“这要看她有没有打耳洞”\n（逃\n```","source":"_posts/Uva10305-Ordering-Tasks.md","raw":"---\ntitle: Uva10305-Ordering Tasks-拓扑排序\ndate: 2018-11-04 19:47:51\ncategories:\n- ACM\n- 拓扑排序\ntags:\n- DFS\n- 拓扑排序\n---\n有n个变量，m个二元组(u, v), 分别表示u小于v。要求给出一种所有变量从小到大排列的可能。\n<!--more-->\n# 链接\n[Uva10305-Ordering Tasks](https://vjudge.net/problem/UVA-10305)\n# 题解\n建图，以变量为顶点，“小于”关系为有向边。问题变为求这个图的拓扑排序。借助DFS来完成排序。\n```\n在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序：\n1. 每个顶点出现且只出现一次；\n2. 若A在序列中排在B的前面，则在图中不存在从B到A的路径。\n```\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun  4 Nov 18:47:13 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 107;\nint n, m;\nint c[maxn];\nint res[maxn];\nint G[maxn][maxn];\nint t;\n\nbool dfs(int u){\n    c[u] = -1;\n    for(int i = 1; i <= n; i++){\n        if(G[u][i]){\n            if(c[i] == -1) return false;\n            else if(c[i] == 0 && !dfs(i)) return false;\n        }\n        //c[u] = 1, res[--t] = u;\n    }\n    c[u] = 1, res[--t] = u;\n    return true;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(cin >> n >> m){\n        if(n == 0 && m == 0) break;\n        t = n;\n        memset(c, 0, sizeof(c));\n        memset(res, 0, sizeof(res));\n        memset(G, 0, sizeof(G));\n        int x, y;\n        for(int i = 0; i < m; i++){\n            cin >> x >> y;\n            G[x][y] = 1;\n        }\n        for(int i = 1; i <= n; i++){\n            if(!c[i]){\n                //cout << \"i: \" << i << endl;\n                dfs(i);\n            }\n        }\n        for(int i = 0; i < n; i++){\n            if(!i) cout << res[i];\n            else cout << \" \" << res[i];\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}\n```\n# 拓展\n拓扑等价：\n有多个解释，其中一个几何上的解释是，一个曲面经过扭转、弯曲、拉长或收缩得到另一个曲面，期间没有出现任何点的重叠与断开，那么可以说这两个曲面是拓扑等价的。\n```\n//知乎上看到的一个笑话\n“美女和丑女在数学上是不是拓扑等价的？”\n“这要看她有没有打耳洞”\n（逃\n```","slug":"Uva10305-Ordering-Tasks","published":1,"updated":"2019-08-20T14:43:39.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lj000u30vn92tt28zd","content":"<p>有n个变量，m个二元组(u, v), 分别表示u小于v。要求给出一种所有变量从小到大排列的可能。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-10305\" target=\"_blank\" rel=\"noopener\">Uva10305-Ordering Tasks</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>建图，以变量为顶点，“小于”关系为有向边。问题变为求这个图的拓扑排序。借助DFS来完成排序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序：</span><br><span class=\"line\">1. 每个顶点出现且只出现一次；</span><br><span class=\"line\">2. 若A在序列中排在B的前面，则在图中不存在从B到A的路径。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun  4 Nov 18:47:13 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">107</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> res[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> G[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    c[u] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(G[u][i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c[i] == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[i] == <span class=\"number\">0</span> &amp;&amp; !dfs(i)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//c[u] = 1, res[--t] = u;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c[u] = <span class=\"number\">1</span>, res[--t] = u;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span> &amp;&amp; m == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        t = n;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(c));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(res, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(res));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(G, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(G));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">            G[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!c[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; \"i: \" &lt;&lt; i &lt;&lt; endl;</span></span><br><span class=\"line\">                dfs(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!i) <span class=\"built_in\">cout</span> &lt;&lt; res[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; res[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>拓扑等价：<br>有多个解释，其中一个几何上的解释是，一个曲面经过扭转、弯曲、拉长或收缩得到另一个曲面，期间没有出现任何点的重叠与断开，那么可以说这两个曲面是拓扑等价的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//知乎上看到的一个笑话</span><br><span class=\"line\">“美女和丑女在数学上是不是拓扑等价的？”</span><br><span class=\"line\">“这要看她有没有打耳洞”</span><br><span class=\"line\">（逃</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>有n个变量，m个二元组(u, v), 分别表示u小于v。要求给出一种所有变量从小到大排列的可能。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-10305\" target=\"_blank\" rel=\"noopener\">Uva10305-Ordering Tasks</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>建图，以变量为顶点，“小于”关系为有向边。问题变为求这个图的拓扑排序。借助DFS来完成排序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序：</span><br><span class=\"line\">1. 每个顶点出现且只出现一次；</span><br><span class=\"line\">2. 若A在序列中排在B的前面，则在图中不存在从B到A的路径。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun  4 Nov 18:47:13 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">107</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> res[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> G[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    c[u] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(G[u][i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c[i] == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[i] == <span class=\"number\">0</span> &amp;&amp; !dfs(i)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//c[u] = 1, res[--t] = u;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c[u] = <span class=\"number\">1</span>, res[--t] = u;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span> &amp;&amp; m == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        t = n;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(c));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(res, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(res));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(G, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(G));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">            G[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!c[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; \"i: \" &lt;&lt; i &lt;&lt; endl;</span></span><br><span class=\"line\">                dfs(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!i) <span class=\"built_in\">cout</span> &lt;&lt; res[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; res[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>拓扑等价：<br>有多个解释，其中一个几何上的解释是，一个曲面经过扭转、弯曲、拉长或收缩得到另一个曲面，期间没有出现任何点的重叠与断开，那么可以说这两个曲面是拓扑等价的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//知乎上看到的一个笑话</span><br><span class=\"line\">“美女和丑女在数学上是不是拓扑等价的？”</span><br><span class=\"line\">“这要看她有没有打耳洞”</span><br><span class=\"line\">（逃</span><br></pre></td></tr></table></figure>"},{"title":"Uva10410-Tree Reconstruction-树还原","date":"2018-12-14T12:02:42.000Z","_content":"根据一棵树的BFS和DFS序列还原这颗树的结构。关于树的一种新的类型的题，mark。\n<!--more-->\n# 链接\n题目链接[Uva10410-Tree Reconstruction](https://vjudge.net/problem/UVA-10410)\n参考链接[20143605--pcx's Blog](https://www.cnblogs.com/20143605--pcx/p/4859424.html)和[Chengrui's Blog](https://wcr1996.com/2015/02/24/uva-10410-tree-reconstruction/)\n\n# 题解\n用BFS序列去分离DFS，首先根据BFS序列顺序记录每个节点的位置。子结点的下标一定比父结点的下标至少大于1，（根节点除外，根结点和第一个子结点的下标距离等于1）。\n用栈维护DFS序列，根据条件不断判断栈中的top结点和新读入结点之间的位置关系，``若top结点下标 + 1 < 新结点下标，或者top结点是根节点``，则表示新结点是top的结点的一个子结点；``若top结点下标 + 1 = 新结点下标``，表示新结点和top结点之间是兄弟结点，同时表示当前top结点往下的分支已扫描完毕，pop出top结点；``若top结点下标 + 1 > 新结点下标``，表示新结点已不在top结点所在子树，同样pop出top结点。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 14 Dec 19:36:24 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e3 + 7;\nint n;\nint pos[maxn];\nstack<int> dfs;\nvector<int> tree[maxn];\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n){\n        while(!dfs.empty()) dfs.pop();\n        \n        int x;\n        for(int i = 0; i < n; i++){\n            cin >> x;\n            pos[x] = i;\n            tree[i + 1].clear();\n        }\n\n        int root;\n        cin >> root;\n        dfs.push(root);\n        for(int i = 1; i < n; i++){\n            cin >> x;\n            while(1){\n                int u = dfs.top();\n                if(u == root || pos[u] + 1 < pos[x]){\n                    tree[u].push_back(x);\n                    dfs.push(x);\n                    break;\n                }\n                dfs.pop();\n            }\n        }\n\n        for(int i = 1; i <= n; i++){\n            cout << i << \":\";\n            int len = tree[i].size();\n            for(int j = 0; j < len; j++){\n                cout << \" \" << tree[i][j];\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}\n```","source":"_posts/Uva10410-Tree-Reconstruction.md","raw":"---\ntitle: Uva10410-Tree Reconstruction-树还原\ndate: 2018-12-14 20:02:42\ncategories:\n- ACM\n- 树\ntags:\n- 树\n---\n根据一棵树的BFS和DFS序列还原这颗树的结构。关于树的一种新的类型的题，mark。\n<!--more-->\n# 链接\n题目链接[Uva10410-Tree Reconstruction](https://vjudge.net/problem/UVA-10410)\n参考链接[20143605--pcx's Blog](https://www.cnblogs.com/20143605--pcx/p/4859424.html)和[Chengrui's Blog](https://wcr1996.com/2015/02/24/uva-10410-tree-reconstruction/)\n\n# 题解\n用BFS序列去分离DFS，首先根据BFS序列顺序记录每个节点的位置。子结点的下标一定比父结点的下标至少大于1，（根节点除外，根结点和第一个子结点的下标距离等于1）。\n用栈维护DFS序列，根据条件不断判断栈中的top结点和新读入结点之间的位置关系，``若top结点下标 + 1 < 新结点下标，或者top结点是根节点``，则表示新结点是top的结点的一个子结点；``若top结点下标 + 1 = 新结点下标``，表示新结点和top结点之间是兄弟结点，同时表示当前top结点往下的分支已扫描完毕，pop出top结点；``若top结点下标 + 1 > 新结点下标``，表示新结点已不在top结点所在子树，同样pop出top结点。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 14 Dec 19:36:24 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e3 + 7;\nint n;\nint pos[maxn];\nstack<int> dfs;\nvector<int> tree[maxn];\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n){\n        while(!dfs.empty()) dfs.pop();\n        \n        int x;\n        for(int i = 0; i < n; i++){\n            cin >> x;\n            pos[x] = i;\n            tree[i + 1].clear();\n        }\n\n        int root;\n        cin >> root;\n        dfs.push(root);\n        for(int i = 1; i < n; i++){\n            cin >> x;\n            while(1){\n                int u = dfs.top();\n                if(u == root || pos[u] + 1 < pos[x]){\n                    tree[u].push_back(x);\n                    dfs.push(x);\n                    break;\n                }\n                dfs.pop();\n            }\n        }\n\n        for(int i = 1; i <= n; i++){\n            cout << i << \":\";\n            int len = tree[i].size();\n            for(int j = 0; j < len; j++){\n                cout << \" \" << tree[i][j];\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}\n```","slug":"Uva10410-Tree-Reconstruction","published":1,"updated":"2019-08-20T14:43:29.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lj000v30vnx8lxnphv","content":"<p>根据一棵树的BFS和DFS序列还原这颗树的结构。关于树的一种新的类型的题，mark。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-10410\" target=\"_blank\" rel=\"noopener\">Uva10410-Tree Reconstruction</a><br>参考链接<a href=\"https://www.cnblogs.com/20143605--pcx/p/4859424.html\" target=\"_blank\" rel=\"noopener\">20143605–pcx’s Blog</a>和<a href=\"https://wcr1996.com/2015/02/24/uva-10410-tree-reconstruction/\" target=\"_blank\" rel=\"noopener\">Chengrui’s Blog</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>用BFS序列去分离DFS，首先根据BFS序列顺序记录每个节点的位置。子结点的下标一定比父结点的下标至少大于1，（根节点除外，根结点和第一个子结点的下标距离等于1）。<br>用栈维护DFS序列，根据条件不断判断栈中的top结点和新读入结点之间的位置关系，<code>若top结点下标 + 1 &lt; 新结点下标，或者top结点是根节点</code>，则表示新结点是top的结点的一个子结点；<code>若top结点下标 + 1 = 新结点下标</code>，表示新结点和top结点之间是兄弟结点，同时表示当前top结点往下的分支已扫描完毕，pop出top结点；<code>若top结点下标 + 1 &gt; 新结点下标</code>，表示新结点已不在top结点所在子树，同样pop出top结点。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 14 Dec 19:36:24 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e3</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> pos[maxn];</span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; dfs;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tree[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!dfs.empty()) dfs.pop();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x;</span><br><span class=\"line\">            pos[x] = i;</span><br><span class=\"line\">            tree[i + <span class=\"number\">1</span>].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> root;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; root;</span><br><span class=\"line\">        dfs.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> u = dfs.top();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(u == root || pos[u] + <span class=\"number\">1</span> &lt; pos[x])&#123;</span><br><span class=\"line\">                    tree[u].push_back(x);</span><br><span class=\"line\">                    dfs.push(x);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dfs.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\":\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = tree[i].size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; tree[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>根据一棵树的BFS和DFS序列还原这颗树的结构。关于树的一种新的类型的题，mark。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-10410\" target=\"_blank\" rel=\"noopener\">Uva10410-Tree Reconstruction</a><br>参考链接<a href=\"https://www.cnblogs.com/20143605--pcx/p/4859424.html\" target=\"_blank\" rel=\"noopener\">20143605–pcx’s Blog</a>和<a href=\"https://wcr1996.com/2015/02/24/uva-10410-tree-reconstruction/\" target=\"_blank\" rel=\"noopener\">Chengrui’s Blog</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>用BFS序列去分离DFS，首先根据BFS序列顺序记录每个节点的位置。子结点的下标一定比父结点的下标至少大于1，（根节点除外，根结点和第一个子结点的下标距离等于1）。<br>用栈维护DFS序列，根据条件不断判断栈中的top结点和新读入结点之间的位置关系，<code>若top结点下标 + 1 &lt; 新结点下标，或者top结点是根节点</code>，则表示新结点是top的结点的一个子结点；<code>若top结点下标 + 1 = 新结点下标</code>，表示新结点和top结点之间是兄弟结点，同时表示当前top结点往下的分支已扫描完毕，pop出top结点；<code>若top结点下标 + 1 &gt; 新结点下标</code>，表示新结点已不在top结点所在子树，同样pop出top结点。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 14 Dec 19:36:24 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e3</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> pos[maxn];</span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; dfs;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tree[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!dfs.empty()) dfs.pop();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x;</span><br><span class=\"line\">            pos[x] = i;</span><br><span class=\"line\">            tree[i + <span class=\"number\">1</span>].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> root;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; root;</span><br><span class=\"line\">        dfs.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> u = dfs.top();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(u == root || pos[u] + <span class=\"number\">1</span> &lt; pos[x])&#123;</span><br><span class=\"line\">                    tree[u].push_back(x);</span><br><span class=\"line\">                    dfs.push(x);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dfs.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\":\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = tree[i].size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; tree[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva10562-Undraw the trees","date":"2018-11-12T23:33:42.000Z","_content":"看图写树。把类似如图所示的树用\"$(A(B()C(E()F())D(G())))$\"的形式输出出来。在奇怪的地方卡了好久= =，记录一下。\n![tree](/tree.png)\n<!--more-->\n# 链接\n[Uva10562-Undraw the trees](https://vjudge.net/problem/UVA-10562)\n\n# 题解\n直接递归输出。主要说一下自己的卡点：最开始代码34行部分写的是$r = y$，WA到怀疑人生，后来突然想到把字符串读入字符数组中时是覆盖操作，也就是说如果新读入的字符串的长度比已经缓存的要短的话，之前的字符串会有残留。例如，buf[10] = \"abcdef\"，然后再读入新的字符串\"xyz\"后，buf中的内容是\"xyz0ef\"（其中0表示字符串结束标志'\\0'）,自己也就是坑在了这个地方。解决方法有两种，一种是让$r = l$，然后遍历到'\\0'时结束,也就是注释的那种写法；另一种是每次都memset一下= =（经历这次事件后一定每次都记得memset...）。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 13 Nov 08:09:46 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 200 + 7;\nchar mp[maxn][maxn];\nint t;\nint n;\n\nvoid dfs(int x, int y){\n    char c = mp[x][y];\n    cout << c << \"(\";\n    if(x + 1 < n && mp[x + 1][y] == '|'){\n        int l = y;\n        while(l > 0 && mp[x + 2][l - 1] == '-') l--;\n        int r = l;\n        while(mp[x + 2][r] == '-' && mp[x + 3][r] != '\\0') r++;\n        for(int i = l; i < r; i++){\n            if(!isspace(mp[x + 3][i])){\n                dfs(x + 3, i);\n            }\n        }\n        \n        /*\n        while(mp[x + 2][l] == '-' && mp[x + 3][l] != '\\0'){\n            if(!isspace(mp[x + 3][l])) dfs(x + 3, l);\n            l++;\n        }\n        */\n\n    }\n    cout << \")\";\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"../in.txt\", \"r\", stdin);\n    #endif\n    cin >> t;\n    getchar();\n    while(t--){\n        memset(mp, 0, sizeof(mp));\n        n = 0;\n        cout << \"(\";\n        while(fgets(mp[n], maxn, stdin)){\n            if(mp[n][0] == '#') break;\n            n++;\n        }\n        if(n){\n            for(int i = 0; i < maxn; i++){\n                if(mp[0][i] != ' '){\n                    dfs(0, i);\n                    break;\n                }\n            }\n        }\n        cout << \")\" << endl;\n    }\n    return 0;\n}\n```","source":"_posts/Uva10562-Undraw the trees.md","raw":"---\ntitle: Uva10562-Undraw the trees\ndate: 2018-11-13 07:33:42\ncategories:\n- ACM\n- 树\ntags:\n- 二叉树\n---\n看图写树。把类似如图所示的树用\"$(A(B()C(E()F())D(G())))$\"的形式输出出来。在奇怪的地方卡了好久= =，记录一下。\n![tree](/tree.png)\n<!--more-->\n# 链接\n[Uva10562-Undraw the trees](https://vjudge.net/problem/UVA-10562)\n\n# 题解\n直接递归输出。主要说一下自己的卡点：最开始代码34行部分写的是$r = y$，WA到怀疑人生，后来突然想到把字符串读入字符数组中时是覆盖操作，也就是说如果新读入的字符串的长度比已经缓存的要短的话，之前的字符串会有残留。例如，buf[10] = \"abcdef\"，然后再读入新的字符串\"xyz\"后，buf中的内容是\"xyz0ef\"（其中0表示字符串结束标志'\\0'）,自己也就是坑在了这个地方。解决方法有两种，一种是让$r = l$，然后遍历到'\\0'时结束,也就是注释的那种写法；另一种是每次都memset一下= =（经历这次事件后一定每次都记得memset...）。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 13 Nov 08:09:46 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 200 + 7;\nchar mp[maxn][maxn];\nint t;\nint n;\n\nvoid dfs(int x, int y){\n    char c = mp[x][y];\n    cout << c << \"(\";\n    if(x + 1 < n && mp[x + 1][y] == '|'){\n        int l = y;\n        while(l > 0 && mp[x + 2][l - 1] == '-') l--;\n        int r = l;\n        while(mp[x + 2][r] == '-' && mp[x + 3][r] != '\\0') r++;\n        for(int i = l; i < r; i++){\n            if(!isspace(mp[x + 3][i])){\n                dfs(x + 3, i);\n            }\n        }\n        \n        /*\n        while(mp[x + 2][l] == '-' && mp[x + 3][l] != '\\0'){\n            if(!isspace(mp[x + 3][l])) dfs(x + 3, l);\n            l++;\n        }\n        */\n\n    }\n    cout << \")\";\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"../in.txt\", \"r\", stdin);\n    #endif\n    cin >> t;\n    getchar();\n    while(t--){\n        memset(mp, 0, sizeof(mp));\n        n = 0;\n        cout << \"(\";\n        while(fgets(mp[n], maxn, stdin)){\n            if(mp[n][0] == '#') break;\n            n++;\n        }\n        if(n){\n            for(int i = 0; i < maxn; i++){\n                if(mp[0][i] != ' '){\n                    dfs(0, i);\n                    break;\n                }\n            }\n        }\n        cout << \")\" << endl;\n    }\n    return 0;\n}\n```","slug":"Uva10562-Undraw the trees","published":1,"updated":"2019-08-20T14:43:20.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lk000w30vnynvfs3n3","content":"<p>看图写树。把类似如图所示的树用”$(A(B()C(E()F())D(G())))$”的形式输出出来。在奇怪的地方卡了好久= =，记录一下。<br><img src=\"/2018/11/13/Uva10562-Undraw the trees/tree.png\" alt=\"tree\"></p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-10562\" target=\"_blank\" rel=\"noopener\">Uva10562-Undraw the trees</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>直接递归输出。主要说一下自己的卡点：最开始代码34行部分写的是$r = y$，WA到怀疑人生，后来突然想到把字符串读入字符数组中时是覆盖操作，也就是说如果新读入的字符串的长度比已经缓存的要短的话，之前的字符串会有残留。例如，buf[10] = “abcdef”，然后再读入新的字符串”xyz”后，buf中的内容是”xyz0ef”（其中0表示字符串结束标志’\\0’）,自己也就是坑在了这个地方。解决方法有两种，一种是让$r = l$，然后遍历到’\\0’时结束,也就是注释的那种写法；另一种是每次都memset一下= =（经历这次事件后一定每次都记得memset…）。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 13 Nov 08:09:46 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = mp[x][y];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; c &lt;&lt; <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x + <span class=\"number\">1</span> &lt; n &amp;&amp; mp[x + <span class=\"number\">1</span>][y] == <span class=\"string\">'|'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = y;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &gt; <span class=\"number\">0</span> &amp;&amp; mp[x + <span class=\"number\">2</span>][l - <span class=\"number\">1</span>] == <span class=\"string\">'-'</span>) l--;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = l;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(mp[x + <span class=\"number\">2</span>][r] == <span class=\"string\">'-'</span> &amp;&amp; mp[x + <span class=\"number\">3</span>][r] != <span class=\"string\">'\\0'</span>) r++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; i &lt; r; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">isspace</span>(mp[x + <span class=\"number\">3</span>][i]))&#123;</span><br><span class=\"line\">                dfs(x + <span class=\"number\">3</span>, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        while(mp[x + 2][l] == '-' &amp;&amp; mp[x + 3][l] != '\\0')&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if(!isspace(mp[x + 3][l])) dfs(x + 3, l);</span></span><br><span class=\"line\"><span class=\"comment\">            l++;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"../in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(mp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(mp));</span><br><span class=\"line\">        n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fgets(mp[n], maxn, <span class=\"built_in\">stdin</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[n][<span class=\"number\">0</span>] == <span class=\"string\">'#'</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxn; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[<span class=\"number\">0</span>][i] != <span class=\"string\">' '</span>)&#123;</span><br><span class=\"line\">                    dfs(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>看图写树。把类似如图所示的树用”$(A(B()C(E()F())D(G())))$”的形式输出出来。在奇怪的地方卡了好久= =，记录一下。<br><img src=\"/2018/11/13/Uva10562-Undraw the trees/tree.png\" alt=\"tree\"></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-10562\" target=\"_blank\" rel=\"noopener\">Uva10562-Undraw the trees</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>直接递归输出。主要说一下自己的卡点：最开始代码34行部分写的是$r = y$，WA到怀疑人生，后来突然想到把字符串读入字符数组中时是覆盖操作，也就是说如果新读入的字符串的长度比已经缓存的要短的话，之前的字符串会有残留。例如，buf[10] = “abcdef”，然后再读入新的字符串”xyz”后，buf中的内容是”xyz0ef”（其中0表示字符串结束标志’\\0’）,自己也就是坑在了这个地方。解决方法有两种，一种是让$r = l$，然后遍历到’\\0’时结束,也就是注释的那种写法；另一种是每次都memset一下= =（经历这次事件后一定每次都记得memset…）。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 13 Nov 08:09:46 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = mp[x][y];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; c &lt;&lt; <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x + <span class=\"number\">1</span> &lt; n &amp;&amp; mp[x + <span class=\"number\">1</span>][y] == <span class=\"string\">'|'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = y;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &gt; <span class=\"number\">0</span> &amp;&amp; mp[x + <span class=\"number\">2</span>][l - <span class=\"number\">1</span>] == <span class=\"string\">'-'</span>) l--;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = l;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(mp[x + <span class=\"number\">2</span>][r] == <span class=\"string\">'-'</span> &amp;&amp; mp[x + <span class=\"number\">3</span>][r] != <span class=\"string\">'\\0'</span>) r++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; i &lt; r; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">isspace</span>(mp[x + <span class=\"number\">3</span>][i]))&#123;</span><br><span class=\"line\">                dfs(x + <span class=\"number\">3</span>, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        while(mp[x + 2][l] == '-' &amp;&amp; mp[x + 3][l] != '\\0')&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if(!isspace(mp[x + 3][l])) dfs(x + 3, l);</span></span><br><span class=\"line\"><span class=\"comment\">            l++;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"../in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(mp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(mp));</span><br><span class=\"line\">        n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fgets(mp[n], maxn, <span class=\"built_in\">stdin</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[n][<span class=\"number\">0</span>] == <span class=\"string\">'#'</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxn; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[<span class=\"number\">0</span>][i] != <span class=\"string\">' '</span>)&#123;</span><br><span class=\"line\">                    dfs(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva1103-Ancient Messages-DFS","date":"2018-10-28T13:41:19.000Z","_content":"一道让人惊呼“DFS还能这么玩”的题目。给定一个由象形文字组成的图像，要求按字典序输出图中所有象形文字（输出时每个象形文字由一个给定的英文表示）。关键是通过什么方法区分这些象形文字。\n![hier](/hier.png)\n<!--more-->\n# 链接\n[Uva1103-Ancient Messages](https://vjudge.net/problem/UVA-1103)\n# 题目描述\n图像的像素由 $0$ 和 $1$ 组成，其中 $0$ 代表白色像素点，$1$ 代表黑色像素点。整个图像以十六进制形式给出。图像包含六种象形符号中的至少一个，不同的符号不会相互接触。符号的形状和上图给出的拓扑等价（可以随意拉伸但不能拉断）。\n<div style=\"width: 300px; margin: auto\">\n    ![1.png](/1.png)\n    ![2.png](/2.png)\n</div>\n## 题解\n需要找出能够区别出这些不同象形符号的特征量。可以发现每个符号都包含一些白色的色块区域，6个符号从左到右分别包含 $1$，$3$，$5$，$4$，$0$，$2$ 个白色区域，各不相同。所以可以根据这一特征量区分不同的象形符号。\n具体做法为用dfs方法对每一块黑色或白色区域染色，这样可以把图像分为几个不同的颜色区域，再从每个黑色像素区域出发去统计在它内部的白色像素区域的个数。\n\n*需要注意的是初始时要在图像四周多添加一圈白色像素，以保证color 1 每次都表示的是背景白色像素区域*（因为这个地方$WA$了好多次，$QAQ$）\n\n另外这题没有测试数据也很坑2333，最后友情赠送几组测试数据。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 28 Oct 22:24:10 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxh = 207;\nconst int maxw = 50 * 4 + 7;\nint h, w;\nchar pix[maxh][maxw];\nint dig[maxh][maxw];\nint color[maxh][maxw];\nint dcode[256];\nint dx[] = {0, 1, 0, -1};\nint dy[] = {1, 0, -1, 0};\nvector<int> rec;\nset<int> st[maxw];\nconst string s = \"WAKJSD\";\n\nvoid decode(char c, int h, int pos){\n    int x = dcode[(int)c];\n    for(int i = 0; i < 4; i++){\n        if(x & (1 << (3 - i))) dig[h][pos + i] = 1;\n        else dig[h][pos + i] = 0;\n    }\n}\n\nvoid dye(int x, int y, int c){\n    color[x][y] = c;\n    for(int i = 0; i < 4; i++){\n        int nx = x + dx[i], ny = y + dy[i];\n        if(nx >= 0 && nx < h && ny >= 0 && ny < w && color[nx][ny] == 0 && dig[nx][ny] == dig[x][y]){\n            dye(nx, ny, c);\n        }\n    }\n}\n\nvoid cal(int x, int y, int c){\n    //cout << x << \" \" << y << endl;\n    for(int i = 0; i < 4; i++){\n        int nx = x + dx[i], ny = y + dy[i];\n        if(nx >= 0 && nx < h && ny >= 0 && ny < w && color[nx][ny] != 1 && dig[nx][ny] == 0){\n            //cout << \"color:\" << color[nx][ny] << endl;\n            st[c].insert(color[nx][ny]);\n        }\n    }\n}\n\nvoid print(){\n    for(int i = 0; i < h; i++){\n        for(int j = 0; j < w; j++){\n            cout << dig[i][j] << \" \";\n        }\n    }\n    cout << endl;\n}\n\nvoid printcolor(){\n    cout << endl;\n    for(int j = 0; j < h; j++){\n        for(int i = 0; i < w; i++){\n            cout << color[j][i] << \" \";\n        }\n        cout << endl;\n    }\n}\n\nvoid init(){\n    dcode['0'] = 0x00;\n    dcode['1'] = 0x01;\n    dcode['2'] = 0x02;\n    dcode['3'] = 0x03;\n    dcode['4'] = 0x04;\n    dcode['5'] = 0x05;\n    dcode['6'] = 0x06;\n    dcode['7'] = 0x07;\n    dcode['8'] = 0x08;\n    dcode['9'] = 0x09;\n    dcode['a'] = 0x0a;\n    dcode['b'] = 0x0b;\n    dcode['c'] = 0x0c;\n    dcode['d'] = 0x0d;\n    dcode['e'] = 0x0e;\n    dcode['f'] = 0x0f;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    init();\n    int cs = 0;\n    while(cin >> h >> w){\n        //cout << h << \" \" << w << endl;\n        if(h == 0 && w == 0) break;\n        cout << \"Case \" << (++cs) << \": \";\n        memset(color, 0, sizeof(color));\n        memset(dig, 0, sizeof(dig));\n        for(int i = 0; i < maxw; i++){\n            st[i].clear();\n        }\n        rec.clear();\n        for(int i = 0; i < h; i++){\n            cin >> pix[i];\n            //cout << pix[i] << endl;\n            for(int j = 0; j < w; j++){\n                decode(pix[i][j], i + 1, j * 4 + 1);\n            }\n        }\n        //给图像四周添加一圈白色像素\n        h += 2;\n        w = w * 4 + 2;\n        \n        //print();\n        \n        int cnt = 0;\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(color[i][j] == 0){\n                    dye(i, j, ++cnt);\n                    if(dig[i][j] == 1)\n                        rec.push_back(cnt);\n                }\n            }\n        }\n        //printcolor();\n        for(auto x : rec){\n            //cout << x << endl;\n            for(int i = 0; i < h; i++){\n                for(int j = 0; j < w; j++){\n                    if(color[i][j] == x){\n                        cal(i, j, x);\n                    }\n                }\n            }\n        }\n        vector<int> ans;\n        for(auto x : rec){\n            ans.push_back(st[x].size());\n        }\n        char res[10000];\n        int ct = 0;\n        for(size_t i = 0; i < ans.size(); i++){\n            res[ct++] = s[ans[i]];\n        }\n        sort(res, res + ct);\n        for(int i = 0; i < ct; i++){\n            cout << res[i];\n        }\n        cout << endl;\n    }\n    return 0;\n}\n```\n\n# 测试数据及答案\n```\n//数据\n4 4\n0f00\n330e\n1e06\n0c02\n10 5\n00f00\n0198c\n00f0e\n01f8e\n00604\n001e0\n00330\n003f0\n00210\n003f0\n5 5\n0e00e\n1b3ea\n0e32e\n043e4\n000c0\n5 3\nfff\nf0f\nfff\nf0f\nfff\n5 3\nfff\n70e\n7fe\n70e\n7fe\n0 0\n\n//答案\nCase 1: AW\nCase 2: AKW\nCase 3: AAA\nCase 4: K\nCase 5: K\n```","source":"_posts/Uva1103-Ancient-Messages.md","raw":"---\ntitle: Uva1103-Ancient Messages-DFS\ndate: 2018-10-28 21:41:19\ncategories:\n- ACM\n- DFS\ntags:\n- DFS\n- 全局思维\n---\n一道让人惊呼“DFS还能这么玩”的题目。给定一个由象形文字组成的图像，要求按字典序输出图中所有象形文字（输出时每个象形文字由一个给定的英文表示）。关键是通过什么方法区分这些象形文字。\n![hier](/hier.png)\n<!--more-->\n# 链接\n[Uva1103-Ancient Messages](https://vjudge.net/problem/UVA-1103)\n# 题目描述\n图像的像素由 $0$ 和 $1$ 组成，其中 $0$ 代表白色像素点，$1$ 代表黑色像素点。整个图像以十六进制形式给出。图像包含六种象形符号中的至少一个，不同的符号不会相互接触。符号的形状和上图给出的拓扑等价（可以随意拉伸但不能拉断）。\n<div style=\"width: 300px; margin: auto\">\n    ![1.png](/1.png)\n    ![2.png](/2.png)\n</div>\n## 题解\n需要找出能够区别出这些不同象形符号的特征量。可以发现每个符号都包含一些白色的色块区域，6个符号从左到右分别包含 $1$，$3$，$5$，$4$，$0$，$2$ 个白色区域，各不相同。所以可以根据这一特征量区分不同的象形符号。\n具体做法为用dfs方法对每一块黑色或白色区域染色，这样可以把图像分为几个不同的颜色区域，再从每个黑色像素区域出发去统计在它内部的白色像素区域的个数。\n\n*需要注意的是初始时要在图像四周多添加一圈白色像素，以保证color 1 每次都表示的是背景白色像素区域*（因为这个地方$WA$了好多次，$QAQ$）\n\n另外这题没有测试数据也很坑2333，最后友情赠送几组测试数据。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 28 Oct 22:24:10 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxh = 207;\nconst int maxw = 50 * 4 + 7;\nint h, w;\nchar pix[maxh][maxw];\nint dig[maxh][maxw];\nint color[maxh][maxw];\nint dcode[256];\nint dx[] = {0, 1, 0, -1};\nint dy[] = {1, 0, -1, 0};\nvector<int> rec;\nset<int> st[maxw];\nconst string s = \"WAKJSD\";\n\nvoid decode(char c, int h, int pos){\n    int x = dcode[(int)c];\n    for(int i = 0; i < 4; i++){\n        if(x & (1 << (3 - i))) dig[h][pos + i] = 1;\n        else dig[h][pos + i] = 0;\n    }\n}\n\nvoid dye(int x, int y, int c){\n    color[x][y] = c;\n    for(int i = 0; i < 4; i++){\n        int nx = x + dx[i], ny = y + dy[i];\n        if(nx >= 0 && nx < h && ny >= 0 && ny < w && color[nx][ny] == 0 && dig[nx][ny] == dig[x][y]){\n            dye(nx, ny, c);\n        }\n    }\n}\n\nvoid cal(int x, int y, int c){\n    //cout << x << \" \" << y << endl;\n    for(int i = 0; i < 4; i++){\n        int nx = x + dx[i], ny = y + dy[i];\n        if(nx >= 0 && nx < h && ny >= 0 && ny < w && color[nx][ny] != 1 && dig[nx][ny] == 0){\n            //cout << \"color:\" << color[nx][ny] << endl;\n            st[c].insert(color[nx][ny]);\n        }\n    }\n}\n\nvoid print(){\n    for(int i = 0; i < h; i++){\n        for(int j = 0; j < w; j++){\n            cout << dig[i][j] << \" \";\n        }\n    }\n    cout << endl;\n}\n\nvoid printcolor(){\n    cout << endl;\n    for(int j = 0; j < h; j++){\n        for(int i = 0; i < w; i++){\n            cout << color[j][i] << \" \";\n        }\n        cout << endl;\n    }\n}\n\nvoid init(){\n    dcode['0'] = 0x00;\n    dcode['1'] = 0x01;\n    dcode['2'] = 0x02;\n    dcode['3'] = 0x03;\n    dcode['4'] = 0x04;\n    dcode['5'] = 0x05;\n    dcode['6'] = 0x06;\n    dcode['7'] = 0x07;\n    dcode['8'] = 0x08;\n    dcode['9'] = 0x09;\n    dcode['a'] = 0x0a;\n    dcode['b'] = 0x0b;\n    dcode['c'] = 0x0c;\n    dcode['d'] = 0x0d;\n    dcode['e'] = 0x0e;\n    dcode['f'] = 0x0f;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    init();\n    int cs = 0;\n    while(cin >> h >> w){\n        //cout << h << \" \" << w << endl;\n        if(h == 0 && w == 0) break;\n        cout << \"Case \" << (++cs) << \": \";\n        memset(color, 0, sizeof(color));\n        memset(dig, 0, sizeof(dig));\n        for(int i = 0; i < maxw; i++){\n            st[i].clear();\n        }\n        rec.clear();\n        for(int i = 0; i < h; i++){\n            cin >> pix[i];\n            //cout << pix[i] << endl;\n            for(int j = 0; j < w; j++){\n                decode(pix[i][j], i + 1, j * 4 + 1);\n            }\n        }\n        //给图像四周添加一圈白色像素\n        h += 2;\n        w = w * 4 + 2;\n        \n        //print();\n        \n        int cnt = 0;\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(color[i][j] == 0){\n                    dye(i, j, ++cnt);\n                    if(dig[i][j] == 1)\n                        rec.push_back(cnt);\n                }\n            }\n        }\n        //printcolor();\n        for(auto x : rec){\n            //cout << x << endl;\n            for(int i = 0; i < h; i++){\n                for(int j = 0; j < w; j++){\n                    if(color[i][j] == x){\n                        cal(i, j, x);\n                    }\n                }\n            }\n        }\n        vector<int> ans;\n        for(auto x : rec){\n            ans.push_back(st[x].size());\n        }\n        char res[10000];\n        int ct = 0;\n        for(size_t i = 0; i < ans.size(); i++){\n            res[ct++] = s[ans[i]];\n        }\n        sort(res, res + ct);\n        for(int i = 0; i < ct; i++){\n            cout << res[i];\n        }\n        cout << endl;\n    }\n    return 0;\n}\n```\n\n# 测试数据及答案\n```\n//数据\n4 4\n0f00\n330e\n1e06\n0c02\n10 5\n00f00\n0198c\n00f0e\n01f8e\n00604\n001e0\n00330\n003f0\n00210\n003f0\n5 5\n0e00e\n1b3ea\n0e32e\n043e4\n000c0\n5 3\nfff\nf0f\nfff\nf0f\nfff\n5 3\nfff\n70e\n7fe\n70e\n7fe\n0 0\n\n//答案\nCase 1: AW\nCase 2: AKW\nCase 3: AAA\nCase 4: K\nCase 5: K\n```","slug":"Uva1103-Ancient-Messages","published":1,"updated":"2019-08-20T14:45:06.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lk000x30vnlyw2o2xm","content":"<p>一道让人惊呼“DFS还能这么玩”的题目。给定一个由象形文字组成的图像，要求按字典序输出图中所有象形文字（输出时每个象形文字由一个给定的英文表示）。关键是通过什么方法区分这些象形文字。<br><img src=\"/2018/10/28/Uva1103-Ancient-Messages/hier.png\" alt=\"hier\"></p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-1103\" target=\"_blank\" rel=\"noopener\">Uva1103-Ancient Messages</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>图像的像素由 $0$ 和 $1$ 组成，其中 $0$ 代表白色像素点，$1$ 代表黑色像素点。整个图像以十六进制形式给出。图像包含六种象形符号中的至少一个，不同的符号不会相互接触。符号的形状和上图给出的拓扑等价（可以随意拉伸但不能拉断）。</p>\n<div style=\"width: 300px; margin: auto\">\n    ![1.png](/1.png)\n    ![2.png](/2.png)\n</div>\n## 题解\n需要找出能够区别出这些不同象形符号的特征量。可以发现每个符号都包含一些白色的色块区域，6个符号从左到右分别包含 $1$，$3$，$5$，$4$，$0$，$2$ 个白色区域，各不相同。所以可以根据这一特征量区分不同的象形符号。\n具体做法为用dfs方法对每一块黑色或白色区域染色，这样可以把图像分为几个不同的颜色区域，再从每个黑色像素区域出发去统计在它内部的白色像素区域的个数。\n\n<p><em>需要注意的是初始时要在图像四周多添加一圈白色像素，以保证color 1 每次都表示的是背景白色像素区域</em>（因为这个地方$WA$了好多次，$QAQ$）</p>\n<p>另外这题没有测试数据也很坑2333，最后友情赠送几组测试数据。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 28 Oct 22:24:10 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxh = <span class=\"number\">207</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxw = <span class=\"number\">50</span> * <span class=\"number\">4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> h, w;</span><br><span class=\"line\"><span class=\"keyword\">char</span> pix[maxh][maxw];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dig[maxh][maxw];</span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxh][maxw];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dcode[<span class=\"number\">256</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rec;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st[maxw];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> s = <span class=\"string\">\"WAKJSD\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">char</span> c, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> pos)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = dcode[(<span class=\"keyword\">int</span>)c];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &amp; (<span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">3</span> - i))) dig[h][pos + i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> dig[h][pos + i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dye</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    color[x][y] = c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; h &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; w &amp;&amp; color[nx][ny] == <span class=\"number\">0</span> &amp;&amp; dig[nx][ny] == dig[x][y])&#123;</span><br><span class=\"line\">            dye(nx, ny, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; h &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; w &amp;&amp; color[nx][ny] != <span class=\"number\">1</span> &amp;&amp; dig[nx][ny] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"color:\" &lt;&lt; color[nx][ny] &lt;&lt; endl;</span></span><br><span class=\"line\">            st[c].insert(color[nx][ny]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; dig[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printcolor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; h; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; w; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; color[j][i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    dcode[<span class=\"string\">'0'</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'1'</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'2'</span>] = <span class=\"number\">0x02</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'3'</span>] = <span class=\"number\">0x03</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'4'</span>] = <span class=\"number\">0x04</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'5'</span>] = <span class=\"number\">0x05</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'6'</span>] = <span class=\"number\">0x06</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'7'</span>] = <span class=\"number\">0x07</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'8'</span>] = <span class=\"number\">0x08</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'9'</span>] = <span class=\"number\">0x09</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'a'</span>] = <span class=\"number\">0x0a</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'b'</span>] = <span class=\"number\">0x0b</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'c'</span>] = <span class=\"number\">0x0c</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'d'</span>] = <span class=\"number\">0x0d</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'e'</span>] = <span class=\"number\">0x0e</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'f'</span>] = <span class=\"number\">0x0f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cs = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; h &gt;&gt; w)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; h &lt;&lt; \" \" &lt;&lt; w &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h == <span class=\"number\">0</span> &amp;&amp; w == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case \"</span> &lt;&lt; (++cs) &lt;&lt; <span class=\"string\">\": \"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(color, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(color));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dig, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dig));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxw; i++)&#123;</span><br><span class=\"line\">            st[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rec.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; pix[i];</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; pix[i] &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                decode(pix[i][j], i + <span class=\"number\">1</span>, j * <span class=\"number\">4</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//给图像四周添加一圈白色像素</span></span><br><span class=\"line\">        h += <span class=\"number\">2</span>;</span><br><span class=\"line\">        w = w * <span class=\"number\">4</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//print();</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(color[i][j] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    dye(i, j, ++cnt);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dig[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                        rec.push_back(cnt);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//printcolor();</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : rec)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(color[i][j] == x)&#123;</span><br><span class=\"line\">                        cal(i, j, x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : rec)&#123;</span><br><span class=\"line\">            ans.push_back(st[x].size());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> res[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ct = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; ans.size(); i++)&#123;</span><br><span class=\"line\">            res[ct++] = s[ans[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(res, res + ct);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ct; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; res[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试数据及答案\"><a href=\"#测试数据及答案\" class=\"headerlink\" title=\"测试数据及答案\"></a>测试数据及答案</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据</span><br><span class=\"line\">4 4</span><br><span class=\"line\">0f00</span><br><span class=\"line\">330e</span><br><span class=\"line\">1e06</span><br><span class=\"line\">0c02</span><br><span class=\"line\">10 5</span><br><span class=\"line\">00f00</span><br><span class=\"line\">0198c</span><br><span class=\"line\">00f0e</span><br><span class=\"line\">01f8e</span><br><span class=\"line\">00604</span><br><span class=\"line\">001e0</span><br><span class=\"line\">00330</span><br><span class=\"line\">003f0</span><br><span class=\"line\">00210</span><br><span class=\"line\">003f0</span><br><span class=\"line\">5 5</span><br><span class=\"line\">0e00e</span><br><span class=\"line\">1b3ea</span><br><span class=\"line\">0e32e</span><br><span class=\"line\">043e4</span><br><span class=\"line\">000c0</span><br><span class=\"line\">5 3</span><br><span class=\"line\">fff</span><br><span class=\"line\">f0f</span><br><span class=\"line\">fff</span><br><span class=\"line\">f0f</span><br><span class=\"line\">fff</span><br><span class=\"line\">5 3</span><br><span class=\"line\">fff</span><br><span class=\"line\">70e</span><br><span class=\"line\">7fe</span><br><span class=\"line\">70e</span><br><span class=\"line\">7fe</span><br><span class=\"line\">0 0</span><br><span class=\"line\"></span><br><span class=\"line\">//答案</span><br><span class=\"line\">Case 1: AW</span><br><span class=\"line\">Case 2: AKW</span><br><span class=\"line\">Case 3: AAA</span><br><span class=\"line\">Case 4: K</span><br><span class=\"line\">Case 5: K</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>一道让人惊呼“DFS还能这么玩”的题目。给定一个由象形文字组成的图像，要求按字典序输出图中所有象形文字（输出时每个象形文字由一个给定的英文表示）。关键是通过什么方法区分这些象形文字。<br><img src=\"/2018/10/28/Uva1103-Ancient-Messages/hier.png\" alt=\"hier\"></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-1103\" target=\"_blank\" rel=\"noopener\">Uva1103-Ancient Messages</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>图像的像素由 $0$ 和 $1$ 组成，其中 $0$ 代表白色像素点，$1$ 代表黑色像素点。整个图像以十六进制形式给出。图像包含六种象形符号中的至少一个，不同的符号不会相互接触。符号的形状和上图给出的拓扑等价（可以随意拉伸但不能拉断）。</p>\n<div style=\"width: 300px; margin: auto\">\n    ![1.png](/1.png)\n    ![2.png](/2.png)\n</div>\n## 题解\n需要找出能够区别出这些不同象形符号的特征量。可以发现每个符号都包含一些白色的色块区域，6个符号从左到右分别包含 $1$，$3$，$5$，$4$，$0$，$2$ 个白色区域，各不相同。所以可以根据这一特征量区分不同的象形符号。\n具体做法为用dfs方法对每一块黑色或白色区域染色，这样可以把图像分为几个不同的颜色区域，再从每个黑色像素区域出发去统计在它内部的白色像素区域的个数。\n\n<p><em>需要注意的是初始时要在图像四周多添加一圈白色像素，以保证color 1 每次都表示的是背景白色像素区域</em>（因为这个地方$WA$了好多次，$QAQ$）</p>\n<p>另外这题没有测试数据也很坑2333，最后友情赠送几组测试数据。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 28 Oct 22:24:10 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxh = <span class=\"number\">207</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxw = <span class=\"number\">50</span> * <span class=\"number\">4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> h, w;</span><br><span class=\"line\"><span class=\"keyword\">char</span> pix[maxh][maxw];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dig[maxh][maxw];</span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxh][maxw];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dcode[<span class=\"number\">256</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rec;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st[maxw];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> s = <span class=\"string\">\"WAKJSD\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">char</span> c, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> pos)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = dcode[(<span class=\"keyword\">int</span>)c];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &amp; (<span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">3</span> - i))) dig[h][pos + i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> dig[h][pos + i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dye</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    color[x][y] = c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; h &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; w &amp;&amp; color[nx][ny] == <span class=\"number\">0</span> &amp;&amp; dig[nx][ny] == dig[x][y])&#123;</span><br><span class=\"line\">            dye(nx, ny, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; h &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; w &amp;&amp; color[nx][ny] != <span class=\"number\">1</span> &amp;&amp; dig[nx][ny] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"color:\" &lt;&lt; color[nx][ny] &lt;&lt; endl;</span></span><br><span class=\"line\">            st[c].insert(color[nx][ny]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; dig[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printcolor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; h; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; w; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; color[j][i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    dcode[<span class=\"string\">'0'</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'1'</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'2'</span>] = <span class=\"number\">0x02</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'3'</span>] = <span class=\"number\">0x03</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'4'</span>] = <span class=\"number\">0x04</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'5'</span>] = <span class=\"number\">0x05</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'6'</span>] = <span class=\"number\">0x06</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'7'</span>] = <span class=\"number\">0x07</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'8'</span>] = <span class=\"number\">0x08</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'9'</span>] = <span class=\"number\">0x09</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'a'</span>] = <span class=\"number\">0x0a</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'b'</span>] = <span class=\"number\">0x0b</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'c'</span>] = <span class=\"number\">0x0c</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'d'</span>] = <span class=\"number\">0x0d</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'e'</span>] = <span class=\"number\">0x0e</span>;</span><br><span class=\"line\">    dcode[<span class=\"string\">'f'</span>] = <span class=\"number\">0x0f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cs = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; h &gt;&gt; w)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; h &lt;&lt; \" \" &lt;&lt; w &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h == <span class=\"number\">0</span> &amp;&amp; w == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case \"</span> &lt;&lt; (++cs) &lt;&lt; <span class=\"string\">\": \"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(color, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(color));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dig, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dig));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxw; i++)&#123;</span><br><span class=\"line\">            st[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rec.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; pix[i];</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; pix[i] &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                decode(pix[i][j], i + <span class=\"number\">1</span>, j * <span class=\"number\">4</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//给图像四周添加一圈白色像素</span></span><br><span class=\"line\">        h += <span class=\"number\">2</span>;</span><br><span class=\"line\">        w = w * <span class=\"number\">4</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//print();</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(color[i][j] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    dye(i, j, ++cnt);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dig[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                        rec.push_back(cnt);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//printcolor();</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : rec)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(color[i][j] == x)&#123;</span><br><span class=\"line\">                        cal(i, j, x);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : rec)&#123;</span><br><span class=\"line\">            ans.push_back(st[x].size());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> res[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ct = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; ans.size(); i++)&#123;</span><br><span class=\"line\">            res[ct++] = s[ans[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(res, res + ct);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ct; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; res[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试数据及答案\"><a href=\"#测试数据及答案\" class=\"headerlink\" title=\"测试数据及答案\"></a>测试数据及答案</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据</span><br><span class=\"line\">4 4</span><br><span class=\"line\">0f00</span><br><span class=\"line\">330e</span><br><span class=\"line\">1e06</span><br><span class=\"line\">0c02</span><br><span class=\"line\">10 5</span><br><span class=\"line\">00f00</span><br><span class=\"line\">0198c</span><br><span class=\"line\">00f0e</span><br><span class=\"line\">01f8e</span><br><span class=\"line\">00604</span><br><span class=\"line\">001e0</span><br><span class=\"line\">00330</span><br><span class=\"line\">003f0</span><br><span class=\"line\">00210</span><br><span class=\"line\">003f0</span><br><span class=\"line\">5 5</span><br><span class=\"line\">0e00e</span><br><span class=\"line\">1b3ea</span><br><span class=\"line\">0e32e</span><br><span class=\"line\">043e4</span><br><span class=\"line\">000c0</span><br><span class=\"line\">5 3</span><br><span class=\"line\">fff</span><br><span class=\"line\">f0f</span><br><span class=\"line\">fff</span><br><span class=\"line\">f0f</span><br><span class=\"line\">fff</span><br><span class=\"line\">5 3</span><br><span class=\"line\">fff</span><br><span class=\"line\">70e</span><br><span class=\"line\">7fe</span><br><span class=\"line\">70e</span><br><span class=\"line\">7fe</span><br><span class=\"line\">0 0</span><br><span class=\"line\"></span><br><span class=\"line\">//答案</span><br><span class=\"line\">Case 1: AW</span><br><span class=\"line\">Case 2: AKW</span><br><span class=\"line\">Case 3: AAA</span><br><span class=\"line\">Case 4: K</span><br><span class=\"line\">Case 5: K</span><br></pre></td></tr></table></figure>"},{"title":"Uva11059-Maximum Product-暴力枚举","date":"2018-12-17T12:07:59.000Z","_content":"输入$n$个元素组成的序列$S$，找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，输出0。$1 <=n <= 18，-10 <= S_i <= 10$。\n<!--more-->\n# 链接\n[Uva11059-Maximum Product](https://vjudge.net/problem/UVA-11059)\n\n# 题解\n**连续子序列有两个要素：起点和终点**。因此枚举起点和终点即可。\n\n*注意用long long存储。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 16 Dec 23:18:45 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 20;\nint n;\nint d[maxn];\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    int cnt = 0;\n    while(cin >> n){\n        for(int i = 0; i < n; i++){\n            cin >> d[i];\n        }\n        \n        long long res = 0, p = 1;\n        for(int i = 0; i < n; i++){\n            for(int j = i; j < n; j++){\n                p = 1;\n                for(int k = i; k <= j; k++){\n                    p *= d[k];\n                }\n                res = max(res, p);\n            }\n        }        \n\n        cout << \"Case #\" << ++cnt << \": The maximum product is \" << res << \".\" << endl << endl;\n    }\n    return 0;\n}\n```\n循环枚举部分还可以写成这种稍难理解但简单的形式：\n```C++\nfor(int i = 0; i < n; i++){\n    p = 1;\n    for(int j = i; j < n; j++){\n        p *= d[j];\n        res = max(res, p);\n    }\n}\n```","source":"_posts/Uva11059-Maximum-Product.md","raw":"---\ntitle: Uva11059-Maximum Product-暴力枚举\ndate: 2018-12-17 20:07:59\ncategories:\n- ACM\n- 暴力枚举\ntags:\n- 暴力枚举\n---\n输入$n$个元素组成的序列$S$，找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，输出0。$1 <=n <= 18，-10 <= S_i <= 10$。\n<!--more-->\n# 链接\n[Uva11059-Maximum Product](https://vjudge.net/problem/UVA-11059)\n\n# 题解\n**连续子序列有两个要素：起点和终点**。因此枚举起点和终点即可。\n\n*注意用long long存储。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 16 Dec 23:18:45 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 20;\nint n;\nint d[maxn];\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    int cnt = 0;\n    while(cin >> n){\n        for(int i = 0; i < n; i++){\n            cin >> d[i];\n        }\n        \n        long long res = 0, p = 1;\n        for(int i = 0; i < n; i++){\n            for(int j = i; j < n; j++){\n                p = 1;\n                for(int k = i; k <= j; k++){\n                    p *= d[k];\n                }\n                res = max(res, p);\n            }\n        }        \n\n        cout << \"Case #\" << ++cnt << \": The maximum product is \" << res << \".\" << endl << endl;\n    }\n    return 0;\n}\n```\n循环枚举部分还可以写成这种稍难理解但简单的形式：\n```C++\nfor(int i = 0; i < n; i++){\n    p = 1;\n    for(int j = i; j < n; j++){\n        p *= d[j];\n        res = max(res, p);\n    }\n}\n```","slug":"Uva11059-Maximum-Product","published":1,"updated":"2019-08-20T14:43:11.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lk000y30vnytzoxijt","content":"<p>输入$n$个元素组成的序列$S$，找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，输出0。$1 &lt;=n &lt;= 18，-10 &lt;= S_i &lt;= 10$。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-11059\" target=\"_blank\" rel=\"noopener\">Uva11059-Maximum Product</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><strong>连续子序列有两个要素：起点和终点</strong>。因此枚举起点和终点即可。</p>\n<p><em>注意用long long存储。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 16 Dec 23:18:45 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">0</span>, p = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class=\"line\">                p = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = i; k &lt;= j; k++)&#123;</span><br><span class=\"line\">                    p *= d[k];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res = max(res, p);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case #\"</span> &lt;&lt; ++cnt &lt;&lt; <span class=\"string\">\": The maximum product is \"</span> &lt;&lt; res &lt;&lt; <span class=\"string\">\".\"</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>循环枚举部分还可以写成这种稍难理解但简单的形式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">    p = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class=\"line\">        p *= d[j];</span><br><span class=\"line\">        res = max(res, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>输入$n$个元素组成的序列$S$，找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，输出0。$1 &lt;=n &lt;= 18，-10 &lt;= S_i &lt;= 10$。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-11059\" target=\"_blank\" rel=\"noopener\">Uva11059-Maximum Product</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><strong>连续子序列有两个要素：起点和终点</strong>。因此枚举起点和终点即可。</p>\n<p><em>注意用long long存储。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 16 Dec 23:18:45 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">0</span>, p = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class=\"line\">                p = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = i; k &lt;= j; k++)&#123;</span><br><span class=\"line\">                    p *= d[k];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res = max(res, p);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case #\"</span> &lt;&lt; ++cnt &lt;&lt; <span class=\"string\">\": The maximum product is \"</span> &lt;&lt; res &lt;&lt; <span class=\"string\">\".\"</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>循环枚举部分还可以写成这种稍难理解但简单的形式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">    p = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class=\"line\">        p *= d[j];</span><br><span class=\"line\">        res = max(res, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva11212-Editing a Book-IDA*","date":"2019-01-12T01:20:13.000Z","_content":"有$n（1 < n < 10）$个段落初始按一定顺序排列，要求通过“剪切”和“粘贴”操作把这n个段落调整为按编号1，2，...，n顺序排列。其中每次可以同时剪几个连续的段落，求最少的操作步数。\n<!--more-->\n# 链接\n[Uva11212-Editing a Book](https://vjudge.net/problem/UVA-11212)\n\n# 题解\n如果采用BFS进行状态搜索，总的状态数为$9! = 362880$，这个状态数量不是很大，但是每个状态的后继转移情况很多（可以剪切任意一个区间粘贴在剪切后的序列的任意一个位置处），所以可能会超时。\n采用IDA\\*求解，可以发现$n <= 9$ 时最多只需要8步，因为深度上限为8。接下来考虑剪切时的启发函数，统计序列中后继不正确的数字个数h，可以证明每次剪切时h最多减少3，因此当``h / 3 > maxd - d``，即``3d + h > 3maxd``时可以剪枝，其中d为当前深度，maxd为深度限制。\n![prune](/prune.png)\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 11 Jan 21:47:39 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 10;\nint n;\nint d[maxn];\nint maxd;\n\nbool judge(){\n    for(int i = 0; i < n - 1; i++){\n        if(d[i] > d[i + 1]) return false;\n    }\n    return true;\n}\n\nint h(){\n    int cnt = 0;\n    for(int i = 0; i < n - 1; i++){\n        if(d[i] != d[i + 1] - 1) cnt++;\n    }\n    if(d[n - 1] - d[0] != n - 1) cnt++;\n    return cnt;\n}\n\nbool dfs(int dep, int maxd){\n    if(3 * dep + h() > 3 * maxd) return false;\n    if(dep >= maxd){\n        if(judge()) return true;\n        else return false;\n    }\n    int tmp[10], oldd[10];\n    memcpy(oldd, d, sizeof(d));\n    for(int i = 0; i < n; i++){\n        for(int j = i; j < n; j++){\n            \n            //cut\n            int cnt = 0;\n            for(int k = 0; k < n; k++){\n                if(k < i || k > j) tmp[cnt++] = d[k];\n            }\n\n            //find a position to paste before it\n            int cnt2;\n            for(int k = 0; k <= cnt; k++){\n                cnt2 = 0;\n                for(int p = 0; p < k; p++) d[cnt2++] = tmp[p];\n                for(int p = i; p <= j; p++) d[cnt2++] = oldd[p];\n                for(int p = k; p < cnt; p++) d[cnt2++] = tmp[p];\n                if(dfs(dep + 1, maxd)) return true;\n                memcpy(d, oldd, sizeof(d));\n            }\n        }\n    }\n    return false;\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    int kase = 0;\n    while(cin >> n){\n        if(n == 0) break;\n        for(int i = 0; i < n; i++){\n            cin >> d[i];\n        }\n        for(maxd = 0; maxd < 10; maxd++){\n            if(dfs(0, maxd)) break;\n        }\n        cout << \"Case \" << ++kase << \": \" << maxd << endl;\n    }\n    return 0;\n}\n```","source":"_posts/Uva11212-Editing-a-Book.md","raw":"---\ntitle: Uva11212-Editing a Book-IDA*\ndate: 2019-01-12 09:20:13\ncategories:\n- ACM\n- IDA*\ntags:\n- 迭代加深\n---\n有$n（1 < n < 10）$个段落初始按一定顺序排列，要求通过“剪切”和“粘贴”操作把这n个段落调整为按编号1，2，...，n顺序排列。其中每次可以同时剪几个连续的段落，求最少的操作步数。\n<!--more-->\n# 链接\n[Uva11212-Editing a Book](https://vjudge.net/problem/UVA-11212)\n\n# 题解\n如果采用BFS进行状态搜索，总的状态数为$9! = 362880$，这个状态数量不是很大，但是每个状态的后继转移情况很多（可以剪切任意一个区间粘贴在剪切后的序列的任意一个位置处），所以可能会超时。\n采用IDA\\*求解，可以发现$n <= 9$ 时最多只需要8步，因为深度上限为8。接下来考虑剪切时的启发函数，统计序列中后继不正确的数字个数h，可以证明每次剪切时h最多减少3，因此当``h / 3 > maxd - d``，即``3d + h > 3maxd``时可以剪枝，其中d为当前深度，maxd为深度限制。\n![prune](/prune.png)\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 11 Jan 21:47:39 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 10;\nint n;\nint d[maxn];\nint maxd;\n\nbool judge(){\n    for(int i = 0; i < n - 1; i++){\n        if(d[i] > d[i + 1]) return false;\n    }\n    return true;\n}\n\nint h(){\n    int cnt = 0;\n    for(int i = 0; i < n - 1; i++){\n        if(d[i] != d[i + 1] - 1) cnt++;\n    }\n    if(d[n - 1] - d[0] != n - 1) cnt++;\n    return cnt;\n}\n\nbool dfs(int dep, int maxd){\n    if(3 * dep + h() > 3 * maxd) return false;\n    if(dep >= maxd){\n        if(judge()) return true;\n        else return false;\n    }\n    int tmp[10], oldd[10];\n    memcpy(oldd, d, sizeof(d));\n    for(int i = 0; i < n; i++){\n        for(int j = i; j < n; j++){\n            \n            //cut\n            int cnt = 0;\n            for(int k = 0; k < n; k++){\n                if(k < i || k > j) tmp[cnt++] = d[k];\n            }\n\n            //find a position to paste before it\n            int cnt2;\n            for(int k = 0; k <= cnt; k++){\n                cnt2 = 0;\n                for(int p = 0; p < k; p++) d[cnt2++] = tmp[p];\n                for(int p = i; p <= j; p++) d[cnt2++] = oldd[p];\n                for(int p = k; p < cnt; p++) d[cnt2++] = tmp[p];\n                if(dfs(dep + 1, maxd)) return true;\n                memcpy(d, oldd, sizeof(d));\n            }\n        }\n    }\n    return false;\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    int kase = 0;\n    while(cin >> n){\n        if(n == 0) break;\n        for(int i = 0; i < n; i++){\n            cin >> d[i];\n        }\n        for(maxd = 0; maxd < 10; maxd++){\n            if(dfs(0, maxd)) break;\n        }\n        cout << \"Case \" << ++kase << \": \" << maxd << endl;\n    }\n    return 0;\n}\n```","slug":"Uva11212-Editing-a-Book","published":1,"updated":"2019-08-20T14:43:02.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ll000z30vnqdbq9ami","content":"<p>有$n（1 &lt; n &lt; 10）$个段落初始按一定顺序排列，要求通过“剪切”和“粘贴”操作把这n个段落调整为按编号1，2，…，n顺序排列。其中每次可以同时剪几个连续的段落，求最少的操作步数。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-11212\" target=\"_blank\" rel=\"noopener\">Uva11212-Editing a Book</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>如果采用BFS进行状态搜索，总的状态数为$9! = 362880$，这个状态数量不是很大，但是每个状态的后继转移情况很多（可以剪切任意一个区间粘贴在剪切后的序列的任意一个位置处），所以可能会超时。<br>采用IDA*求解，可以发现$n &lt;= 9$ 时最多只需要8步，因为深度上限为8。接下来考虑剪切时的启发函数，统计序列中后继不正确的数字个数h，可以证明每次剪切时h最多减少3，因此当<code>h / 3 &gt; maxd - d</code>，即<code>3d + h &gt; 3maxd</code>时可以剪枝，其中d为当前深度，maxd为深度限制。<br><img src=\"/2019/01/12/Uva11212-Editing-a-Book/prune.png\" alt=\"prune\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 11 Jan 21:47:39 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> maxd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i] &gt; d[i + <span class=\"number\">1</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">h</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i] != d[i + <span class=\"number\">1</span>] - <span class=\"number\">1</span>) cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[n - <span class=\"number\">1</span>] - d[<span class=\"number\">0</span>] != n - <span class=\"number\">1</span>) cnt++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, <span class=\"keyword\">int</span> maxd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">3</span> * dep + h() &gt; <span class=\"number\">3</span> * maxd) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep &gt;= maxd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(judge()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp[<span class=\"number\">10</span>], oldd[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(oldd, d, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//cut</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k &lt; i || k &gt; j) tmp[cnt++] = d[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//find a position to paste before it</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> cnt2;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= cnt; k++)&#123;</span><br><span class=\"line\">                cnt2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p = <span class=\"number\">0</span>; p &lt; k; p++) d[cnt2++] = tmp[p];</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p = i; p &lt;= j; p++) d[cnt2++] = oldd[p];</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p = k; p &lt; cnt; p++) d[cnt2++] = tmp[p];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dfs(dep + <span class=\"number\">1</span>, maxd)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(d, oldd, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> kase = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(maxd = <span class=\"number\">0</span>; maxd &lt; <span class=\"number\">10</span>; maxd++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(<span class=\"number\">0</span>, maxd)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case \"</span> &lt;&lt; ++kase &lt;&lt; <span class=\"string\">\": \"</span> &lt;&lt; maxd &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>有$n（1 &lt; n &lt; 10）$个段落初始按一定顺序排列，要求通过“剪切”和“粘贴”操作把这n个段落调整为按编号1，2，…，n顺序排列。其中每次可以同时剪几个连续的段落，求最少的操作步数。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-11212\" target=\"_blank\" rel=\"noopener\">Uva11212-Editing a Book</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>如果采用BFS进行状态搜索，总的状态数为$9! = 362880$，这个状态数量不是很大，但是每个状态的后继转移情况很多（可以剪切任意一个区间粘贴在剪切后的序列的任意一个位置处），所以可能会超时。<br>采用IDA*求解，可以发现$n &lt;= 9$ 时最多只需要8步，因为深度上限为8。接下来考虑剪切时的启发函数，统计序列中后继不正确的数字个数h，可以证明每次剪切时h最多减少3，因此当<code>h / 3 &gt; maxd - d</code>，即<code>3d + h &gt; 3maxd</code>时可以剪枝，其中d为当前深度，maxd为深度限制。<br><img src=\"/2019/01/12/Uva11212-Editing-a-Book/prune.png\" alt=\"prune\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 11 Jan 21:47:39 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> maxd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i] &gt; d[i + <span class=\"number\">1</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">h</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i] != d[i + <span class=\"number\">1</span>] - <span class=\"number\">1</span>) cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[n - <span class=\"number\">1</span>] - d[<span class=\"number\">0</span>] != n - <span class=\"number\">1</span>) cnt++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, <span class=\"keyword\">int</span> maxd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">3</span> * dep + h() &gt; <span class=\"number\">3</span> * maxd) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep &gt;= maxd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(judge()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp[<span class=\"number\">10</span>], oldd[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(oldd, d, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//cut</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k &lt; i || k &gt; j) tmp[cnt++] = d[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//find a position to paste before it</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> cnt2;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= cnt; k++)&#123;</span><br><span class=\"line\">                cnt2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p = <span class=\"number\">0</span>; p &lt; k; p++) d[cnt2++] = tmp[p];</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p = i; p &lt;= j; p++) d[cnt2++] = oldd[p];</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p = k; p &lt; cnt; p++) d[cnt2++] = tmp[p];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dfs(dep + <span class=\"number\">1</span>, maxd)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(d, oldd, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> kase = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(maxd = <span class=\"number\">0</span>; maxd &lt; <span class=\"number\">10</span>; maxd++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(<span class=\"number\">0</span>, maxd)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case \"</span> &lt;&lt; ++kase &lt;&lt; <span class=\"string\">\": \"</span> &lt;&lt; maxd &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva11853-Painball-全局+DFS","date":"2018-11-20T02:53:30.000Z","_content":"好题哇。有一个 $1000 \\times 1000$ 的方形场地，有n个敌人分别在 $(x_i，y_i)$ 处，且每个人有一个攻击范围 $r_i$ ,求解是否可以在不受攻击的情况下从场地的最西侧走到场地的最东侧，若可以，输出起始和终点坐标。如果有多个位置满足条件，输出最靠北的位置。\n<!--more-->\n# 链接\n[Uva-Painball](https://vjudge.net/problem/UVA-11853)\n\n# 题解\n一开始的思路是建一个 $1000 \\times 1000$ 的图，将每一个敌人攻击范围内的所有点做标记，做为图中的障碍物，然后从上边界开始跑一遍DFS/BFS，看是否可以到达下边界。如果可以的话说明图被分成了左右两部分，东西两侧不可达。参考了刘汝佳老师的代码后发现完全没有这个必要 = =。\n不以坐标为基本单位，而直接以各个圆为基本单位，从一个与上边界有交的圆出发，不断递归寻找和它自身相交的圆，判断是否可以到达一个与下边界相交的圆。同时沿途检查这一系列中和左右边界有交的圆，这些圆和左边界的所有交点中最南边的点就是最北起始点，和右边界的所有交点中最南边的点就是最北终止点。膜Orz。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 20 Nov 09:54:58 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1000 + 7;\nconst double brd = 1000.0;\nint n;\ndouble x[maxn], y[maxn], r[maxn];\nbool vis[maxn];\nbool ok;\ndouble lb, rb;\n\nbool intersect(int u, int v){\n    return (x[u] - x[v]) * (x[u] - x[v]) + (y[u] - y[v]) * (y[u] - y[v]) <= (r[u] + r[v]) * (r[u] + r[v]);\n}\n\nvoid checkcircle(int c){\n    if(x[c] - r[c] <= 0){\n        lb = min(lb, y[c] - sqrt(r[c] * r[c] - x[c] * x[c]));\n    }\n    if(x[c] + r[c] >= brd){\n        rb = min(rb, y[c] - sqrt(r[c] * r[c] - (brd - x[c]) * (brd - x[c])));\n    }\n}\n\nvoid dfs(int c){\n    if(y[c] - r[c] <= 0){\n        ok = false;\n        return;\n    }\n    for(int i = 0; i < n; i++){\n        if(!vis[i] && intersect(c, i)){\n            vis[i] = 1;\n            dfs(i);\n        }\n    }\n    checkcircle(c);\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n){\n        ok = true;\n        lb = rb = brd;\n        memset(vis, 0, sizeof(vis));\n        for(int i = 0; i < n; i++){\n            cin >> x[i] >> y[i] >> r[i];\n        }\n        for(int i = 0; i < n; i++){\n            if(y[i] + r[i] >= brd){\n                vis[i] = 1;\n                dfs(i);\n                if(!ok) break;\n            }\n        }\n        if(!ok) cout << \"IMPOSSIBLE\" << endl;\n        else printf(\"0.00 %.2f 1000.00 %.2f\\n\", lb, rb);\n    }\n    return 0;\n}\n```","source":"_posts/Uva11853-Painball.md","raw":"---\ntitle: Uva11853-Painball-全局+DFS\ndate: 2018-11-20 10:53:30\ncategories:\n- ACM\n- DFS\ntags:\n- DFS\n- 全局思想\n---\n好题哇。有一个 $1000 \\times 1000$ 的方形场地，有n个敌人分别在 $(x_i，y_i)$ 处，且每个人有一个攻击范围 $r_i$ ,求解是否可以在不受攻击的情况下从场地的最西侧走到场地的最东侧，若可以，输出起始和终点坐标。如果有多个位置满足条件，输出最靠北的位置。\n<!--more-->\n# 链接\n[Uva-Painball](https://vjudge.net/problem/UVA-11853)\n\n# 题解\n一开始的思路是建一个 $1000 \\times 1000$ 的图，将每一个敌人攻击范围内的所有点做标记，做为图中的障碍物，然后从上边界开始跑一遍DFS/BFS，看是否可以到达下边界。如果可以的话说明图被分成了左右两部分，东西两侧不可达。参考了刘汝佳老师的代码后发现完全没有这个必要 = =。\n不以坐标为基本单位，而直接以各个圆为基本单位，从一个与上边界有交的圆出发，不断递归寻找和它自身相交的圆，判断是否可以到达一个与下边界相交的圆。同时沿途检查这一系列中和左右边界有交的圆，这些圆和左边界的所有交点中最南边的点就是最北起始点，和右边界的所有交点中最南边的点就是最北终止点。膜Orz。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 20 Nov 09:54:58 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1000 + 7;\nconst double brd = 1000.0;\nint n;\ndouble x[maxn], y[maxn], r[maxn];\nbool vis[maxn];\nbool ok;\ndouble lb, rb;\n\nbool intersect(int u, int v){\n    return (x[u] - x[v]) * (x[u] - x[v]) + (y[u] - y[v]) * (y[u] - y[v]) <= (r[u] + r[v]) * (r[u] + r[v]);\n}\n\nvoid checkcircle(int c){\n    if(x[c] - r[c] <= 0){\n        lb = min(lb, y[c] - sqrt(r[c] * r[c] - x[c] * x[c]));\n    }\n    if(x[c] + r[c] >= brd){\n        rb = min(rb, y[c] - sqrt(r[c] * r[c] - (brd - x[c]) * (brd - x[c])));\n    }\n}\n\nvoid dfs(int c){\n    if(y[c] - r[c] <= 0){\n        ok = false;\n        return;\n    }\n    for(int i = 0; i < n; i++){\n        if(!vis[i] && intersect(c, i)){\n            vis[i] = 1;\n            dfs(i);\n        }\n    }\n    checkcircle(c);\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n){\n        ok = true;\n        lb = rb = brd;\n        memset(vis, 0, sizeof(vis));\n        for(int i = 0; i < n; i++){\n            cin >> x[i] >> y[i] >> r[i];\n        }\n        for(int i = 0; i < n; i++){\n            if(y[i] + r[i] >= brd){\n                vis[i] = 1;\n                dfs(i);\n                if(!ok) break;\n            }\n        }\n        if(!ok) cout << \"IMPOSSIBLE\" << endl;\n        else printf(\"0.00 %.2f 1000.00 %.2f\\n\", lb, rb);\n    }\n    return 0;\n}\n```","slug":"Uva11853-Painball","published":1,"updated":"2019-08-20T14:42:51.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ll001030vn28sxm22b","content":"<p>好题哇。有一个 $1000 \\times 1000$ 的方形场地，有n个敌人分别在 $(x_i，y_i)$ 处，且每个人有一个攻击范围 $r_i$ ,求解是否可以在不受攻击的情况下从场地的最西侧走到场地的最东侧，若可以，输出起始和终点坐标。如果有多个位置满足条件，输出最靠北的位置。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-11853\" target=\"_blank\" rel=\"noopener\">Uva-Painball</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>一开始的思路是建一个 $1000 \\times 1000$ 的图，将每一个敌人攻击范围内的所有点做标记，做为图中的障碍物，然后从上边界开始跑一遍DFS/BFS，看是否可以到达下边界。如果可以的话说明图被分成了左右两部分，东西两侧不可达。参考了刘汝佳老师的代码后发现完全没有这个必要 = =。<br>不以坐标为基本单位，而直接以各个圆为基本单位，从一个与上边界有交的圆出发，不断递归寻找和它自身相交的圆，判断是否可以到达一个与下边界相交的圆。同时沿途检查这一系列中和左右边界有交的圆，这些圆和左边界的所有交点中最南边的点就是最北起始点，和右边界的所有交点中最南边的点就是最北终止点。膜Orz。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 20 Nov 09:54:58 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1000</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> brd = <span class=\"number\">1000.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">double</span> x[maxn], y[maxn], r[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ok;</span><br><span class=\"line\"><span class=\"keyword\">double</span> lb, rb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">intersect</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x[u] - x[v]) * (x[u] - x[v]) + (y[u] - y[v]) * (y[u] - y[v]) &lt;= (r[u] + r[v]) * (r[u] + r[v]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">checkcircle</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x[c] - r[c] &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        lb = min(lb, y[c] - <span class=\"built_in\">sqrt</span>(r[c] * r[c] - x[c] * x[c]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x[c] + r[c] &gt;= brd)&#123;</span><br><span class=\"line\">        rb = min(rb, y[c] - <span class=\"built_in\">sqrt</span>(r[c] * r[c] - (brd - x[c]) * (brd - x[c])));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y[c] - r[c] &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        ok = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i] &amp;&amp; intersect(c, i))&#123;</span><br><span class=\"line\">            vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    checkcircle(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        ok = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        lb = rb = brd;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x[i] &gt;&gt; y[i] &gt;&gt; r[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(y[i] + r[i] &gt;= brd)&#123;</span><br><span class=\"line\">                vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                dfs(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!ok) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ok) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"IMPOSSIBLE\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"0.00 %.2f 1000.00 %.2f\\n\"</span>, lb, rb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>好题哇。有一个 $1000 \\times 1000$ 的方形场地，有n个敌人分别在 $(x_i，y_i)$ 处，且每个人有一个攻击范围 $r_i$ ,求解是否可以在不受攻击的情况下从场地的最西侧走到场地的最东侧，若可以，输出起始和终点坐标。如果有多个位置满足条件，输出最靠北的位置。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-11853\" target=\"_blank\" rel=\"noopener\">Uva-Painball</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>一开始的思路是建一个 $1000 \\times 1000$ 的图，将每一个敌人攻击范围内的所有点做标记，做为图中的障碍物，然后从上边界开始跑一遍DFS/BFS，看是否可以到达下边界。如果可以的话说明图被分成了左右两部分，东西两侧不可达。参考了刘汝佳老师的代码后发现完全没有这个必要 = =。<br>不以坐标为基本单位，而直接以各个圆为基本单位，从一个与上边界有交的圆出发，不断递归寻找和它自身相交的圆，判断是否可以到达一个与下边界相交的圆。同时沿途检查这一系列中和左右边界有交的圆，这些圆和左边界的所有交点中最南边的点就是最北起始点，和右边界的所有交点中最南边的点就是最北终止点。膜Orz。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 20 Nov 09:54:58 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1000</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> brd = <span class=\"number\">1000.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">double</span> x[maxn], y[maxn], r[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ok;</span><br><span class=\"line\"><span class=\"keyword\">double</span> lb, rb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">intersect</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x[u] - x[v]) * (x[u] - x[v]) + (y[u] - y[v]) * (y[u] - y[v]) &lt;= (r[u] + r[v]) * (r[u] + r[v]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">checkcircle</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x[c] - r[c] &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        lb = min(lb, y[c] - <span class=\"built_in\">sqrt</span>(r[c] * r[c] - x[c] * x[c]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x[c] + r[c] &gt;= brd)&#123;</span><br><span class=\"line\">        rb = min(rb, y[c] - <span class=\"built_in\">sqrt</span>(r[c] * r[c] - (brd - x[c]) * (brd - x[c])));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y[c] - r[c] &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        ok = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i] &amp;&amp; intersect(c, i))&#123;</span><br><span class=\"line\">            vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    checkcircle(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        ok = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        lb = rb = brd;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x[i] &gt;&gt; y[i] &gt;&gt; r[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(y[i] + r[i] &gt;= brd)&#123;</span><br><span class=\"line\">                vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                dfs(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!ok) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ok) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"IMPOSSIBLE\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"0.00 %.2f 1000.00 %.2f\\n\"</span>, lb, rb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva12118-Inspetor's Dilemma-DFS求连通+欧拉路","date":"2018-12-17T10:36:53.000Z","_content":"V个城市之间两两相连，给定E条需要走的边，走过一条边需要时间T。求走完所有的E条边需要的最少时间。E条边不一定在一个连通图中。\n竟然卡在``ifndef ONLINE_JUDGE``上好久，单词``ONLINE``手滑打成了``ONLIEN``，= =。吐血。\n\n*紫书第六章结束*\n<!--more-->\n# 链接\n题目链接[Uva12118-Inspetor's Dilemma](https://vjudge.net/problem/UVA-12118)\n参考[SingleK's Blog](https://blog.csdn.net/xiao_k666/article/details/79209697)精简了自己的代码。\n\n# 题解\n因为E条边不一定在一个连通图中，所以首先DFS遍历连通块，统计每一个连通块中度数为奇数的结点个数。若能满足构成欧拉路的条件，则一次“一笔画”就可以走完当前连通块中的边。若不能构成欧拉路（奇度数结点个数大于2），则通过加边的方式，使其可以构成欧拉路。n个连通块之间还需要n - 1条边连接。\n所以最后的所需要走过的边是E，加上添加边的个数，再加上连通块个数减1。\n\n*最后不要忘记乘以T得到总耗时 = =，以及当给定E为0时，结果会出现负数，要特判。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 15 Dec 17:21:07 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e3 + 7;\nint V, E, T;\nbool vis[maxn];\nvector<int> d[maxn];\nint ans;\nint odd;\n\nvoid dfs(int u){\n    vis[u] = 1;\n    if(d[u].size() % 2) odd++;\n    for(size_t i = 0; i < d[u].size(); i++){\n        int v = d[u][i];\n        if(!vis[v]){\n            dfs(v);\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    int kase = 0;\n    while(cin >> V >> E >> T){\n        if(V == 0 && E == 0 && T == 0) break;\n        kase++;\n        memset(vis, 0, sizeof(vis));\n        for(int i = 1; i <= V; i++){\n            d[i].clear();\n        }\n        ans = 0;\n\n        int u, v;\n        for(int i = 0; i < E; i++){\n            cin >> u >> v;\n            d[u].push_back(v);\n            d[v].push_back(u);\n        }\n\n        int cnt = 0;\n        for(int i = 1; i <= V; i++){\n            odd = 0;\n            if(!d[i].empty() && !vis[i]){\n                dfs(i);\n                cnt++;\n                if(odd > 2) ans += (odd - 2) / 2;\n            }\n        }\n        ans += E;\n        ans += cnt - 1;\n        ans *= T;\n        if(ans < 0) cout << \"Case \" << kase << \": \" << 0 << endl;\n        else cout << \"Case \" << kase << \": \" << ans << endl;\n    }\n    return 0;\n}\n```","source":"_posts/Uva12118-Inspetor-s-Dilemma.md","raw":"---\ntitle: Uva12118-Inspetor's Dilemma-DFS求连通+欧拉路\ndate: 2018-12-17 18:36:53\ncategories:\n- ACM\n- 欧拉路\ntags:\n- 欧拉路\n---\nV个城市之间两两相连，给定E条需要走的边，走过一条边需要时间T。求走完所有的E条边需要的最少时间。E条边不一定在一个连通图中。\n竟然卡在``ifndef ONLINE_JUDGE``上好久，单词``ONLINE``手滑打成了``ONLIEN``，= =。吐血。\n\n*紫书第六章结束*\n<!--more-->\n# 链接\n题目链接[Uva12118-Inspetor's Dilemma](https://vjudge.net/problem/UVA-12118)\n参考[SingleK's Blog](https://blog.csdn.net/xiao_k666/article/details/79209697)精简了自己的代码。\n\n# 题解\n因为E条边不一定在一个连通图中，所以首先DFS遍历连通块，统计每一个连通块中度数为奇数的结点个数。若能满足构成欧拉路的条件，则一次“一笔画”就可以走完当前连通块中的边。若不能构成欧拉路（奇度数结点个数大于2），则通过加边的方式，使其可以构成欧拉路。n个连通块之间还需要n - 1条边连接。\n所以最后的所需要走过的边是E，加上添加边的个数，再加上连通块个数减1。\n\n*最后不要忘记乘以T得到总耗时 = =，以及当给定E为0时，结果会出现负数，要特判。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 15 Dec 17:21:07 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e3 + 7;\nint V, E, T;\nbool vis[maxn];\nvector<int> d[maxn];\nint ans;\nint odd;\n\nvoid dfs(int u){\n    vis[u] = 1;\n    if(d[u].size() % 2) odd++;\n    for(size_t i = 0; i < d[u].size(); i++){\n        int v = d[u][i];\n        if(!vis[v]){\n            dfs(v);\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    int kase = 0;\n    while(cin >> V >> E >> T){\n        if(V == 0 && E == 0 && T == 0) break;\n        kase++;\n        memset(vis, 0, sizeof(vis));\n        for(int i = 1; i <= V; i++){\n            d[i].clear();\n        }\n        ans = 0;\n\n        int u, v;\n        for(int i = 0; i < E; i++){\n            cin >> u >> v;\n            d[u].push_back(v);\n            d[v].push_back(u);\n        }\n\n        int cnt = 0;\n        for(int i = 1; i <= V; i++){\n            odd = 0;\n            if(!d[i].empty() && !vis[i]){\n                dfs(i);\n                cnt++;\n                if(odd > 2) ans += (odd - 2) / 2;\n            }\n        }\n        ans += E;\n        ans += cnt - 1;\n        ans *= T;\n        if(ans < 0) cout << \"Case \" << kase << \": \" << 0 << endl;\n        else cout << \"Case \" << kase << \": \" << ans << endl;\n    }\n    return 0;\n}\n```","slug":"Uva12118-Inspetor-s-Dilemma","published":1,"updated":"2019-08-20T14:42:20.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lm001130vnmld5814c","content":"<p>V个城市之间两两相连，给定E条需要走的边，走过一条边需要时间T。求走完所有的E条边需要的最少时间。E条边不一定在一个连通图中。<br>竟然卡在<code>ifndef ONLINE_JUDGE</code>上好久，单词<code>ONLINE</code>手滑打成了<code>ONLIEN</code>，= =。吐血。</p>\n<p><em>紫书第六章结束</em></p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-12118\" target=\"_blank\" rel=\"noopener\">Uva12118-Inspetor’s Dilemma</a><br>参考<a href=\"https://blog.csdn.net/xiao_k666/article/details/79209697\" target=\"_blank\" rel=\"noopener\">SingleK’s Blog</a>精简了自己的代码。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>因为E条边不一定在一个连通图中，所以首先DFS遍历连通块，统计每一个连通块中度数为奇数的结点个数。若能满足构成欧拉路的条件，则一次“一笔画”就可以走完当前连通块中的边。若不能构成欧拉路（奇度数结点个数大于2），则通过加边的方式，使其可以构成欧拉路。n个连通块之间还需要n - 1条边连接。<br>所以最后的所需要走过的边是E，加上添加边的个数，再加上连通块个数减1。</p>\n<p><em>最后不要忘记乘以T得到总耗时 = =，以及当给定E为0时，结果会出现负数，要特判。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 15 Dec 17:21:07 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e3</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> V, E, T;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> odd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[u].size() % <span class=\"number\">2</span>) odd++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; d[u].size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = d[u][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[v])&#123;</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> kase = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; V &gt;&gt; E &gt;&gt; T)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(V == <span class=\"number\">0</span> &amp;&amp; E == <span class=\"number\">0</span> &amp;&amp; T == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        kase++;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= V; i++)&#123;</span><br><span class=\"line\">            d[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; E; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">            d[u].push_back(v);</span><br><span class=\"line\">            d[v].push_back(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= V; i++)&#123;</span><br><span class=\"line\">            odd = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!d[i].empty() &amp;&amp; !vis[i])&#123;</span><br><span class=\"line\">                dfs(i);</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(odd &gt; <span class=\"number\">2</span>) ans += (odd - <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += E;</span><br><span class=\"line\">        ans += cnt - <span class=\"number\">1</span>;</span><br><span class=\"line\">        ans *= T;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans &lt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case \"</span> &lt;&lt; kase &lt;&lt; <span class=\"string\">\": \"</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case \"</span> &lt;&lt; kase &lt;&lt; <span class=\"string\">\": \"</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>V个城市之间两两相连，给定E条需要走的边，走过一条边需要时间T。求走完所有的E条边需要的最少时间。E条边不一定在一个连通图中。<br>竟然卡在<code>ifndef ONLINE_JUDGE</code>上好久，单词<code>ONLINE</code>手滑打成了<code>ONLIEN</code>，= =。吐血。</p>\n<p><em>紫书第六章结束</em></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-12118\" target=\"_blank\" rel=\"noopener\">Uva12118-Inspetor’s Dilemma</a><br>参考<a href=\"https://blog.csdn.net/xiao_k666/article/details/79209697\" target=\"_blank\" rel=\"noopener\">SingleK’s Blog</a>精简了自己的代码。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>因为E条边不一定在一个连通图中，所以首先DFS遍历连通块，统计每一个连通块中度数为奇数的结点个数。若能满足构成欧拉路的条件，则一次“一笔画”就可以走完当前连通块中的边。若不能构成欧拉路（奇度数结点个数大于2），则通过加边的方式，使其可以构成欧拉路。n个连通块之间还需要n - 1条边连接。<br>所以最后的所需要走过的边是E，加上添加边的个数，再加上连通块个数减1。</p>\n<p><em>最后不要忘记乘以T得到总耗时 = =，以及当给定E为0时，结果会出现负数，要特判。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 15 Dec 17:21:07 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e3</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> V, E, T;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> odd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[u].size() % <span class=\"number\">2</span>) odd++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; d[u].size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = d[u][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[v])&#123;</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> kase = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; V &gt;&gt; E &gt;&gt; T)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(V == <span class=\"number\">0</span> &amp;&amp; E == <span class=\"number\">0</span> &amp;&amp; T == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        kase++;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= V; i++)&#123;</span><br><span class=\"line\">            d[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; E; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">            d[u].push_back(v);</span><br><span class=\"line\">            d[v].push_back(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= V; i++)&#123;</span><br><span class=\"line\">            odd = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!d[i].empty() &amp;&amp; !vis[i])&#123;</span><br><span class=\"line\">                dfs(i);</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(odd &gt; <span class=\"number\">2</span>) ans += (odd - <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += E;</span><br><span class=\"line\">        ans += cnt - <span class=\"number\">1</span>;</span><br><span class=\"line\">        ans *= T;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans &lt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case \"</span> &lt;&lt; kase &lt;&lt; <span class=\"string\">\": \"</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case \"</span> &lt;&lt; kase &lt;&lt; <span class=\"string\">\": \"</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva12096-The SetStack Computer-STL","date":"2018-08-09T14:44:02.000Z","_content":"最近在看刘汝佳老师的《算法竞赛入门经典（第2版）》，收获很大，很多知识都在上面查漏补缺，书上有一道STL的例题，用到了stack、vector、map、set，而且“化集合为ID”的思路很好，记录一下。\n<!-- more -->\n# 链接\n[Uva12096-The SetStack Computer](https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3248)\n# 题目描述\n有一个专门为了集合运算而设计的“集合栈”计算机。该机器有一个初始为空的栈，并且支持一下操作。\n- PUSH:空集“{}”入栈。\n- DUP:把当前栈顶元素复制一份后再入栈。\n- UNION:出栈两个集合，然后把二者的并集入栈。\n- INTERSECT:出栈两个集合，然后把出栈的集合加入到后出栈的集合中，把结果入栈。\n\n每次操作后，输出栈顶集合的大小（即元素个数）。\n\n# 题解\n本题的集合并不是简单的整数集合或者字符串集合，而是集合的集合。为了方便为每个不同的集合分配一个唯一的ID，则每个集合都可以表示成所包含元素的ID的集合，这样就可以用STL的set<int> 来表示了，而整个栈则是一个stack<int>。map用来把集合映射成ID，vector则根据ID取集合。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu  9 Aug 16:19:36 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint t;\nint n;\ntypedef set<int> Set;\nmap<Set, int> mp;\nvector<Set> vec;\n\nint ID(Set st){\n    if(mp.count(st)) return mp[st];\n    vec.push_back(st);\n    return mp[st] = vec.size() - 1;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    cin >> t;\n    while(t--){\n        cin >> n;\n        stack<int> stc;\n        string s;\n        vec.clear();\n        mp.clear();\n        for(int i = 0; i < n; i++){\n            cin >> s;\n            if(s[0] == 'P') stc.push(ID(Set ()));\n            else if(s[0] == 'D') stc.push(stc.top());\n            else{\n                Set st1 = vec[stc.top()]; stc.pop();\n                Set st2 = vec[stc.top()]; stc.pop();\n                Set st;\n                if(s[0] == 'U') set_union(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));\n                if(s[0] == 'I') set_intersection(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));\n                if(s[0] == 'A') {st = st2; st.insert(ID(st1));}\n                stc.push(ID(st));\n            }\n            cout << vec[stc.top()].size() << endl;\n        }\n        cout << \"***\" << endl;\n    }\n    \n    return 0;\n}\n```\n# 补充\n## 并集\n对两个集合取交集可以使用std::set_union，该函数需要两对迭代器，以及一个输出迭代器。\n```C++\nset<int> st1;\nset<int> st2;\nset<int> st;\nset_union(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));\n```\n## 交集\n对两个集合取交集可以使用std::set_intersection，该函数需要两对迭代器，以及一个输出迭代器。\n```C++\nset<int> st1;\nset<int> st2;\nset<int> st;\nset_intersection(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));\n```\n类似的还有：\n- set_difference:差集，从第一个区间去除第二个区间的元素。\n- set_merge:合并，与set_union不同，set_merge不会去除重复的元素（不能用于set，可用于vector）。\n\n注意：set_union和set_intersection等也可用于vector，但必须是排好序的vector。\n","source":"_posts/Uva12096-The-SetStack-Computer-STL.md","raw":"---\ntitle: Uva12096-The SetStack Computer-STL\ndate: 2018-08-09 22:44:02\ncategories:\n- ACM\n- map\ntags:\n- stack\n- STL\n---\n最近在看刘汝佳老师的《算法竞赛入门经典（第2版）》，收获很大，很多知识都在上面查漏补缺，书上有一道STL的例题，用到了stack、vector、map、set，而且“化集合为ID”的思路很好，记录一下。\n<!-- more -->\n# 链接\n[Uva12096-The SetStack Computer](https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3248)\n# 题目描述\n有一个专门为了集合运算而设计的“集合栈”计算机。该机器有一个初始为空的栈，并且支持一下操作。\n- PUSH:空集“{}”入栈。\n- DUP:把当前栈顶元素复制一份后再入栈。\n- UNION:出栈两个集合，然后把二者的并集入栈。\n- INTERSECT:出栈两个集合，然后把出栈的集合加入到后出栈的集合中，把结果入栈。\n\n每次操作后，输出栈顶集合的大小（即元素个数）。\n\n# 题解\n本题的集合并不是简单的整数集合或者字符串集合，而是集合的集合。为了方便为每个不同的集合分配一个唯一的ID，则每个集合都可以表示成所包含元素的ID的集合，这样就可以用STL的set<int> 来表示了，而整个栈则是一个stack<int>。map用来把集合映射成ID，vector则根据ID取集合。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu  9 Aug 16:19:36 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint t;\nint n;\ntypedef set<int> Set;\nmap<Set, int> mp;\nvector<Set> vec;\n\nint ID(Set st){\n    if(mp.count(st)) return mp[st];\n    vec.push_back(st);\n    return mp[st] = vec.size() - 1;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    cin >> t;\n    while(t--){\n        cin >> n;\n        stack<int> stc;\n        string s;\n        vec.clear();\n        mp.clear();\n        for(int i = 0; i < n; i++){\n            cin >> s;\n            if(s[0] == 'P') stc.push(ID(Set ()));\n            else if(s[0] == 'D') stc.push(stc.top());\n            else{\n                Set st1 = vec[stc.top()]; stc.pop();\n                Set st2 = vec[stc.top()]; stc.pop();\n                Set st;\n                if(s[0] == 'U') set_union(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));\n                if(s[0] == 'I') set_intersection(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));\n                if(s[0] == 'A') {st = st2; st.insert(ID(st1));}\n                stc.push(ID(st));\n            }\n            cout << vec[stc.top()].size() << endl;\n        }\n        cout << \"***\" << endl;\n    }\n    \n    return 0;\n}\n```\n# 补充\n## 并集\n对两个集合取交集可以使用std::set_union，该函数需要两对迭代器，以及一个输出迭代器。\n```C++\nset<int> st1;\nset<int> st2;\nset<int> st;\nset_union(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));\n```\n## 交集\n对两个集合取交集可以使用std::set_intersection，该函数需要两对迭代器，以及一个输出迭代器。\n```C++\nset<int> st1;\nset<int> st2;\nset<int> st;\nset_intersection(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));\n```\n类似的还有：\n- set_difference:差集，从第一个区间去除第二个区间的元素。\n- set_merge:合并，与set_union不同，set_merge不会去除重复的元素（不能用于set，可用于vector）。\n\n注意：set_union和set_intersection等也可用于vector，但必须是排好序的vector。\n","slug":"Uva12096-The-SetStack-Computer-STL","published":1,"updated":"2019-08-20T14:42:35.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lm001230vnvail92jh","content":"<p>最近在看刘汝佳老师的《算法竞赛入门经典（第2版）》，收获很大，很多知识都在上面查漏补缺，书上有一道STL的例题，用到了stack、vector、map、set，而且“化集合为ID”的思路很好，记录一下。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3248\" target=\"_blank\" rel=\"noopener\">Uva12096-The SetStack Computer</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>有一个专门为了集合运算而设计的“集合栈”计算机。该机器有一个初始为空的栈，并且支持一下操作。</p>\n<ul>\n<li>PUSH:空集“{}”入栈。</li>\n<li>DUP:把当前栈顶元素复制一份后再入栈。</li>\n<li>UNION:出栈两个集合，然后把二者的并集入栈。</li>\n<li>INTERSECT:出栈两个集合，然后把出栈的集合加入到后出栈的集合中，把结果入栈。</li>\n</ul>\n<p>每次操作后，输出栈顶集合的大小（即元素个数）。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>本题的集合并不是简单的整数集合或者字符串集合，而是集合的集合。为了方便为每个不同的集合分配一个唯一的ID，则每个集合都可以表示成所包含元素的ID的集合，这样就可以用STL的set<int> 来表示了，而整个栈则是一个stack<int>。map用来把集合映射成ID，vector则根据ID取集合。</int></int></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu  9 Aug 16:19:36 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; Set;</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;Set, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Set&gt; vec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ID</span><span class=\"params\">(Set st)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mp.count(st)) <span class=\"keyword\">return</span> mp[st];</span><br><span class=\"line\">    vec.push_back(st);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mp[st] = vec.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; stc;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        mp.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'P'</span>) stc.push(ID(Set ()));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'D'</span>) stc.push(stc.top());</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Set st1 = vec[stc.top()]; stc.pop();</span><br><span class=\"line\">                Set st2 = vec[stc.top()]; stc.pop();</span><br><span class=\"line\">                Set st;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'U'</span>) set_union(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'I'</span>) set_intersection(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'A'</span>) &#123;st = st2; st.insert(ID(st1));&#125;</span><br><span class=\"line\">                stc.push(ID(st));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; vec[stc.top()].size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"***\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"并集\"><a href=\"#并集\" class=\"headerlink\" title=\"并集\"></a>并集</h2><p>对两个集合取交集可以使用std::set_union，该函数需要两对迭代器，以及一个输出迭代器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st1;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st2;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">set_union(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交集\"><a href=\"#交集\" class=\"headerlink\" title=\"交集\"></a>交集</h2><p>对两个集合取交集可以使用std::set_intersection，该函数需要两对迭代器，以及一个输出迭代器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st1;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st2;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">set_intersection(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));</span><br></pre></td></tr></table></figure>\n\n<p>类似的还有：</p>\n<ul>\n<li>set_difference:差集，从第一个区间去除第二个区间的元素。</li>\n<li>set_merge:合并，与set_union不同，set_merge不会去除重复的元素（不能用于set，可用于vector）。</li>\n</ul>\n<p>注意：set_union和set_intersection等也可用于vector，但必须是排好序的vector。</p>\n","site":{"data":{}},"excerpt":"<p>最近在看刘汝佳老师的《算法竞赛入门经典（第2版）》，收获很大，很多知识都在上面查漏补缺，书上有一道STL的例题，用到了stack、vector、map、set，而且“化集合为ID”的思路很好，记录一下。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3248\" target=\"_blank\" rel=\"noopener\">Uva12096-The SetStack Computer</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>有一个专门为了集合运算而设计的“集合栈”计算机。该机器有一个初始为空的栈，并且支持一下操作。</p>\n<ul>\n<li>PUSH:空集“{}”入栈。</li>\n<li>DUP:把当前栈顶元素复制一份后再入栈。</li>\n<li>UNION:出栈两个集合，然后把二者的并集入栈。</li>\n<li>INTERSECT:出栈两个集合，然后把出栈的集合加入到后出栈的集合中，把结果入栈。</li>\n</ul>\n<p>每次操作后，输出栈顶集合的大小（即元素个数）。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>本题的集合并不是简单的整数集合或者字符串集合，而是集合的集合。为了方便为每个不同的集合分配一个唯一的ID，则每个集合都可以表示成所包含元素的ID的集合，这样就可以用STL的set<int> 来表示了，而整个栈则是一个stack<int>。map用来把集合映射成ID，vector则根据ID取集合。</int></int></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu  9 Aug 16:19:36 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; Set;</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;Set, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Set&gt; vec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ID</span><span class=\"params\">(Set st)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mp.count(st)) <span class=\"keyword\">return</span> mp[st];</span><br><span class=\"line\">    vec.push_back(st);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mp[st] = vec.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; stc;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        mp.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'P'</span>) stc.push(ID(Set ()));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'D'</span>) stc.push(stc.top());</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Set st1 = vec[stc.top()]; stc.pop();</span><br><span class=\"line\">                Set st2 = vec[stc.top()]; stc.pop();</span><br><span class=\"line\">                Set st;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'U'</span>) set_union(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'I'</span>) set_intersection(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'A'</span>) &#123;st = st2; st.insert(ID(st1));&#125;</span><br><span class=\"line\">                stc.push(ID(st));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; vec[stc.top()].size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"***\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"并集\"><a href=\"#并集\" class=\"headerlink\" title=\"并集\"></a>并集</h2><p>对两个集合取交集可以使用std::set_union，该函数需要两对迭代器，以及一个输出迭代器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st1;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st2;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">set_union(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交集\"><a href=\"#交集\" class=\"headerlink\" title=\"交集\"></a>交集</h2><p>对两个集合取交集可以使用std::set_intersection，该函数需要两对迭代器，以及一个输出迭代器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st1;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st2;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">set_intersection(st1.begin(), st1.end(), st2.begin(), st2.end(), inserter(st, st.begin()));</span><br></pre></td></tr></table></figure>\n\n<p>类似的还有：</p>\n<ul>\n<li>set_difference:差集，从第一个区间去除第二个区间的元素。</li>\n<li>set_merge:合并，与set_union不同，set_merge不会去除重复的元素（不能用于set，可用于vector）。</li>\n</ul>\n<p>注意：set_union和set_intersection等也可用于vector，但必须是排好序的vector。</p>"},{"title":"Uva12166-Equilibrium Mobile-思维+二叉树","date":"2018-12-04T02:40:03.000Z","_content":"吹爆思维好题！给定一个深度不超过16的二叉树，代表一个天平，天平两端可能是递归的子天平也可能是砝码。每个砝码的质量已知，求至少修改多少个砝码的质量才能让天平平衡。\n![balance](/balance.png)\n如图，把7改成3天平平衡。\n<!--more-->\n# 链接\n题目链接[Uva12166-Equilibrium Mobile](https://vjudge.net/problem/UVA-12166)\n\n参考链接[crazysillynerd's csdn blog](https://blog.csdn.net/crazysillynerd/article/details/43876123)\n\n# 题解\n想要修改砝码使天平平衡，需要找其中一个砝码作为基准，用它来调整整个天平。假设基准砝码的质量为w，它在二叉树中的深度为d，则用它调整后的整个天平的重量为$w * pow(2，d)$。\n可能存在一些砝码，当以他们为基准时，调整后天平的总重量相同。那么这些砝码的数量就代表了保持不变的砝码数量，总砝码数量减去保持不变的砝码数量就是需要修改的砝码数量。\n用DFS构建二叉树，对每一个叶节点计算调整后的天平总重量；用STL中的map来维护不同总重量所代表的砝码个数。\n\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue  4 Dec 10:02:37 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint t;\nint sum;\nmap<long long, int> mp;\nstring s;\n\nvoid dfs(int st, int ed, int depth){\n    //cout << st << \" \" << ed << \" \" << depth << endl;\n    if(s[st] == '['){\n        int p = 0;\n        for(int i = st + 1; i <= ed; i++){\n            if(s[i] == '[') p++;\n            if(s[i] == ']') p--;\n            if(s[i] == ',' && p == 0){\n                //cout << st + 1 << \" \" << i - 1 << \" \" << depth + 1 << endl;\n                dfs(st + 1, i - 1, depth + 1);\n                //cout << i + 1 << \" \" << ed - 1 << \" \" << depth + 1 << endl;\n                dfs(i + 1, ed - 1, depth + 1);\n            }\n        }\n    }\n    else{\n        long long w = 0;\n        for(int i = st; i <= ed; i++){\n            w *= 10;\n            w += s[i] - '0';\n        }\n        //cout << w << endl;\n        sum++;\n        mp[w << depth]++;\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    cin >> t;\n    while(t--){\n        mp.clear();\n        sum = 0;\n\n        cin >> s;\n        dfs(0, s.length() - 1, 0);\n\n        int ans = 0;\n        for(auto x : mp){\n            ans = max(ans, x.second);\n        }\n        cout << sum - ans << endl;\n    }\n    return 0;\n}\n```\n","source":"_posts/Uva12166-Equilibrium-Mobile.md","raw":"---\ntitle: Uva12166-Equilibrium Mobile-思维+二叉树\ndate: 2018-12-04 10:40:03\ncategories:\n- ACM\n- 树\ntags:\n- 思维\n- 二叉树\n---\n吹爆思维好题！给定一个深度不超过16的二叉树，代表一个天平，天平两端可能是递归的子天平也可能是砝码。每个砝码的质量已知，求至少修改多少个砝码的质量才能让天平平衡。\n![balance](/balance.png)\n如图，把7改成3天平平衡。\n<!--more-->\n# 链接\n题目链接[Uva12166-Equilibrium Mobile](https://vjudge.net/problem/UVA-12166)\n\n参考链接[crazysillynerd's csdn blog](https://blog.csdn.net/crazysillynerd/article/details/43876123)\n\n# 题解\n想要修改砝码使天平平衡，需要找其中一个砝码作为基准，用它来调整整个天平。假设基准砝码的质量为w，它在二叉树中的深度为d，则用它调整后的整个天平的重量为$w * pow(2，d)$。\n可能存在一些砝码，当以他们为基准时，调整后天平的总重量相同。那么这些砝码的数量就代表了保持不变的砝码数量，总砝码数量减去保持不变的砝码数量就是需要修改的砝码数量。\n用DFS构建二叉树，对每一个叶节点计算调整后的天平总重量；用STL中的map来维护不同总重量所代表的砝码个数。\n\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue  4 Dec 10:02:37 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint t;\nint sum;\nmap<long long, int> mp;\nstring s;\n\nvoid dfs(int st, int ed, int depth){\n    //cout << st << \" \" << ed << \" \" << depth << endl;\n    if(s[st] == '['){\n        int p = 0;\n        for(int i = st + 1; i <= ed; i++){\n            if(s[i] == '[') p++;\n            if(s[i] == ']') p--;\n            if(s[i] == ',' && p == 0){\n                //cout << st + 1 << \" \" << i - 1 << \" \" << depth + 1 << endl;\n                dfs(st + 1, i - 1, depth + 1);\n                //cout << i + 1 << \" \" << ed - 1 << \" \" << depth + 1 << endl;\n                dfs(i + 1, ed - 1, depth + 1);\n            }\n        }\n    }\n    else{\n        long long w = 0;\n        for(int i = st; i <= ed; i++){\n            w *= 10;\n            w += s[i] - '0';\n        }\n        //cout << w << endl;\n        sum++;\n        mp[w << depth]++;\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    cin >> t;\n    while(t--){\n        mp.clear();\n        sum = 0;\n\n        cin >> s;\n        dfs(0, s.length() - 1, 0);\n\n        int ans = 0;\n        for(auto x : mp){\n            ans = max(ans, x.second);\n        }\n        cout << sum - ans << endl;\n    }\n    return 0;\n}\n```\n","slug":"Uva12166-Equilibrium-Mobile","published":1,"updated":"2019-08-20T14:42:11.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ln001330vnhv2ka6i0","content":"<p>吹爆思维好题！给定一个深度不超过16的二叉树，代表一个天平，天平两端可能是递归的子天平也可能是砝码。每个砝码的质量已知，求至少修改多少个砝码的质量才能让天平平衡。<br><img src=\"/2018/12/04/Uva12166-Equilibrium-Mobile/balance.png\" alt=\"balance\"><br>如图，把7改成3天平平衡。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-12166\" target=\"_blank\" rel=\"noopener\">Uva12166-Equilibrium Mobile</a></p>\n<p>参考链接<a href=\"https://blog.csdn.net/crazysillynerd/article/details/43876123\" target=\"_blank\" rel=\"noopener\">crazysillynerd’s csdn blog</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>想要修改砝码使天平平衡，需要找其中一个砝码作为基准，用它来调整整个天平。假设基准砝码的质量为w，它在二叉树中的深度为d，则用它调整后的整个天平的重量为$w * pow(2，d)$。<br>可能存在一些砝码，当以他们为基准时，调整后天平的总重量相同。那么这些砝码的数量就代表了保持不变的砝码数量，总砝码数量减去保持不变的砝码数量就是需要修改的砝码数量。<br>用DFS构建二叉树，对每一个叶节点计算调整后的天平总重量；用STL中的map来维护不同总重量所代表的砝码个数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue  4 Dec 10:02:37 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> st, <span class=\"keyword\">int</span> ed, <span class=\"keyword\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; st &lt;&lt; \" \" &lt;&lt; ed &lt;&lt; \" \" &lt;&lt; depth &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[st] == <span class=\"string\">'['</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st + <span class=\"number\">1</span>; i &lt;= ed; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'['</span>) p++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">']'</span>) p--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">','</span> &amp;&amp; p == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; st + 1 &lt;&lt; \" \" &lt;&lt; i - 1 &lt;&lt; \" \" &lt;&lt; depth + 1 &lt;&lt; endl;</span></span><br><span class=\"line\">                dfs(st + <span class=\"number\">1</span>, i - <span class=\"number\">1</span>, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; i + 1 &lt;&lt; \" \" &lt;&lt; ed - 1 &lt;&lt; \" \" &lt;&lt; depth + 1 &lt;&lt; endl;</span></span><br><span class=\"line\">                dfs(i + <span class=\"number\">1</span>, ed - <span class=\"number\">1</span>, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> w = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st; i &lt;= ed; i++)&#123;</span><br><span class=\"line\">            w *= <span class=\"number\">10</span>;</span><br><span class=\"line\">            w += s[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; w &lt;&lt; endl;</span></span><br><span class=\"line\">        sum++;</span><br><span class=\"line\">        mp[w &lt;&lt; depth]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        mp.clear();</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>, s.length() - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : mp)&#123;</span><br><span class=\"line\">            ans = max(ans, x.second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; sum - ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>吹爆思维好题！给定一个深度不超过16的二叉树，代表一个天平，天平两端可能是递归的子天平也可能是砝码。每个砝码的质量已知，求至少修改多少个砝码的质量才能让天平平衡。<br><img src=\"/2018/12/04/Uva12166-Equilibrium-Mobile/balance.png\" alt=\"balance\"><br>如图，把7改成3天平平衡。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-12166\" target=\"_blank\" rel=\"noopener\">Uva12166-Equilibrium Mobile</a></p>\n<p>参考链接<a href=\"https://blog.csdn.net/crazysillynerd/article/details/43876123\" target=\"_blank\" rel=\"noopener\">crazysillynerd’s csdn blog</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>想要修改砝码使天平平衡，需要找其中一个砝码作为基准，用它来调整整个天平。假设基准砝码的质量为w，它在二叉树中的深度为d，则用它调整后的整个天平的重量为$w * pow(2，d)$。<br>可能存在一些砝码，当以他们为基准时，调整后天平的总重量相同。那么这些砝码的数量就代表了保持不变的砝码数量，总砝码数量减去保持不变的砝码数量就是需要修改的砝码数量。<br>用DFS构建二叉树，对每一个叶节点计算调整后的天平总重量；用STL中的map来维护不同总重量所代表的砝码个数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue  4 Dec 10:02:37 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> st, <span class=\"keyword\">int</span> ed, <span class=\"keyword\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; st &lt;&lt; \" \" &lt;&lt; ed &lt;&lt; \" \" &lt;&lt; depth &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[st] == <span class=\"string\">'['</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st + <span class=\"number\">1</span>; i &lt;= ed; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'['</span>) p++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">']'</span>) p--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">','</span> &amp;&amp; p == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; st + 1 &lt;&lt; \" \" &lt;&lt; i - 1 &lt;&lt; \" \" &lt;&lt; depth + 1 &lt;&lt; endl;</span></span><br><span class=\"line\">                dfs(st + <span class=\"number\">1</span>, i - <span class=\"number\">1</span>, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; i + 1 &lt;&lt; \" \" &lt;&lt; ed - 1 &lt;&lt; \" \" &lt;&lt; depth + 1 &lt;&lt; endl;</span></span><br><span class=\"line\">                dfs(i + <span class=\"number\">1</span>, ed - <span class=\"number\">1</span>, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> w = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st; i &lt;= ed; i++)&#123;</span><br><span class=\"line\">            w *= <span class=\"number\">10</span>;</span><br><span class=\"line\">            w += s[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; w &lt;&lt; endl;</span></span><br><span class=\"line\">        sum++;</span><br><span class=\"line\">        mp[w &lt;&lt; depth]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        mp.clear();</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>, s.length() - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : mp)&#123;</span><br><span class=\"line\">            ans = max(ans, x.second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; sum - ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva122-二叉树构建与层次遍历","date":"2018-09-21T10:36:04.000Z","_content":"根据输入构建一颗二叉树并输出层次遍历的结果，二叉树的构建有结构体和数组两种形式。\n<!--more-->\n# 链接\n[Uva122-Trees on the level](https://vjudge.net/problem/UVA-122)\n# 题目描述\n以一组$(n, s)$的形式给定一棵二叉树，其中$n$是从根节点出发以$s$为路径到达的节点的权值。要求输出这棵二叉树的层次遍历结果。\n# 题解\n层次遍历直接用$BFS$就可以得到。关键是构建出二叉树，构建二叉树的方式有两种：一种是采用动态结构，即以结构体来表示一个节点，储存这个节点的权值、左右子树的信息；另一种是采用静态结构，即用数组来储存节点信息，例如$val[maxn]$，$left[maxn]$，$right[maxn]$分别存储节点的权值和左右子树信息。\n# 代码\n## 动态结构\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu 20 Sep 22:23:49 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 307;\nchar s[maxn];\nbool failed;\n\nstruct Node{\n    int v;\n    Node *left, *right;\n    bool h_val;\n    Node():left(NULL), right(NULL), h_val(false){}; \n};\n\nNode* root;\n\nvoid addnode(char* s, int v){\n    int n = strlen(s);\n    Node* u = root;\n    for(int i = 0; i < n - 1; i++){\n        if(s[i] == 'L'){\n            if(u->left == NULL) u->left = new Node();\n            u = u->left;\n        }\n        else if(s[i] == 'R'){\n            if(u->right == NULL) u->right = new Node();\n            u = u->right;\n        }\n    }\n    if(u->h_val) failed = true;\n    u->v = v;\n    u->h_val = true;\n}\n\nbool read_input(){\n    int v;\n    failed = false;\n    root = new Node();\n    while(1){\n        if(scanf(\"%s\", s) == EOF) return false;\n        if(strcmp(s, \"()\") == 0) break;\n        sscanf(s + 1, \"%d\", &v);\n        addnode(strchr(s, ',') + 1, v);\n    }\n    return true;\n}\n\nvoid bfs(){\n    vector<int> vec;\n    queue<Node*> que;\n    que.push(root);\n    while(!que.empty()){\n        Node* u = que.front();\n        que.pop();\n        if(!u->h_val){\n            cout << \"not complete\" << endl;\n            return;\n        }\n        vec.push_back(u->v);\n        if(u->left != NULL) que.push(u->left);\n        if(u->right != NULL) que.push(u->right);\n    }\n    for(size_t i = 0; i < vec.size(); i++){\n        if(i == 0) cout << vec[i];\n        else cout << \" \" << vec[i];\n    }\n    cout << endl;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(1){\n        if(read_input()){\n            if(failed) cout << \"not complete\" << endl;\n            else bfs();\n        }\n        else{\n            break;\n        }\n    }\n    return 0;\n}\n```\n## 静态结构\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 21 Sep 14:10:14 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 307;\nint leftt[maxn], rightt[maxn], val[maxn];\nbool h_val[maxn], failed;\nchar s[maxn];\nint root, cnt;\n\nvoid bfs(){\n    vector<int> vec;\n    queue<int> que;\n    que.push(root);\n    while(!que.empty()){\n        int v = que.front();\n        que.pop();\n        if(!h_val[v]){\n            cout << \"not complete\" << endl;\n            return;\n        }\n        vec.push_back(val[v]);\n        if(leftt[v]) que.push(leftt[v]);\n        if(rightt[v]) que.push(rightt[v]);\n    }\n    for(size_t i = 0; i < vec.size(); i++){\n        if(i == 0) cout << vec[i];\n        else cout << \" \" << vec[i];\n    }\n    cout << endl;\n}\n\nvoid addnode(char* s, int v){\n    int n = strlen(s);\n    int u = root;\n    for(int i = 0; i < n - 1; i++){\n        if(s[i] == 'L'){\n            if(leftt[u] == 0){\n                cnt++;\n                leftt[u] = cnt;\n            }\n            u = leftt[u];\n        }\n        else if(s[i] == 'R'){\n            if(rightt[u] == 0){\n                cnt++;\n                rightt[u] = cnt;\n            }\n            u = rightt[u];\n        }\n    }\n    if(h_val[u]) failed = true;\n    val[u] = v;\n    h_val[u] = true;\n}\n\nbool read_input(){\n    memset(h_val, false, sizeof(h_val));\n    memset(leftt, 0, sizeof(leftt));\n    memset(rightt, 0, sizeof(rightt));\n    int v;\n    root = 1;\n    cnt = 1;\n    failed = false;\n    leftt[root] = 0, rightt[root] = 0; \n    while(1){\n        if(scanf(\"%s\", s) == EOF) return false;\n        if(strcmp(s, \"()\") == 0) break;\n        sscanf(s + 1, \"%d\", &v);\n        addnode(strchr(s, ',') + 1, v);\n    }\n    return true;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(1){\n        if(read_input()){\n            if(failed) cout << \"not complete\" << endl;\n            else bfs();\n        }\n        else\n            break;\n    }\n    \n    return 0;\n}\n```","source":"_posts/Uva122-二叉树构建与层次遍历.md","raw":"---\ntitle: Uva122-二叉树构建与层次遍历\ndate: 2018-09-21 18:36:04\ncategories:\n- ACM\n- 树\ntags:\n- 二叉树\n- BFS\n---\n根据输入构建一颗二叉树并输出层次遍历的结果，二叉树的构建有结构体和数组两种形式。\n<!--more-->\n# 链接\n[Uva122-Trees on the level](https://vjudge.net/problem/UVA-122)\n# 题目描述\n以一组$(n, s)$的形式给定一棵二叉树，其中$n$是从根节点出发以$s$为路径到达的节点的权值。要求输出这棵二叉树的层次遍历结果。\n# 题解\n层次遍历直接用$BFS$就可以得到。关键是构建出二叉树，构建二叉树的方式有两种：一种是采用动态结构，即以结构体来表示一个节点，储存这个节点的权值、左右子树的信息；另一种是采用静态结构，即用数组来储存节点信息，例如$val[maxn]$，$left[maxn]$，$right[maxn]$分别存储节点的权值和左右子树信息。\n# 代码\n## 动态结构\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu 20 Sep 22:23:49 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 307;\nchar s[maxn];\nbool failed;\n\nstruct Node{\n    int v;\n    Node *left, *right;\n    bool h_val;\n    Node():left(NULL), right(NULL), h_val(false){}; \n};\n\nNode* root;\n\nvoid addnode(char* s, int v){\n    int n = strlen(s);\n    Node* u = root;\n    for(int i = 0; i < n - 1; i++){\n        if(s[i] == 'L'){\n            if(u->left == NULL) u->left = new Node();\n            u = u->left;\n        }\n        else if(s[i] == 'R'){\n            if(u->right == NULL) u->right = new Node();\n            u = u->right;\n        }\n    }\n    if(u->h_val) failed = true;\n    u->v = v;\n    u->h_val = true;\n}\n\nbool read_input(){\n    int v;\n    failed = false;\n    root = new Node();\n    while(1){\n        if(scanf(\"%s\", s) == EOF) return false;\n        if(strcmp(s, \"()\") == 0) break;\n        sscanf(s + 1, \"%d\", &v);\n        addnode(strchr(s, ',') + 1, v);\n    }\n    return true;\n}\n\nvoid bfs(){\n    vector<int> vec;\n    queue<Node*> que;\n    que.push(root);\n    while(!que.empty()){\n        Node* u = que.front();\n        que.pop();\n        if(!u->h_val){\n            cout << \"not complete\" << endl;\n            return;\n        }\n        vec.push_back(u->v);\n        if(u->left != NULL) que.push(u->left);\n        if(u->right != NULL) que.push(u->right);\n    }\n    for(size_t i = 0; i < vec.size(); i++){\n        if(i == 0) cout << vec[i];\n        else cout << \" \" << vec[i];\n    }\n    cout << endl;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(1){\n        if(read_input()){\n            if(failed) cout << \"not complete\" << endl;\n            else bfs();\n        }\n        else{\n            break;\n        }\n    }\n    return 0;\n}\n```\n## 静态结构\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 21 Sep 14:10:14 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 307;\nint leftt[maxn], rightt[maxn], val[maxn];\nbool h_val[maxn], failed;\nchar s[maxn];\nint root, cnt;\n\nvoid bfs(){\n    vector<int> vec;\n    queue<int> que;\n    que.push(root);\n    while(!que.empty()){\n        int v = que.front();\n        que.pop();\n        if(!h_val[v]){\n            cout << \"not complete\" << endl;\n            return;\n        }\n        vec.push_back(val[v]);\n        if(leftt[v]) que.push(leftt[v]);\n        if(rightt[v]) que.push(rightt[v]);\n    }\n    for(size_t i = 0; i < vec.size(); i++){\n        if(i == 0) cout << vec[i];\n        else cout << \" \" << vec[i];\n    }\n    cout << endl;\n}\n\nvoid addnode(char* s, int v){\n    int n = strlen(s);\n    int u = root;\n    for(int i = 0; i < n - 1; i++){\n        if(s[i] == 'L'){\n            if(leftt[u] == 0){\n                cnt++;\n                leftt[u] = cnt;\n            }\n            u = leftt[u];\n        }\n        else if(s[i] == 'R'){\n            if(rightt[u] == 0){\n                cnt++;\n                rightt[u] = cnt;\n            }\n            u = rightt[u];\n        }\n    }\n    if(h_val[u]) failed = true;\n    val[u] = v;\n    h_val[u] = true;\n}\n\nbool read_input(){\n    memset(h_val, false, sizeof(h_val));\n    memset(leftt, 0, sizeof(leftt));\n    memset(rightt, 0, sizeof(rightt));\n    int v;\n    root = 1;\n    cnt = 1;\n    failed = false;\n    leftt[root] = 0, rightt[root] = 0; \n    while(1){\n        if(scanf(\"%s\", s) == EOF) return false;\n        if(strcmp(s, \"()\") == 0) break;\n        sscanf(s + 1, \"%d\", &v);\n        addnode(strchr(s, ',') + 1, v);\n    }\n    return true;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(1){\n        if(read_input()){\n            if(failed) cout << \"not complete\" << endl;\n            else bfs();\n        }\n        else\n            break;\n    }\n    \n    return 0;\n}\n```","slug":"Uva122-二叉树构建与层次遍历","published":1,"updated":"2019-08-20T14:47:16.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ln001430vnkpvyxosb","content":"<p>根据输入构建一颗二叉树并输出层次遍历的结果，二叉树的构建有结构体和数组两种形式。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-122\" target=\"_blank\" rel=\"noopener\">Uva122-Trees on the level</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>以一组$(n, s)$的形式给定一棵二叉树，其中$n$是从根节点出发以$s$为路径到达的节点的权值。要求输出这棵二叉树的层次遍历结果。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>层次遍历直接用$BFS$就可以得到。关键是构建出二叉树，构建二叉树的方式有两种：一种是采用动态结构，即以结构体来表示一个节点，储存这个节点的权值、左右子树的信息；另一种是采用静态结构，即用数组来储存节点信息，例如$val[maxn]$，$left[maxn]$，$right[maxn]$分别存储节点的权值和左右子树信息。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"动态结构\"><a href=\"#动态结构\" class=\"headerlink\" title=\"动态结构\"></a>动态结构</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu 20 Sep 22:23:49 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">307</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> failed;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">    Node *left, *right;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> h_val;</span><br><span class=\"line\">    Node():left(<span class=\"literal\">NULL</span>), right(<span class=\"literal\">NULL</span>), h_val(<span class=\"literal\">false</span>)&#123;&#125;; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Node* root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addnode</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    Node* u = root;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'L'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(u-&gt;left == <span class=\"literal\">NULL</span>) u-&gt;left = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">            u = u-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'R'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(u-&gt;right == <span class=\"literal\">NULL</span>) u-&gt;right = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">            u = u-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u-&gt;h_val) failed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    u-&gt;v = v;</span><br><span class=\"line\">    u-&gt;h_val = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">read_input</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    root = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s) == EOF) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\"()\"</span>) == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(s + <span class=\"number\">1</span>, <span class=\"string\">\"%d\"</span>, &amp;v);</span><br><span class=\"line\">        addnode(<span class=\"built_in\">strchr</span>(s, <span class=\"string\">','</span>) + <span class=\"number\">1</span>, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node*&gt; que;</span><br><span class=\"line\">    que.push(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node* u = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!u-&gt;h_val)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"not complete\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec.push_back(u-&gt;v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u-&gt;left != <span class=\"literal\">NULL</span>) que.push(u-&gt;left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u-&gt;right != <span class=\"literal\">NULL</span>) que.push(u-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(read_input())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(failed) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"not complete\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> bfs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态结构\"><a href=\"#静态结构\" class=\"headerlink\" title=\"静态结构\"></a>静态结构</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 21 Sep 14:10:14 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">307</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> leftt[maxn], rightt[maxn], val[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> h_val[maxn], failed;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> root, cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">    que.push(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!h_val[v])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"not complete\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec.push_back(val[v]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leftt[v]) que.push(leftt[v]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rightt[v]) que.push(rightt[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addnode</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u = root;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'L'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(leftt[u] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                leftt[u] = cnt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            u = leftt[u];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'R'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rightt[u] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                rightt[u] = cnt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            u = rightt[u];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(h_val[u]) failed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    val[u] = v;</span><br><span class=\"line\">    h_val[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">read_input</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(h_val, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(h_val));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(leftt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(leftt));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(rightt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(rightt));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">    root = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    leftt[root] = <span class=\"number\">0</span>, rightt[root] = <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s) == EOF) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\"()\"</span>) == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(s + <span class=\"number\">1</span>, <span class=\"string\">\"%d\"</span>, &amp;v);</span><br><span class=\"line\">        addnode(<span class=\"built_in\">strchr</span>(s, <span class=\"string\">','</span>) + <span class=\"number\">1</span>, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(read_input())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(failed) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"not complete\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> bfs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>根据输入构建一颗二叉树并输出层次遍历的结果，二叉树的构建有结构体和数组两种形式。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-122\" target=\"_blank\" rel=\"noopener\">Uva122-Trees on the level</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>以一组$(n, s)$的形式给定一棵二叉树，其中$n$是从根节点出发以$s$为路径到达的节点的权值。要求输出这棵二叉树的层次遍历结果。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>层次遍历直接用$BFS$就可以得到。关键是构建出二叉树，构建二叉树的方式有两种：一种是采用动态结构，即以结构体来表示一个节点，储存这个节点的权值、左右子树的信息；另一种是采用静态结构，即用数组来储存节点信息，例如$val[maxn]$，$left[maxn]$，$right[maxn]$分别存储节点的权值和左右子树信息。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"动态结构\"><a href=\"#动态结构\" class=\"headerlink\" title=\"动态结构\"></a>动态结构</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu 20 Sep 22:23:49 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">307</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> failed;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">    Node *left, *right;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> h_val;</span><br><span class=\"line\">    Node():left(<span class=\"literal\">NULL</span>), right(<span class=\"literal\">NULL</span>), h_val(<span class=\"literal\">false</span>)&#123;&#125;; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Node* root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addnode</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    Node* u = root;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'L'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(u-&gt;left == <span class=\"literal\">NULL</span>) u-&gt;left = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">            u = u-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'R'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(u-&gt;right == <span class=\"literal\">NULL</span>) u-&gt;right = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">            u = u-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u-&gt;h_val) failed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    u-&gt;v = v;</span><br><span class=\"line\">    u-&gt;h_val = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">read_input</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    root = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s) == EOF) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\"()\"</span>) == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(s + <span class=\"number\">1</span>, <span class=\"string\">\"%d\"</span>, &amp;v);</span><br><span class=\"line\">        addnode(<span class=\"built_in\">strchr</span>(s, <span class=\"string\">','</span>) + <span class=\"number\">1</span>, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node*&gt; que;</span><br><span class=\"line\">    que.push(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node* u = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!u-&gt;h_val)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"not complete\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec.push_back(u-&gt;v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u-&gt;left != <span class=\"literal\">NULL</span>) que.push(u-&gt;left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u-&gt;right != <span class=\"literal\">NULL</span>) que.push(u-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(read_input())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(failed) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"not complete\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> bfs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态结构\"><a href=\"#静态结构\" class=\"headerlink\" title=\"静态结构\"></a>静态结构</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 21 Sep 14:10:14 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">307</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> leftt[maxn], rightt[maxn], val[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> h_val[maxn], failed;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> root, cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">    que.push(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!h_val[v])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"not complete\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec.push_back(val[v]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leftt[v]) que.push(leftt[v]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rightt[v]) que.push(rightt[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addnode</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u = root;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'L'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(leftt[u] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                leftt[u] = cnt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            u = leftt[u];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">'R'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rightt[u] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                rightt[u] = cnt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            u = rightt[u];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(h_val[u]) failed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    val[u] = v;</span><br><span class=\"line\">    h_val[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">read_input</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(h_val, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(h_val));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(leftt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(leftt));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(rightt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(rightt));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">    root = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    leftt[root] = <span class=\"number\">0</span>, rightt[root] = <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s) == EOF) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\"()\"</span>) == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(s + <span class=\"number\">1</span>, <span class=\"string\">\"%d\"</span>, &amp;v);</span><br><span class=\"line\">        addnode(<span class=\"built_in\">strchr</span>(s, <span class=\"string\">','</span>) + <span class=\"number\">1</span>, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(read_input())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(failed) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"not complete\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> bfs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva127-Accordian Patience-链表","date":"2018-12-12T02:25:11.000Z","_content":"一副扑克牌（52张），按照从左往右的顺序，若当前扑克牌和它的左一或左三扑克牌的数字或花色相同，就把它移动到那张牌的上方，移动后如果继续满足条件则继续移动。左一和左三同时满足时，左三优先。当有某个位置的牌为空时，要及时把这个位置消除。\n实战了一把数组模拟链表，还发现了一个大佬的博客，嚯嚯。收获了感动，坚定了继续坚持下去的信念。\n<!--more-->\n# 链接\n题目链接[Uva127-\"Accordian Patience\"](https://vjudge.net/problem/UVA-127)\n参考链接[shuangde800的博客](https://blog.csdn.net/shuangde800/article/details/7703781#commentBox)\n\n# 题解\n52个位置的牌堆分别用一个栈来维护。因为有消除牌堆的过程，所以会有频繁的移动，用链表来维护牌堆之间的关系效率比较高。代码里用两个数组next_idx和front_idx模拟了双向链表。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 11 Dec 20:19:53 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstack<string> d[60];\nint next_idx[60];\nint front_idx[60];\n\nbool input(){\n    memset(next_idx, -1, sizeof(next_idx));\n    memset(front_idx, -1, sizeof(front_idx));\n    string s;\n    stack<string> stk;\n    for(int i = 0; i < 52; i++){\n        cin >> s;\n        if(s == \"#\") return false;\n        stk.push(s);\n        d[i] = stk;\n        stk.pop();\n    }\n    return true;\n}\n\n//judge if we can move 3 steps\nbool ok_3(int i){\n    int last3;\n    last3 = front_idx[front_idx[front_idx[i]]];\n    //if(last3 < 0) return false;\n    if(d[last3].top()[0] == d[i].top()[0] || d[last3].top()[1] == d[i].top()[1]){\n        d[last3].push(d[i].top());\n        d[i].pop();\n        return true;\n    }\n    else return false;\n}\n\n//judge if we can move 1 step\nbool ok_1(int i){\n    int last1;\n    last1 = front_idx[i];\n    //if(last1 < 0) return false;\n    if(d[last1].top()[0] == d[i].top()[0] || d[last1].top()[1] == d[i].top()[1]){\n        d[last1].push(d[i].top());\n        d[i].pop();\n        return true;\n    }\n    else return false;\n}\n\nbool move(){\n    int cnt = 0;\n    for(int i = 0; i != -1; i = next_idx[i], cnt++){\n        if(cnt > 2)\n            if(ok_3(i)) return true;\n        if(cnt > 0)\n            if(ok_1(i)) return true;\n    }\n    return false;\n}\n\n//erase empty position\nvoid erase(){\n    for(int i = 0; i != -1; i = next_idx[i]){\n        if(d[i].empty()){\n            int l = front_idx[i];\n            int r = next_idx[i];\n            next_idx[l] = r;\n            front_idx[r] = l;\n            next_idx[i] = front_idx[i] = -1;\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE    \n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(input()){\n        for(int i = 0; i < 51; i++){\n            next_idx[i] = i + 1;\n        }\n        for(int i = 1; i < 53; i++){\n            front_idx[i] = i - 1;\n        }\n\n        while(move()){\n            erase();\n        }\n\n        vector<int> ans;\n        for(int i = 0; i != -1; i = next_idx[i]){\n            ans.push_back(d[i].size());\n        }\n        int len = ans.size();\n        if(len == 1){\n            cout << \"1 pile remaining: \" << ans[0] << endl;\n        }\n        else{\n            cout << len << \" piles remaining:\";\n            for(int x : ans){\n                cout << \" \" << x;\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}\n\n```","source":"_posts/Uva127-Accordian-Patience.md","raw":"---\ntitle: Uva127-Accordian Patience-链表\ndate: 2018-12-12 10:25:11\ncategories:\n- ACM\n- 链表\ntags:\n- 链表\n- 栈\n---\n一副扑克牌（52张），按照从左往右的顺序，若当前扑克牌和它的左一或左三扑克牌的数字或花色相同，就把它移动到那张牌的上方，移动后如果继续满足条件则继续移动。左一和左三同时满足时，左三优先。当有某个位置的牌为空时，要及时把这个位置消除。\n实战了一把数组模拟链表，还发现了一个大佬的博客，嚯嚯。收获了感动，坚定了继续坚持下去的信念。\n<!--more-->\n# 链接\n题目链接[Uva127-\"Accordian Patience\"](https://vjudge.net/problem/UVA-127)\n参考链接[shuangde800的博客](https://blog.csdn.net/shuangde800/article/details/7703781#commentBox)\n\n# 题解\n52个位置的牌堆分别用一个栈来维护。因为有消除牌堆的过程，所以会有频繁的移动，用链表来维护牌堆之间的关系效率比较高。代码里用两个数组next_idx和front_idx模拟了双向链表。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue 11 Dec 20:19:53 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstack<string> d[60];\nint next_idx[60];\nint front_idx[60];\n\nbool input(){\n    memset(next_idx, -1, sizeof(next_idx));\n    memset(front_idx, -1, sizeof(front_idx));\n    string s;\n    stack<string> stk;\n    for(int i = 0; i < 52; i++){\n        cin >> s;\n        if(s == \"#\") return false;\n        stk.push(s);\n        d[i] = stk;\n        stk.pop();\n    }\n    return true;\n}\n\n//judge if we can move 3 steps\nbool ok_3(int i){\n    int last3;\n    last3 = front_idx[front_idx[front_idx[i]]];\n    //if(last3 < 0) return false;\n    if(d[last3].top()[0] == d[i].top()[0] || d[last3].top()[1] == d[i].top()[1]){\n        d[last3].push(d[i].top());\n        d[i].pop();\n        return true;\n    }\n    else return false;\n}\n\n//judge if we can move 1 step\nbool ok_1(int i){\n    int last1;\n    last1 = front_idx[i];\n    //if(last1 < 0) return false;\n    if(d[last1].top()[0] == d[i].top()[0] || d[last1].top()[1] == d[i].top()[1]){\n        d[last1].push(d[i].top());\n        d[i].pop();\n        return true;\n    }\n    else return false;\n}\n\nbool move(){\n    int cnt = 0;\n    for(int i = 0; i != -1; i = next_idx[i], cnt++){\n        if(cnt > 2)\n            if(ok_3(i)) return true;\n        if(cnt > 0)\n            if(ok_1(i)) return true;\n    }\n    return false;\n}\n\n//erase empty position\nvoid erase(){\n    for(int i = 0; i != -1; i = next_idx[i]){\n        if(d[i].empty()){\n            int l = front_idx[i];\n            int r = next_idx[i];\n            next_idx[l] = r;\n            front_idx[r] = l;\n            next_idx[i] = front_idx[i] = -1;\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE    \n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(input()){\n        for(int i = 0; i < 51; i++){\n            next_idx[i] = i + 1;\n        }\n        for(int i = 1; i < 53; i++){\n            front_idx[i] = i - 1;\n        }\n\n        while(move()){\n            erase();\n        }\n\n        vector<int> ans;\n        for(int i = 0; i != -1; i = next_idx[i]){\n            ans.push_back(d[i].size());\n        }\n        int len = ans.size();\n        if(len == 1){\n            cout << \"1 pile remaining: \" << ans[0] << endl;\n        }\n        else{\n            cout << len << \" piles remaining:\";\n            for(int x : ans){\n                cout << \" \" << x;\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}\n\n```","slug":"Uva127-Accordian-Patience","published":1,"updated":"2019-08-20T14:46:43.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lo001530vng0q2quvt","content":"<p>一副扑克牌（52张），按照从左往右的顺序，若当前扑克牌和它的左一或左三扑克牌的数字或花色相同，就把它移动到那张牌的上方，移动后如果继续满足条件则继续移动。左一和左三同时满足时，左三优先。当有某个位置的牌为空时，要及时把这个位置消除。<br>实战了一把数组模拟链表，还发现了一个大佬的博客，嚯嚯。收获了感动，坚定了继续坚持下去的信念。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-127\" target=\"_blank\" rel=\"noopener\">Uva127-“Accordian Patience”</a><br>参考链接<a href=\"https://blog.csdn.net/shuangde800/article/details/7703781#commentBox\" target=\"_blank\" rel=\"noopener\">shuangde800的博客</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>52个位置的牌堆分别用一个栈来维护。因为有消除牌堆的过程，所以会有频繁的移动，用链表来维护牌堆之间的关系效率比较高。代码里用两个数组next_idx和front_idx模拟了双向链表。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 11 Dec 20:19:53 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">string</span>&gt; d[<span class=\"number\">60</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> next_idx[<span class=\"number\">60</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> front_idx[<span class=\"number\">60</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">input</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(next_idx, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(next_idx));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(front_idx, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(front_idx));</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">string</span>&gt; stk;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">52</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"string\">\"#\"</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        stk.push(s);</span><br><span class=\"line\">        d[i] = stk;</span><br><span class=\"line\">        stk.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//judge if we can move 3 steps</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok_3</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last3;</span><br><span class=\"line\">    last3 = front_idx[front_idx[front_idx[i]]];</span><br><span class=\"line\">    <span class=\"comment\">//if(last3 &lt; 0) return false;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[last3].top()[<span class=\"number\">0</span>] == d[i].top()[<span class=\"number\">0</span>] || d[last3].top()[<span class=\"number\">1</span>] == d[i].top()[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        d[last3].push(d[i].top());</span><br><span class=\"line\">        d[i].pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//judge if we can move 1 step</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok_1</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last1;</span><br><span class=\"line\">    last1 = front_idx[i];</span><br><span class=\"line\">    <span class=\"comment\">//if(last1 &lt; 0) return false;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[last1].top()[<span class=\"number\">0</span>] == d[i].top()[<span class=\"number\">0</span>] || d[last1].top()[<span class=\"number\">1</span>] == d[i].top()[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        d[last1].push(d[i].top());</span><br><span class=\"line\">        d[i].pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">-1</span>; i = next_idx[i], cnt++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ok_3(i)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ok_1(i)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//erase empty position</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">erase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">-1</span>; i = next_idx[i])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i].empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l = front_idx[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r = next_idx[i];</span><br><span class=\"line\">            next_idx[l] = r;</span><br><span class=\"line\">            front_idx[r] = l;</span><br><span class=\"line\">            next_idx[i] = front_idx[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE    </span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(input())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">51</span>; i++)&#123;</span><br><span class=\"line\">            next_idx[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">53</span>; i++)&#123;</span><br><span class=\"line\">            front_idx[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(move())&#123;</span><br><span class=\"line\">            erase();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">-1</span>; i = next_idx[i])&#123;</span><br><span class=\"line\">            ans.push_back(d[i].size());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = ans.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1 pile remaining: \"</span> &lt;&lt; ans[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; len &lt;&lt; <span class=\"string\">\" piles remaining:\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : ans)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>一副扑克牌（52张），按照从左往右的顺序，若当前扑克牌和它的左一或左三扑克牌的数字或花色相同，就把它移动到那张牌的上方，移动后如果继续满足条件则继续移动。左一和左三同时满足时，左三优先。当有某个位置的牌为空时，要及时把这个位置消除。<br>实战了一把数组模拟链表，还发现了一个大佬的博客，嚯嚯。收获了感动，坚定了继续坚持下去的信念。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-127\" target=\"_blank\" rel=\"noopener\">Uva127-“Accordian Patience”</a><br>参考链接<a href=\"https://blog.csdn.net/shuangde800/article/details/7703781#commentBox\" target=\"_blank\" rel=\"noopener\">shuangde800的博客</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>52个位置的牌堆分别用一个栈来维护。因为有消除牌堆的过程，所以会有频繁的移动，用链表来维护牌堆之间的关系效率比较高。代码里用两个数组next_idx和front_idx模拟了双向链表。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue 11 Dec 20:19:53 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">string</span>&gt; d[<span class=\"number\">60</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> next_idx[<span class=\"number\">60</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> front_idx[<span class=\"number\">60</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">input</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(next_idx, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(next_idx));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(front_idx, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(front_idx));</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">string</span>&gt; stk;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">52</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"string\">\"#\"</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        stk.push(s);</span><br><span class=\"line\">        d[i] = stk;</span><br><span class=\"line\">        stk.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//judge if we can move 3 steps</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok_3</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last3;</span><br><span class=\"line\">    last3 = front_idx[front_idx[front_idx[i]]];</span><br><span class=\"line\">    <span class=\"comment\">//if(last3 &lt; 0) return false;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[last3].top()[<span class=\"number\">0</span>] == d[i].top()[<span class=\"number\">0</span>] || d[last3].top()[<span class=\"number\">1</span>] == d[i].top()[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        d[last3].push(d[i].top());</span><br><span class=\"line\">        d[i].pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//judge if we can move 1 step</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok_1</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last1;</span><br><span class=\"line\">    last1 = front_idx[i];</span><br><span class=\"line\">    <span class=\"comment\">//if(last1 &lt; 0) return false;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[last1].top()[<span class=\"number\">0</span>] == d[i].top()[<span class=\"number\">0</span>] || d[last1].top()[<span class=\"number\">1</span>] == d[i].top()[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        d[last1].push(d[i].top());</span><br><span class=\"line\">        d[i].pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">-1</span>; i = next_idx[i], cnt++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ok_3(i)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ok_1(i)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//erase empty position</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">erase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">-1</span>; i = next_idx[i])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i].empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l = front_idx[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r = next_idx[i];</span><br><span class=\"line\">            next_idx[l] = r;</span><br><span class=\"line\">            front_idx[r] = l;</span><br><span class=\"line\">            next_idx[i] = front_idx[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE    </span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(input())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">51</span>; i++)&#123;</span><br><span class=\"line\">            next_idx[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">53</span>; i++)&#123;</span><br><span class=\"line\">            front_idx[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(move())&#123;</span><br><span class=\"line\">            erase();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">-1</span>; i = next_idx[i])&#123;</span><br><span class=\"line\">            ans.push_back(d[i].size());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = ans.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1 pile remaining: \"</span> &lt;&lt; ans[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; len &lt;&lt; <span class=\"string\">\" piles remaining:\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : ans)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva1343-The Rotation Game-IDA*","date":"2019-01-13T03:13:57.000Z","_content":"如下图所以，#字型方格中填充有数字1，2，3。每种数字的个数为8，每行每列都可以“滚动”，实际上是指每行每列的数组可以左右移位。求使得中间8个小格子变为同一种数字的“滚动”方式，要求步数最少，步数相同的情况下滚动序列的字典序最小。\n\n_我发现IDA\\*好像因为深度限制以及估价函数的存在而不需要进行判重。_\n![game](/game.png)\n<!--more-->\n\n# 链接\n题目链接：[Uva1343-The Rotation Game](https://vjudge.net/problem/UVA-1343)\n参考链接：[Rujia Liu's repository](https://github.com/aoapc-book/aoapc-bac2nd/blob/master/ch7/UVa1343.cpp)\n\n# 题解\n一开始想用BFS进行状态空间搜索，但是状态数总共有``24!/(8!*8!*8!) = 9465511770``种情况，而且我也不知道怎样构造哈希比较合适=　=。刘汝佳老师的IDA\\*实现方法代码简单清晰，而且很自然的满足了题目中的步数最少，字典序最小的要求。__而且我发现IDA\\*好像因为深度的限制和估价函数的存在而不需要考虑判重的问题。__\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 13 Jan 10:18:02 CST 2019\n *\n */\n\n/* \n      00    01\n      02    03\n04 05 06 07 08 09 10\n      11    12\n13 14 15 16 17 18 19\n      20    21\n      22    23\n*/\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint d[24];\nint id[8][7] = {\n    {0, 2, 6, 11, 15, 20, 22},\n    {1, 3, 8, 12, 17, 21, 23},\n    {10, 9, 8, 7, 6, 5, 4},\n    {19, 18, 17, 16, 15, 14, 13},\n    {23, 21, 17, 12, 8, 3, 1},\n    {22, 20, 15, 11, 6, 2, 0},\n    {13, 14, 15, 16, 17, 18, 19},\n    {4, 5, 6, 7, 8, 9, 10}\n};\nint reff[8] = {5, 4, 7, 6, 1, 0, 3, 2}; // reverse lines of each line\nint center[8] = {6, 7, 8, 11, 12, 15, 16, 17}; //center squares's real idex in array d\nchar ans[1000];\nint res;\n\nbool ok(){\n    for(int i = 0; i < 7; i++){\n        if(d[center[i]] != d[center[i + 1]]) return false;\n    }\n    return true;\n}\n\nvoid move(int p){\n    int tmp = d[id[p][0]];\n    for(int i = 0; i < 6; i++){\n        d[id[p][i]] = d[id[p][i + 1]];\n    }\n    d[id[p][6]] = tmp;\n}\n\nint cal(int x){\n    int sum = 0;\n    for(int i = 0; i < 8; i++){\n        if(d[center[i]] != x) sum++;\n    }\n    return sum;\n}\n\nint h(){\n    return min(min(cal(1), cal(2)), cal(3));\n}\n\nbool dfs(int dep, int maxd){\n    if(dep + h() > maxd) return false;\n    if(dep >= maxd){\n        if(ok()){\n            res = d[center[0]];\n            for(int i = 0; i < dep; i++){\n                cout << ans[i];\n            }\n            cout << endl;\n            cout << res << endl;\n            return true;\n        }\n        return false;\n    }\n\n    for(int i = 0; i < 8; i++){\n        ans[dep] = 'A' + i;\n        move(i);\n        if(dfs(dep + 1, maxd)) return true;\n        move(reff[i]);\n    }\n    return false;\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(1){\n        cin >> d[0];\n        if(d[0] == 0) break;\n        for(int i = 1; i < 24; i++){\n            cin >> d[i];\n        }\n\n        if(ok()){\n            cout << \"No moves needed\" << endl;\n            cout << d[center[0]] << endl;\n            continue;\n        }\n        int maxd;\n        for(maxd = 1; ; maxd++){\n            if(dfs(0, maxd)) break;\n        }\n    }\n    \n    return 0;\n}\n```","source":"_posts/Uva1343-The-Rotation-Game.md","raw":"---\ntitle: Uva1343-The Rotation Game-IDA*\ndate: 2019-01-13 11:13:57\ncategories:\n- ACM\n- IDA*\ntags:\n---\n如下图所以，#字型方格中填充有数字1，2，3。每种数字的个数为8，每行每列都可以“滚动”，实际上是指每行每列的数组可以左右移位。求使得中间8个小格子变为同一种数字的“滚动”方式，要求步数最少，步数相同的情况下滚动序列的字典序最小。\n\n_我发现IDA\\*好像因为深度限制以及估价函数的存在而不需要进行判重。_\n![game](/game.png)\n<!--more-->\n\n# 链接\n题目链接：[Uva1343-The Rotation Game](https://vjudge.net/problem/UVA-1343)\n参考链接：[Rujia Liu's repository](https://github.com/aoapc-book/aoapc-bac2nd/blob/master/ch7/UVa1343.cpp)\n\n# 题解\n一开始想用BFS进行状态空间搜索，但是状态数总共有``24!/(8!*8!*8!) = 9465511770``种情况，而且我也不知道怎样构造哈希比较合适=　=。刘汝佳老师的IDA\\*实现方法代码简单清晰，而且很自然的满足了题目中的步数最少，字典序最小的要求。__而且我发现IDA\\*好像因为深度的限制和估价函数的存在而不需要考虑判重的问题。__\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 13 Jan 10:18:02 CST 2019\n *\n */\n\n/* \n      00    01\n      02    03\n04 05 06 07 08 09 10\n      11    12\n13 14 15 16 17 18 19\n      20    21\n      22    23\n*/\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint d[24];\nint id[8][7] = {\n    {0, 2, 6, 11, 15, 20, 22},\n    {1, 3, 8, 12, 17, 21, 23},\n    {10, 9, 8, 7, 6, 5, 4},\n    {19, 18, 17, 16, 15, 14, 13},\n    {23, 21, 17, 12, 8, 3, 1},\n    {22, 20, 15, 11, 6, 2, 0},\n    {13, 14, 15, 16, 17, 18, 19},\n    {4, 5, 6, 7, 8, 9, 10}\n};\nint reff[8] = {5, 4, 7, 6, 1, 0, 3, 2}; // reverse lines of each line\nint center[8] = {6, 7, 8, 11, 12, 15, 16, 17}; //center squares's real idex in array d\nchar ans[1000];\nint res;\n\nbool ok(){\n    for(int i = 0; i < 7; i++){\n        if(d[center[i]] != d[center[i + 1]]) return false;\n    }\n    return true;\n}\n\nvoid move(int p){\n    int tmp = d[id[p][0]];\n    for(int i = 0; i < 6; i++){\n        d[id[p][i]] = d[id[p][i + 1]];\n    }\n    d[id[p][6]] = tmp;\n}\n\nint cal(int x){\n    int sum = 0;\n    for(int i = 0; i < 8; i++){\n        if(d[center[i]] != x) sum++;\n    }\n    return sum;\n}\n\nint h(){\n    return min(min(cal(1), cal(2)), cal(3));\n}\n\nbool dfs(int dep, int maxd){\n    if(dep + h() > maxd) return false;\n    if(dep >= maxd){\n        if(ok()){\n            res = d[center[0]];\n            for(int i = 0; i < dep; i++){\n                cout << ans[i];\n            }\n            cout << endl;\n            cout << res << endl;\n            return true;\n        }\n        return false;\n    }\n\n    for(int i = 0; i < 8; i++){\n        ans[dep] = 'A' + i;\n        move(i);\n        if(dfs(dep + 1, maxd)) return true;\n        move(reff[i]);\n    }\n    return false;\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(1){\n        cin >> d[0];\n        if(d[0] == 0) break;\n        for(int i = 1; i < 24; i++){\n            cin >> d[i];\n        }\n\n        if(ok()){\n            cout << \"No moves needed\" << endl;\n            cout << d[center[0]] << endl;\n            continue;\n        }\n        int maxd;\n        for(maxd = 1; ; maxd++){\n            if(dfs(0, maxd)) break;\n        }\n    }\n    \n    return 0;\n}\n```","slug":"Uva1343-The-Rotation-Game","published":1,"updated":"2019-08-20T14:44:53.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lo001630vn1aa8i52z","content":"<p>如下图所以，#字型方格中填充有数字1，2，3。每种数字的个数为8，每行每列都可以“滚动”，实际上是指每行每列的数组可以左右移位。求使得中间8个小格子变为同一种数字的“滚动”方式，要求步数最少，步数相同的情况下滚动序列的字典序最小。</p>\n<p><em>我发现IDA*好像因为深度限制以及估价函数的存在而不需要进行判重。</em><br><img src=\"/2019/01/13/Uva1343-The-Rotation-Game/game.png\" alt=\"game\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接：<a href=\"https://vjudge.net/problem/UVA-1343\" target=\"_blank\" rel=\"noopener\">Uva1343-The Rotation Game</a><br>参考链接：<a href=\"https://github.com/aoapc-book/aoapc-bac2nd/blob/master/ch7/UVa1343.cpp\" target=\"_blank\" rel=\"noopener\">Rujia Liu’s repository</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>一开始想用BFS进行状态空间搜索，但是状态数总共有<code>24!/(8!*8!*8!) = 9465511770</code>种情况，而且我也不知道怎样构造哈希比较合适=　=。刘汝佳老师的IDA*实现方法代码简单清晰，而且很自然的满足了题目中的步数最少，字典序最小的要求。<strong>而且我发现IDA*好像因为深度的限制和估价函数的存在而不需要考虑判重的问题。</strong></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 13 Jan 10:18:02 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">      00    01</span></span><br><span class=\"line\"><span class=\"comment\">      02    03</span></span><br><span class=\"line\"><span class=\"comment\">04 05 06 07 08 09 10</span></span><br><span class=\"line\"><span class=\"comment\">      11    12</span></span><br><span class=\"line\"><span class=\"comment\">13 14 15 16 17 18 19</span></span><br><span class=\"line\"><span class=\"comment\">      20    21</span></span><br><span class=\"line\"><span class=\"comment\">      22    23</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">24</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> id[<span class=\"number\">8</span>][<span class=\"number\">7</span>] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>, <span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">19</span>, <span class=\"number\">18</span>, <span class=\"number\">17</span>, <span class=\"number\">16</span>, <span class=\"number\">15</span>, <span class=\"number\">14</span>, <span class=\"number\">13</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">23</span>, <span class=\"number\">21</span>, <span class=\"number\">17</span>, <span class=\"number\">12</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">22</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> reff[<span class=\"number\">8</span>] = &#123;<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;; <span class=\"comment\">// reverse lines of each line</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> center[<span class=\"number\">8</span>] = &#123;<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>&#125;; <span class=\"comment\">//center squares's real idex in array d</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> ans[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[center[i]] != d[center[i + <span class=\"number\">1</span>]]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = d[id[p][<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++)&#123;</span><br><span class=\"line\">        d[id[p][i]] = d[id[p][i + <span class=\"number\">1</span>]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[id[p][<span class=\"number\">6</span>]] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[center[i]] != x) sum++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">h</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min(min(cal(<span class=\"number\">1</span>), cal(<span class=\"number\">2</span>)), cal(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, <span class=\"keyword\">int</span> maxd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep + h() &gt; maxd) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep &gt;= maxd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok())&#123;</span><br><span class=\"line\">            res = d[center[<span class=\"number\">0</span>]];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dep; i++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; ans[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; res &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)&#123;</span><br><span class=\"line\">        ans[dep] = <span class=\"string\">'A'</span> + i;</span><br><span class=\"line\">        move(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfs(dep + <span class=\"number\">1</span>, maxd)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        move(reff[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; d[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">24</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok())&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No moves needed\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; d[center[<span class=\"number\">0</span>]] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxd;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(maxd = <span class=\"number\">1</span>; ; maxd++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(<span class=\"number\">0</span>, maxd)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>如下图所以，#字型方格中填充有数字1，2，3。每种数字的个数为8，每行每列都可以“滚动”，实际上是指每行每列的数组可以左右移位。求使得中间8个小格子变为同一种数字的“滚动”方式，要求步数最少，步数相同的情况下滚动序列的字典序最小。</p>\n<p><em>我发现IDA*好像因为深度限制以及估价函数的存在而不需要进行判重。</em><br><img src=\"/2019/01/13/Uva1343-The-Rotation-Game/game.png\" alt=\"game\"></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接：<a href=\"https://vjudge.net/problem/UVA-1343\" target=\"_blank\" rel=\"noopener\">Uva1343-The Rotation Game</a><br>参考链接：<a href=\"https://github.com/aoapc-book/aoapc-bac2nd/blob/master/ch7/UVa1343.cpp\" target=\"_blank\" rel=\"noopener\">Rujia Liu’s repository</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>一开始想用BFS进行状态空间搜索，但是状态数总共有<code>24!/(8!*8!*8!) = 9465511770</code>种情况，而且我也不知道怎样构造哈希比较合适=　=。刘汝佳老师的IDA*实现方法代码简单清晰，而且很自然的满足了题目中的步数最少，字典序最小的要求。<strong>而且我发现IDA*好像因为深度的限制和估价函数的存在而不需要考虑判重的问题。</strong></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 13 Jan 10:18:02 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">      00    01</span></span><br><span class=\"line\"><span class=\"comment\">      02    03</span></span><br><span class=\"line\"><span class=\"comment\">04 05 06 07 08 09 10</span></span><br><span class=\"line\"><span class=\"comment\">      11    12</span></span><br><span class=\"line\"><span class=\"comment\">13 14 15 16 17 18 19</span></span><br><span class=\"line\"><span class=\"comment\">      20    21</span></span><br><span class=\"line\"><span class=\"comment\">      22    23</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">24</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> id[<span class=\"number\">8</span>][<span class=\"number\">7</span>] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>, <span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">19</span>, <span class=\"number\">18</span>, <span class=\"number\">17</span>, <span class=\"number\">16</span>, <span class=\"number\">15</span>, <span class=\"number\">14</span>, <span class=\"number\">13</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">23</span>, <span class=\"number\">21</span>, <span class=\"number\">17</span>, <span class=\"number\">12</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">22</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> reff[<span class=\"number\">8</span>] = &#123;<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;; <span class=\"comment\">// reverse lines of each line</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> center[<span class=\"number\">8</span>] = &#123;<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>&#125;; <span class=\"comment\">//center squares's real idex in array d</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> ans[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[center[i]] != d[center[i + <span class=\"number\">1</span>]]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = d[id[p][<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++)&#123;</span><br><span class=\"line\">        d[id[p][i]] = d[id[p][i + <span class=\"number\">1</span>]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[id[p][<span class=\"number\">6</span>]] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[center[i]] != x) sum++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">h</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min(min(cal(<span class=\"number\">1</span>), cal(<span class=\"number\">2</span>)), cal(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, <span class=\"keyword\">int</span> maxd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep + h() &gt; maxd) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep &gt;= maxd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok())&#123;</span><br><span class=\"line\">            res = d[center[<span class=\"number\">0</span>]];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dep; i++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; ans[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; res &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)&#123;</span><br><span class=\"line\">        ans[dep] = <span class=\"string\">'A'</span> + i;</span><br><span class=\"line\">        move(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfs(dep + <span class=\"number\">1</span>, maxd)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        move(reff[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; d[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">24</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok())&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No moves needed\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; d[center[<span class=\"number\">0</span>]] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxd;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(maxd = <span class=\"number\">1</span>; ; maxd++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(<span class=\"number\">0</span>, maxd)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva1374-Power Calculus-IDA*","date":"2019-02-08T08:36:27.000Z","_content":"给定一个数n，求从$x$计算到$x^n$至少需要多少步，允许得到的各中间变量之间进行乘法和除法。\n<!--more-->\n# 链接\n题目链接：[Uva1374-Power Calculus](https://vjudge.net/problem/UVA-1374)\n\n# 题解\n看到这道题，最开始想到的是快速幂的计算方法。但是快速幂计算其实是分为“计算过程数据”和“有效过程数据相乘”两部分构成的，步数不一定最少，而且，这道题目中允许除法的运算。所以不能将快速幂的计算方法的过程步骤作为最少步数的结果。\n采用递归的方式进行搜索，由于具体的步数即深度不清楚，所以适合采用迭代加深搜索来做。同时将``maxVal * pow(2, maxd - d)``与n的大小关系作为剪枝的条件。其中maxVal为当前中间变量构成的序列中的最大值。若上式的值仍小于n，那么在当前的深度限制下不可能达到n值，需要进行剪枝。\n\n**用位运算``maxVal << maxd - d``的方式来代替``maxVal * pow(2, maxd - d)``的运算方式有助于提升速度。**\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri  8 Feb 16:18:30 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1007;\nint a[maxn];\nint n;\nint res;\n\nint findMaxVal(int dep){\n    int ans = 0;\n    for(int i = 0; i <= dep; i++){\n        ans = max(ans, a[i]);\n    }\n    return ans;\n}\n\nbool dfs(int dep, int maxd){\n    if(dep >= maxd){\n        if(a[dep] == n) return true;\n        else return false;\n    }\n\n    //prune\n    int maxVal = findMaxVal(dep);\n    if(maxVal << (maxd - dep) < n) return false;\n\n    for(int i = dep; i >= 0; i--){\n        a[dep + 1] = a[dep] + a[i];\n        if(dfs(dep + 1, maxd)) return true;\n        if(a[dep] - a[i] > 0){\n            a[dep + 1] = a[dep] - a[i];\n            if(dfs(dep + 1, maxd)) return true;\n        }\n    }\n\n    return false;\n}\n\nint main(){\n    #ifndef    ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n){\n        if(n == 0) break;\n        if(n == 1){\n            cout << 0 << endl;\n            continue;\n        }\n\n        a[0] = 1;\n        for(int maxd = 1; maxd <= maxn; maxd++){\n            if(dfs(0, maxd)){\n                res = maxd;\n                break;\n            }\n        }\n\n        cout << res << endl;\n    }\n    return 0;\n}\n```","source":"_posts/Uva1374-Power-Calculus.md","raw":"---\ntitle: Uva1374-Power Calculus-IDA*\ndate: 2019-02-08 16:36:27\ncategories:\n- ACM\n- IDA*\ntags:\n- IDA*\n---\n给定一个数n，求从$x$计算到$x^n$至少需要多少步，允许得到的各中间变量之间进行乘法和除法。\n<!--more-->\n# 链接\n题目链接：[Uva1374-Power Calculus](https://vjudge.net/problem/UVA-1374)\n\n# 题解\n看到这道题，最开始想到的是快速幂的计算方法。但是快速幂计算其实是分为“计算过程数据”和“有效过程数据相乘”两部分构成的，步数不一定最少，而且，这道题目中允许除法的运算。所以不能将快速幂的计算方法的过程步骤作为最少步数的结果。\n采用递归的方式进行搜索，由于具体的步数即深度不清楚，所以适合采用迭代加深搜索来做。同时将``maxVal * pow(2, maxd - d)``与n的大小关系作为剪枝的条件。其中maxVal为当前中间变量构成的序列中的最大值。若上式的值仍小于n，那么在当前的深度限制下不可能达到n值，需要进行剪枝。\n\n**用位运算``maxVal << maxd - d``的方式来代替``maxVal * pow(2, maxd - d)``的运算方式有助于提升速度。**\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri  8 Feb 16:18:30 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1007;\nint a[maxn];\nint n;\nint res;\n\nint findMaxVal(int dep){\n    int ans = 0;\n    for(int i = 0; i <= dep; i++){\n        ans = max(ans, a[i]);\n    }\n    return ans;\n}\n\nbool dfs(int dep, int maxd){\n    if(dep >= maxd){\n        if(a[dep] == n) return true;\n        else return false;\n    }\n\n    //prune\n    int maxVal = findMaxVal(dep);\n    if(maxVal << (maxd - dep) < n) return false;\n\n    for(int i = dep; i >= 0; i--){\n        a[dep + 1] = a[dep] + a[i];\n        if(dfs(dep + 1, maxd)) return true;\n        if(a[dep] - a[i] > 0){\n            a[dep + 1] = a[dep] - a[i];\n            if(dfs(dep + 1, maxd)) return true;\n        }\n    }\n\n    return false;\n}\n\nint main(){\n    #ifndef    ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n){\n        if(n == 0) break;\n        if(n == 1){\n            cout << 0 << endl;\n            continue;\n        }\n\n        a[0] = 1;\n        for(int maxd = 1; maxd <= maxn; maxd++){\n            if(dfs(0, maxd)){\n                res = maxd;\n                break;\n            }\n        }\n\n        cout << res << endl;\n    }\n    return 0;\n}\n```","slug":"Uva1374-Power-Calculus","published":1,"updated":"2019-08-20T14:44:40.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lo001730vnv7msmvh8","content":"<p>给定一个数n，求从$x$计算到$x^n$至少需要多少步，允许得到的各中间变量之间进行乘法和除法。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接：<a href=\"https://vjudge.net/problem/UVA-1374\" target=\"_blank\" rel=\"noopener\">Uva1374-Power Calculus</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>看到这道题，最开始想到的是快速幂的计算方法。但是快速幂计算其实是分为“计算过程数据”和“有效过程数据相乘”两部分构成的，步数不一定最少，而且，这道题目中允许除法的运算。所以不能将快速幂的计算方法的过程步骤作为最少步数的结果。<br>采用递归的方式进行搜索，由于具体的步数即深度不清楚，所以适合采用迭代加深搜索来做。同时将<code>maxVal * pow(2, maxd - d)</code>与n的大小关系作为剪枝的条件。其中maxVal为当前中间变量构成的序列中的最大值。若上式的值仍小于n，那么在当前的深度限制下不可能达到n值，需要进行剪枝。</p>\n<p><strong>用位运算<code>maxVal &lt;&lt; maxd - d</code>的方式来代替<code>maxVal * pow(2, maxd - d)</code>的运算方式有助于提升速度。</strong></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri  8 Feb 16:18:30 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1007</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findMaxVal</span><span class=\"params\">(<span class=\"keyword\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= dep; i++)&#123;</span><br><span class=\"line\">        ans = max(ans, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, <span class=\"keyword\">int</span> maxd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep &gt;= maxd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[dep] == n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//prune</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxVal = findMaxVal(dep);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(maxVal &lt;&lt; (maxd - dep) &lt; n) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = dep; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        a[dep + <span class=\"number\">1</span>] = a[dep] + a[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfs(dep + <span class=\"number\">1</span>, maxd)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[dep] - a[i] &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            a[dep + <span class=\"number\">1</span>] = a[dep] - a[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(dep + <span class=\"number\">1</span>, maxd)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>    ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> maxd = <span class=\"number\">1</span>; maxd &lt;= maxn; maxd++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(<span class=\"number\">0</span>, maxd))&#123;</span><br><span class=\"line\">                res = maxd;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; res &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>给定一个数n，求从$x$计算到$x^n$至少需要多少步，允许得到的各中间变量之间进行乘法和除法。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接：<a href=\"https://vjudge.net/problem/UVA-1374\" target=\"_blank\" rel=\"noopener\">Uva1374-Power Calculus</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>看到这道题，最开始想到的是快速幂的计算方法。但是快速幂计算其实是分为“计算过程数据”和“有效过程数据相乘”两部分构成的，步数不一定最少，而且，这道题目中允许除法的运算。所以不能将快速幂的计算方法的过程步骤作为最少步数的结果。<br>采用递归的方式进行搜索，由于具体的步数即深度不清楚，所以适合采用迭代加深搜索来做。同时将<code>maxVal * pow(2, maxd - d)</code>与n的大小关系作为剪枝的条件。其中maxVal为当前中间变量构成的序列中的最大值。若上式的值仍小于n，那么在当前的深度限制下不可能达到n值，需要进行剪枝。</p>\n<p><strong>用位运算<code>maxVal &lt;&lt; maxd - d</code>的方式来代替<code>maxVal * pow(2, maxd - d)</code>的运算方式有助于提升速度。</strong></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri  8 Feb 16:18:30 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1007</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findMaxVal</span><span class=\"params\">(<span class=\"keyword\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= dep; i++)&#123;</span><br><span class=\"line\">        ans = max(ans, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, <span class=\"keyword\">int</span> maxd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep &gt;= maxd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[dep] == n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//prune</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxVal = findMaxVal(dep);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(maxVal &lt;&lt; (maxd - dep) &lt; n) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = dep; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        a[dep + <span class=\"number\">1</span>] = a[dep] + a[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfs(dep + <span class=\"number\">1</span>, maxd)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[dep] - a[i] &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            a[dep + <span class=\"number\">1</span>] = a[dep] - a[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(dep + <span class=\"number\">1</span>, maxd)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>    ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> maxd = <span class=\"number\">1</span>; maxd &lt;= maxn; maxd++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(<span class=\"number\">0</span>, maxd))&#123;</span><br><span class=\"line\">                res = maxd;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; res &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva1599-Ideal Path-双向BFS","date":"2018-11-18T02:49:44.000Z","_content":"给定一个n个顶点和m条边的无向图，每条边都有颜色，求从结点1到结点n的一条最短路，若有多条则取路径颜色序列字典序最小的那条。可能会有重边和自环。\n<!--more-->\n# 链接\n[Uva1599-Ideal Path](https://vjudge.net/problem/UVA-1599)\n\n# 题解\n这里每条边的权值都是一样的，可以求最短路的方式有 $BFS$，$SPFA$，$Dijkstra$ 等。但是这些方法都不能保证求得的最短路的字典序最小。可以先从节点n出发跑一次 $BFS$。这样再从节点1出发时可以按照各个结点已经标记好的距离，每次到达一个新结点时保证d值恰好减1,直到到达终点。\n按照上述规则从起点出发，优先选择颜色字典序最小的走，若多条边的颜色字典序都最小则记录所有这些边的终点，下一步时考虑从所有这些点出发的边。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 17 Nov 23:09:12 CST 2018\n *\n */\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nconst int inf = 1e9 + 7;\nstruct Edge{\n    int to;\n    int color;\n};\nvector<Edge> G[maxn];\nint n, m;\nint d[maxn];\nbool vis[maxn];\n\nvoid back_bfs(){\n    d[n - 1] = 0;\n    vis[n - 1] = true;\n    queue<int> que;\n    que.push(n - 1);\n    while(!que.empty()){\n        int v = que.front();\n        que.pop();\n        for(size_t i = 0; i < G[v].size(); i++){\n            Edge e = G[v][i];\n            int u = e.to;\n            if(!vis[u]){\n                d[u] = d[v] + 1;\n                que.push(u);\n                vis[u] = true;\n            }\n        }\n\n    }\n}\n\nvector<int> ans;\n\nvoid bfs(){\n    memset(vis, 0, sizeof(vis));\n    vis[0] = true;\n\n    vector<int> next;\n    next.push_back(0);\n    for(int i = 0; i < d[0]; i++){\n        int minColor = inf;\n        for(size_t j = 0; j < next.size(); j++){\n            int v = next[j];\n            for(size_t k = 0; k < G[v].size(); k++){\n                Edge e = G[v][k];\n                int u = e.to;\n                if(d[u] == d[v] - 1){\n                    minColor = min(minColor, e.color);\n                }\n            }\n        }\n        ans.push_back(minColor);\n\n        vector<int> next2;\n        for(size_t j = 0; j < next.size(); j++){\n            int v = next[j];\n            for(size_t k = 0; k < G[v].size(); k++){\n                Edge e = G[v][k];\n                if(e.color == minColor && !vis[e.to] && d[e.to] == d[v] - 1){\n                    next2.push_back(e.to);\n                    vis[e.to] = true;\n                }\n            }\n        }\n        next = next2;\n    }\n\n    int res = ans.size();\n    cout << res << endl;\n    for(int i = 0; i < res; i++){\n        if(i == 0) cout << ans[i];\n        else cout << \" \" << ans[i];\n    }\n    cout << endl;\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n >> m){\n        memset(d, 0, sizeof(d));\n        memset(vis, 0, sizeof(vis));\n        ans.clear();\n        for(int i = 0; i < n; i++){\n            G[i].clear();\n        }\n\n        int a, b, c;\n        Edge e;\n        for(int i = 0; i < m; i++){\n            cin >> a >> b >> c;\n            e.to = b - 1;\n            e.color = c;\n            G[a - 1].push_back(e);\n            e.to = a - 1;\n            G[b - 1].push_back(e);\n        }\n\n        back_bfs();\n        bfs();\n    }\n    return 0;\n}\n```\n","source":"_posts/Uva1599-Ideal-Path.md","raw":"---\ntitle: Uva1599-Ideal Path-双向BFS\ndate: 2018-11-18 10:49:44\ncategories:\n- ACM\n- BFS\ntags:\n- BFS\n---\n给定一个n个顶点和m条边的无向图，每条边都有颜色，求从结点1到结点n的一条最短路，若有多条则取路径颜色序列字典序最小的那条。可能会有重边和自环。\n<!--more-->\n# 链接\n[Uva1599-Ideal Path](https://vjudge.net/problem/UVA-1599)\n\n# 题解\n这里每条边的权值都是一样的，可以求最短路的方式有 $BFS$，$SPFA$，$Dijkstra$ 等。但是这些方法都不能保证求得的最短路的字典序最小。可以先从节点n出发跑一次 $BFS$。这样再从节点1出发时可以按照各个结点已经标记好的距离，每次到达一个新结点时保证d值恰好减1,直到到达终点。\n按照上述规则从起点出发，优先选择颜色字典序最小的走，若多条边的颜色字典序都最小则记录所有这些边的终点，下一步时考虑从所有这些点出发的边。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 17 Nov 23:09:12 CST 2018\n *\n */\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nconst int inf = 1e9 + 7;\nstruct Edge{\n    int to;\n    int color;\n};\nvector<Edge> G[maxn];\nint n, m;\nint d[maxn];\nbool vis[maxn];\n\nvoid back_bfs(){\n    d[n - 1] = 0;\n    vis[n - 1] = true;\n    queue<int> que;\n    que.push(n - 1);\n    while(!que.empty()){\n        int v = que.front();\n        que.pop();\n        for(size_t i = 0; i < G[v].size(); i++){\n            Edge e = G[v][i];\n            int u = e.to;\n            if(!vis[u]){\n                d[u] = d[v] + 1;\n                que.push(u);\n                vis[u] = true;\n            }\n        }\n\n    }\n}\n\nvector<int> ans;\n\nvoid bfs(){\n    memset(vis, 0, sizeof(vis));\n    vis[0] = true;\n\n    vector<int> next;\n    next.push_back(0);\n    for(int i = 0; i < d[0]; i++){\n        int minColor = inf;\n        for(size_t j = 0; j < next.size(); j++){\n            int v = next[j];\n            for(size_t k = 0; k < G[v].size(); k++){\n                Edge e = G[v][k];\n                int u = e.to;\n                if(d[u] == d[v] - 1){\n                    minColor = min(minColor, e.color);\n                }\n            }\n        }\n        ans.push_back(minColor);\n\n        vector<int> next2;\n        for(size_t j = 0; j < next.size(); j++){\n            int v = next[j];\n            for(size_t k = 0; k < G[v].size(); k++){\n                Edge e = G[v][k];\n                if(e.color == minColor && !vis[e.to] && d[e.to] == d[v] - 1){\n                    next2.push_back(e.to);\n                    vis[e.to] = true;\n                }\n            }\n        }\n        next = next2;\n    }\n\n    int res = ans.size();\n    cout << res << endl;\n    for(int i = 0; i < res; i++){\n        if(i == 0) cout << ans[i];\n        else cout << \" \" << ans[i];\n    }\n    cout << endl;\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n >> m){\n        memset(d, 0, sizeof(d));\n        memset(vis, 0, sizeof(vis));\n        ans.clear();\n        for(int i = 0; i < n; i++){\n            G[i].clear();\n        }\n\n        int a, b, c;\n        Edge e;\n        for(int i = 0; i < m; i++){\n            cin >> a >> b >> c;\n            e.to = b - 1;\n            e.color = c;\n            G[a - 1].push_back(e);\n            e.to = a - 1;\n            G[b - 1].push_back(e);\n        }\n\n        back_bfs();\n        bfs();\n    }\n    return 0;\n}\n```\n","slug":"Uva1599-Ideal-Path","published":1,"updated":"2019-08-20T14:44:32.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lp001830vnn0j30gwu","content":"<p>给定一个n个顶点和m条边的无向图，每条边都有颜色，求从结点1到结点n的一条最短路，若有多条则取路径颜色序列字典序最小的那条。可能会有重边和自环。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-1599\" target=\"_blank\" rel=\"noopener\">Uva1599-Ideal Path</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>这里每条边的权值都是一样的，可以求最短路的方式有 $BFS$，$SPFA$，$Dijkstra$ 等。但是这些方法都不能保证求得的最短路的字典序最小。可以先从节点n出发跑一次 $BFS$。这样再从节点1出发时可以按照各个结点已经标记好的距离，每次到达一个新结点时保证d值恰好减1,直到到达终点。<br>按照上述规则从起点出发，优先选择颜色字典序最小的走，若多条边的颜色字典序都最小则记录所有这些边的终点，下一步时考虑从所有这些点出发的边。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 17 Nov 23:09:12 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> color;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; G[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">back_bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    d[n - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[n - <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">    que.push(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; G[v].size(); i++)&#123;</span><br><span class=\"line\">            Edge e = G[v][i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u = e.to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vis[u])&#123;</span><br><span class=\"line\">                d[u] = d[v] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.push(u);</span><br><span class=\"line\">                vis[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; next;</span><br><span class=\"line\">    next.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; d[<span class=\"number\">0</span>]; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minColor = inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; next.size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = next[j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> k = <span class=\"number\">0</span>; k &lt; G[v].size(); k++)&#123;</span><br><span class=\"line\">                Edge e = G[v][k];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> u = e.to;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[u] == d[v] - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    minColor = min(minColor, e.color);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans.push_back(minColor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; next2;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; next.size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = next[j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> k = <span class=\"number\">0</span>; k &lt; G[v].size(); k++)&#123;</span><br><span class=\"line\">                Edge e = G[v][k];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(e.color == minColor &amp;&amp; !vis[e.to] &amp;&amp; d[e.to] == d[v] - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    next2.push_back(e.to);</span><br><span class=\"line\">                    vis[e.to] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next = next2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = ans.size();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; res &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; res; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; ans[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; ans[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        ans.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            G[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">        Edge e;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">            e.to = b - <span class=\"number\">1</span>;</span><br><span class=\"line\">            e.color = c;</span><br><span class=\"line\">            G[a - <span class=\"number\">1</span>].push_back(e);</span><br><span class=\"line\">            e.to = a - <span class=\"number\">1</span>;</span><br><span class=\"line\">            G[b - <span class=\"number\">1</span>].push_back(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        back_bfs();</span><br><span class=\"line\">        bfs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>给定一个n个顶点和m条边的无向图，每条边都有颜色，求从结点1到结点n的一条最短路，若有多条则取路径颜色序列字典序最小的那条。可能会有重边和自环。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-1599\" target=\"_blank\" rel=\"noopener\">Uva1599-Ideal Path</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>这里每条边的权值都是一样的，可以求最短路的方式有 $BFS$，$SPFA$，$Dijkstra$ 等。但是这些方法都不能保证求得的最短路的字典序最小。可以先从节点n出发跑一次 $BFS$。这样再从节点1出发时可以按照各个结点已经标记好的距离，每次到达一个新结点时保证d值恰好减1,直到到达终点。<br>按照上述规则从起点出发，优先选择颜色字典序最小的走，若多条边的颜色字典序都最小则记录所有这些边的终点，下一步时考虑从所有这些点出发的边。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 17 Nov 23:09:12 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> color;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; G[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">back_bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    d[n - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[n - <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">    que.push(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; G[v].size(); i++)&#123;</span><br><span class=\"line\">            Edge e = G[v][i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u = e.to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vis[u])&#123;</span><br><span class=\"line\">                d[u] = d[v] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.push(u);</span><br><span class=\"line\">                vis[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; next;</span><br><span class=\"line\">    next.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; d[<span class=\"number\">0</span>]; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minColor = inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; next.size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = next[j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> k = <span class=\"number\">0</span>; k &lt; G[v].size(); k++)&#123;</span><br><span class=\"line\">                Edge e = G[v][k];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> u = e.to;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[u] == d[v] - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    minColor = min(minColor, e.color);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans.push_back(minColor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; next2;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; next.size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = next[j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> k = <span class=\"number\">0</span>; k &lt; G[v].size(); k++)&#123;</span><br><span class=\"line\">                Edge e = G[v][k];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(e.color == minColor &amp;&amp; !vis[e.to] &amp;&amp; d[e.to] == d[v] - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    next2.push_back(e.to);</span><br><span class=\"line\">                    vis[e.to] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next = next2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = ans.size();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; res &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; res; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; ans[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; ans[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        ans.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            G[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">        Edge e;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">            e.to = b - <span class=\"number\">1</span>;</span><br><span class=\"line\">            e.color = c;</span><br><span class=\"line\">            G[a - <span class=\"number\">1</span>].push_back(e);</span><br><span class=\"line\">            e.to = a - <span class=\"number\">1</span>;</span><br><span class=\"line\">            G[b - <span class=\"number\">1</span>].push_back(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        back_bfs();</span><br><span class=\"line\">        bfs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva1600-Patrol Robot-BFS","date":"2018-12-03T01:20:27.000Z","_content":"一个$ m \\times n $的长方形场地，0表示可走格子，1表示障碍物。求从 $(1，1)$ 到 $(m，n)$的最短路径。其中可以走存在障碍物的格子，但不能在障碍物上连续走k步。\n<!--more-->\n# 链接\n[Uva1600-Patrol Robot](https://vjudge.net/problem/UVA-1600)\n\n# 题解\n用BFS和DFS搜索路径都可以，但如果不剪枝的用DFS会TL。用BFS搜索，为队列中的每一项，除了x，y坐标属性之外，再加上当前的k值属性。同时还有需要注意的一点是，**这个问题里同一格子可以被多次放入队列，只要它的k值属性或距离d值相比之前有提升**。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 30 Nov 19:05:23 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 27;\nint mp[maxn][maxn];\nint d[maxn][maxn];\nint record_k[maxn][maxn];\nint t, m, n, k;\nstruct Node{\n    Node(int x = 0, int y = 0, int k = 0):x(x), y(y), k(k){}\n    int x, y;\n    int k;\n};\nint dx[] = {1, 0, -1, 0};\nint dy[] = {0, 1, 0, -1};\n\nint bfs(){\n    d[0][0] = 0;\n    record_k[0][0] = k;\n    queue<Node> que;\n    que.push(Node(0, 0, k));\n\n    while(!que.empty()){\n        Node nd = que.front();\n        que.pop();\n        for(int i = 0; i < 4; i++){\n            int nx = nd.x + dx[i], ny = nd.y + dy[i];\n            if(nx >= 0 && nx < m && ny >= 0 && ny < n){\n                if(mp[nx][ny] == 0){\n                    if(d[nx][ny] == -1 || (d[nx][ny] > d[nd.x][nd.y] && record_k[nx][ny] < k)){\n                        d[nx][ny] = d[nd.x][nd.y] + 1;\n                        record_k[nx][ny] = k;\n                        que.push(Node(nx, ny, k));\n                    }\n                }\n                else if(mp[nx][ny] == 1 && nd.k > 0){\n                    if(d[nx][ny] == -1 || (d[nx][ny] > d[nd.x][nd.y] && record_k[nx][ny] < nd.k - 1)){\n                        d[nx][ny] = d[nd.x][nd.y] + 1;\n                        record_k[nx][ny] = nd.k - 1;\n                        que.push(Node(nx, ny, nd.k - 1));\n                    }\n                }\n            }\n        }\n    }\n\n    return d[m - 1][n - 1];\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    cin >> t;\n    while(t--){\n        memset(d, -1, sizeof(d));\n        memset(record_k, 0, sizeof(record_k));\n        cin >> m >> n >> k;\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                cin >> mp[i][j];\n            }\n        }\n        int ans = bfs();\n        cout << ans << endl;\n    }\n    return 0;\n}\n```","source":"_posts/Uva1600-Patrol-Robot.md","raw":"---\ntitle: Uva1600-Patrol Robot-BFS\ndate: 2018-12-03 09:20:27\ncategories:\n- ACM\n- BFS\ntags:\n- BFS\n---\n一个$ m \\times n $的长方形场地，0表示可走格子，1表示障碍物。求从 $(1，1)$ 到 $(m，n)$的最短路径。其中可以走存在障碍物的格子，但不能在障碍物上连续走k步。\n<!--more-->\n# 链接\n[Uva1600-Patrol Robot](https://vjudge.net/problem/UVA-1600)\n\n# 题解\n用BFS和DFS搜索路径都可以，但如果不剪枝的用DFS会TL。用BFS搜索，为队列中的每一项，除了x，y坐标属性之外，再加上当前的k值属性。同时还有需要注意的一点是，**这个问题里同一格子可以被多次放入队列，只要它的k值属性或距离d值相比之前有提升**。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 30 Nov 19:05:23 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 27;\nint mp[maxn][maxn];\nint d[maxn][maxn];\nint record_k[maxn][maxn];\nint t, m, n, k;\nstruct Node{\n    Node(int x = 0, int y = 0, int k = 0):x(x), y(y), k(k){}\n    int x, y;\n    int k;\n};\nint dx[] = {1, 0, -1, 0};\nint dy[] = {0, 1, 0, -1};\n\nint bfs(){\n    d[0][0] = 0;\n    record_k[0][0] = k;\n    queue<Node> que;\n    que.push(Node(0, 0, k));\n\n    while(!que.empty()){\n        Node nd = que.front();\n        que.pop();\n        for(int i = 0; i < 4; i++){\n            int nx = nd.x + dx[i], ny = nd.y + dy[i];\n            if(nx >= 0 && nx < m && ny >= 0 && ny < n){\n                if(mp[nx][ny] == 0){\n                    if(d[nx][ny] == -1 || (d[nx][ny] > d[nd.x][nd.y] && record_k[nx][ny] < k)){\n                        d[nx][ny] = d[nd.x][nd.y] + 1;\n                        record_k[nx][ny] = k;\n                        que.push(Node(nx, ny, k));\n                    }\n                }\n                else if(mp[nx][ny] == 1 && nd.k > 0){\n                    if(d[nx][ny] == -1 || (d[nx][ny] > d[nd.x][nd.y] && record_k[nx][ny] < nd.k - 1)){\n                        d[nx][ny] = d[nd.x][nd.y] + 1;\n                        record_k[nx][ny] = nd.k - 1;\n                        que.push(Node(nx, ny, nd.k - 1));\n                    }\n                }\n            }\n        }\n    }\n\n    return d[m - 1][n - 1];\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    cin >> t;\n    while(t--){\n        memset(d, -1, sizeof(d));\n        memset(record_k, 0, sizeof(record_k));\n        cin >> m >> n >> k;\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                cin >> mp[i][j];\n            }\n        }\n        int ans = bfs();\n        cout << ans << endl;\n    }\n    return 0;\n}\n```","slug":"Uva1600-Patrol-Robot","published":1,"updated":"2019-08-20T14:44:23.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lp001930vnpqdsuost","content":"<p>一个$ m \\times n $的长方形场地，0表示可走格子，1表示障碍物。求从 $(1，1)$ 到 $(m，n)$的最短路径。其中可以走存在障碍物的格子，但不能在障碍物上连续走k步。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-1600\" target=\"_blank\" rel=\"noopener\">Uva1600-Patrol Robot</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>用BFS和DFS搜索路径都可以，但如果不剪枝的用DFS会TL。用BFS搜索，为队列中的每一项，除了x，y坐标属性之外，再加上当前的k值属性。同时还有需要注意的一点是，<strong>这个问题里同一格子可以被多次放入队列，只要它的k值属性或距离d值相比之前有提升</strong>。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 30 Nov 19:05:23 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">27</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> record_k[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t, m, n, k;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>):x(x), y(y), k(k)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    d[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    record_k[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = k;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    que.push(Node(<span class=\"number\">0</span>, <span class=\"number\">0</span>, k));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node nd = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = nd.x + dx[i], ny = nd.y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[nx][ny] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(d[nx][ny] == <span class=\"number\">-1</span> || (d[nx][ny] &gt; d[nd.x][nd.y] &amp;&amp; record_k[nx][ny] &lt; k))&#123;</span><br><span class=\"line\">                        d[nx][ny] = d[nd.x][nd.y] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        record_k[nx][ny] = k;</span><br><span class=\"line\">                        que.push(Node(nx, ny, k));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[nx][ny] == <span class=\"number\">1</span> &amp;&amp; nd.k &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(d[nx][ny] == <span class=\"number\">-1</span> || (d[nx][ny] &gt; d[nd.x][nd.y] &amp;&amp; record_k[nx][ny] &lt; nd.k - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                        d[nx][ny] = d[nd.x][nd.y] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        record_k[nx][ny] = nd.k - <span class=\"number\">1</span>;</span><br><span class=\"line\">                        que.push(Node(nx, ny, nd.k - <span class=\"number\">1</span>));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(record_k, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(record_k));</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span> &gt;&gt; mp[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = bfs();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>一个$ m \\times n $的长方形场地，0表示可走格子，1表示障碍物。求从 $(1，1)$ 到 $(m，n)$的最短路径。其中可以走存在障碍物的格子，但不能在障碍物上连续走k步。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-1600\" target=\"_blank\" rel=\"noopener\">Uva1600-Patrol Robot</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>用BFS和DFS搜索路径都可以，但如果不剪枝的用DFS会TL。用BFS搜索，为队列中的每一项，除了x，y坐标属性之外，再加上当前的k值属性。同时还有需要注意的一点是，<strong>这个问题里同一格子可以被多次放入队列，只要它的k值属性或距离d值相比之前有提升</strong>。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 30 Nov 19:05:23 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">27</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> record_k[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> t, m, n, k;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>):x(x), y(y), k(k)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    d[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    record_k[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = k;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    que.push(Node(<span class=\"number\">0</span>, <span class=\"number\">0</span>, k));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node nd = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = nd.x + dx[i], ny = nd.y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[nx][ny] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(d[nx][ny] == <span class=\"number\">-1</span> || (d[nx][ny] &gt; d[nd.x][nd.y] &amp;&amp; record_k[nx][ny] &lt; k))&#123;</span><br><span class=\"line\">                        d[nx][ny] = d[nd.x][nd.y] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        record_k[nx][ny] = k;</span><br><span class=\"line\">                        que.push(Node(nx, ny, k));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[nx][ny] == <span class=\"number\">1</span> &amp;&amp; nd.k &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(d[nx][ny] == <span class=\"number\">-1</span> || (d[nx][ny] &gt; d[nd.x][nd.y] &amp;&amp; record_k[nx][ny] &lt; nd.k - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                        d[nx][ny] = d[nd.x][nd.y] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        record_k[nx][ny] = nd.k - <span class=\"number\">1</span>;</span><br><span class=\"line\">                        que.push(Node(nx, ny, nd.k - <span class=\"number\">1</span>));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(record_k, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(record_k));</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span> &gt;&gt; mp[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = bfs();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva1602-Lattice Animals-搜索+仿射变换技巧","date":"2019-02-12T15:53:39.000Z","_content":"给定$n，w，h$，求在$n \\times n$的网格中，最多能放入几种宽和高不超过$w和h$的连通块。其中一个连通块经过平移、旋转和翻转得到的连通块不属于新的连通块。\n![pic](/pic.png)\n<!--more-->\n# 链接\n题目链接：[Uva1602-Lattice Animals](https://vjudge.net/problem/UVA-1602)\n参考链接：[XDU_Skyline's Blog](https://blog.csdn.net/u014800748/article/details/47400557)，[Rujia Liu's Github Repository](https://github.com/aoapc-book/aoapc-bac2nd/blob/master/ch7/UVa1602.cpp)\n\n# 题解\n分为两部分，一部分为搜索，另一部分为判重。\n搜索可以采用BFS也可以采用DFS。示例代码里采用了BFS。\n判重部分，因为一个连通块经过平移、旋转和翻转后得到的连通块不属于新的连通块，所以在判断一个连通块是否重复时首先要对其**每一种可能的形态**进行判断。\n对于**平移操作**，我们考虑将连通块进行**标准化**normalize，即统计连通块的x方向和y方向的最小值minX和minY，然后将连通块中的每一个单元格都**减去矢量(minX，minY)**得到标准化后的连通块。\n对于**旋转操作**，假设一个单元格的**坐标为(x，y),**表示逆时针旋转90°的旋转矩阵为\n$$\n \\begin{bmatrix}\n   0 & -1 \\\\\\\\\n   1 & 0\n  \\end{bmatrix}\n$$\n所以该单元格**逆时针旋转90°之后的坐标为(-y, x)。**对连通块中的每一个单元格都执行此操作就得到了旋转后的连通块。*旋转之后的连通块还要进行一次normalize操作再判重。*\n对于**翻转操作**，可以沿x轴翻转也可以沿y轴翻转。其对应的**坐标变换是(x，y)->(-x，y)。**(以沿y轴翻转为例)。翻转之后还要进行一圈的旋转判重，事实上沿x轴进行翻转后再旋转180°就可以得到沿y轴翻转后的图形，所以不需要再分开讨论这两种不同的翻转情况。*同样翻转之后的连通块也要进行normalize操作后再判重。*\n\n以上是思路部分，关于具体的实现，搜索部分采用BFS，判重部分利用STL中的set判重。单元格通过一个结构体存储x和y坐标来表示，联通块通过set存储其各个单元格来表示。*连通块之所以用set表示，而不是vector，是因为set会自动排序，这样就避免了因插入顺序不同导致的判重失败问题。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 11 Feb 22:03:44 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 10;\nconst int inf = 100;\nint dx[] = {0, 1, 0, -1};\nint dy[] = {1, 0, -1, 0};\nstruct Cell{\n    int x, y;\n    Cell(int x = 0, int y = 0):x(x), y(y){}\n    bool operator <(const Cell& c) const{\n        if(this->x == c.x) return this->y < c.y;\n        else return this->x < c.x;\n    }\n};\ntypedef set<Cell> Polyomino;\nset<Polyomino> Poly[maxn + 1];\n\nPolyomino normalize(Polyomino p){\n    Polyomino p0;\n    int minx, miny;\n    minx = miny = inf;\n\n    for(Polyomino::iterator t = p.begin(); t != p.end(); t++){\n        minx = min(minx, t->x);\n        miny = min(miny, t->y);\n    }\n    for(Polyomino::iterator t = p.begin(); t != p.end(); t++){\n        p0.insert(Cell(t->x - minx, t->y - miny));\n    }\n    return p0;\n}\n\nPolyomino rotate(Polyomino p){\n    Polyomino p0;\n    for(Polyomino::iterator t = p.begin(); t != p.end(); t++){\n        p0.insert(Cell(-t->y, t->x));\n    }\n    return normalize(p0);\n}\n\nPolyomino flip(Polyomino p){\n    Polyomino p0;\n    for(Polyomino::iterator t = p.begin(); t != p.end(); t++){\n        p0.insert(Cell(-t->x, t->y));\n    }\n    return normalize(p0);\n}\n\nvoid check(Polyomino p, Cell c, int n){\n    p.insert(c);\n\n    p = normalize(p);\n    for(int i = 0; i < 4; i++){\n        if(Poly[n].count(p) != 0) return;\n        p = rotate(p);\n    }\n\n    p = flip(p);\n    for(int i = 0; i < 4; i++){\n        if(Poly[n].count(p) != 0) return;\n        p = rotate(p);\n    }\n\n    Poly[n].insert(p);\n}\n\nvoid search(){\n    Polyomino p1;\n    p1.insert(Cell(0, 0));\n    Poly[1].insert(p1);\n\n    for(int n = 2; n <= maxn; n++){\n        for(auto p : Poly[n - 1]){\n            for(auto t : p){\n                for(int i = 0; i < 4; i++){\n                    int nx = t.x + dx[i];\n                    int ny = t.y + dy[i];\n                    Cell c(nx, ny);\n                    if(p.count(c) == 0) check(p, c, n);\n                }\n            }\n        }\n    }\n}\n\nint getAns(int n, int w, int h){\n    int minx, miny, maxx, maxy;\n    int cnt = 0;\n\n    for(auto p : Poly[n]){\n        minx = miny = inf;\n        maxx = maxy = 0;\n        for(auto t : p){\n            minx = min(minx, t.x);\n            miny = min(miny, t.y);\n            maxx = max(maxx, t.x);\n            maxy = max(maxy, t.y);\n        }\n        int lx = maxx - minx;\n        int ly = maxy - miny;\n        if(min(lx, ly) < min(w, h) && max(lx, ly) < max(w, h)){\n            cnt++;\n        }\n    }\n\n    return cnt;\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    int n, w, h;\n\n    search();\n\n    while(cin >> n >> w >> h){\n        int ans = getAns(n, w, h);\n        cout << ans << endl;\n    }\n    return 0;\n}\n```","source":"_posts/Uva1602-Lattice-Animals.md","raw":"---\ntitle: Uva1602-Lattice Animals-搜索+仿射变换技巧\ndate: 2019-02-12 23:53:39\ncategories:\n- ACM\n- BFS\ntags:\n- 搜索\n- 仿射变换\n---\n给定$n，w，h$，求在$n \\times n$的网格中，最多能放入几种宽和高不超过$w和h$的连通块。其中一个连通块经过平移、旋转和翻转得到的连通块不属于新的连通块。\n![pic](/pic.png)\n<!--more-->\n# 链接\n题目链接：[Uva1602-Lattice Animals](https://vjudge.net/problem/UVA-1602)\n参考链接：[XDU_Skyline's Blog](https://blog.csdn.net/u014800748/article/details/47400557)，[Rujia Liu's Github Repository](https://github.com/aoapc-book/aoapc-bac2nd/blob/master/ch7/UVa1602.cpp)\n\n# 题解\n分为两部分，一部分为搜索，另一部分为判重。\n搜索可以采用BFS也可以采用DFS。示例代码里采用了BFS。\n判重部分，因为一个连通块经过平移、旋转和翻转后得到的连通块不属于新的连通块，所以在判断一个连通块是否重复时首先要对其**每一种可能的形态**进行判断。\n对于**平移操作**，我们考虑将连通块进行**标准化**normalize，即统计连通块的x方向和y方向的最小值minX和minY，然后将连通块中的每一个单元格都**减去矢量(minX，minY)**得到标准化后的连通块。\n对于**旋转操作**，假设一个单元格的**坐标为(x，y),**表示逆时针旋转90°的旋转矩阵为\n$$\n \\begin{bmatrix}\n   0 & -1 \\\\\\\\\n   1 & 0\n  \\end{bmatrix}\n$$\n所以该单元格**逆时针旋转90°之后的坐标为(-y, x)。**对连通块中的每一个单元格都执行此操作就得到了旋转后的连通块。*旋转之后的连通块还要进行一次normalize操作再判重。*\n对于**翻转操作**，可以沿x轴翻转也可以沿y轴翻转。其对应的**坐标变换是(x，y)->(-x，y)。**(以沿y轴翻转为例)。翻转之后还要进行一圈的旋转判重，事实上沿x轴进行翻转后再旋转180°就可以得到沿y轴翻转后的图形，所以不需要再分开讨论这两种不同的翻转情况。*同样翻转之后的连通块也要进行normalize操作后再判重。*\n\n以上是思路部分，关于具体的实现，搜索部分采用BFS，判重部分利用STL中的set判重。单元格通过一个结构体存储x和y坐标来表示，联通块通过set存储其各个单元格来表示。*连通块之所以用set表示，而不是vector，是因为set会自动排序，这样就避免了因插入顺序不同导致的判重失败问题。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 11 Feb 22:03:44 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 10;\nconst int inf = 100;\nint dx[] = {0, 1, 0, -1};\nint dy[] = {1, 0, -1, 0};\nstruct Cell{\n    int x, y;\n    Cell(int x = 0, int y = 0):x(x), y(y){}\n    bool operator <(const Cell& c) const{\n        if(this->x == c.x) return this->y < c.y;\n        else return this->x < c.x;\n    }\n};\ntypedef set<Cell> Polyomino;\nset<Polyomino> Poly[maxn + 1];\n\nPolyomino normalize(Polyomino p){\n    Polyomino p0;\n    int minx, miny;\n    minx = miny = inf;\n\n    for(Polyomino::iterator t = p.begin(); t != p.end(); t++){\n        minx = min(minx, t->x);\n        miny = min(miny, t->y);\n    }\n    for(Polyomino::iterator t = p.begin(); t != p.end(); t++){\n        p0.insert(Cell(t->x - minx, t->y - miny));\n    }\n    return p0;\n}\n\nPolyomino rotate(Polyomino p){\n    Polyomino p0;\n    for(Polyomino::iterator t = p.begin(); t != p.end(); t++){\n        p0.insert(Cell(-t->y, t->x));\n    }\n    return normalize(p0);\n}\n\nPolyomino flip(Polyomino p){\n    Polyomino p0;\n    for(Polyomino::iterator t = p.begin(); t != p.end(); t++){\n        p0.insert(Cell(-t->x, t->y));\n    }\n    return normalize(p0);\n}\n\nvoid check(Polyomino p, Cell c, int n){\n    p.insert(c);\n\n    p = normalize(p);\n    for(int i = 0; i < 4; i++){\n        if(Poly[n].count(p) != 0) return;\n        p = rotate(p);\n    }\n\n    p = flip(p);\n    for(int i = 0; i < 4; i++){\n        if(Poly[n].count(p) != 0) return;\n        p = rotate(p);\n    }\n\n    Poly[n].insert(p);\n}\n\nvoid search(){\n    Polyomino p1;\n    p1.insert(Cell(0, 0));\n    Poly[1].insert(p1);\n\n    for(int n = 2; n <= maxn; n++){\n        for(auto p : Poly[n - 1]){\n            for(auto t : p){\n                for(int i = 0; i < 4; i++){\n                    int nx = t.x + dx[i];\n                    int ny = t.y + dy[i];\n                    Cell c(nx, ny);\n                    if(p.count(c) == 0) check(p, c, n);\n                }\n            }\n        }\n    }\n}\n\nint getAns(int n, int w, int h){\n    int minx, miny, maxx, maxy;\n    int cnt = 0;\n\n    for(auto p : Poly[n]){\n        minx = miny = inf;\n        maxx = maxy = 0;\n        for(auto t : p){\n            minx = min(minx, t.x);\n            miny = min(miny, t.y);\n            maxx = max(maxx, t.x);\n            maxy = max(maxy, t.y);\n        }\n        int lx = maxx - minx;\n        int ly = maxy - miny;\n        if(min(lx, ly) < min(w, h) && max(lx, ly) < max(w, h)){\n            cnt++;\n        }\n    }\n\n    return cnt;\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    int n, w, h;\n\n    search();\n\n    while(cin >> n >> w >> h){\n        int ans = getAns(n, w, h);\n        cout << ans << endl;\n    }\n    return 0;\n}\n```","slug":"Uva1602-Lattice-Animals","published":1,"updated":"2019-08-20T14:43:59.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lq001a30vnxdzduuut","content":"<p>给定$n，w，h$，求在$n \\times n$的网格中，最多能放入几种宽和高不超过$w和h$的连通块。其中一个连通块经过平移、旋转和翻转得到的连通块不属于新的连通块。<br><img src=\"/2019/02/12/Uva1602-Lattice-Animals/pic.png\" alt=\"pic\"></p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接：<a href=\"https://vjudge.net/problem/UVA-1602\" target=\"_blank\" rel=\"noopener\">Uva1602-Lattice Animals</a><br>参考链接：<a href=\"https://blog.csdn.net/u014800748/article/details/47400557\" target=\"_blank\" rel=\"noopener\">XDU_Skyline’s Blog</a>，<a href=\"https://github.com/aoapc-book/aoapc-bac2nd/blob/master/ch7/UVa1602.cpp\" target=\"_blank\" rel=\"noopener\">Rujia Liu’s Github Repository</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>分为两部分，一部分为搜索，另一部分为判重。<br>搜索可以采用BFS也可以采用DFS。示例代码里采用了BFS。<br>判重部分，因为一个连通块经过平移、旋转和翻转后得到的连通块不属于新的连通块，所以在判断一个连通块是否重复时首先要对其<strong>每一种可能的形态</strong>进行判断。<br>对于<strong>平移操作</strong>，我们考虑将连通块进行<strong>标准化</strong>normalize，即统计连通块的x方向和y方向的最小值minX和minY，然后将连通块中的每一个单元格都<strong>减去矢量(minX，minY)</strong>得到标准化后的连通块。<br>对于<strong>旋转操作</strong>，假设一个单元格的<strong>坐标为(x，y),</strong>表示逆时针旋转90°的旋转矩阵为<br>$$<br> \\begin{bmatrix}<br>   0 &amp; -1 \\\\<br>   1 &amp; 0<br>  \\end{bmatrix}<br>$$<br>所以该单元格<strong>逆时针旋转90°之后的坐标为(-y, x)。</strong>对连通块中的每一个单元格都执行此操作就得到了旋转后的连通块。<em>旋转之后的连通块还要进行一次normalize操作再判重。</em><br>对于<strong>翻转操作</strong>，可以沿x轴翻转也可以沿y轴翻转。其对应的<strong>坐标变换是(x，y)-&gt;(-x，y)。</strong>(以沿y轴翻转为例)。翻转之后还要进行一圈的旋转判重，事实上沿x轴进行翻转后再旋转180°就可以得到沿y轴翻转后的图形，所以不需要再分开讨论这两种不同的翻转情况。<em>同样翻转之后的连通块也要进行normalize操作后再判重。</em></p>\n<p>以上是思路部分，关于具体的实现，搜索部分采用BFS，判重部分利用STL中的set判重。单元格通过一个结构体存储x和y坐标来表示，联通块通过set存储其各个单元格来表示。<em>连通块之所以用set表示，而不是vector，是因为set会自动排序，这样就避免了因插入顺序不同导致的判重失败问题。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 11 Feb 22:03:44 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cell</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    Cell(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>):x(x), y(y)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> Cell&amp; c) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>-&gt;x == c.x) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;y &lt; c.y;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;x &lt; c.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">set</span>&lt;Cell&gt; Polyomino;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;Polyomino&gt; Poly[maxn + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Polyomino <span class=\"title\">normalize</span><span class=\"params\">(Polyomino p)</span></span>&#123;</span><br><span class=\"line\">    Polyomino p0;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minx, miny;</span><br><span class=\"line\">    minx = miny = inf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Polyomino::iterator t = p.begin(); t != p.end(); t++)&#123;</span><br><span class=\"line\">        minx = min(minx, t-&gt;x);</span><br><span class=\"line\">        miny = min(miny, t-&gt;y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Polyomino::iterator t = p.begin(); t != p.end(); t++)&#123;</span><br><span class=\"line\">        p0.insert(Cell(t-&gt;x - minx, t-&gt;y - miny));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Polyomino <span class=\"title\">rotate</span><span class=\"params\">(Polyomino p)</span></span>&#123;</span><br><span class=\"line\">    Polyomino p0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Polyomino::iterator t = p.begin(); t != p.end(); t++)&#123;</span><br><span class=\"line\">        p0.insert(Cell(-t-&gt;y, t-&gt;x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> normalize(p0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Polyomino <span class=\"title\">flip</span><span class=\"params\">(Polyomino p)</span></span>&#123;</span><br><span class=\"line\">    Polyomino p0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Polyomino::iterator t = p.begin(); t != p.end(); t++)&#123;</span><br><span class=\"line\">        p0.insert(Cell(-t-&gt;x, t-&gt;y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> normalize(p0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(Polyomino p, Cell c, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    p.insert(c);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = normalize(p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Poly[n].count(p) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        p = rotate(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = flip(p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Poly[n].count(p) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        p = rotate(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Poly[n].insert(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Polyomino p1;</span><br><span class=\"line\">    p1.insert(Cell(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    Poly[<span class=\"number\">1</span>].insert(p1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = <span class=\"number\">2</span>; n &lt;= maxn; n++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p : Poly[n - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t : p)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> nx = t.x + dx[i];</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> ny = t.y + dy[i];</span><br><span class=\"line\">                    <span class=\"function\">Cell <span class=\"title\">c</span><span class=\"params\">(nx, ny)</span></span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p.count(c) == <span class=\"number\">0</span>) check(p, c, n);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getAns</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minx, miny, maxx, maxy;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p : Poly[n])&#123;</span><br><span class=\"line\">        minx = miny = inf;</span><br><span class=\"line\">        maxx = maxy = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t : p)&#123;</span><br><span class=\"line\">            minx = min(minx, t.x);</span><br><span class=\"line\">            miny = min(miny, t.y);</span><br><span class=\"line\">            maxx = max(maxx, t.x);</span><br><span class=\"line\">            maxy = max(maxy, t.y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lx = maxx - minx;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ly = maxy - miny;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(min(lx, ly) &lt; min(w, h) &amp;&amp; max(lx, ly) &lt; max(w, h))&#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, w, h;</span><br><span class=\"line\"></span><br><span class=\"line\">    search();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; w &gt;&gt; h)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = getAns(n, w, h);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>给定$n，w，h$，求在$n \\times n$的网格中，最多能放入几种宽和高不超过$w和h$的连通块。其中一个连通块经过平移、旋转和翻转得到的连通块不属于新的连通块。<br><img src=\"/2019/02/12/Uva1602-Lattice-Animals/pic.png\" alt=\"pic\"></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接：<a href=\"https://vjudge.net/problem/UVA-1602\" target=\"_blank\" rel=\"noopener\">Uva1602-Lattice Animals</a><br>参考链接：<a href=\"https://blog.csdn.net/u014800748/article/details/47400557\" target=\"_blank\" rel=\"noopener\">XDU_Skyline’s Blog</a>，<a href=\"https://github.com/aoapc-book/aoapc-bac2nd/blob/master/ch7/UVa1602.cpp\" target=\"_blank\" rel=\"noopener\">Rujia Liu’s Github Repository</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>分为两部分，一部分为搜索，另一部分为判重。<br>搜索可以采用BFS也可以采用DFS。示例代码里采用了BFS。<br>判重部分，因为一个连通块经过平移、旋转和翻转后得到的连通块不属于新的连通块，所以在判断一个连通块是否重复时首先要对其<strong>每一种可能的形态</strong>进行判断。<br>对于<strong>平移操作</strong>，我们考虑将连通块进行<strong>标准化</strong>normalize，即统计连通块的x方向和y方向的最小值minX和minY，然后将连通块中的每一个单元格都<strong>减去矢量(minX，minY)</strong>得到标准化后的连通块。<br>对于<strong>旋转操作</strong>，假设一个单元格的<strong>坐标为(x，y),</strong>表示逆时针旋转90°的旋转矩阵为<br>$$<br> \\begin{bmatrix}<br>   0 &amp; -1 \\\\<br>   1 &amp; 0<br>  \\end{bmatrix}<br>$$<br>所以该单元格<strong>逆时针旋转90°之后的坐标为(-y, x)。</strong>对连通块中的每一个单元格都执行此操作就得到了旋转后的连通块。<em>旋转之后的连通块还要进行一次normalize操作再判重。</em><br>对于<strong>翻转操作</strong>，可以沿x轴翻转也可以沿y轴翻转。其对应的<strong>坐标变换是(x，y)-&gt;(-x，y)。</strong>(以沿y轴翻转为例)。翻转之后还要进行一圈的旋转判重，事实上沿x轴进行翻转后再旋转180°就可以得到沿y轴翻转后的图形，所以不需要再分开讨论这两种不同的翻转情况。<em>同样翻转之后的连通块也要进行normalize操作后再判重。</em></p>\n<p>以上是思路部分，关于具体的实现，搜索部分采用BFS，判重部分利用STL中的set判重。单元格通过一个结构体存储x和y坐标来表示，联通块通过set存储其各个单元格来表示。<em>连通块之所以用set表示，而不是vector，是因为set会自动排序，这样就避免了因插入顺序不同导致的判重失败问题。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 11 Feb 22:03:44 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cell</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    Cell(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>):x(x), y(y)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> Cell&amp; c) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>-&gt;x == c.x) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;y &lt; c.y;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;x &lt; c.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">set</span>&lt;Cell&gt; Polyomino;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;Polyomino&gt; Poly[maxn + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Polyomino <span class=\"title\">normalize</span><span class=\"params\">(Polyomino p)</span></span>&#123;</span><br><span class=\"line\">    Polyomino p0;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minx, miny;</span><br><span class=\"line\">    minx = miny = inf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Polyomino::iterator t = p.begin(); t != p.end(); t++)&#123;</span><br><span class=\"line\">        minx = min(minx, t-&gt;x);</span><br><span class=\"line\">        miny = min(miny, t-&gt;y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Polyomino::iterator t = p.begin(); t != p.end(); t++)&#123;</span><br><span class=\"line\">        p0.insert(Cell(t-&gt;x - minx, t-&gt;y - miny));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Polyomino <span class=\"title\">rotate</span><span class=\"params\">(Polyomino p)</span></span>&#123;</span><br><span class=\"line\">    Polyomino p0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Polyomino::iterator t = p.begin(); t != p.end(); t++)&#123;</span><br><span class=\"line\">        p0.insert(Cell(-t-&gt;y, t-&gt;x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> normalize(p0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Polyomino <span class=\"title\">flip</span><span class=\"params\">(Polyomino p)</span></span>&#123;</span><br><span class=\"line\">    Polyomino p0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Polyomino::iterator t = p.begin(); t != p.end(); t++)&#123;</span><br><span class=\"line\">        p0.insert(Cell(-t-&gt;x, t-&gt;y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> normalize(p0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(Polyomino p, Cell c, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    p.insert(c);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = normalize(p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Poly[n].count(p) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        p = rotate(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = flip(p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Poly[n].count(p) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        p = rotate(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Poly[n].insert(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Polyomino p1;</span><br><span class=\"line\">    p1.insert(Cell(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    Poly[<span class=\"number\">1</span>].insert(p1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = <span class=\"number\">2</span>; n &lt;= maxn; n++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p : Poly[n - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t : p)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> nx = t.x + dx[i];</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> ny = t.y + dy[i];</span><br><span class=\"line\">                    <span class=\"function\">Cell <span class=\"title\">c</span><span class=\"params\">(nx, ny)</span></span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p.count(c) == <span class=\"number\">0</span>) check(p, c, n);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getAns</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minx, miny, maxx, maxy;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p : Poly[n])&#123;</span><br><span class=\"line\">        minx = miny = inf;</span><br><span class=\"line\">        maxx = maxy = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t : p)&#123;</span><br><span class=\"line\">            minx = min(minx, t.x);</span><br><span class=\"line\">            miny = min(miny, t.y);</span><br><span class=\"line\">            maxx = max(maxx, t.x);</span><br><span class=\"line\">            maxy = max(maxy, t.y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lx = maxx - minx;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ly = maxy - miny;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(min(lx, ly) &lt; min(w, h) &amp;&amp; max(lx, ly) &lt; max(w, h))&#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, w, h;</span><br><span class=\"line\"></span><br><span class=\"line\">    search();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; w &gt;&gt; h)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = getAns(n, w, h);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva221-Urban Elevations-离散化","date":"2018-11-14T02:00:10.000Z","_content":"输入每个建筑物左下角坐标、宽度、深度和高度，输出正视图中能看到的所有建筑物，按照左下角x坐标从小到大进行排序。坐下角x坐标相同时，按y坐标从小到大排序。\n![building](/building.png)\n*第一眼看上去很像当时面试北航计算机时候的机试题，后来做着做着发现不对劲= =。结尾放一个彩蛋，把印象中的机试题和解题思路说一下。*\n<!--more-->\n# 链接\n[Uva221-Urban Elevation](https://vjudge.net/problem/UVA-221)\n\n# 题解\n因为是正视图，所以判断可见性的时候忽略深度参数，只把它当做判断前后层次的一个信息。判断一个建筑物是否可见，只要满足建筑物在x方向上有一些点（大于一个）可见，那么建筑物可见。因为x值连续有无穷个，所以无法枚举x。需要进行离散化，把无穷变为有限。\n把所有x坐标排序去重，则任意两个相邻x坐标形成的区间要么完全可见，要么完全不可见。等效于按照所有建筑物的垂直轮廓线进行区间划分，然后只要对这几个区间进行判断，任取区间一点，若这点对建筑物可见，则这段区间对建筑物可见，则可以说这个建筑物可见。判断一个建筑物是否在某个坐标点可见的条件是：建筑物坐标中必须包含这个坐标；建筑物前方不能有包含这个坐标且高于它的其它建筑物。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed 14 Nov 07:22:41 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 107;\nstruct Building{\n    int id;\n    double x, y, w, d, h;\n};\nBuilding bld[maxn];\nint xp[maxn * 2];\nint n;\n\nbool cmp(const Building& a, const Building& b){\n    if(a.x == b.x){\n        return a.y < b.y;\n    }\n    else{\n        return a.x < b.x;\n    }\n}\n\nbool visible(int ct, int x){\n    ///cout << \"target: \" << bld[ct].id << endl;\n    for(int i = 0; i < n; i++){\n        if(i == ct) continue;\n        if(bld[i].y <= bld[ct].y && bld[i].x <= x && bld[i].x + bld[i].w >= x){\n            //cout << bld[i].id << endl;\n            if(bld[i].h >= bld[ct].h) return false;\n        }\n    }\n    //cout << \"******\" << endl;\n    return true;\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int cnt = 1;\n    while(cin >> n){\n        if(n == 0) break;\n        memset(bld, 0, sizeof(bld));\n        double x, y, w, d, h;\n        for(int i = 0; i < n; i++){\n            bld[i].id = i + 1;\n            cin >> x >> y >> w >> d >> h;\n            bld[i].x = x, bld[i].y = y, bld[i].w = w, bld[i].d = d, bld[i].h = h;\n            xp[2 * i] = x, xp[2 * i + 1] = x + w;\n        }\n        sort(bld, bld + n, cmp);\n        sort(xp, xp + 2 * n);\n        int m = unique(xp, xp + 2 * n) - xp;\n        vector<int> vec;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m - 1; j++){\n                if(bld[i].x >= xp[j + 1] || bld[i].x + bld[i].w <= xp[j]) continue;\n                if(visible(i, (xp[j] + xp[j + 1]) / 2)){\n                    vec.push_back(bld[i].id);\n                    break;\n                }\n            }\n        }\n\n        if(cnt > 1) cout << endl;\n        printf(\"For map #%d, the visible buildings are numbered as follows:\\n\", cnt++);\n        int len = vec.size();\n        for(int i = 0; i < len; i++){\n            if(!i) cout << vec[i];\n            else cout << \" \" << vec[i];\n        }\n        cout << endl;\n\n    }\n    return 0;    \n}\n```\n\n# 彩蛋\n北航那道机试题的题意大致是模拟点击window窗口的操作。平面上有几个窗口，以左下角坐标、长度和宽度的形式给出，同时以字符串形式给出每个窗口中的内容。接着给定n组坐标，表示鼠标点击的位置，（鼠标点击到某个窗口的有效位置，即未被遮挡的位置时，该窗口上升到第一层），要求输出这n次点击之后，其中一个指定窗口的可见内容部分。例如，一个窗口中的内容为```I am the content in this window```，经过n次点击之后，它在第三层，在它之上有两个窗口且对它的内容有部分遮挡，假设它的可见部分为```I```，```the```，```in```，```win```，那么应输出```I****the*********in******win***```，其中```*```表示不可见。\n思路就是进行模拟。定义一个结构体保存窗口编号、坐标、长度、宽度、内容以及它当前所在层。接下来模拟点击，鼠标每点击一次，根据点击区域调整各个窗口所在层并重新按层次进行排序。模拟完点击之后，对要输出内容的窗口中的每一个字符首先求出它的坐标，接着判断这个坐标是否包含在它之上窗口的区域内，若包含则输出```*```，若不包含则输出原字符。\n之所以说后面发现和上面那道题不一致，是因为北航这道题其实本来就是离散的，一个字符相当于一个坐标点，不存在小数坐标点的情况。\n\n*北航计算机的机试基本不涉及算法，比较考验基本功。考场提供的IDE有codeblocks、DEV和VC++6.0，语言要求C/C++，不限制STL的使用，时间是2个小时，题目数量2~3道，我那年是两道，第一道是简单的排序题，用sort函数加上自定义比较函数就能解决*","source":"_posts/Uva221-Urban-Elevations.md","raw":"---\ntitle: Uva221-Urban Elevations-离散化\ndate: 2018-11-14 10:00:10\ncategories:\n- ACM\n- 离散化\ntags:\n- 离散化\n---\n输入每个建筑物左下角坐标、宽度、深度和高度，输出正视图中能看到的所有建筑物，按照左下角x坐标从小到大进行排序。坐下角x坐标相同时，按y坐标从小到大排序。\n![building](/building.png)\n*第一眼看上去很像当时面试北航计算机时候的机试题，后来做着做着发现不对劲= =。结尾放一个彩蛋，把印象中的机试题和解题思路说一下。*\n<!--more-->\n# 链接\n[Uva221-Urban Elevation](https://vjudge.net/problem/UVA-221)\n\n# 题解\n因为是正视图，所以判断可见性的时候忽略深度参数，只把它当做判断前后层次的一个信息。判断一个建筑物是否可见，只要满足建筑物在x方向上有一些点（大于一个）可见，那么建筑物可见。因为x值连续有无穷个，所以无法枚举x。需要进行离散化，把无穷变为有限。\n把所有x坐标排序去重，则任意两个相邻x坐标形成的区间要么完全可见，要么完全不可见。等效于按照所有建筑物的垂直轮廓线进行区间划分，然后只要对这几个区间进行判断，任取区间一点，若这点对建筑物可见，则这段区间对建筑物可见，则可以说这个建筑物可见。判断一个建筑物是否在某个坐标点可见的条件是：建筑物坐标中必须包含这个坐标；建筑物前方不能有包含这个坐标且高于它的其它建筑物。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed 14 Nov 07:22:41 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 107;\nstruct Building{\n    int id;\n    double x, y, w, d, h;\n};\nBuilding bld[maxn];\nint xp[maxn * 2];\nint n;\n\nbool cmp(const Building& a, const Building& b){\n    if(a.x == b.x){\n        return a.y < b.y;\n    }\n    else{\n        return a.x < b.x;\n    }\n}\n\nbool visible(int ct, int x){\n    ///cout << \"target: \" << bld[ct].id << endl;\n    for(int i = 0; i < n; i++){\n        if(i == ct) continue;\n        if(bld[i].y <= bld[ct].y && bld[i].x <= x && bld[i].x + bld[i].w >= x){\n            //cout << bld[i].id << endl;\n            if(bld[i].h >= bld[ct].h) return false;\n        }\n    }\n    //cout << \"******\" << endl;\n    return true;\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int cnt = 1;\n    while(cin >> n){\n        if(n == 0) break;\n        memset(bld, 0, sizeof(bld));\n        double x, y, w, d, h;\n        for(int i = 0; i < n; i++){\n            bld[i].id = i + 1;\n            cin >> x >> y >> w >> d >> h;\n            bld[i].x = x, bld[i].y = y, bld[i].w = w, bld[i].d = d, bld[i].h = h;\n            xp[2 * i] = x, xp[2 * i + 1] = x + w;\n        }\n        sort(bld, bld + n, cmp);\n        sort(xp, xp + 2 * n);\n        int m = unique(xp, xp + 2 * n) - xp;\n        vector<int> vec;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m - 1; j++){\n                if(bld[i].x >= xp[j + 1] || bld[i].x + bld[i].w <= xp[j]) continue;\n                if(visible(i, (xp[j] + xp[j + 1]) / 2)){\n                    vec.push_back(bld[i].id);\n                    break;\n                }\n            }\n        }\n\n        if(cnt > 1) cout << endl;\n        printf(\"For map #%d, the visible buildings are numbered as follows:\\n\", cnt++);\n        int len = vec.size();\n        for(int i = 0; i < len; i++){\n            if(!i) cout << vec[i];\n            else cout << \" \" << vec[i];\n        }\n        cout << endl;\n\n    }\n    return 0;    \n}\n```\n\n# 彩蛋\n北航那道机试题的题意大致是模拟点击window窗口的操作。平面上有几个窗口，以左下角坐标、长度和宽度的形式给出，同时以字符串形式给出每个窗口中的内容。接着给定n组坐标，表示鼠标点击的位置，（鼠标点击到某个窗口的有效位置，即未被遮挡的位置时，该窗口上升到第一层），要求输出这n次点击之后，其中一个指定窗口的可见内容部分。例如，一个窗口中的内容为```I am the content in this window```，经过n次点击之后，它在第三层，在它之上有两个窗口且对它的内容有部分遮挡，假设它的可见部分为```I```，```the```，```in```，```win```，那么应输出```I****the*********in******win***```，其中```*```表示不可见。\n思路就是进行模拟。定义一个结构体保存窗口编号、坐标、长度、宽度、内容以及它当前所在层。接下来模拟点击，鼠标每点击一次，根据点击区域调整各个窗口所在层并重新按层次进行排序。模拟完点击之后，对要输出内容的窗口中的每一个字符首先求出它的坐标，接着判断这个坐标是否包含在它之上窗口的区域内，若包含则输出```*```，若不包含则输出原字符。\n之所以说后面发现和上面那道题不一致，是因为北航这道题其实本来就是离散的，一个字符相当于一个坐标点，不存在小数坐标点的情况。\n\n*北航计算机的机试基本不涉及算法，比较考验基本功。考场提供的IDE有codeblocks、DEV和VC++6.0，语言要求C/C++，不限制STL的使用，时间是2个小时，题目数量2~3道，我那年是两道，第一道是简单的排序题，用sort函数加上自定义比较函数就能解决*","slug":"Uva221-Urban-Elevations","published":1,"updated":"2019-08-20T14:46:34.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lq001b30vnmvyrb4o5","content":"<p>输入每个建筑物左下角坐标、宽度、深度和高度，输出正视图中能看到的所有建筑物，按照左下角x坐标从小到大进行排序。坐下角x坐标相同时，按y坐标从小到大排序。<br><img src=\"/2018/11/14/Uva221-Urban-Elevations/building.png\" alt=\"building\"><br><em>第一眼看上去很像当时面试北航计算机时候的机试题，后来做着做着发现不对劲= =。结尾放一个彩蛋，把印象中的机试题和解题思路说一下。</em></p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-221\" target=\"_blank\" rel=\"noopener\">Uva221-Urban Elevation</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>因为是正视图，所以判断可见性的时候忽略深度参数，只把它当做判断前后层次的一个信息。判断一个建筑物是否可见，只要满足建筑物在x方向上有一些点（大于一个）可见，那么建筑物可见。因为x值连续有无穷个，所以无法枚举x。需要进行离散化，把无穷变为有限。<br>把所有x坐标排序去重，则任意两个相邻x坐标形成的区间要么完全可见，要么完全不可见。等效于按照所有建筑物的垂直轮廓线进行区间划分，然后只要对这几个区间进行判断，任取区间一点，若这点对建筑物可见，则这段区间对建筑物可见，则可以说这个建筑物可见。判断一个建筑物是否在某个坐标点可见的条件是：建筑物坐标中必须包含这个坐标；建筑物前方不能有包含这个坐标且高于它的其它建筑物。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed 14 Nov 07:22:41 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">107</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Building</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x, y, w, d, h;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Building bld[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> xp[maxn * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> Building&amp; a, <span class=\"keyword\">const</span> Building&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">visible</span><span class=\"params\">(<span class=\"keyword\">int</span> ct, <span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">///cout &lt;&lt; \"target: \" &lt;&lt; bld[ct].id &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == ct) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bld[i].y &lt;= bld[ct].y &amp;&amp; bld[i].x &lt;= x &amp;&amp; bld[i].x + bld[i].w &gt;= x)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; bld[i].id &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bld[i].h &gt;= bld[ct].h) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; \"******\" &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(bld, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(bld));</span><br><span class=\"line\">        <span class=\"keyword\">double</span> x, y, w, d, h;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            bld[i].id = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; w &gt;&gt; d &gt;&gt; h;</span><br><span class=\"line\">            bld[i].x = x, bld[i].y = y, bld[i].w = w, bld[i].d = d, bld[i].h = h;</span><br><span class=\"line\">            xp[<span class=\"number\">2</span> * i] = x, xp[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>] = x + w;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(bld, bld + n, cmp);</span><br><span class=\"line\">        sort(xp, xp + <span class=\"number\">2</span> * n);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = unique(xp, xp + <span class=\"number\">2</span> * n) - xp;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m - <span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bld[i].x &gt;= xp[j + <span class=\"number\">1</span>] || bld[i].x + bld[i].w &lt;= xp[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(visible(i, (xp[j] + xp[j + <span class=\"number\">1</span>]) / <span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">                    vec.push_back(bld[i].id);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"For map #%d, the visible buildings are numbered as follows:\\n\"</span>, cnt++);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = vec.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!i) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h1><p>北航那道机试题的题意大致是模拟点击window窗口的操作。平面上有几个窗口，以左下角坐标、长度和宽度的形式给出，同时以字符串形式给出每个窗口中的内容。接着给定n组坐标，表示鼠标点击的位置，（鼠标点击到某个窗口的有效位置，即未被遮挡的位置时，该窗口上升到第一层），要求输出这n次点击之后，其中一个指定窗口的可见内容部分。例如，一个窗口中的内容为<code>I am the content in this window</code>，经过n次点击之后，它在第三层，在它之上有两个窗口且对它的内容有部分遮挡，假设它的可见部分为<code>I</code>，<code>the</code>，<code>in</code>，<code>win</code>，那么应输出<code>I****the*********in******win***</code>，其中<code>*</code>表示不可见。<br>思路就是进行模拟。定义一个结构体保存窗口编号、坐标、长度、宽度、内容以及它当前所在层。接下来模拟点击，鼠标每点击一次，根据点击区域调整各个窗口所在层并重新按层次进行排序。模拟完点击之后，对要输出内容的窗口中的每一个字符首先求出它的坐标，接着判断这个坐标是否包含在它之上窗口的区域内，若包含则输出<code>*</code>，若不包含则输出原字符。<br>之所以说后面发现和上面那道题不一致，是因为北航这道题其实本来就是离散的，一个字符相当于一个坐标点，不存在小数坐标点的情况。</p>\n<p><em>北航计算机的机试基本不涉及算法，比较考验基本功。考场提供的IDE有codeblocks、DEV和VC++6.0，语言要求C/C++，不限制STL的使用，时间是2个小时，题目数量2~3道，我那年是两道，第一道是简单的排序题，用sort函数加上自定义比较函数就能解决</em></p>\n","site":{"data":{}},"excerpt":"<p>输入每个建筑物左下角坐标、宽度、深度和高度，输出正视图中能看到的所有建筑物，按照左下角x坐标从小到大进行排序。坐下角x坐标相同时，按y坐标从小到大排序。<br><img src=\"/2018/11/14/Uva221-Urban-Elevations/building.png\" alt=\"building\"><br><em>第一眼看上去很像当时面试北航计算机时候的机试题，后来做着做着发现不对劲= =。结尾放一个彩蛋，把印象中的机试题和解题思路说一下。</em></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-221\" target=\"_blank\" rel=\"noopener\">Uva221-Urban Elevation</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>因为是正视图，所以判断可见性的时候忽略深度参数，只把它当做判断前后层次的一个信息。判断一个建筑物是否可见，只要满足建筑物在x方向上有一些点（大于一个）可见，那么建筑物可见。因为x值连续有无穷个，所以无法枚举x。需要进行离散化，把无穷变为有限。<br>把所有x坐标排序去重，则任意两个相邻x坐标形成的区间要么完全可见，要么完全不可见。等效于按照所有建筑物的垂直轮廓线进行区间划分，然后只要对这几个区间进行判断，任取区间一点，若这点对建筑物可见，则这段区间对建筑物可见，则可以说这个建筑物可见。判断一个建筑物是否在某个坐标点可见的条件是：建筑物坐标中必须包含这个坐标；建筑物前方不能有包含这个坐标且高于它的其它建筑物。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed 14 Nov 07:22:41 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">107</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Building</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x, y, w, d, h;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Building bld[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> xp[maxn * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> Building&amp; a, <span class=\"keyword\">const</span> Building&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">visible</span><span class=\"params\">(<span class=\"keyword\">int</span> ct, <span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">///cout &lt;&lt; \"target: \" &lt;&lt; bld[ct].id &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == ct) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bld[i].y &lt;= bld[ct].y &amp;&amp; bld[i].x &lt;= x &amp;&amp; bld[i].x + bld[i].w &gt;= x)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; bld[i].id &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bld[i].h &gt;= bld[ct].h) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; \"******\" &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(bld, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(bld));</span><br><span class=\"line\">        <span class=\"keyword\">double</span> x, y, w, d, h;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            bld[i].id = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; w &gt;&gt; d &gt;&gt; h;</span><br><span class=\"line\">            bld[i].x = x, bld[i].y = y, bld[i].w = w, bld[i].d = d, bld[i].h = h;</span><br><span class=\"line\">            xp[<span class=\"number\">2</span> * i] = x, xp[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>] = x + w;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(bld, bld + n, cmp);</span><br><span class=\"line\">        sort(xp, xp + <span class=\"number\">2</span> * n);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = unique(xp, xp + <span class=\"number\">2</span> * n) - xp;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m - <span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bld[i].x &gt;= xp[j + <span class=\"number\">1</span>] || bld[i].x + bld[i].w &lt;= xp[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(visible(i, (xp[j] + xp[j + <span class=\"number\">1</span>]) / <span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">                    vec.push_back(bld[i].id);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"For map #%d, the visible buildings are numbered as follows:\\n\"</span>, cnt++);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = vec.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!i) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h1><p>北航那道机试题的题意大致是模拟点击window窗口的操作。平面上有几个窗口，以左下角坐标、长度和宽度的形式给出，同时以字符串形式给出每个窗口中的内容。接着给定n组坐标，表示鼠标点击的位置，（鼠标点击到某个窗口的有效位置，即未被遮挡的位置时，该窗口上升到第一层），要求输出这n次点击之后，其中一个指定窗口的可见内容部分。例如，一个窗口中的内容为<code>I am the content in this window</code>，经过n次点击之后，它在第三层，在它之上有两个窗口且对它的内容有部分遮挡，假设它的可见部分为<code>I</code>，<code>the</code>，<code>in</code>，<code>win</code>，那么应输出<code>I****the*********in******win***</code>，其中<code>*</code>表示不可见。<br>思路就是进行模拟。定义一个结构体保存窗口编号、坐标、长度、宽度、内容以及它当前所在层。接下来模拟点击，鼠标每点击一次，根据点击区域调整各个窗口所在层并重新按层次进行排序。模拟完点击之后，对要输出内容的窗口中的每一个字符首先求出它的坐标，接着判断这个坐标是否包含在它之上窗口的区域内，若包含则输出<code>*</code>，若不包含则输出原字符。<br>之所以说后面发现和上面那道题不一致，是因为北航这道题其实本来就是离散的，一个字符相当于一个坐标点，不存在小数坐标点的情况。</p>\n<p><em>北航计算机的机试基本不涉及算法，比较考验基本功。考场提供的IDE有codeblocks、DEV和VC++6.0，语言要求C/C++，不限制STL的使用，时间是2个小时，题目数量2~3道，我那年是两道，第一道是简单的排序题，用sort函数加上自定义比较函数就能解决</em></p>"},{"title":"Uva548-二叉树构建&&DFS","date":"2018-09-22T03:30:57.000Z","_content":"首先根据二叉树的中序和后序遍历构建二叉树，然后找一个叶子节点使得它到根的路径上的权和最小。\n<!--more-->\n# 链接\n[Uva548-Tree](https://vjudge.net/problem/UVA-548)\n# 题目描述\n给一棵点带权（权值各不相同，都是小于10000的正整数）的二叉树的中序和后序遍历，找一个叶子节点使得它到根的路径上的权和最小。如果有多解，该叶子本身的权应尽量小。输入中每两行表示一棵树，其中第一行为中序遍历，第二行为后序遍历。\n# 题解\n根据中序和后序遍历可以构建出这棵二叉，然后用DFS搜索找到结果。\n# 代码\n**通过设置best_sum和best找到最优解的方法值得学习啊。**\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 22 Sep 11:20:12 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e4 + 7;\nint in_order[maxn], post_order[maxn], lch[maxn], rch[maxn];\nstring line;\nint n;\nint best, best_sum;\n\nbool read(int* s){\n    if(!getline(cin, line)) return false;\n    stringstream ss(line);\n    n = 0;\n    int x;\n    while(ss >> x){\n        s[n++] = x;\n    }\n    return true;\n}\n\nint build(int l1, int r1, int l2, int r2){\n    if(l1 > r1) return 0;\n    int v = post_order[r2];\n    int pos = 0;\n    while(in_order[pos] != v) pos++;\n    int len = pos - l1;\n    lch[v] = build(l1, l1 + len - 1, l2, l2 + len - 1);\n    rch[v] = build(l1 + len + 1, r1, l2 + len, r2 - 1);\n    return v;\n}\n\nvoid dfs(int v, int sum){\n    sum += v;\n    if(!lch[v] && !rch[v]){\n        if(sum < best_sum || (sum == best_sum && v < best)){\n            best_sum = sum;\n            best = v;\n        }\n        return;\n    }\n    if(lch[v]) dfs(lch[v], sum);\n    if(rch[v]) dfs(rch[v], sum);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(read(in_order)){\n        read(post_order);\n        int root = build(0, n - 1, 0, n - 1);\n        best_sum = 1e9;\n        dfs(root, 0);\n        cout << best << endl;\n    }\n    \n    return 0;\n}\n```","source":"_posts/Uva548-二叉树构建-DFS.md","raw":"---\ntitle: Uva548-二叉树构建&&DFS\ndate: 2018-09-22 11:30:57\ncategories:\n- ACM\n- 树\ntags:\n- 二叉树\n- DFS\n---\n首先根据二叉树的中序和后序遍历构建二叉树，然后找一个叶子节点使得它到根的路径上的权和最小。\n<!--more-->\n# 链接\n[Uva548-Tree](https://vjudge.net/problem/UVA-548)\n# 题目描述\n给一棵点带权（权值各不相同，都是小于10000的正整数）的二叉树的中序和后序遍历，找一个叶子节点使得它到根的路径上的权和最小。如果有多解，该叶子本身的权应尽量小。输入中每两行表示一棵树，其中第一行为中序遍历，第二行为后序遍历。\n# 题解\n根据中序和后序遍历可以构建出这棵二叉，然后用DFS搜索找到结果。\n# 代码\n**通过设置best_sum和best找到最优解的方法值得学习啊。**\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 22 Sep 11:20:12 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e4 + 7;\nint in_order[maxn], post_order[maxn], lch[maxn], rch[maxn];\nstring line;\nint n;\nint best, best_sum;\n\nbool read(int* s){\n    if(!getline(cin, line)) return false;\n    stringstream ss(line);\n    n = 0;\n    int x;\n    while(ss >> x){\n        s[n++] = x;\n    }\n    return true;\n}\n\nint build(int l1, int r1, int l2, int r2){\n    if(l1 > r1) return 0;\n    int v = post_order[r2];\n    int pos = 0;\n    while(in_order[pos] != v) pos++;\n    int len = pos - l1;\n    lch[v] = build(l1, l1 + len - 1, l2, l2 + len - 1);\n    rch[v] = build(l1 + len + 1, r1, l2 + len, r2 - 1);\n    return v;\n}\n\nvoid dfs(int v, int sum){\n    sum += v;\n    if(!lch[v] && !rch[v]){\n        if(sum < best_sum || (sum == best_sum && v < best)){\n            best_sum = sum;\n            best = v;\n        }\n        return;\n    }\n    if(lch[v]) dfs(lch[v], sum);\n    if(rch[v]) dfs(rch[v], sum);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(read(in_order)){\n        read(post_order);\n        int root = build(0, n - 1, 0, n - 1);\n        best_sum = 1e9;\n        dfs(root, 0);\n        cout << best << endl;\n    }\n    \n    return 0;\n}\n```","slug":"Uva548-二叉树构建-DFS","published":1,"updated":"2019-08-20T14:46:20.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lr001c30vnquiclegj","content":"<p>首先根据二叉树的中序和后序遍历构建二叉树，然后找一个叶子节点使得它到根的路径上的权和最小。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-548\" target=\"_blank\" rel=\"noopener\">Uva548-Tree</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>给一棵点带权（权值各不相同，都是小于10000的正整数）的二叉树的中序和后序遍历，找一个叶子节点使得它到根的路径上的权和最小。如果有多解，该叶子本身的权应尽量小。输入中每两行表示一棵树，其中第一行为中序遍历，第二行为后序遍历。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>根据中序和后序遍历可以构建出这棵二叉，然后用DFS搜索找到结果。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p><strong>通过设置best_sum和best找到最优解的方法值得学习啊。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 22 Sep 11:20:12 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> in_order[maxn], post_order[maxn], lch[maxn], rch[maxn];</span><br><span class=\"line\"><span class=\"built_in\">string</span> line;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> best, best_sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>* s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!getline(<span class=\"built_in\">cin</span>, line)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(line)</span></span>;</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss &gt;&gt; x)&#123;</span><br><span class=\"line\">        s[n++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l1, <span class=\"keyword\">int</span> r1, <span class=\"keyword\">int</span> l2, <span class=\"keyword\">int</span> r2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = post_order[r2];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in_order[pos] != v) pos++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pos - l1;</span><br><span class=\"line\">    lch[v] = build(l1, l1 + len - <span class=\"number\">1</span>, l2, l2 + len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    rch[v] = build(l1 + len + <span class=\"number\">1</span>, r1, l2 + len, r2 - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> sum)</span></span>&#123;</span><br><span class=\"line\">    sum += v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!lch[v] &amp;&amp; !rch[v])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; best_sum || (sum == best_sum &amp;&amp; v &lt; best))&#123;</span><br><span class=\"line\">            best_sum = sum;</span><br><span class=\"line\">            best = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lch[v]) dfs(lch[v], sum);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rch[v]) dfs(rch[v], sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(read(in_order))&#123;</span><br><span class=\"line\">        read(post_order);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> root = build(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        best_sum = <span class=\"number\">1e9</span>;</span><br><span class=\"line\">        dfs(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; best &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>首先根据二叉树的中序和后序遍历构建二叉树，然后找一个叶子节点使得它到根的路径上的权和最小。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-548\" target=\"_blank\" rel=\"noopener\">Uva548-Tree</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>给一棵点带权（权值各不相同，都是小于10000的正整数）的二叉树的中序和后序遍历，找一个叶子节点使得它到根的路径上的权和最小。如果有多解，该叶子本身的权应尽量小。输入中每两行表示一棵树，其中第一行为中序遍历，第二行为后序遍历。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>根据中序和后序遍历可以构建出这棵二叉，然后用DFS搜索找到结果。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p><strong>通过设置best_sum和best找到最优解的方法值得学习啊。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 22 Sep 11:20:12 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> in_order[maxn], post_order[maxn], lch[maxn], rch[maxn];</span><br><span class=\"line\"><span class=\"built_in\">string</span> line;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> best, best_sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>* s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!getline(<span class=\"built_in\">cin</span>, line)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(line)</span></span>;</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss &gt;&gt; x)&#123;</span><br><span class=\"line\">        s[n++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l1, <span class=\"keyword\">int</span> r1, <span class=\"keyword\">int</span> l2, <span class=\"keyword\">int</span> r2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = post_order[r2];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in_order[pos] != v) pos++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pos - l1;</span><br><span class=\"line\">    lch[v] = build(l1, l1 + len - <span class=\"number\">1</span>, l2, l2 + len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    rch[v] = build(l1 + len + <span class=\"number\">1</span>, r1, l2 + len, r2 - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> sum)</span></span>&#123;</span><br><span class=\"line\">    sum += v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!lch[v] &amp;&amp; !rch[v])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; best_sum || (sum == best_sum &amp;&amp; v &lt; best))&#123;</span><br><span class=\"line\">            best_sum = sum;</span><br><span class=\"line\">            best = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lch[v]) dfs(lch[v], sum);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rch[v]) dfs(rch[v], sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(read(in_order))&#123;</span><br><span class=\"line\">        read(post_order);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> root = build(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        best_sum = <span class=\"number\">1e9</span>;</span><br><span class=\"line\">        dfs(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; best &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva673-Parentheses Balance-栈","date":"2018-11-26T23:08:53.000Z","_content":"输入一个包含 $“()”$ 和 $“[]”$ 的括号序列，判断是否合法。具体规则：\n- 空串合法\n- 如果A和B都合法，则AB合法\n- 如果A合法则(A)和[A]都合法\n\n可能最近DFS，BFS做多了，总想往搜索上套...不过最后能想到栈还是很鸡冻＼（≧▽≦）／\n<!--more-->\n# 链接\n[Uva673-Parentheses Balance](https://vjudge.net/problem/UVA-673)\n\n# 题解\n能想到用栈之后这道题基本就可解了，将字符序列依次放入栈中遇到可以匹配的括号对　$“()”$ 或 $“[]”$　就出栈。如果最后栈中还有未匹配的括号，则不合法；否则若栈空，则合法。\n*可能含有空串所以读入的时候用getline(cin, s)读入，因为cin会自动忽略'\\n'，即忽略空串。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 26 Nov 23:30:58 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 130;\nstring s;\nint n;\nstack<char> stk;\nbool p;\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    cin >> n;\n    getchar();\n    while(n--){\n        while(!stk.empty()){\n            stk.pop();\n        }\n\n        getline(cin , s);\n        if(s.length() % 2){\n            cout << \"No\" << endl;\n            continue;\n        }\n        for(size_t i = 0; i < s.length(); i++){\n            p = false;\n            if(!stk.empty()){\n                if((stk.top() == '(' && s[i] == ')') || (stk.top() == '[' && s[i] == ']')){\n                    stk.pop();\n                    p = true;\n                }\n            }\n            if(!p) stk.push(s[i]);\n        }\n\n        if(!stk.empty()) cout << \"No\" << endl;\n        else cout << \"Yes\" << endl;\n    }\n    return 0;\n}\n```\n\n","source":"_posts/Uva673-Parentheses-Balance.md","raw":"---\ntitle: Uva673-Parentheses Balance-栈\ndate: 2018-11-27 07:08:53\ncategories:\n- ACM\n- 栈\ntags:\n- Stack\n---\n输入一个包含 $“()”$ 和 $“[]”$ 的括号序列，判断是否合法。具体规则：\n- 空串合法\n- 如果A和B都合法，则AB合法\n- 如果A合法则(A)和[A]都合法\n\n可能最近DFS，BFS做多了，总想往搜索上套...不过最后能想到栈还是很鸡冻＼（≧▽≦）／\n<!--more-->\n# 链接\n[Uva673-Parentheses Balance](https://vjudge.net/problem/UVA-673)\n\n# 题解\n能想到用栈之后这道题基本就可解了，将字符序列依次放入栈中遇到可以匹配的括号对　$“()”$ 或 $“[]”$　就出栈。如果最后栈中还有未匹配的括号，则不合法；否则若栈空，则合法。\n*可能含有空串所以读入的时候用getline(cin, s)读入，因为cin会自动忽略'\\n'，即忽略空串。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 26 Nov 23:30:58 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 130;\nstring s;\nint n;\nstack<char> stk;\nbool p;\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    cin >> n;\n    getchar();\n    while(n--){\n        while(!stk.empty()){\n            stk.pop();\n        }\n\n        getline(cin , s);\n        if(s.length() % 2){\n            cout << \"No\" << endl;\n            continue;\n        }\n        for(size_t i = 0; i < s.length(); i++){\n            p = false;\n            if(!stk.empty()){\n                if((stk.top() == '(' && s[i] == ')') || (stk.top() == '[' && s[i] == ']')){\n                    stk.pop();\n                    p = true;\n                }\n            }\n            if(!p) stk.push(s[i]);\n        }\n\n        if(!stk.empty()) cout << \"No\" << endl;\n        else cout << \"Yes\" << endl;\n    }\n    return 0;\n}\n```\n\n","slug":"Uva673-Parentheses-Balance","published":1,"updated":"2019-08-20T14:46:10.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lr001d30vnt3lklw6d","content":"<p>输入一个包含 $“()”$ 和 $“[]”$ 的括号序列，判断是否合法。具体规则：</p>\n<ul>\n<li>空串合法</li>\n<li>如果A和B都合法，则AB合法</li>\n<li>如果A合法则(A)和[A]都合法</li>\n</ul>\n<p>可能最近DFS，BFS做多了，总想往搜索上套…不过最后能想到栈还是很鸡冻＼（≧▽≦）／</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-673\" target=\"_blank\" rel=\"noopener\">Uva673-Parentheses Balance</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>能想到用栈之后这道题基本就可解了，将字符序列依次放入栈中遇到可以匹配的括号对　$“()”$ 或 $“[]”$　就出栈。如果最后栈中还有未匹配的括号，则不合法；否则若栈空，则合法。<br><em>可能含有空串所以读入的时候用getline(cin, s)读入，因为cin会自动忽略’\\n’，即忽略空串。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 26 Nov 23:30:58 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">130</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">char</span>&gt; stk;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stk.empty())&#123;</span><br><span class=\"line\">            stk.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        getline(<span class=\"built_in\">cin</span> , s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length() % <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">            p = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!stk.empty())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((stk.top() == <span class=\"string\">'('</span> &amp;&amp; s[i] == <span class=\"string\">')'</span>) || (stk.top() == <span class=\"string\">'['</span> &amp;&amp; s[i] == <span class=\"string\">']'</span>))&#123;</span><br><span class=\"line\">                    stk.pop();</span><br><span class=\"line\">                    p = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!p) stk.push(s[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!stk.empty()) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Yes\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>输入一个包含 $“()”$ 和 $“[]”$ 的括号序列，判断是否合法。具体规则：</p>\n<ul>\n<li>空串合法</li>\n<li>如果A和B都合法，则AB合法</li>\n<li>如果A合法则(A)和[A]都合法</li>\n</ul>\n<p>可能最近DFS，BFS做多了，总想往搜索上套…不过最后能想到栈还是很鸡冻＼（≧▽≦）／</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-673\" target=\"_blank\" rel=\"noopener\">Uva673-Parentheses Balance</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>能想到用栈之后这道题基本就可解了，将字符序列依次放入栈中遇到可以匹配的括号对　$“()”$ 或 $“[]”$　就出栈。如果最后栈中还有未匹配的括号，则不合法；否则若栈空，则合法。<br><em>可能含有空串所以读入的时候用getline(cin, s)读入，因为cin会自动忽略’\\n’，即忽略空串。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 26 Nov 23:30:58 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">130</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">char</span>&gt; stk;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stk.empty())&#123;</span><br><span class=\"line\">            stk.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        getline(<span class=\"built_in\">cin</span> , s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length() % <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">            p = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!stk.empty())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((stk.top() == <span class=\"string\">'('</span> &amp;&amp; s[i] == <span class=\"string\">')'</span>) || (stk.top() == <span class=\"string\">'['</span> &amp;&amp; s[i] == <span class=\"string\">']'</span>))&#123;</span><br><span class=\"line\">                    stk.pop();</span><br><span class=\"line\">                    p = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!p) stk.push(s[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!stk.empty()) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Yes\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva725-Division-暴力枚举","date":"2018-12-17T11:41:14.000Z","_content":"求满足$$\\frac{abcde}{fghij} = N$$的所有$abcde$ 和 $fghij$的值，其中$2 <= N <= 79。$\n刘汝佳老师：``即使采用暴力法求解问题，对问题进行一定的分析往往会让算法更简介、高效。``\n受益匪浅。\n<!--more-->\n# 链接\n[Uva725-Division](https://vjudge.net/problem/UVA-725)\n\n# 题解\n一开始直接DFS暴力出来0~9的不同排列，判断是否满足条件，TL了。看了刘汝佳老师的解法，只枚举$fghij$，然后算出$abcde$，再判断是否所有数字都不相同。而且当$abcde$ 和 $fghij$加起来超过10位时可以终止枚举。复杂度大大降低。\n\n# 代码-循环枚举\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 17 Dec 07:05:55 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n;\nchar buff[100];\nbool flag;\nstruct Node{\n    Node(int a, int b):a(a), b(b){}\n    int a, b;\n};\nvector<Node> vec;\nint cnt = 0;\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n){\n        if(n == 0) break;\n        if(cnt++) cout << endl;\n        vec.clear();\n        for(int a = 1234; ; a++){\n            int b = n * a;\n            //cout << a << \" \" << b << endl;\n            sprintf(buff, \"%05d%05d\", a, b);\n            if(strlen(buff) > 10) break;\n            sort(buff, buff + 10);\n            flag = false;\n            for(int i = 0; i < 10; i++){\n                if(buff[i] != '0' + i){\n                    flag = true;\n                    break;\n                }\n            }\n            if(!flag) vec.push_back(Node(a, b));\n        }\n\n        int len = vec.size();\n        if(len == 0) cout << \"There are no solutions for \" << n << \".\" << endl;\n        else{\n            for(auto x : vec){\n                cout << setfill('0') << setw(5) << x.b;\n                cout << \" / \";\n                cout << setfill('0') << setw(5) << x.a;\n                cout << \" = \";\n                cout << n << endl;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n# 代码-DFS枚举\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 16 Dec 17:39:29 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n;\nbool vis[10];\nbool test[10];\nvector<int> vec;\nint a, b;\nstruct Node{\n    Node(int u, int v):u(u), v(v){}\n    int u, v;\n};\nvector<Node> ans;\nbool flag;\n\nbool ok(){\n    a = 0;\n    for(int i = 0; i < 5; i++){\n        a *= 10;\n        a += vec[i];\n    }\n    b = a * n;\n    vector<int> tmp;\n    int b2 = b;\n    for(int i = 0; i < 5; i++){\n        tmp.push_back(vec[i]);\n        tmp.push_back(b2 % 10);\n        b2 /= 10;\n    }\n    if(b2){\n        flag = true;\n        return false;\n    }\n\n    memset(test, 0, sizeof(test));\n    int cnt = 0;\n    for(int i = 0; i < 10; i++){\n        int val = tmp[i];\n        if(!test[val]){\n            cnt++;\n            test[val] = 1;\n        }\n    }\n    if(cnt == 10) return true;\n    else return false;\n\n}\n\nvoid dfs(){\n    if(flag) return; // over 10 bits, no need to enumerate\n    if(vec.size() == 5){\n        if(ok()){\n            ans.push_back(Node(b, a));\n        }\n        return;\n    }\n    for(int i = 0; i <= 9; i++){\n        if(!vis[i]){\n            vec.push_back(i);\n            vis[i] = 1;\n            dfs();\n            vec.pop_back();\n            vis[i] = 0;\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int cnt = 0;\n    while(cin >> n){\n        if(n == 0) break;\n\n        cnt++;\n        if(cnt > 1) cout << endl;\n        \n        memset(vis, 0, sizeof(vis));\n        ans.clear();\n        vec.clear();\n        flag = false;\n\n        dfs();\n        if(ans.size() == 0){\n            cout << \"There are no solutions for \" << n << \".\" << endl;\n        }\n        else{\n            for(auto x : ans){\n                cout << right << setfill('0') << setw(5) << x.u << \" / \";\n                cout << right << setfill('0') << setw(5) << x.v << \" = \" << n << endl;\n            }\n        }\n    }\n    return 0;\n}\n```","source":"_posts/Uva725-Division.md","raw":"---\ntitle: Uva725-Division-暴力枚举\ndate: 2018-12-17 19:41:14\ncategories:\n- ACM\n- 暴力枚举\ntags:\n- 暴力枚举\n---\n求满足$$\\frac{abcde}{fghij} = N$$的所有$abcde$ 和 $fghij$的值，其中$2 <= N <= 79。$\n刘汝佳老师：``即使采用暴力法求解问题，对问题进行一定的分析往往会让算法更简介、高效。``\n受益匪浅。\n<!--more-->\n# 链接\n[Uva725-Division](https://vjudge.net/problem/UVA-725)\n\n# 题解\n一开始直接DFS暴力出来0~9的不同排列，判断是否满足条件，TL了。看了刘汝佳老师的解法，只枚举$fghij$，然后算出$abcde$，再判断是否所有数字都不相同。而且当$abcde$ 和 $fghij$加起来超过10位时可以终止枚举。复杂度大大降低。\n\n# 代码-循环枚举\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 17 Dec 07:05:55 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n;\nchar buff[100];\nbool flag;\nstruct Node{\n    Node(int a, int b):a(a), b(b){}\n    int a, b;\n};\nvector<Node> vec;\nint cnt = 0;\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> n){\n        if(n == 0) break;\n        if(cnt++) cout << endl;\n        vec.clear();\n        for(int a = 1234; ; a++){\n            int b = n * a;\n            //cout << a << \" \" << b << endl;\n            sprintf(buff, \"%05d%05d\", a, b);\n            if(strlen(buff) > 10) break;\n            sort(buff, buff + 10);\n            flag = false;\n            for(int i = 0; i < 10; i++){\n                if(buff[i] != '0' + i){\n                    flag = true;\n                    break;\n                }\n            }\n            if(!flag) vec.push_back(Node(a, b));\n        }\n\n        int len = vec.size();\n        if(len == 0) cout << \"There are no solutions for \" << n << \".\" << endl;\n        else{\n            for(auto x : vec){\n                cout << setfill('0') << setw(5) << x.b;\n                cout << \" / \";\n                cout << setfill('0') << setw(5) << x.a;\n                cout << \" = \";\n                cout << n << endl;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n# 代码-DFS枚举\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sun 16 Dec 17:39:29 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n;\nbool vis[10];\nbool test[10];\nvector<int> vec;\nint a, b;\nstruct Node{\n    Node(int u, int v):u(u), v(v){}\n    int u, v;\n};\nvector<Node> ans;\nbool flag;\n\nbool ok(){\n    a = 0;\n    for(int i = 0; i < 5; i++){\n        a *= 10;\n        a += vec[i];\n    }\n    b = a * n;\n    vector<int> tmp;\n    int b2 = b;\n    for(int i = 0; i < 5; i++){\n        tmp.push_back(vec[i]);\n        tmp.push_back(b2 % 10);\n        b2 /= 10;\n    }\n    if(b2){\n        flag = true;\n        return false;\n    }\n\n    memset(test, 0, sizeof(test));\n    int cnt = 0;\n    for(int i = 0; i < 10; i++){\n        int val = tmp[i];\n        if(!test[val]){\n            cnt++;\n            test[val] = 1;\n        }\n    }\n    if(cnt == 10) return true;\n    else return false;\n\n}\n\nvoid dfs(){\n    if(flag) return; // over 10 bits, no need to enumerate\n    if(vec.size() == 5){\n        if(ok()){\n            ans.push_back(Node(b, a));\n        }\n        return;\n    }\n    for(int i = 0; i <= 9; i++){\n        if(!vis[i]){\n            vec.push_back(i);\n            vis[i] = 1;\n            dfs();\n            vec.pop_back();\n            vis[i] = 0;\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int cnt = 0;\n    while(cin >> n){\n        if(n == 0) break;\n\n        cnt++;\n        if(cnt > 1) cout << endl;\n        \n        memset(vis, 0, sizeof(vis));\n        ans.clear();\n        vec.clear();\n        flag = false;\n\n        dfs();\n        if(ans.size() == 0){\n            cout << \"There are no solutions for \" << n << \".\" << endl;\n        }\n        else{\n            for(auto x : ans){\n                cout << right << setfill('0') << setw(5) << x.u << \" / \";\n                cout << right << setfill('0') << setw(5) << x.v << \" = \" << n << endl;\n            }\n        }\n    }\n    return 0;\n}\n```","slug":"Uva725-Division","published":1,"updated":"2019-08-20T14:46:00.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ls001e30vnkxtdve97","content":"<p>求满足$$\\frac{abcde}{fghij} = N$$的所有$abcde$ 和 $fghij$的值，其中$2 &lt;= N &lt;= 79。$<br>刘汝佳老师：<code>即使采用暴力法求解问题，对问题进行一定的分析往往会让算法更简介、高效。</code><br>受益匪浅。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-725\" target=\"_blank\" rel=\"noopener\">Uva725-Division</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>一开始直接DFS暴力出来0~9的不同排列，判断是否满足条件，TL了。看了刘汝佳老师的解法，只枚举$fghij$，然后算出$abcde$，再判断是否所有数字都不相同。而且当$abcde$ 和 $fghij$加起来超过10位时可以终止枚举。复杂度大大降低。</p>\n<h1 id=\"代码-循环枚举\"><a href=\"#代码-循环枚举\" class=\"headerlink\" title=\"代码-循环枚举\"></a>代码-循环枚举</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 17 Dec 07:05:55 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> buff[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b):a(a), b(b)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Node&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt++) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a = <span class=\"number\">1234</span>; ; a++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = n * a;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(buff, <span class=\"string\">\"%05d%05d\"</span>, a, b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(buff) &gt; <span class=\"number\">10</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            sort(buff, buff + <span class=\"number\">10</span>);</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(buff[i] != <span class=\"string\">'0'</span> + i)&#123;</span><br><span class=\"line\">                    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag) vec.push_back(Node(a, b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = vec.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"There are no solutions for \"</span> &lt;&lt; n &lt;&lt; <span class=\"string\">\".\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">5</span>) &lt;&lt; x.b;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" / \"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">5</span>) &lt;&lt; x.a;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" = \"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; n &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码-DFS枚举\"><a href=\"#代码-DFS枚举\" class=\"headerlink\" title=\"代码-DFS枚举\"></a>代码-DFS枚举</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 16 Dec 17:39:29 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> test[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v):u(u), v(v)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Node&gt; ans;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">        a *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        a += vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b = a * n;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tmp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b2 = b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">        tmp.push_back(vec[i]);</span><br><span class=\"line\">        tmp.push_back(b2 % <span class=\"number\">10</span>);</span><br><span class=\"line\">        b2 /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b2)&#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(test, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(test));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = tmp[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!test[val])&#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            test[val] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt == <span class=\"number\">10</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">return</span>; <span class=\"comment\">// over 10 bits, no need to enumerate</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size() == <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok())&#123;</span><br><span class=\"line\">            ans.push_back(Node(b, a));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">            vec.push_back(i);</span><br><span class=\"line\">            vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs();</span><br><span class=\"line\">            vec.pop_back();</span><br><span class=\"line\">            vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        ans.clear();</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans.size() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"There are no solutions for \"</span> &lt;&lt; n &lt;&lt; <span class=\"string\">\".\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : ans)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; right &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">5</span>) &lt;&lt; x.u &lt;&lt; <span class=\"string\">\" / \"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; right &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">5</span>) &lt;&lt; x.v &lt;&lt; <span class=\"string\">\" = \"</span> &lt;&lt; n &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>求满足$$\\frac{abcde}{fghij} = N$$的所有$abcde$ 和 $fghij$的值，其中$2 &lt;= N &lt;= 79。$<br>刘汝佳老师：<code>即使采用暴力法求解问题，对问题进行一定的分析往往会让算法更简介、高效。</code><br>受益匪浅。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-725\" target=\"_blank\" rel=\"noopener\">Uva725-Division</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>一开始直接DFS暴力出来0~9的不同排列，判断是否满足条件，TL了。看了刘汝佳老师的解法，只枚举$fghij$，然后算出$abcde$，再判断是否所有数字都不相同。而且当$abcde$ 和 $fghij$加起来超过10位时可以终止枚举。复杂度大大降低。</p>\n<h1 id=\"代码-循环枚举\"><a href=\"#代码-循环枚举\" class=\"headerlink\" title=\"代码-循环枚举\"></a>代码-循环枚举</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 17 Dec 07:05:55 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> buff[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b):a(a), b(b)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Node&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt++) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a = <span class=\"number\">1234</span>; ; a++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = n * a;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(buff, <span class=\"string\">\"%05d%05d\"</span>, a, b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(buff) &gt; <span class=\"number\">10</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            sort(buff, buff + <span class=\"number\">10</span>);</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(buff[i] != <span class=\"string\">'0'</span> + i)&#123;</span><br><span class=\"line\">                    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag) vec.push_back(Node(a, b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = vec.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"There are no solutions for \"</span> &lt;&lt; n &lt;&lt; <span class=\"string\">\".\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">5</span>) &lt;&lt; x.b;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" / \"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">5</span>) &lt;&lt; x.a;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" = \"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; n &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码-DFS枚举\"><a href=\"#代码-DFS枚举\" class=\"headerlink\" title=\"代码-DFS枚举\"></a>代码-DFS枚举</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sun 16 Dec 17:39:29 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> test[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v):u(u), v(v)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Node&gt; ans;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">        a *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        a += vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b = a * n;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tmp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b2 = b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">        tmp.push_back(vec[i]);</span><br><span class=\"line\">        tmp.push_back(b2 % <span class=\"number\">10</span>);</span><br><span class=\"line\">        b2 /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b2)&#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(test, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(test));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = tmp[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!test[val])&#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            test[val] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt == <span class=\"number\">10</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">return</span>; <span class=\"comment\">// over 10 bits, no need to enumerate</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size() == <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok())&#123;</span><br><span class=\"line\">            ans.push_back(Node(b, a));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">            vec.push_back(i);</span><br><span class=\"line\">            vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs();</span><br><span class=\"line\">            vec.pop_back();</span><br><span class=\"line\">            vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        ans.clear();</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans.size() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"There are no solutions for \"</span> &lt;&lt; n &lt;&lt; <span class=\"string\">\".\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : ans)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; right &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">5</span>) &lt;&lt; x.u &lt;&lt; <span class=\"string\">\" / \"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; right &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">5</span>) &lt;&lt; x.v &lt;&lt; <span class=\"string\">\" = \"</span> &lt;&lt; n &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva806-Spatial Structures-四分树","date":"2018-12-04T12:48:34.000Z","_content":"有幸做World Final的题，，做了一下午= =，刷新我的单题代码长度了，怕了怕了。\n黑白图像有两种表示方法，点阵表示和路径表示。路径表示法首先需要把图像转化为四分树，然后记录所有黑结点到根的路径。\n任务是在这两种表示法之间进行转换。\n<!--more-->\n\n# 链接\n[Uva806-Spatial Structures](https://vjudge.net/problem/UVA-806)\n\n# 题目描述\n中间图为点阵表示：\n![1](/1.png)\n四分树：\n![2](/2.png)\n四分树中NW，NE，SW，SE分别用1、2、3、4表示。其实它们的代表是把图像四分后的左上、右上、左下和右下部分。把得到的路径数字串看成是五进制的，转化为十进制后排序。例如上面的树在转化，排序后的结果是：9 14 17 22 23 44 63 69 88 94 113。\n要求给定一串数字路径还原点阵形式，或给定点阵写出所有黑结点的数字路径并排序输出。\n\n# 题解\n题目本身难度不是很大，只不过有很多细节需要注意。自己就被Presentation Error了好久= =。点阵转路径的时候，递归进行四分，如果子区域全白或全黑，跳出递归，边递归边统计路径，全黑时就把路径转成十进制存起来。路径转点阵的过程类似，可以用队列维护数字串，每取出一个就重新规划区域，直到队列为空，把当前区域全部涂黑。\n*除去输出格式的问题，还有一个需要注意的是，若初始图像全白，则路径用空串来表示，需要特殊处理，同时意味着读入路径数据的时候要用getline。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue  4 Dec 14:36:07 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 70;\nint n;\nchar d[maxn][maxn];\nint x, y;\nstack<int> rec;\nvector<int> ans;\nint cnt = 0;\n\nbool All_Black(int r, int c, int w){\n    for(int i = r; i < r + w; i++){\n        for(int j = c; j < c + w; j++){\n            if(d[i][j] == '0') return false;\n        }\n    }\n    return true;\n}\n\nbool All_White(int r, int c, int w){\n    for(int i = r; i < r + w; i++){\n        for(int j = c; j < c + w; j++){\n            if(d[i][j] == '1') return false;\n        }\n    }\n    return true;\n}\n\nvoid cal(){\n    int sum = 0;\n    stack<int> tmp = rec;\n    while(!tmp.empty()){\n        sum *= 5;\n        sum += tmp.top();\n        tmp.pop();\n    }\n    ans.push_back(sum);\n}\n\nvoid dfs(int r, int c, int w, stack<int>& rec){\n    //cout << r << \" \" << c << \" \" << w << endl;\n    if(All_Black(r, c, w)){\n        //cout << \"all black\" << endl;\n        cal();\n        return;\n    }\n    if(All_White(r, c, w)){\n        //cout << \"all white\" << endl;\n        return;\n    }\n    rec.push(1);\n    dfs(r, c, w / 2, rec);\n    rec.pop();\n    rec.push(2);\n    dfs(r, c + w / 2, w / 2, rec);\n    rec.pop();\n    rec.push(3);\n    dfs(r + w / 2, c, w / 2, rec);\n    rec.pop();\n    rec.push(4);\n    dfs(r + w / 2, c + w / 2, w / 2, rec);\n    rec.pop();\n} \n\nvoid solve1(){\n    for(int i = 0; i < n; i++){\n        scanf(\"%s\", d[i]);\n    }\n    while(!rec.empty()) rec.pop();\n    dfs(0, 0, n, rec);\n    sort(ans.begin(), ans.end());\n\n    printf(\"Image %d\\n\", cnt);\n    int len = ans.size();\n    for(int i = 0; i < len; i++){\n        if((i + 1) %12 == 1) printf(\"%d\", ans[i]);\n        else printf(\" %d\", ans[i]);\n\n        if((i + 1) % 12 == 0) printf(\"\\n\");\n    }\n    if((len % 12) != 0) printf(\"\\n\");\n    printf(\"Total number of black nodes = %d\\n\", len);\n}\n\nvoid draw(int r, int c, int w, queue<int>& que){\n    if(que.empty()){\n        for(int i = r; i < r + w; i++){\n            for(int j = c; j < c + w; j++){\n                d[i][j] = '*';\n            }\n        }\n        return;\n    }\n    int tmp = que.front();\n    que.pop();\n    if(tmp == 1) draw(r, c, w / 2, que);\n    if(tmp == 2) draw(r, c + w / 2, w / 2, que);\n    if(tmp == 3) draw(r + w / 2, c, w / 2, que);\n    if(tmp == 4) draw(r + w / 2, c + w / 2, w / 2, que); \n}\n\nvoid Print_White(){\n    printf(\"Image %d\\n\", cnt);\n    for(int i = 0; i < -n; i++){\n        for(int j = 0; j < -n; j++){\n            printf(\".\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nvoid solve2(){\n    getchar();\n    int num;\n    queue<int> que;\n    stringstream ss1, ss2;\n    string s1, s2;\n    //fgets(s, 1000, stdin);\n    getline(cin, s1);\n    if(s1[0] == '\\n') {\n        Print_White();\n        return;\n    }\n\n    ss1.str(s1);\n    while(ss1 >> s2){\n        ss2.str(s2);\n        ss2 >> num;\n        ss2.clear();\n        if(num == -1) break;\n\n        while(!que.empty()) que.pop();\n\n        while(num){\n            que.push(num % 5);\n            num /= 5;\n        }\n        draw(0, 0, -n, que);\n    }\n\n    printf(\"Image %d\\n\", cnt);\n    for(int i = 0; i < -n; i++){\n        for(int j = 0; j < -n; j++){\n            if(d[i][j] != '*'){\n                d[i][j] = '.';\n            }\n            printf(\"%c\", d[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(1){\n        scanf(\"%d\", &n);\n        if(n == 0) break;\n\n        memset(d, 0, sizeof(d));\n        ans.clear();\n\n        if(cnt > 0) printf(\"\\n\");\n        cnt++;\n        if(n > 0){\n            solve1();\n        }\n        if(n < 0){\n            solve2();\n        }\n    }\n    return 0;\n}\n```\n\n","source":"_posts/Uva806-Spatial-Structures.md","raw":"---\ntitle: Uva806-Spatial Structures-四分树\ndate: 2018-12-04 20:48:34\ncategories:\n- ACM\n- 树\ntags:\n- 四分树\n---\n有幸做World Final的题，，做了一下午= =，刷新我的单题代码长度了，怕了怕了。\n黑白图像有两种表示方法，点阵表示和路径表示。路径表示法首先需要把图像转化为四分树，然后记录所有黑结点到根的路径。\n任务是在这两种表示法之间进行转换。\n<!--more-->\n\n# 链接\n[Uva806-Spatial Structures](https://vjudge.net/problem/UVA-806)\n\n# 题目描述\n中间图为点阵表示：\n![1](/1.png)\n四分树：\n![2](/2.png)\n四分树中NW，NE，SW，SE分别用1、2、3、4表示。其实它们的代表是把图像四分后的左上、右上、左下和右下部分。把得到的路径数字串看成是五进制的，转化为十进制后排序。例如上面的树在转化，排序后的结果是：9 14 17 22 23 44 63 69 88 94 113。\n要求给定一串数字路径还原点阵形式，或给定点阵写出所有黑结点的数字路径并排序输出。\n\n# 题解\n题目本身难度不是很大，只不过有很多细节需要注意。自己就被Presentation Error了好久= =。点阵转路径的时候，递归进行四分，如果子区域全白或全黑，跳出递归，边递归边统计路径，全黑时就把路径转成十进制存起来。路径转点阵的过程类似，可以用队列维护数字串，每取出一个就重新规划区域，直到队列为空，把当前区域全部涂黑。\n*除去输出格式的问题，还有一个需要注意的是，若初始图像全白，则路径用空串来表示，需要特殊处理，同时意味着读入路径数据的时候要用getline。*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Tue  4 Dec 14:36:07 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 70;\nint n;\nchar d[maxn][maxn];\nint x, y;\nstack<int> rec;\nvector<int> ans;\nint cnt = 0;\n\nbool All_Black(int r, int c, int w){\n    for(int i = r; i < r + w; i++){\n        for(int j = c; j < c + w; j++){\n            if(d[i][j] == '0') return false;\n        }\n    }\n    return true;\n}\n\nbool All_White(int r, int c, int w){\n    for(int i = r; i < r + w; i++){\n        for(int j = c; j < c + w; j++){\n            if(d[i][j] == '1') return false;\n        }\n    }\n    return true;\n}\n\nvoid cal(){\n    int sum = 0;\n    stack<int> tmp = rec;\n    while(!tmp.empty()){\n        sum *= 5;\n        sum += tmp.top();\n        tmp.pop();\n    }\n    ans.push_back(sum);\n}\n\nvoid dfs(int r, int c, int w, stack<int>& rec){\n    //cout << r << \" \" << c << \" \" << w << endl;\n    if(All_Black(r, c, w)){\n        //cout << \"all black\" << endl;\n        cal();\n        return;\n    }\n    if(All_White(r, c, w)){\n        //cout << \"all white\" << endl;\n        return;\n    }\n    rec.push(1);\n    dfs(r, c, w / 2, rec);\n    rec.pop();\n    rec.push(2);\n    dfs(r, c + w / 2, w / 2, rec);\n    rec.pop();\n    rec.push(3);\n    dfs(r + w / 2, c, w / 2, rec);\n    rec.pop();\n    rec.push(4);\n    dfs(r + w / 2, c + w / 2, w / 2, rec);\n    rec.pop();\n} \n\nvoid solve1(){\n    for(int i = 0; i < n; i++){\n        scanf(\"%s\", d[i]);\n    }\n    while(!rec.empty()) rec.pop();\n    dfs(0, 0, n, rec);\n    sort(ans.begin(), ans.end());\n\n    printf(\"Image %d\\n\", cnt);\n    int len = ans.size();\n    for(int i = 0; i < len; i++){\n        if((i + 1) %12 == 1) printf(\"%d\", ans[i]);\n        else printf(\" %d\", ans[i]);\n\n        if((i + 1) % 12 == 0) printf(\"\\n\");\n    }\n    if((len % 12) != 0) printf(\"\\n\");\n    printf(\"Total number of black nodes = %d\\n\", len);\n}\n\nvoid draw(int r, int c, int w, queue<int>& que){\n    if(que.empty()){\n        for(int i = r; i < r + w; i++){\n            for(int j = c; j < c + w; j++){\n                d[i][j] = '*';\n            }\n        }\n        return;\n    }\n    int tmp = que.front();\n    que.pop();\n    if(tmp == 1) draw(r, c, w / 2, que);\n    if(tmp == 2) draw(r, c + w / 2, w / 2, que);\n    if(tmp == 3) draw(r + w / 2, c, w / 2, que);\n    if(tmp == 4) draw(r + w / 2, c + w / 2, w / 2, que); \n}\n\nvoid Print_White(){\n    printf(\"Image %d\\n\", cnt);\n    for(int i = 0; i < -n; i++){\n        for(int j = 0; j < -n; j++){\n            printf(\".\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nvoid solve2(){\n    getchar();\n    int num;\n    queue<int> que;\n    stringstream ss1, ss2;\n    string s1, s2;\n    //fgets(s, 1000, stdin);\n    getline(cin, s1);\n    if(s1[0] == '\\n') {\n        Print_White();\n        return;\n    }\n\n    ss1.str(s1);\n    while(ss1 >> s2){\n        ss2.str(s2);\n        ss2 >> num;\n        ss2.clear();\n        if(num == -1) break;\n\n        while(!que.empty()) que.pop();\n\n        while(num){\n            que.push(num % 5);\n            num /= 5;\n        }\n        draw(0, 0, -n, que);\n    }\n\n    printf(\"Image %d\\n\", cnt);\n    for(int i = 0; i < -n; i++){\n        for(int j = 0; j < -n; j++){\n            if(d[i][j] != '*'){\n                d[i][j] = '.';\n            }\n            printf(\"%c\", d[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(1){\n        scanf(\"%d\", &n);\n        if(n == 0) break;\n\n        memset(d, 0, sizeof(d));\n        ans.clear();\n\n        if(cnt > 0) printf(\"\\n\");\n        cnt++;\n        if(n > 0){\n            solve1();\n        }\n        if(n < 0){\n            solve2();\n        }\n    }\n    return 0;\n}\n```\n\n","slug":"Uva806-Spatial-Structures","published":1,"updated":"2019-08-20T14:45:48.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ls001f30vnv87nh9ey","content":"<p>有幸做World Final的题，，做了一下午= =，刷新我的单题代码长度了，怕了怕了。<br>黑白图像有两种表示方法，点阵表示和路径表示。路径表示法首先需要把图像转化为四分树，然后记录所有黑结点到根的路径。<br>任务是在这两种表示法之间进行转换。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-806\" target=\"_blank\" rel=\"noopener\">Uva806-Spatial Structures</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>中间图为点阵表示：<br><img src=\"/2018/12/04/Uva806-Spatial-Structures/1.png\" alt=\"1\"><br>四分树：<br><img src=\"/2018/12/04/Uva806-Spatial-Structures/2.png\" alt=\"2\"><br>四分树中NW，NE，SW，SE分别用1、2、3、4表示。其实它们的代表是把图像四分后的左上、右上、左下和右下部分。把得到的路径数字串看成是五进制的，转化为十进制后排序。例如上面的树在转化，排序后的结果是：9 14 17 22 23 44 63 69 88 94 113。<br>要求给定一串数字路径还原点阵形式，或给定点阵写出所有黑结点的数字路径并排序输出。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>题目本身难度不是很大，只不过有很多细节需要注意。自己就被Presentation Error了好久= =。点阵转路径的时候，递归进行四分，如果子区域全白或全黑，跳出递归，边递归边统计路径，全黑时就把路径转成十进制存起来。路径转点阵的过程类似，可以用队列维护数字串，每取出一个就重新规划区域，直到队列为空，把当前区域全部涂黑。<br><em>除去输出格式的问题，还有一个需要注意的是，若初始图像全白，则路径用空串来表示，需要特殊处理，同时意味着读入路径数据的时候要用getline。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue  4 Dec 14:36:07 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">70</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; rec;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">All_Black</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r; i &lt; r + w; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c; j &lt; c + w; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i][j] == <span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">All_White</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r; i &lt; r + w; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c; j &lt; c + w; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i][j] == <span class=\"string\">'1'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; tmp = rec;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!tmp.empty())&#123;</span><br><span class=\"line\">        sum *= <span class=\"number\">5</span>;</span><br><span class=\"line\">        sum += tmp.top();</span><br><span class=\"line\">        tmp.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans.push_back(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w, <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; rec)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; r &lt;&lt; \" \" &lt;&lt; c &lt;&lt; \" \" &lt;&lt; w &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(All_Black(r, c, w))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"all black\" &lt;&lt; endl;</span></span><br><span class=\"line\">        cal();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(All_White(r, c, w))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"all white\" &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rec.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    dfs(r, c, w / <span class=\"number\">2</span>, rec);</span><br><span class=\"line\">    rec.pop();</span><br><span class=\"line\">    rec.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    dfs(r, c + w / <span class=\"number\">2</span>, w / <span class=\"number\">2</span>, rec);</span><br><span class=\"line\">    rec.pop();</span><br><span class=\"line\">    rec.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">    dfs(r + w / <span class=\"number\">2</span>, c, w / <span class=\"number\">2</span>, rec);</span><br><span class=\"line\">    rec.pop();</span><br><span class=\"line\">    rec.push(<span class=\"number\">4</span>);</span><br><span class=\"line\">    dfs(r + w / <span class=\"number\">2</span>, c + w / <span class=\"number\">2</span>, w / <span class=\"number\">2</span>, rec);</span><br><span class=\"line\">    rec.pop();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, d[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!rec.empty()) rec.pop();</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>, n, rec);</span><br><span class=\"line\">    sort(ans.begin(), ans.end());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Image %d\\n\"</span>, cnt);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = ans.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i + <span class=\"number\">1</span>) %<span class=\"number\">12</span> == <span class=\"number\">1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, ans[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, ans[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i + <span class=\"number\">1</span>) % <span class=\"number\">12</span> == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((len % <span class=\"number\">12</span>) != <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Total number of black nodes = %d\\n\"</span>, len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w, <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; que)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(que.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r; i &lt; r + w; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c; j &lt; c + w; j++)&#123;</span><br><span class=\"line\">                d[i][j] = <span class=\"string\">'*'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = que.front();</span><br><span class=\"line\">    que.pop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">1</span>) draw(r, c, w / <span class=\"number\">2</span>, que);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">2</span>) draw(r, c + w / <span class=\"number\">2</span>, w / <span class=\"number\">2</span>, que);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">3</span>) draw(r + w / <span class=\"number\">2</span>, c, w / <span class=\"number\">2</span>, que);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">4</span>) draw(r + w / <span class=\"number\">2</span>, c + w / <span class=\"number\">2</span>, w / <span class=\"number\">2</span>, que); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print_White</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Image %d\\n\"</span>, cnt);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; -n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; -n; j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">    <span class=\"built_in\">stringstream</span> ss1, ss2;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s1, s2;</span><br><span class=\"line\">    <span class=\"comment\">//fgets(s, 1000, stdin);</span></span><br><span class=\"line\">    getline(<span class=\"built_in\">cin</span>, s1);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s1[<span class=\"number\">0</span>] == <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">        Print_White();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ss1.str(s1);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss1 &gt;&gt; s2)&#123;</span><br><span class=\"line\">        ss2.str(s2);</span><br><span class=\"line\">        ss2 &gt;&gt; num;</span><br><span class=\"line\">        ss2.clear();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!que.empty()) que.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(num)&#123;</span><br><span class=\"line\">            que.push(num % <span class=\"number\">5</span>);</span><br><span class=\"line\">            num /= <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        draw(<span class=\"number\">0</span>, <span class=\"number\">0</span>, -n, que);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Image %d\\n\"</span>, cnt);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; -n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; -n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i][j] != <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                d[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, d[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        ans.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            solve1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            solve2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>有幸做World Final的题，，做了一下午= =，刷新我的单题代码长度了，怕了怕了。<br>黑白图像有两种表示方法，点阵表示和路径表示。路径表示法首先需要把图像转化为四分树，然后记录所有黑结点到根的路径。<br>任务是在这两种表示法之间进行转换。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-806\" target=\"_blank\" rel=\"noopener\">Uva806-Spatial Structures</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>中间图为点阵表示：<br><img src=\"/2018/12/04/Uva806-Spatial-Structures/1.png\" alt=\"1\"><br>四分树：<br><img src=\"/2018/12/04/Uva806-Spatial-Structures/2.png\" alt=\"2\"><br>四分树中NW，NE，SW，SE分别用1、2、3、4表示。其实它们的代表是把图像四分后的左上、右上、左下和右下部分。把得到的路径数字串看成是五进制的，转化为十进制后排序。例如上面的树在转化，排序后的结果是：9 14 17 22 23 44 63 69 88 94 113。<br>要求给定一串数字路径还原点阵形式，或给定点阵写出所有黑结点的数字路径并排序输出。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>题目本身难度不是很大，只不过有很多细节需要注意。自己就被Presentation Error了好久= =。点阵转路径的时候，递归进行四分，如果子区域全白或全黑，跳出递归，边递归边统计路径，全黑时就把路径转成十进制存起来。路径转点阵的过程类似，可以用队列维护数字串，每取出一个就重新规划区域，直到队列为空，把当前区域全部涂黑。<br><em>除去输出格式的问题，还有一个需要注意的是，若初始图像全白，则路径用空串来表示，需要特殊处理，同时意味着读入路径数据的时候要用getline。</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Tue  4 Dec 14:36:07 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">70</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; rec;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">All_Black</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r; i &lt; r + w; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c; j &lt; c + w; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i][j] == <span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">All_White</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r; i &lt; r + w; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c; j &lt; c + w; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i][j] == <span class=\"string\">'1'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; tmp = rec;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!tmp.empty())&#123;</span><br><span class=\"line\">        sum *= <span class=\"number\">5</span>;</span><br><span class=\"line\">        sum += tmp.top();</span><br><span class=\"line\">        tmp.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans.push_back(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w, <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; rec)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; r &lt;&lt; \" \" &lt;&lt; c &lt;&lt; \" \" &lt;&lt; w &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(All_Black(r, c, w))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"all black\" &lt;&lt; endl;</span></span><br><span class=\"line\">        cal();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(All_White(r, c, w))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"all white\" &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rec.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    dfs(r, c, w / <span class=\"number\">2</span>, rec);</span><br><span class=\"line\">    rec.pop();</span><br><span class=\"line\">    rec.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    dfs(r, c + w / <span class=\"number\">2</span>, w / <span class=\"number\">2</span>, rec);</span><br><span class=\"line\">    rec.pop();</span><br><span class=\"line\">    rec.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">    dfs(r + w / <span class=\"number\">2</span>, c, w / <span class=\"number\">2</span>, rec);</span><br><span class=\"line\">    rec.pop();</span><br><span class=\"line\">    rec.push(<span class=\"number\">4</span>);</span><br><span class=\"line\">    dfs(r + w / <span class=\"number\">2</span>, c + w / <span class=\"number\">2</span>, w / <span class=\"number\">2</span>, rec);</span><br><span class=\"line\">    rec.pop();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, d[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!rec.empty()) rec.pop();</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>, n, rec);</span><br><span class=\"line\">    sort(ans.begin(), ans.end());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Image %d\\n\"</span>, cnt);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = ans.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i + <span class=\"number\">1</span>) %<span class=\"number\">12</span> == <span class=\"number\">1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, ans[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, ans[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i + <span class=\"number\">1</span>) % <span class=\"number\">12</span> == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((len % <span class=\"number\">12</span>) != <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Total number of black nodes = %d\\n\"</span>, len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w, <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; que)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(que.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r; i &lt; r + w; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c; j &lt; c + w; j++)&#123;</span><br><span class=\"line\">                d[i][j] = <span class=\"string\">'*'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = que.front();</span><br><span class=\"line\">    que.pop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">1</span>) draw(r, c, w / <span class=\"number\">2</span>, que);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">2</span>) draw(r, c + w / <span class=\"number\">2</span>, w / <span class=\"number\">2</span>, que);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">3</span>) draw(r + w / <span class=\"number\">2</span>, c, w / <span class=\"number\">2</span>, que);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">4</span>) draw(r + w / <span class=\"number\">2</span>, c + w / <span class=\"number\">2</span>, w / <span class=\"number\">2</span>, que); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print_White</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Image %d\\n\"</span>, cnt);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; -n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; -n; j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">    <span class=\"built_in\">stringstream</span> ss1, ss2;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s1, s2;</span><br><span class=\"line\">    <span class=\"comment\">//fgets(s, 1000, stdin);</span></span><br><span class=\"line\">    getline(<span class=\"built_in\">cin</span>, s1);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s1[<span class=\"number\">0</span>] == <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">        Print_White();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ss1.str(s1);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss1 &gt;&gt; s2)&#123;</span><br><span class=\"line\">        ss2.str(s2);</span><br><span class=\"line\">        ss2 &gt;&gt; num;</span><br><span class=\"line\">        ss2.clear();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!que.empty()) que.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(num)&#123;</span><br><span class=\"line\">            que.push(num % <span class=\"number\">5</span>);</span><br><span class=\"line\">            num /= <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        draw(<span class=\"number\">0</span>, <span class=\"number\">0</span>, -n, que);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Image %d\\n\"</span>, cnt);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; -n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; -n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i][j] != <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                d[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, d[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        ans.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            solve1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            solve2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva816-Abbott's Revenge-BFS","date":"2018-11-01T08:18:17.000Z","_content":"一道比较别致的BFS搜索题，题目规定了在迷宫里沿特定方向到达某点后只能再沿特定一个或几个方向继续前进，而不是平常的任意四个方向都可以前进。\n在输出格式上WA了很久，，什么时候我才能“Bug Free”啊，哭QAQ\n<!--more-->\n# 链接\n[Uva816-Abbott's Revenge](https://vjudge.net/problem/UVA-816)\n# 题目描述\n迷宫找最短路径问题，不同于以往的障碍物形式，题目规定沿某一方向进入节点（东，南，西，北）之后只能按照给定的方向离开该节点（前进，左转，右转）。给定起点和终点，要求输出最短路径。\n# 题解\n带方向的BFS，在构建地图的时候添加上方向和转向两个维度。在更新节点距离和记录路径的时候加上方向维度。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed 31 Oct 07:40:43 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 10, dir = 4, turn = 3;\nchar dirs[] = \"NESW\", turns[] = \"FLR\";\nint mp[maxn][maxn][dir][turn];\nint dx[] = {-1, 0, 1, 0};\nint dy[] = {0, 1, 0, -1};\nint dis[maxn][maxn][dir];\nstruct Node{\n    int x;\n    int y;\n    int dir;\n    Node(){}\n    Node(int xx, int yy, int ddir): x(xx), y(yy), dir(ddir){}\n};\nNode path[maxn][maxn][dir];\nint stx, sty, edx, edy;\nchar stdir;\n\nint finddir(char c){\n    return strchr(dirs, c) - dirs;\n}\n\nint findturn(char c){\n    return strchr(turns, c) - turns;\n}\n\n\nvoid read(){\n    int x, y, dr, tr;\n    string s;\n    while(1){\n        cin >> x;\n        if(x == 0) break;\n        cin >> y;\n        for(;;){\n            cin >> s;\n            //cout << s << endl;\n            if(s == \"*\") break;\n            dr = finddir(s[0]);\n            //cout << dr << endl;\n            for(size_t i = 1; i < s.length(); i++){\n                tr = findturn(s[i]);\n                //cout << tr << endl;\n                mp[x][y][dr][tr] = 1;\n            }\n        }\n    }\n}\n\nbool inside(int x, int y){\n    if(x >= 1 && x <= 9 && y >= 1 && y <= 9) return true;\n    else return false;\n}\n\nint trans(int turn, int dir){\n    if(turn == 0) return dir;\n    else if(turn == 1) return (dir + 3) % 4;\n    else return (dir + 1) % 4;\n}\n\nvoid print(Node node){\n    //cout << \"GodBlessMe!\" << endl;\n    vector<Node> vec;\n    vec.push_back(node);\n    Node nd;\n    while(1){\n        nd = path[node.x][node.y][node.dir];\n        if(nd.x == -1) break;\n        vec.push_back(nd);\n        node = nd;\n    }\n    vec.push_back(Node(stx, sty, finddir(stdir)));\n    reverse(vec.begin(), vec.end());\n    \n    int cnt = 0;\n    for(auto x : vec){\n        if(cnt % 10 == 0) cout << \" \";\n        cout << \" (\" << x.x << \",\" << x.y << \")\";\n        if(++cnt % 10 == 0) cout << \"\\n\";\n    }\n    if(vec.size() % 10 != 0) cout << endl;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    string s;\n    bool ok;\n    while(cin >> s){\n        if(s == \"END\") break;\n        memset(mp, 0, sizeof(mp));\n        memset(dis, -1, sizeof(dis));\n        memset(path, -1, sizeof(path));\n        ok = false;\n        \n        cin >> stx >> sty >> stdir >> edx >> edy;\n        read();\n        queue<Node> que;\n        Node node;\n        int num = finddir(stdir);\n        node.x = stx + dx[num], node.y = sty + dy[num], node.dir = num;\n        que.push(node);\n        dis[node.x][node.y][node.dir] = 0;\n        while(!que.empty()){\n            Node nd = que.front();\n            if(nd.x == edx && nd.y == edy){\n                ok = true;\n                break;\n            }\n            que.pop();\n            for(int i = 0; i < 3; i++){\n                int k = trans(i, nd.dir);\n                int nx = nd.x + dx[k], ny = nd.y + dy[k];\n                if(mp[nd.x][nd.y][nd.dir][i] && inside(nx, ny) && dis[nx][ny][k] == -1){\n                    dis[nx][ny][k] = dis[nd.x][nd.y][nd.dir] + 1;\n                    que.push(Node(nx, ny, k));\n                    path[nx][ny][k] = nd;\n                }\n            }\n        }\n        cout << s << endl;\n        if(ok) print(que.front());\n        else cout << \"  No Solution Possible\" << endl;\n    }\n    \n    return 0;\n}\n```","source":"_posts/Uva816-Abbott-s-Revenge-BFS.md","raw":"---\ntitle: Uva816-Abbott's Revenge-BFS\ndate: 2018-11-01 16:18:17\ncategories:\n- ACM\n- BFS\ntags:\n- BFS\n---\n一道比较别致的BFS搜索题，题目规定了在迷宫里沿特定方向到达某点后只能再沿特定一个或几个方向继续前进，而不是平常的任意四个方向都可以前进。\n在输出格式上WA了很久，，什么时候我才能“Bug Free”啊，哭QAQ\n<!--more-->\n# 链接\n[Uva816-Abbott's Revenge](https://vjudge.net/problem/UVA-816)\n# 题目描述\n迷宫找最短路径问题，不同于以往的障碍物形式，题目规定沿某一方向进入节点（东，南，西，北）之后只能按照给定的方向离开该节点（前进，左转，右转）。给定起点和终点，要求输出最短路径。\n# 题解\n带方向的BFS，在构建地图的时候添加上方向和转向两个维度。在更新节点距离和记录路径的时候加上方向维度。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed 31 Oct 07:40:43 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 10, dir = 4, turn = 3;\nchar dirs[] = \"NESW\", turns[] = \"FLR\";\nint mp[maxn][maxn][dir][turn];\nint dx[] = {-1, 0, 1, 0};\nint dy[] = {0, 1, 0, -1};\nint dis[maxn][maxn][dir];\nstruct Node{\n    int x;\n    int y;\n    int dir;\n    Node(){}\n    Node(int xx, int yy, int ddir): x(xx), y(yy), dir(ddir){}\n};\nNode path[maxn][maxn][dir];\nint stx, sty, edx, edy;\nchar stdir;\n\nint finddir(char c){\n    return strchr(dirs, c) - dirs;\n}\n\nint findturn(char c){\n    return strchr(turns, c) - turns;\n}\n\n\nvoid read(){\n    int x, y, dr, tr;\n    string s;\n    while(1){\n        cin >> x;\n        if(x == 0) break;\n        cin >> y;\n        for(;;){\n            cin >> s;\n            //cout << s << endl;\n            if(s == \"*\") break;\n            dr = finddir(s[0]);\n            //cout << dr << endl;\n            for(size_t i = 1; i < s.length(); i++){\n                tr = findturn(s[i]);\n                //cout << tr << endl;\n                mp[x][y][dr][tr] = 1;\n            }\n        }\n    }\n}\n\nbool inside(int x, int y){\n    if(x >= 1 && x <= 9 && y >= 1 && y <= 9) return true;\n    else return false;\n}\n\nint trans(int turn, int dir){\n    if(turn == 0) return dir;\n    else if(turn == 1) return (dir + 3) % 4;\n    else return (dir + 1) % 4;\n}\n\nvoid print(Node node){\n    //cout << \"GodBlessMe!\" << endl;\n    vector<Node> vec;\n    vec.push_back(node);\n    Node nd;\n    while(1){\n        nd = path[node.x][node.y][node.dir];\n        if(nd.x == -1) break;\n        vec.push_back(nd);\n        node = nd;\n    }\n    vec.push_back(Node(stx, sty, finddir(stdir)));\n    reverse(vec.begin(), vec.end());\n    \n    int cnt = 0;\n    for(auto x : vec){\n        if(cnt % 10 == 0) cout << \" \";\n        cout << \" (\" << x.x << \",\" << x.y << \")\";\n        if(++cnt % 10 == 0) cout << \"\\n\";\n    }\n    if(vec.size() % 10 != 0) cout << endl;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    string s;\n    bool ok;\n    while(cin >> s){\n        if(s == \"END\") break;\n        memset(mp, 0, sizeof(mp));\n        memset(dis, -1, sizeof(dis));\n        memset(path, -1, sizeof(path));\n        ok = false;\n        \n        cin >> stx >> sty >> stdir >> edx >> edy;\n        read();\n        queue<Node> que;\n        Node node;\n        int num = finddir(stdir);\n        node.x = stx + dx[num], node.y = sty + dy[num], node.dir = num;\n        que.push(node);\n        dis[node.x][node.y][node.dir] = 0;\n        while(!que.empty()){\n            Node nd = que.front();\n            if(nd.x == edx && nd.y == edy){\n                ok = true;\n                break;\n            }\n            que.pop();\n            for(int i = 0; i < 3; i++){\n                int k = trans(i, nd.dir);\n                int nx = nd.x + dx[k], ny = nd.y + dy[k];\n                if(mp[nd.x][nd.y][nd.dir][i] && inside(nx, ny) && dis[nx][ny][k] == -1){\n                    dis[nx][ny][k] = dis[nd.x][nd.y][nd.dir] + 1;\n                    que.push(Node(nx, ny, k));\n                    path[nx][ny][k] = nd;\n                }\n            }\n        }\n        cout << s << endl;\n        if(ok) print(que.front());\n        else cout << \"  No Solution Possible\" << endl;\n    }\n    \n    return 0;\n}\n```","slug":"Uva816-Abbott-s-Revenge-BFS","published":1,"updated":"2019-08-20T14:45:30.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lt001g30vnrqv6g2ag","content":"<p>一道比较别致的BFS搜索题，题目规定了在迷宫里沿特定方向到达某点后只能再沿特定一个或几个方向继续前进，而不是平常的任意四个方向都可以前进。<br>在输出格式上WA了很久，，什么时候我才能“Bug Free”啊，哭QAQ</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-816\" target=\"_blank\" rel=\"noopener\">Uva816-Abbott’s Revenge</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>迷宫找最短路径问题，不同于以往的障碍物形式，题目规定沿某一方向进入节点（东，南，西，北）之后只能按照给定的方向离开该节点（前进，左转，右转）。给定起点和终点，要求输出最短路径。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>带方向的BFS，在构建地图的时候添加上方向和转向两个维度。在更新节点距离和记录路径的时候加上方向维度。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed 31 Oct 07:40:43 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10</span>, dir = <span class=\"number\">4</span>, turn = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> dirs[] = <span class=\"string\">\"NESW\"</span>, turns[] = <span class=\"string\">\"FLR\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[maxn][maxn][dir][turn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn][maxn][dir];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dir;</span><br><span class=\"line\">    Node()&#123;&#125;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> xx, <span class=\"keyword\">int</span> yy, <span class=\"keyword\">int</span> ddir): x(xx), y(yy), dir(ddir)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node path[maxn][maxn][dir];</span><br><span class=\"line\"><span class=\"keyword\">int</span> stx, sty, edx, edy;</span><br><span class=\"line\"><span class=\"keyword\">char</span> stdir;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">finddir</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strchr</span>(dirs, c) - dirs;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findturn</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strchr</span>(turns, c) - turns;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, dr, tr;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s == <span class=\"string\">\"*\"</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            dr = finddir(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; dr &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">                tr = findturn(s[i]);</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; tr &lt;&lt; endl;</span></span><br><span class=\"line\">                mp[x][y][dr][tr] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">inside</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">1</span> &amp;&amp; x &lt;= <span class=\"number\">9</span> &amp;&amp; y &gt;= <span class=\"number\">1</span> &amp;&amp; y &lt;= <span class=\"number\">9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">trans</span><span class=\"params\">(<span class=\"keyword\">int</span> turn, <span class=\"keyword\">int</span> dir)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(turn == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> dir;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(turn == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> (dir + <span class=\"number\">3</span>) % <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> (dir + <span class=\"number\">1</span>) % <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; \"GodBlessMe!\" &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Node&gt; vec;</span><br><span class=\"line\">    vec.push_back(node);</span><br><span class=\"line\">    Node nd;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        nd = path[node.x][node.y][node.dir];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nd.x == <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        vec.push_back(nd);</span><br><span class=\"line\">        node = nd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vec.push_back(Node(stx, sty, finddir(stdir)));</span><br><span class=\"line\">    reverse(vec.begin(), vec.end());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt % <span class=\"number\">10</span> == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" (\"</span> &lt;&lt; x.x &lt;&lt; <span class=\"string\">\",\"</span> &lt;&lt; x.y &lt;&lt; <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(++cnt % <span class=\"number\">10</span> == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size() % <span class=\"number\">10</span> != <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ok;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"string\">\"END\"</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(mp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(mp));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(path, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(path));</span><br><span class=\"line\">        ok = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; stx &gt;&gt; sty &gt;&gt; stdir &gt;&gt; edx &gt;&gt; edy;</span><br><span class=\"line\">        read();</span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">        Node node;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = finddir(stdir);</span><br><span class=\"line\">        node.x = stx + dx[num], node.y = sty + dy[num], node.dir = num;</span><br><span class=\"line\">        que.push(node);</span><br><span class=\"line\">        dis[node.x][node.y][node.dir] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">            Node nd = que.front();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nd.x == edx &amp;&amp; nd.y == edy)&#123;</span><br><span class=\"line\">                ok = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            que.pop();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> k = trans(i, nd.dir);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nx = nd.x + dx[k], ny = nd.y + dy[k];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[nd.x][nd.y][nd.dir][i] &amp;&amp; inside(nx, ny) &amp;&amp; dis[nx][ny][k] == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                    dis[nx][ny][k] = dis[nd.x][nd.y][nd.dir] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    que.push(Node(nx, ny, k));</span><br><span class=\"line\">                    path[nx][ny][k] = nd;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok) print(que.front());</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"  No Solution Possible\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>一道比较别致的BFS搜索题，题目规定了在迷宫里沿特定方向到达某点后只能再沿特定一个或几个方向继续前进，而不是平常的任意四个方向都可以前进。<br>在输出格式上WA了很久，，什么时候我才能“Bug Free”啊，哭QAQ</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-816\" target=\"_blank\" rel=\"noopener\">Uva816-Abbott’s Revenge</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>迷宫找最短路径问题，不同于以往的障碍物形式，题目规定沿某一方向进入节点（东，南，西，北）之后只能按照给定的方向离开该节点（前进，左转，右转）。给定起点和终点，要求输出最短路径。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>带方向的BFS，在构建地图的时候添加上方向和转向两个维度。在更新节点距离和记录路径的时候加上方向维度。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed 31 Oct 07:40:43 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10</span>, dir = <span class=\"number\">4</span>, turn = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> dirs[] = <span class=\"string\">\"NESW\"</span>, turns[] = <span class=\"string\">\"FLR\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[maxn][maxn][dir][turn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn][maxn][dir];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dir;</span><br><span class=\"line\">    Node()&#123;&#125;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> xx, <span class=\"keyword\">int</span> yy, <span class=\"keyword\">int</span> ddir): x(xx), y(yy), dir(ddir)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node path[maxn][maxn][dir];</span><br><span class=\"line\"><span class=\"keyword\">int</span> stx, sty, edx, edy;</span><br><span class=\"line\"><span class=\"keyword\">char</span> stdir;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">finddir</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strchr</span>(dirs, c) - dirs;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findturn</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strchr</span>(turns, c) - turns;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, dr, tr;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; y;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s == <span class=\"string\">\"*\"</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            dr = finddir(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; dr &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">                tr = findturn(s[i]);</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; tr &lt;&lt; endl;</span></span><br><span class=\"line\">                mp[x][y][dr][tr] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">inside</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">1</span> &amp;&amp; x &lt;= <span class=\"number\">9</span> &amp;&amp; y &gt;= <span class=\"number\">1</span> &amp;&amp; y &lt;= <span class=\"number\">9</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">trans</span><span class=\"params\">(<span class=\"keyword\">int</span> turn, <span class=\"keyword\">int</span> dir)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(turn == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> dir;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(turn == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> (dir + <span class=\"number\">3</span>) % <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> (dir + <span class=\"number\">1</span>) % <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; \"GodBlessMe!\" &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Node&gt; vec;</span><br><span class=\"line\">    vec.push_back(node);</span><br><span class=\"line\">    Node nd;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        nd = path[node.x][node.y][node.dir];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nd.x == <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        vec.push_back(nd);</span><br><span class=\"line\">        node = nd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vec.push_back(Node(stx, sty, finddir(stdir)));</span><br><span class=\"line\">    reverse(vec.begin(), vec.end());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt % <span class=\"number\">10</span> == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" (\"</span> &lt;&lt; x.x &lt;&lt; <span class=\"string\">\",\"</span> &lt;&lt; x.y &lt;&lt; <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(++cnt % <span class=\"number\">10</span> == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size() % <span class=\"number\">10</span> != <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ok;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"string\">\"END\"</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(mp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(mp));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(path, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(path));</span><br><span class=\"line\">        ok = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; stx &gt;&gt; sty &gt;&gt; stdir &gt;&gt; edx &gt;&gt; edy;</span><br><span class=\"line\">        read();</span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">        Node node;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = finddir(stdir);</span><br><span class=\"line\">        node.x = stx + dx[num], node.y = sty + dy[num], node.dir = num;</span><br><span class=\"line\">        que.push(node);</span><br><span class=\"line\">        dis[node.x][node.y][node.dir] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">            Node nd = que.front();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nd.x == edx &amp;&amp; nd.y == edy)&#123;</span><br><span class=\"line\">                ok = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            que.pop();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> k = trans(i, nd.dir);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nx = nd.x + dx[k], ny = nd.y + dy[k];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[nd.x][nd.y][nd.dir][i] &amp;&amp; inside(nx, ny) &amp;&amp; dis[nx][ny][k] == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                    dis[nx][ny][k] = dis[nd.x][nd.y][nd.dir] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    que.push(Node(nx, ny, k));</span><br><span class=\"line\">                    path[nx][ny][k] = nd;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok) print(que.front());</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"  No Solution Possible\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Uva839-二叉树的递归处理","date":"2018-09-22T14:53:32.000Z","_content":"输入一个树状天平，根据力矩相等原则判断是否平衡。即判断是否满足$W_lD_l=W_rD_r$。\n![example](/tree.png)\n<!--more-->\n# 链接\n[Uva839-Not so Mobile](https://vjudge.net/problem/UVA-839)\n# 题目描述\n题目输入采用递归（先序）方式：每个天平的格式为$W_l$，$D_l$，$W_r$，$D_r$，当$W_l$或$W_r$为$0$时，表示该“砝码”实际是一个子天平，接下来会进一步描述这个子天平。当$W_l=W_r=0$时，会先描述左子天平，然后是右子天平。\n# 题解\n因为题目的输入就采取了递归方式定义，所以编写一个递归过程读取输入同时进行处理比较合适。在递归的过程中判断子天平是否满足平衡并自下向上不断的更新$W$为$0$的节点（更新为其左子砝码重量$W_l$和右子砝码重量$W_r$之和）。可以定义一个标志变量来标明整个过程是否一直都满足平衡条件。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 22 Sep 22:02:34 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint t;\nbool f;\n\nint solve(){\n    int w1, d1, w2, d2;\n    cin >> w1 >> d1 >> w2 >> d2;\n    if(!w1) w1 = solve();\n    if(!w2) w2 = solve();\n    if(w1 * d1 != w2 * d2) f = false;\n    return w1 + w2;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    cin >> t;\n    while(t--){\n        f = true;\n        solve();\n        if(f) cout << \"YES\" << endl;\n        else cout << \"NO\" << endl;\n        if(t) cout << endl;\n    }\n    \n    return 0;\n}\n```","source":"_posts/Uva839-二叉树的递归处理.md","raw":"---\ntitle: Uva839-二叉树的递归处理\ndate: 2018-09-22 22:53:32\ncategories:\n- ACM\n- 树\ntags:\n- 二叉树\n- DFS\n---\n输入一个树状天平，根据力矩相等原则判断是否平衡。即判断是否满足$W_lD_l=W_rD_r$。\n![example](/tree.png)\n<!--more-->\n# 链接\n[Uva839-Not so Mobile](https://vjudge.net/problem/UVA-839)\n# 题目描述\n题目输入采用递归（先序）方式：每个天平的格式为$W_l$，$D_l$，$W_r$，$D_r$，当$W_l$或$W_r$为$0$时，表示该“砝码”实际是一个子天平，接下来会进一步描述这个子天平。当$W_l=W_r=0$时，会先描述左子天平，然后是右子天平。\n# 题解\n因为题目的输入就采取了递归方式定义，所以编写一个递归过程读取输入同时进行处理比较合适。在递归的过程中判断子天平是否满足平衡并自下向上不断的更新$W$为$0$的节点（更新为其左子砝码重量$W_l$和右子砝码重量$W_r$之和）。可以定义一个标志变量来标明整个过程是否一直都满足平衡条件。\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 22 Sep 22:02:34 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint t;\nbool f;\n\nint solve(){\n    int w1, d1, w2, d2;\n    cin >> w1 >> d1 >> w2 >> d2;\n    if(!w1) w1 = solve();\n    if(!w2) w2 = solve();\n    if(w1 * d1 != w2 * d2) f = false;\n    return w1 + w2;\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    cin >> t;\n    while(t--){\n        f = true;\n        solve();\n        if(f) cout << \"YES\" << endl;\n        else cout << \"NO\" << endl;\n        if(t) cout << endl;\n    }\n    \n    return 0;\n}\n```","slug":"Uva839-二叉树的递归处理","published":1,"updated":"2019-08-20T14:45:16.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lt001h30vnphfq0li4","content":"<p>输入一个树状天平，根据力矩相等原则判断是否平衡。即判断是否满足$W_lD_l=W_rD_r$。<br><img src=\"/2018/09/22/Uva839-二叉树的递归处理/tree.png\" alt=\"example\"></p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-839\" target=\"_blank\" rel=\"noopener\">Uva839-Not so Mobile</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>题目输入采用递归（先序）方式：每个天平的格式为$W_l$，$D_l$，$W_r$，$D_r$，当$W_l$或$W_r$为$0$时，表示该“砝码”实际是一个子天平，接下来会进一步描述这个子天平。当$W_l=W_r=0$时，会先描述左子天平，然后是右子天平。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>因为题目的输入就采取了递归方式定义，所以编写一个递归过程读取输入同时进行处理比较合适。在递归的过程中判断子天平是否满足平衡并自下向上不断的更新$W$为$0$的节点（更新为其左子砝码重量$W_l$和右子砝码重量$W_r$之和）。可以定义一个标志变量来标明整个过程是否一直都满足平衡条件。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 22 Sep 22:02:34 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w1, d1, w2, d2;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; w1 &gt;&gt; d1 &gt;&gt; w2 &gt;&gt; d2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!w1) w1 = solve();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!w2) w2 = solve();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w1 * d1 != w2 * d2) f = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w1 + w2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        f = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        solve();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"YES\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"NO\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>输入一个树状天平，根据力矩相等原则判断是否平衡。即判断是否满足$W_lD_l=W_rD_r$。<br><img src=\"/2018/09/22/Uva839-二叉树的递归处理/tree.png\" alt=\"example\"></p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"https://vjudge.net/problem/UVA-839\" target=\"_blank\" rel=\"noopener\">Uva839-Not so Mobile</a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>题目输入采用递归（先序）方式：每个天平的格式为$W_l$，$D_l$，$W_r$，$D_r$，当$W_l$或$W_r$为$0$时，表示该“砝码”实际是一个子天平，接下来会进一步描述这个子天平。当$W_l=W_r=0$时，会先描述左子天平，然后是右子天平。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>因为题目的输入就采取了递归方式定义，所以编写一个递归过程读取输入同时进行处理比较合适。在递归的过程中判断子天平是否满足平衡并自下向上不断的更新$W$为$0$的节点（更新为其左子砝码重量$W_l$和右子砝码重量$W_r$之和）。可以定义一个标志变量来标明整个过程是否一直都满足平衡条件。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 22 Sep 22:02:34 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w1, d1, w2, d2;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; w1 &gt;&gt; d1 &gt;&gt; w2 &gt;&gt; d2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!w1) w1 = solve();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!w2) w2 = solve();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w1 * d1 != w2 * d2) f = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w1 + w2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        f = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        solve();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"YES\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"NO\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Build Binary Tree","date":"2019-03-04T01:39:27.000Z","_content":"众所周知，leetcode上不需要自己写读入数据部分的代码。但是这样对于二叉树类型的题目，调试起来就会有点麻烦，因为需要自己现场建一颗树。不太熟悉也不太习惯用leetcode自带的调试功能，所以为了偷懒，我提前写好了一份建二叉树的模板。然后就可以方便的用sublime或者gedit调试了(σ･ω･)σYO♪\n<!--more-->\n# 使用方法\n## 输入\n![BinaryTree](/BinaryTree.png)\n在源文件路径下的``in.txt``文件中写入这颗二叉树的**先序遍历序列**。和传统意义上的先序遍历序列不同的是，用-1来代表空子树。\n譬如上图所示的二叉树的输入方式是：\n```\n1 2 -1 5 -1 -1 3\n```\n## 函数返回\n函数返回的是指向建立好的二叉树的根节点的指针。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon  4 Mar 11:06:42 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct TreeNode{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x):val(x), left(NULL), right(NULL){}\n};\nint x;\n\nTreeNode* buildTree(){\n    if(cin >> x){\n        if(x == -1) return NULL;\n        TreeNode* node = new TreeNode(0);\n        node->val = x;\n        node->left = buildTree();\n        node->right = buildTree();\n        return node;\n    }\n    else return NULL;\n}\n\nint main(){\n    freopen(\"in.txt\", \"r\", stdin);\n\n    TreeNode* root = buildTree();\n\n    return 0;\n}\n```","source":"_posts/buildBinaryTree.md","raw":"---\ntitle: Build Binary Tree\ndate: 2019-03-04 09:39:27\ncategories:\n- Template\ntags:\n- Binary Tree\n---\n众所周知，leetcode上不需要自己写读入数据部分的代码。但是这样对于二叉树类型的题目，调试起来就会有点麻烦，因为需要自己现场建一颗树。不太熟悉也不太习惯用leetcode自带的调试功能，所以为了偷懒，我提前写好了一份建二叉树的模板。然后就可以方便的用sublime或者gedit调试了(σ･ω･)σYO♪\n<!--more-->\n# 使用方法\n## 输入\n![BinaryTree](/BinaryTree.png)\n在源文件路径下的``in.txt``文件中写入这颗二叉树的**先序遍历序列**。和传统意义上的先序遍历序列不同的是，用-1来代表空子树。\n譬如上图所示的二叉树的输入方式是：\n```\n1 2 -1 5 -1 -1 3\n```\n## 函数返回\n函数返回的是指向建立好的二叉树的根节点的指针。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon  4 Mar 11:06:42 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct TreeNode{\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x):val(x), left(NULL), right(NULL){}\n};\nint x;\n\nTreeNode* buildTree(){\n    if(cin >> x){\n        if(x == -1) return NULL;\n        TreeNode* node = new TreeNode(0);\n        node->val = x;\n        node->left = buildTree();\n        node->right = buildTree();\n        return node;\n    }\n    else return NULL;\n}\n\nint main(){\n    freopen(\"in.txt\", \"r\", stdin);\n\n    TreeNode* root = buildTree();\n\n    return 0;\n}\n```","slug":"buildBinaryTree","published":1,"updated":"2019-08-20T14:55:52.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lu001i30vnh369od95","content":"<p>众所周知，leetcode上不需要自己写读入数据部分的代码。但是这样对于二叉树类型的题目，调试起来就会有点麻烦，因为需要自己现场建一颗树。不太熟悉也不太习惯用leetcode自带的调试功能，所以为了偷懒，我提前写好了一份建二叉树的模板。然后就可以方便的用sublime或者gedit调试了(σ･ω･)σYO♪</p>\n<a id=\"more\"></a>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p><img src=\"/2019/03/04/buildBinaryTree/BinaryTree.png\" alt=\"BinaryTree\"><br>在源文件路径下的<code>in.txt</code>文件中写入这颗二叉树的<strong>先序遍历序列</strong>。和传统意义上的先序遍历序列不同的是，用-1来代表空子树。<br>譬如上图所示的二叉树的输入方式是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 -1 5 -1 -1 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数返回\"><a href=\"#函数返回\" class=\"headerlink\" title=\"函数返回\"></a>函数返回</h2><p>函数返回的是指向建立好的二叉树的根节点的指针。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon  4 Mar 11:06:42 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode* left;</span><br><span class=\"line\">    TreeNode* right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x):val(x), left(<span class=\"literal\">NULL</span>), right(<span class=\"literal\">NULL</span>)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TreeNode* <span class=\"title\">buildTree</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cin</span> &gt;&gt; x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        TreeNode* node = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        node-&gt;val = x;</span><br><span class=\"line\">        node-&gt;left = buildTree();</span><br><span class=\"line\">        node-&gt;right = buildTree();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode* root = buildTree();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>众所周知，leetcode上不需要自己写读入数据部分的代码。但是这样对于二叉树类型的题目，调试起来就会有点麻烦，因为需要自己现场建一颗树。不太熟悉也不太习惯用leetcode自带的调试功能，所以为了偷懒，我提前写好了一份建二叉树的模板。然后就可以方便的用sublime或者gedit调试了(σ･ω･)σYO♪</p>","more":"<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p><img src=\"/2019/03/04/buildBinaryTree/BinaryTree.png\" alt=\"BinaryTree\"><br>在源文件路径下的<code>in.txt</code>文件中写入这颗二叉树的<strong>先序遍历序列</strong>。和传统意义上的先序遍历序列不同的是，用-1来代表空子树。<br>譬如上图所示的二叉树的输入方式是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 -1 5 -1 -1 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数返回\"><a href=\"#函数返回\" class=\"headerlink\" title=\"函数返回\"></a>函数返回</h2><p>函数返回的是指向建立好的二叉树的根节点的指针。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon  4 Mar 11:06:42 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode* left;</span><br><span class=\"line\">    TreeNode* right;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x):val(x), left(<span class=\"literal\">NULL</span>), right(<span class=\"literal\">NULL</span>)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TreeNode* <span class=\"title\">buildTree</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cin</span> &gt;&gt; x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        TreeNode* node = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        node-&gt;val = x;</span><br><span class=\"line\">        node-&gt;left = buildTree();</span><br><span class=\"line\">        node-&gt;right = buildTree();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode* root = buildTree();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"extern-外部变量","date":"2018-12-02T22:56:26.000Z","_content":"　　前两天被同学问起extern的用法，才发现自己对extern的用法也不清晰，囧，整理一下。\n<!--more-->\n# 参考链接\n[when to use extern in C++](https://stackoverflow.com/questions/10422034/when-to-use-extern-in-c)\n\n# extern\n　　extern用于多文件编程时，不同源文件之间共享变量。我们在头文件中声明外部变量，这样所有包含该头文件的的源文件就都有了这个外部变量的**声明**，而我们只需要在**其中一个**源文件中**定义**一次。\n　　``extern int x``告诉编译器有一个叫``x``的``int``型变量在某个地方，正如之前[C语言编译连接过程](https://ain-crad.github.io/2018/12/02/C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A-h%E5%92%8C-c%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/)里说的那样，此时编译器并不关心``x``的具体实现，即不关心``x``定义在哪个源文件中。编译器只需要知道这个变量的类型和名字，就知道了该如何使用它。编译完成生成之后，链接器会将所有**引用**``x``的地方定向到**定义**它的某一个源文件中。\n为了使上述过程顺利进行，``x``必须要在某个源文件中被定义为**全局变量**，并且不能包含``static``关键字。\n\n# 例子\nprint.h\n```C\n#ifndef _PRINT_H\n#define _PRINT_H\n\nextern int global_x;    //任何包含这个头文件的源文件都将可以使用global_x变量\nvoid print_global_x();\n\n#endif\n\n```\n\nprint.c\n```C\n#include <stdio.h>\n#include \"print.h\"\n\nint global_x;   //global_x的具体定义的位置\n\nvoid print_global_x(){\n    printf(\"%d\\n\", global_x);\n}\n```\n\nmain.c\n```C\n#include \"print.h\"  //头文件中包含global_x的声明\n\nint main(){\n    global_x = 5;\n    print_global_x();\n\n    return 0;\n}\n```","source":"_posts/extern-外部变量.md","raw":"---\ntitle: extern-外部变量\ndate: 2018-12-03 06:56:26\ncategories:\n- C++\ntags:\n- C语言\n---\n　　前两天被同学问起extern的用法，才发现自己对extern的用法也不清晰，囧，整理一下。\n<!--more-->\n# 参考链接\n[when to use extern in C++](https://stackoverflow.com/questions/10422034/when-to-use-extern-in-c)\n\n# extern\n　　extern用于多文件编程时，不同源文件之间共享变量。我们在头文件中声明外部变量，这样所有包含该头文件的的源文件就都有了这个外部变量的**声明**，而我们只需要在**其中一个**源文件中**定义**一次。\n　　``extern int x``告诉编译器有一个叫``x``的``int``型变量在某个地方，正如之前[C语言编译连接过程](https://ain-crad.github.io/2018/12/02/C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A-h%E5%92%8C-c%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/)里说的那样，此时编译器并不关心``x``的具体实现，即不关心``x``定义在哪个源文件中。编译器只需要知道这个变量的类型和名字，就知道了该如何使用它。编译完成生成之后，链接器会将所有**引用**``x``的地方定向到**定义**它的某一个源文件中。\n为了使上述过程顺利进行，``x``必须要在某个源文件中被定义为**全局变量**，并且不能包含``static``关键字。\n\n# 例子\nprint.h\n```C\n#ifndef _PRINT_H\n#define _PRINT_H\n\nextern int global_x;    //任何包含这个头文件的源文件都将可以使用global_x变量\nvoid print_global_x();\n\n#endif\n\n```\n\nprint.c\n```C\n#include <stdio.h>\n#include \"print.h\"\n\nint global_x;   //global_x的具体定义的位置\n\nvoid print_global_x(){\n    printf(\"%d\\n\", global_x);\n}\n```\n\nmain.c\n```C\n#include \"print.h\"  //头文件中包含global_x的声明\n\nint main(){\n    global_x = 5;\n    print_global_x();\n\n    return 0;\n}\n```","slug":"extern-外部变量","published":1,"updated":"2019-09-01T08:52:47.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lu001j30vnghs9vpwa","content":"<p>　　前两天被同学问起extern的用法，才发现自己对extern的用法也不清晰，囧，整理一下。</p>\n<a id=\"more\"></a>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://stackoverflow.com/questions/10422034/when-to-use-extern-in-c\" target=\"_blank\" rel=\"noopener\">when to use extern in C++</a></p>\n<h1 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h1><p>　　extern用于多文件编程时，不同源文件之间共享变量。我们在头文件中声明外部变量，这样所有包含该头文件的的源文件就都有了这个外部变量的<strong>声明</strong>，而我们只需要在<strong>其中一个</strong>源文件中<strong>定义</strong>一次。<br>　　<code>extern int x</code>告诉编译器有一个叫<code>x</code>的<code>int</code>型变量在某个地方，正如之前<a href=\"https://ain-crad.github.io/2018/12/02/C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A-h%E5%92%8C-c%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">C语言编译连接过程</a>里说的那样，此时编译器并不关心<code>x</code>的具体实现，即不关心<code>x</code>定义在哪个源文件中。编译器只需要知道这个变量的类型和名字，就知道了该如何使用它。编译完成生成之后，链接器会将所有<strong>引用</strong><code>x</code>的地方定向到<strong>定义</strong>它的某一个源文件中。<br>为了使上述过程顺利进行，<code>x</code>必须要在某个源文件中被定义为<strong>全局变量</strong>，并且不能包含<code>static</code>关键字。</p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>print.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _PRINT_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _PRINT_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> global_x;    <span class=\"comment\">//任何包含这个头文件的源文件都将可以使用global_x变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_global_x</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>print.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"print.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> global_x;   <span class=\"comment\">//global_x的具体定义的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_global_x</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, global_x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"print.h\"</span>  <span class=\"comment\">//头文件中包含global_x的声明</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    global_x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    print_global_x();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>　　前两天被同学问起extern的用法，才发现自己对extern的用法也不清晰，囧，整理一下。</p>","more":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://stackoverflow.com/questions/10422034/when-to-use-extern-in-c\" target=\"_blank\" rel=\"noopener\">when to use extern in C++</a></p>\n<h1 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h1><p>　　extern用于多文件编程时，不同源文件之间共享变量。我们在头文件中声明外部变量，这样所有包含该头文件的的源文件就都有了这个外部变量的<strong>声明</strong>，而我们只需要在<strong>其中一个</strong>源文件中<strong>定义</strong>一次。<br>　　<code>extern int x</code>告诉编译器有一个叫<code>x</code>的<code>int</code>型变量在某个地方，正如之前<a href=\"https://ain-crad.github.io/2018/12/02/C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A-h%E5%92%8C-c%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">C语言编译连接过程</a>里说的那样，此时编译器并不关心<code>x</code>的具体实现，即不关心<code>x</code>定义在哪个源文件中。编译器只需要知道这个变量的类型和名字，就知道了该如何使用它。编译完成生成之后，链接器会将所有<strong>引用</strong><code>x</code>的地方定向到<strong>定义</strong>它的某一个源文件中。<br>为了使上述过程顺利进行，<code>x</code>必须要在某个源文件中被定义为<strong>全局变量</strong>，并且不能包含<code>static</code>关键字。</p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>print.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _PRINT_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _PRINT_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> global_x;    <span class=\"comment\">//任何包含这个头文件的源文件都将可以使用global_x变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_global_x</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>print.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"print.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> global_x;   <span class=\"comment\">//global_x的具体定义的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_global_x</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, global_x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"print.h\"</span>  <span class=\"comment\">//头文件中包含global_x的声明</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    global_x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    print_global_x();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"hexo中mathjax使用坑点","date":"2018-04-09T07:29:50.000Z","_content":"刚刚开始自己的博客之旅，开始真是无比艰难啊，各种被坑。过程中博客需要插入数学公式，下载了mathjax插件(安装之后就可以使用Latex定义的宏写数学公式了)，结果被坑惨(也不算是mathjax的锅，markdown自己也要背)，卡了2个小时，气愤(╯‵□′)╯︵┻━┻\n这里记录一下在mathjax里踩到的坑。\nmathjax的安装配置和使用大家可以参照[Steven's space的博文](http://stevenshi.me/2017/06/26/hexo-insert-formula/)，不再赘述了。\n<!-- more -->\n# 坑点\nmarkdown本身的特殊符号和Latex中的符号会出现冲突。\n- 下划线\\_在markdown中是斜体，但是Latex中下划线是下标的意思，所以这里会冲突。\n- 双斜线\\\\\\\\在markdown中会被转义为\\，所以Latex的\\\\\\\\换行功能也会不正常。\n- 乘法符号\\*在markdown中是粗体＝＝(就是在这被卡了)，所以Latex在写两个数相乘时不能直接写\n```\n$a*b$\n```\n以上情况都会导致无法在mathjax中渲染出来。\n\n# 解决方法\n手动转义：\n比如需要在公式中写乘法*可以写成\n```\n$a\\*b$\n```\n下标写成\n```\n$a\\_1$\n```\n换行写成\n```\n$\\\\\\\\$\n```\n解决，散花。\n\n更多解决方法可以参考[hexo下mathjax的转义问题](http://shomy.top/2016/10/22/hexo-markdown-mathjax/)\n","source":"_posts/hexo-mathjax.md","raw":"---\ntitle: hexo中mathjax使用坑点\ndate: 2018-04-09 15:29:50\ncategories:\n- Messy article\ntags:\n- mathjax\n- hexo插入数学公式\n- 总结\n---\n刚刚开始自己的博客之旅，开始真是无比艰难啊，各种被坑。过程中博客需要插入数学公式，下载了mathjax插件(安装之后就可以使用Latex定义的宏写数学公式了)，结果被坑惨(也不算是mathjax的锅，markdown自己也要背)，卡了2个小时，气愤(╯‵□′)╯︵┻━┻\n这里记录一下在mathjax里踩到的坑。\nmathjax的安装配置和使用大家可以参照[Steven's space的博文](http://stevenshi.me/2017/06/26/hexo-insert-formula/)，不再赘述了。\n<!-- more -->\n# 坑点\nmarkdown本身的特殊符号和Latex中的符号会出现冲突。\n- 下划线\\_在markdown中是斜体，但是Latex中下划线是下标的意思，所以这里会冲突。\n- 双斜线\\\\\\\\在markdown中会被转义为\\，所以Latex的\\\\\\\\换行功能也会不正常。\n- 乘法符号\\*在markdown中是粗体＝＝(就是在这被卡了)，所以Latex在写两个数相乘时不能直接写\n```\n$a*b$\n```\n以上情况都会导致无法在mathjax中渲染出来。\n\n# 解决方法\n手动转义：\n比如需要在公式中写乘法*可以写成\n```\n$a\\*b$\n```\n下标写成\n```\n$a\\_1$\n```\n换行写成\n```\n$\\\\\\\\$\n```\n解决，散花。\n\n更多解决方法可以参考[hexo下mathjax的转义问题](http://shomy.top/2016/10/22/hexo-markdown-mathjax/)\n","slug":"hexo-mathjax","published":1,"updated":"2019-08-20T14:53:23.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lv001k30vnd4jb69ui","content":"<p>刚刚开始自己的博客之旅，开始真是无比艰难啊，各种被坑。过程中博客需要插入数学公式，下载了mathjax插件(安装之后就可以使用Latex定义的宏写数学公式了)，结果被坑惨(也不算是mathjax的锅，markdown自己也要背)，卡了2个小时，气愤(╯‵□′)╯︵┻━┻<br>这里记录一下在mathjax里踩到的坑。<br>mathjax的安装配置和使用大家可以参照<a href=\"http://stevenshi.me/2017/06/26/hexo-insert-formula/\" target=\"_blank\" rel=\"noopener\">Steven’s space的博文</a>，不再赘述了。</p>\n<a id=\"more\"></a>\n<h1 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点\"></a>坑点</h1><p>markdown本身的特殊符号和Latex中的符号会出现冲突。</p>\n<ul>\n<li>下划线_在markdown中是斜体，但是Latex中下划线是下标的意思，所以这里会冲突。</li>\n<li>双斜线\\\\在markdown中会被转义为\\，所以Latex的\\\\换行功能也会不正常。</li>\n<li>乘法符号*在markdown中是粗体＝＝(就是在这被卡了)，所以Latex在写两个数相乘时不能直接写<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a*b$</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>以上情况都会导致无法在mathjax中渲染出来。</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>手动转义：<br>比如需要在公式中写乘法*可以写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a\\*b$</span><br></pre></td></tr></table></figure>\n\n<p>下标写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a\\_1$</span><br></pre></td></tr></table></figure>\n\n<p>换行写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\\\\\\\$</span><br></pre></td></tr></table></figure>\n\n<p>解决，散花。</p>\n<p>更多解决方法可以参考<a href=\"http://shomy.top/2016/10/22/hexo-markdown-mathjax/\" target=\"_blank\" rel=\"noopener\">hexo下mathjax的转义问题</a></p>\n","site":{"data":{}},"excerpt":"<p>刚刚开始自己的博客之旅，开始真是无比艰难啊，各种被坑。过程中博客需要插入数学公式，下载了mathjax插件(安装之后就可以使用Latex定义的宏写数学公式了)，结果被坑惨(也不算是mathjax的锅，markdown自己也要背)，卡了2个小时，气愤(╯‵□′)╯︵┻━┻<br>这里记录一下在mathjax里踩到的坑。<br>mathjax的安装配置和使用大家可以参照<a href=\"http://stevenshi.me/2017/06/26/hexo-insert-formula/\" target=\"_blank\" rel=\"noopener\">Steven’s space的博文</a>，不再赘述了。</p>","more":"<h1 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点\"></a>坑点</h1><p>markdown本身的特殊符号和Latex中的符号会出现冲突。</p>\n<ul>\n<li>下划线_在markdown中是斜体，但是Latex中下划线是下标的意思，所以这里会冲突。</li>\n<li>双斜线\\\\在markdown中会被转义为\\，所以Latex的\\\\换行功能也会不正常。</li>\n<li>乘法符号*在markdown中是粗体＝＝(就是在这被卡了)，所以Latex在写两个数相乘时不能直接写<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a*b$</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>以上情况都会导致无法在mathjax中渲染出来。</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>手动转义：<br>比如需要在公式中写乘法*可以写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a\\*b$</span><br></pre></td></tr></table></figure>\n\n<p>下标写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a\\_1$</span><br></pre></td></tr></table></figure>\n\n<p>换行写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\\\\\\\$</span><br></pre></td></tr></table></figure>\n\n<p>解决，散花。</p>\n<p>更多解决方法可以参考<a href=\"http://shomy.top/2016/10/22/hexo-markdown-mathjax/\" target=\"_blank\" rel=\"noopener\">hexo下mathjax的转义问题</a></p>"},{"title":"Kick Start-2019D-X or What?","date":"2019-08-02T03:19:45.000Z","_content":"Kick Start-2019D 签到失败 (◉ω◉ )\n<!--more-->\n# 题目链接\n[Kick Start-2019D-X or What?](https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051061/0000000000161426)\n\n# 题意\n给定 $N$ 个非负整数组成的序列 $A$，求最大的区间，满足区间内所有数异或的结果是 $xor-even$，即结果的二进制形式中 $1$ 的个数为偶数个。\n每组数据包含 $N$ 个非负整数以及 $Q$ 个修改，每次修改将位置 $P_i$ 处（下标从0开始）的元素替换成 $V_i$。输出每次修改后满足 $xor-even$ 的最大区间中元素的个数。\n\n# 题解\n假设两个数分别为 $a$，$b$，它们二进制形式中 $1$ 的个数分别为 $i$，$j$。那么 $a$ 和 $b$ 异或后结果的二进制形式中 $1$ 的个数为 ``i + j - k * 2``，其中 $k=0,1,2,3...$。所以有如下结论：\n- 若两个数都满足 $xor-even$，那么两个数异或的结果也满足 $xor-even$。\n- 若两个数都满足 $xor-odd$，那么两个数异或的结果满足 $xor-even$。\n- 若两个数一个满足 $xor-odd$ 另一个满足 $xor-even$，那么两个数异或的结果满足 $xor-odd$。\n\n所以对于每次修改我们只要统计所有的 $N$ 个数中满足 $xor-odd$ 的数的个数是偶数还是奇数，并记录所有 $xor-odd$ 的数的下标。若 $xor-odd$ 的个数是偶数，那么结果是整个区间的长度；若 $xor-odd$ 的个数是奇数，那么结果是 ``max( length([0, last_Xor-odd)), length((first_Xor-odd, N - 1]) )``，其中 ``last_Xor-odd`` 表示满足 $xor-odd$ 的最后一个数的下标，``first_Xor-odd`` 表示满足 $xor-odd$ 的第一个数的下标。 \n\n# 代码\n```C++\n#include <iostream>\n#include <set>\n\n#include <cstdio>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nint T;\nint n, q;\nint a[maxn];\nset<int> pos;\n\nbool checkEven(int x){\n    int cnt = 0;\n    while(x > 0){\n        if(x & 1) cnt++;\n        x >>= 1;\n    }\n    if(cnt % 2 == 0) return true;\n    else return false;\n}\n\nint main(){\n    //freopen(\"in.txt\", \"r\", stdin);\n    cin >> T;\n    int Case = 0;\n\n    while(T--){\n        pos.clear();\n        cin >> n >> q;\n        for(int i = 0; i < n; i++){\n            cin >> a[i];\n            if(!checkEven(a[i])) pos.insert(i);\n        }\n\n        cout << \"Case #\" << ++Case << \":\"; \n        for(int i = 0; i < q; i++){\n            int p, v;\n            cin >> p >> v;\n\n            if(!checkEven(v)) pos.insert(p);\n            else pos.erase(p);\n\n            if(pos.size() % 2 == 0){\n                cout << \" \" << n;\n            }\n            else{\n                int l = *pos.begin();\n                int r = *pos.rbegin();\n                cout << \" \" << max(n - 1 - l, r);\n            }\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n```\n","source":"_posts/kickstart-2019D-X-or-What.md","raw":"---\ntitle: Kick Start-2019D-X or What?\ndate: 2019-08-02 11:19:45\ncategories:\n- Google Kick Start\ntags:\n---\nKick Start-2019D 签到失败 (◉ω◉ )\n<!--more-->\n# 题目链接\n[Kick Start-2019D-X or What?](https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051061/0000000000161426)\n\n# 题意\n给定 $N$ 个非负整数组成的序列 $A$，求最大的区间，满足区间内所有数异或的结果是 $xor-even$，即结果的二进制形式中 $1$ 的个数为偶数个。\n每组数据包含 $N$ 个非负整数以及 $Q$ 个修改，每次修改将位置 $P_i$ 处（下标从0开始）的元素替换成 $V_i$。输出每次修改后满足 $xor-even$ 的最大区间中元素的个数。\n\n# 题解\n假设两个数分别为 $a$，$b$，它们二进制形式中 $1$ 的个数分别为 $i$，$j$。那么 $a$ 和 $b$ 异或后结果的二进制形式中 $1$ 的个数为 ``i + j - k * 2``，其中 $k=0,1,2,3...$。所以有如下结论：\n- 若两个数都满足 $xor-even$，那么两个数异或的结果也满足 $xor-even$。\n- 若两个数都满足 $xor-odd$，那么两个数异或的结果满足 $xor-even$。\n- 若两个数一个满足 $xor-odd$ 另一个满足 $xor-even$，那么两个数异或的结果满足 $xor-odd$。\n\n所以对于每次修改我们只要统计所有的 $N$ 个数中满足 $xor-odd$ 的数的个数是偶数还是奇数，并记录所有 $xor-odd$ 的数的下标。若 $xor-odd$ 的个数是偶数，那么结果是整个区间的长度；若 $xor-odd$ 的个数是奇数，那么结果是 ``max( length([0, last_Xor-odd)), length((first_Xor-odd, N - 1]) )``，其中 ``last_Xor-odd`` 表示满足 $xor-odd$ 的最后一个数的下标，``first_Xor-odd`` 表示满足 $xor-odd$ 的第一个数的下标。 \n\n# 代码\n```C++\n#include <iostream>\n#include <set>\n\n#include <cstdio>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nint T;\nint n, q;\nint a[maxn];\nset<int> pos;\n\nbool checkEven(int x){\n    int cnt = 0;\n    while(x > 0){\n        if(x & 1) cnt++;\n        x >>= 1;\n    }\n    if(cnt % 2 == 0) return true;\n    else return false;\n}\n\nint main(){\n    //freopen(\"in.txt\", \"r\", stdin);\n    cin >> T;\n    int Case = 0;\n\n    while(T--){\n        pos.clear();\n        cin >> n >> q;\n        for(int i = 0; i < n; i++){\n            cin >> a[i];\n            if(!checkEven(a[i])) pos.insert(i);\n        }\n\n        cout << \"Case #\" << ++Case << \":\"; \n        for(int i = 0; i < q; i++){\n            int p, v;\n            cin >> p >> v;\n\n            if(!checkEven(v)) pos.insert(p);\n            else pos.erase(p);\n\n            if(pos.size() % 2 == 0){\n                cout << \" \" << n;\n            }\n            else{\n                int l = *pos.begin();\n                int r = *pos.rbegin();\n                cout << \" \" << max(n - 1 - l, r);\n            }\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n```\n","slug":"kickstart-2019D-X-or-What","published":1,"updated":"2019-08-29T03:20:01.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lv001l30vn9rket3uj","content":"<p>Kick Start-2019D 签到失败 (◉ω◉ )</p>\n<a id=\"more\"></a>\n<h1 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h1><p><a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051061/0000000000161426\" target=\"_blank\" rel=\"noopener\">Kick Start-2019D-X or What?</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定 $N$ 个非负整数组成的序列 $A$，求最大的区间，满足区间内所有数异或的结果是 $xor-even$，即结果的二进制形式中 $1$ 的个数为偶数个。<br>每组数据包含 $N$ 个非负整数以及 $Q$ 个修改，每次修改将位置 $P_i$ 处（下标从0开始）的元素替换成 $V_i$。输出每次修改后满足 $xor-even$ 的最大区间中元素的个数。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>假设两个数分别为 $a$，$b$，它们二进制形式中 $1$ 的个数分别为 $i$，$j$。那么 $a$ 和 $b$ 异或后结果的二进制形式中 $1$ 的个数为 <code>i + j - k * 2</code>，其中 $k=0,1,2,3…$。所以有如下结论：</p>\n<ul>\n<li>若两个数都满足 $xor-even$，那么两个数异或的结果也满足 $xor-even$。</li>\n<li>若两个数都满足 $xor-odd$，那么两个数异或的结果满足 $xor-even$。</li>\n<li>若两个数一个满足 $xor-odd$ 另一个满足 $xor-even$，那么两个数异或的结果满足 $xor-odd$。</li>\n</ul>\n<p>所以对于每次修改我们只要统计所有的 $N$ 个数中满足 $xor-odd$ 的数的个数是偶数还是奇数，并记录所有 $xor-odd$ 的数的下标。若 $xor-odd$ 的个数是偶数，那么结果是整个区间的长度；若 $xor-odd$ 的个数是奇数，那么结果是 <code>max( length([0, last_Xor-odd)), length((first_Xor-odd, N - 1]) )</code>，其中 <code>last_Xor-odd</code> 表示满足 $xor-odd$ 的最后一个数的下标，<code>first_Xor-odd</code> 表示满足 $xor-odd$ 的第一个数的下标。 </p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; pos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">checkEven</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &amp; <span class=\"number\">1</span>) cnt++;</span><br><span class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Case = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        pos.clear();</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!checkEven(a[i])) pos.insert(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case #\"</span> &lt;&lt; ++Case &lt;&lt; <span class=\"string\">\":\"</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p, v;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; p &gt;&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!checkEven(v)) pos.insert(p);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> pos.erase(p);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pos.size() % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; n;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> l = *pos.begin();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> r = *pos.rbegin();</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; max(n - <span class=\"number\">1</span> - l, r);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Kick Start-2019D 签到失败 (◉ω◉ )</p>","more":"<h1 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h1><p><a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051061/0000000000161426\" target=\"_blank\" rel=\"noopener\">Kick Start-2019D-X or What?</a></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>给定 $N$ 个非负整数组成的序列 $A$，求最大的区间，满足区间内所有数异或的结果是 $xor-even$，即结果的二进制形式中 $1$ 的个数为偶数个。<br>每组数据包含 $N$ 个非负整数以及 $Q$ 个修改，每次修改将位置 $P_i$ 处（下标从0开始）的元素替换成 $V_i$。输出每次修改后满足 $xor-even$ 的最大区间中元素的个数。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>假设两个数分别为 $a$，$b$，它们二进制形式中 $1$ 的个数分别为 $i$，$j$。那么 $a$ 和 $b$ 异或后结果的二进制形式中 $1$ 的个数为 <code>i + j - k * 2</code>，其中 $k=0,1,2,3…$。所以有如下结论：</p>\n<ul>\n<li>若两个数都满足 $xor-even$，那么两个数异或的结果也满足 $xor-even$。</li>\n<li>若两个数都满足 $xor-odd$，那么两个数异或的结果满足 $xor-even$。</li>\n<li>若两个数一个满足 $xor-odd$ 另一个满足 $xor-even$，那么两个数异或的结果满足 $xor-odd$。</li>\n</ul>\n<p>所以对于每次修改我们只要统计所有的 $N$ 个数中满足 $xor-odd$ 的数的个数是偶数还是奇数，并记录所有 $xor-odd$ 的数的下标。若 $xor-odd$ 的个数是偶数，那么结果是整个区间的长度；若 $xor-odd$ 的个数是奇数，那么结果是 <code>max( length([0, last_Xor-odd)), length((first_Xor-odd, N - 1]) )</code>，其中 <code>last_Xor-odd</code> 表示满足 $xor-odd$ 的最后一个数的下标，<code>first_Xor-odd</code> 表示满足 $xor-odd$ 的第一个数的下标。 </p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; pos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">checkEven</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &amp; <span class=\"number\">1</span>) cnt++;</span><br><span class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Case = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        pos.clear();</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!checkEven(a[i])) pos.insert(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Case #\"</span> &lt;&lt; ++Case &lt;&lt; <span class=\"string\">\":\"</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p, v;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; p &gt;&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!checkEven(v)) pos.insert(p);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> pos.erase(p);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pos.size() % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; n;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> l = *pos.begin();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> r = *pos.rbegin();</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; max(n - <span class=\"number\">1</span> - l, r);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"new keyword","date":"2018-09-20T05:21:31.000Z","_content":"使用$new$关键字和不使用$new$关键字创建对象的异同及优劣对比。\n<!--more-->\n\n# 参考链接\n[When should I use the new keyword in C++](https://stackoverflow.com/questions/655065/when-should-i-use-the-new-keyword-in-c)\n\n顺便安利一波[Stack Overflow](https://stackoverflow.com/) |･ω･｀)\n# 使用new关键字\n```C++\nMyClass* myClass = new Myclass();\nmyClass->MyField = \"Hello World!\";\n```\n\n特点：\n1. 为创建的对象在自由存储区分配内存。\n2. 之后需要使用$delete$手动释放分配的内存（否则会造成内存泄露）。\n3. 在使用$delete$之前被分配的内存空间持续存在（意味着用$new$关键字创建的对象可以作为指针被函数返回）。\n\n# 不使用new关键字\n```C++\nMyClass myClass;\nmyClass.MyField = \"Hello World!\";\n```\n\n特点：\n1. 为创建的对象在堆栈段分配内存。\n2. 不需要使用$delete$来手动释放。\n3. 调用结束时内存空间被清除（意味着用这种方式创建的对象不能作为指针来被函数返回）。\n\n# 拓展\n可执行文件由正文段、数据段、和$BSS$段组成。\n- 正文段（$Text Segment$）:用于储存指令。\n- 数据段（$Data Segment$）:用于储存已初始化的全局变量。\n- $BSS$段（$BSS Segment$）:用于储存未赋值的全局变量所需的空间。\n\n调用栈不储存在可执行文件中，而是在运行时创建。调用栈所在的段称为**堆栈段**（$Stack Segment$）。\n调用栈：调用栈描述的是函数之间的调用关系。它由多个栈帧（$Stack Frame$）组成，每个栈帧对应着一个未运行完的函数。栈帧中保存了该函数的**返回地址**和**局部变量**，因而不仅能在执行完毕后找到正确的返回地址，还很自然地保证不同函数间的局部变量互不相干－－因为不同函数对应着不同的栈帧。\n堆栈段的空间相对于自由空间十分有限（具体大小和操作系统相关，大概几十$M$）。所以建议把较大的数组放在$main$函数外，因为局部变量也是放在堆栈段的。栈溢出（$Segmentation fault$）不一定是递归调用太多，也可能是局部变量太大。只要总大小超过了允许的范围，就会产生栈溢出。\n# 总结\n如果不想时刻担心要调用$delete$释放内存，那么就不要使用$new$关键字。\n如果需要在一个函数中返回对象的指针，那么就一定要使用$new$关键字（局部变量的方式会在函数调用结束时清除分配的空间）。","source":"_posts/new-keyword.md","raw":"---\ntitle: new keyword\ndate: 2018-09-20 13:21:31\ncategories:\n- C++\ntags:\n- C++\n---\n使用$new$关键字和不使用$new$关键字创建对象的异同及优劣对比。\n<!--more-->\n\n# 参考链接\n[When should I use the new keyword in C++](https://stackoverflow.com/questions/655065/when-should-i-use-the-new-keyword-in-c)\n\n顺便安利一波[Stack Overflow](https://stackoverflow.com/) |･ω･｀)\n# 使用new关键字\n```C++\nMyClass* myClass = new Myclass();\nmyClass->MyField = \"Hello World!\";\n```\n\n特点：\n1. 为创建的对象在自由存储区分配内存。\n2. 之后需要使用$delete$手动释放分配的内存（否则会造成内存泄露）。\n3. 在使用$delete$之前被分配的内存空间持续存在（意味着用$new$关键字创建的对象可以作为指针被函数返回）。\n\n# 不使用new关键字\n```C++\nMyClass myClass;\nmyClass.MyField = \"Hello World!\";\n```\n\n特点：\n1. 为创建的对象在堆栈段分配内存。\n2. 不需要使用$delete$来手动释放。\n3. 调用结束时内存空间被清除（意味着用这种方式创建的对象不能作为指针来被函数返回）。\n\n# 拓展\n可执行文件由正文段、数据段、和$BSS$段组成。\n- 正文段（$Text Segment$）:用于储存指令。\n- 数据段（$Data Segment$）:用于储存已初始化的全局变量。\n- $BSS$段（$BSS Segment$）:用于储存未赋值的全局变量所需的空间。\n\n调用栈不储存在可执行文件中，而是在运行时创建。调用栈所在的段称为**堆栈段**（$Stack Segment$）。\n调用栈：调用栈描述的是函数之间的调用关系。它由多个栈帧（$Stack Frame$）组成，每个栈帧对应着一个未运行完的函数。栈帧中保存了该函数的**返回地址**和**局部变量**，因而不仅能在执行完毕后找到正确的返回地址，还很自然地保证不同函数间的局部变量互不相干－－因为不同函数对应着不同的栈帧。\n堆栈段的空间相对于自由空间十分有限（具体大小和操作系统相关，大概几十$M$）。所以建议把较大的数组放在$main$函数外，因为局部变量也是放在堆栈段的。栈溢出（$Segmentation fault$）不一定是递归调用太多，也可能是局部变量太大。只要总大小超过了允许的范围，就会产生栈溢出。\n# 总结\n如果不想时刻担心要调用$delete$释放内存，那么就不要使用$new$关键字。\n如果需要在一个函数中返回对象的指针，那么就一定要使用$new$关键字（局部变量的方式会在函数调用结束时清除分配的空间）。","slug":"new-keyword","published":1,"updated":"2019-08-29T03:43:11.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lw001m30vnrx6q6xlg","content":"<p>使用$new$关键字和不使用$new$关键字创建对象的异同及优劣对比。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://stackoverflow.com/questions/655065/when-should-i-use-the-new-keyword-in-c\" target=\"_blank\" rel=\"noopener\">When should I use the new keyword in C++</a></p>\n<p>顺便安利一波<a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a> |･ω･｀)</p>\n<h1 id=\"使用new关键字\"><a href=\"#使用new关键字\" class=\"headerlink\" title=\"使用new关键字\"></a>使用new关键字</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass* myClass = <span class=\"keyword\">new</span> Myclass();</span><br><span class=\"line\">myClass-&gt;MyField = <span class=\"string\">\"Hello World!\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>特点：</p>\n<ol>\n<li>为创建的对象在自由存储区分配内存。</li>\n<li>之后需要使用$delete$手动释放分配的内存（否则会造成内存泄露）。</li>\n<li>在使用$delete$之前被分配的内存空间持续存在（意味着用$new$关键字创建的对象可以作为指针被函数返回）。</li>\n</ol>\n<h1 id=\"不使用new关键字\"><a href=\"#不使用new关键字\" class=\"headerlink\" title=\"不使用new关键字\"></a>不使用new关键字</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass myClass;</span><br><span class=\"line\">myClass.MyField = <span class=\"string\">\"Hello World!\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>特点：</p>\n<ol>\n<li>为创建的对象在堆栈段分配内存。</li>\n<li>不需要使用$delete$来手动释放。</li>\n<li>调用结束时内存空间被清除（意味着用这种方式创建的对象不能作为指针来被函数返回）。</li>\n</ol>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>可执行文件由正文段、数据段、和$BSS$段组成。</p>\n<ul>\n<li>正文段（$Text Segment$）:用于储存指令。</li>\n<li>数据段（$Data Segment$）:用于储存已初始化的全局变量。</li>\n<li>$BSS$段（$BSS Segment$）:用于储存未赋值的全局变量所需的空间。</li>\n</ul>\n<p>调用栈不储存在可执行文件中，而是在运行时创建。调用栈所在的段称为<strong>堆栈段</strong>（$Stack Segment$）。<br>调用栈：调用栈描述的是函数之间的调用关系。它由多个栈帧（$Stack Frame$）组成，每个栈帧对应着一个未运行完的函数。栈帧中保存了该函数的<strong>返回地址</strong>和<strong>局部变量</strong>，因而不仅能在执行完毕后找到正确的返回地址，还很自然地保证不同函数间的局部变量互不相干－－因为不同函数对应着不同的栈帧。<br>堆栈段的空间相对于自由空间十分有限（具体大小和操作系统相关，大概几十$M$）。所以建议把较大的数组放在$main$函数外，因为局部变量也是放在堆栈段的。栈溢出（$Segmentation fault$）不一定是递归调用太多，也可能是局部变量太大。只要总大小超过了允许的范围，就会产生栈溢出。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>如果不想时刻担心要调用$delete$释放内存，那么就不要使用$new$关键字。<br>如果需要在一个函数中返回对象的指针，那么就一定要使用$new$关键字（局部变量的方式会在函数调用结束时清除分配的空间）。</p>\n","site":{"data":{}},"excerpt":"<p>使用$new$关键字和不使用$new$关键字创建对象的异同及优劣对比。</p>","more":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://stackoverflow.com/questions/655065/when-should-i-use-the-new-keyword-in-c\" target=\"_blank\" rel=\"noopener\">When should I use the new keyword in C++</a></p>\n<p>顺便安利一波<a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a> |･ω･｀)</p>\n<h1 id=\"使用new关键字\"><a href=\"#使用new关键字\" class=\"headerlink\" title=\"使用new关键字\"></a>使用new关键字</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass* myClass = <span class=\"keyword\">new</span> Myclass();</span><br><span class=\"line\">myClass-&gt;MyField = <span class=\"string\">\"Hello World!\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>特点：</p>\n<ol>\n<li>为创建的对象在自由存储区分配内存。</li>\n<li>之后需要使用$delete$手动释放分配的内存（否则会造成内存泄露）。</li>\n<li>在使用$delete$之前被分配的内存空间持续存在（意味着用$new$关键字创建的对象可以作为指针被函数返回）。</li>\n</ol>\n<h1 id=\"不使用new关键字\"><a href=\"#不使用new关键字\" class=\"headerlink\" title=\"不使用new关键字\"></a>不使用new关键字</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass myClass;</span><br><span class=\"line\">myClass.MyField = <span class=\"string\">\"Hello World!\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>特点：</p>\n<ol>\n<li>为创建的对象在堆栈段分配内存。</li>\n<li>不需要使用$delete$来手动释放。</li>\n<li>调用结束时内存空间被清除（意味着用这种方式创建的对象不能作为指针来被函数返回）。</li>\n</ol>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>可执行文件由正文段、数据段、和$BSS$段组成。</p>\n<ul>\n<li>正文段（$Text Segment$）:用于储存指令。</li>\n<li>数据段（$Data Segment$）:用于储存已初始化的全局变量。</li>\n<li>$BSS$段（$BSS Segment$）:用于储存未赋值的全局变量所需的空间。</li>\n</ul>\n<p>调用栈不储存在可执行文件中，而是在运行时创建。调用栈所在的段称为<strong>堆栈段</strong>（$Stack Segment$）。<br>调用栈：调用栈描述的是函数之间的调用关系。它由多个栈帧（$Stack Frame$）组成，每个栈帧对应着一个未运行完的函数。栈帧中保存了该函数的<strong>返回地址</strong>和<strong>局部变量</strong>，因而不仅能在执行完毕后找到正确的返回地址，还很自然地保证不同函数间的局部变量互不相干－－因为不同函数对应着不同的栈帧。<br>堆栈段的空间相对于自由空间十分有限（具体大小和操作系统相关，大概几十$M$）。所以建议把较大的数组放在$main$函数外，因为局部变量也是放在堆栈段的。栈溢出（$Segmentation fault$）不一定是递归调用太多，也可能是局部变量太大。只要总大小超过了允许的范围，就会产生栈溢出。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>如果不想时刻担心要调用$delete$释放内存，那么就不要使用$new$关键字。<br>如果需要在一个函数中返回对象的指针，那么就一定要使用$new$关键字（局部变量的方式会在函数调用结束时清除分配的空间）。</p>"},{"title":"新起点","date":"2018-04-08T15:12:00.000Z","_content":"　　搭一个自己的独立博客的想法记得从去年暑假就有了，可是当时还是小菜鸡蛋，什么都不懂＝＝，现在孵成了小菜鸡，才终于磨磨蹭蹭的搭了起来，内心还是十分激动的(〃∇〃)，其间走了很多弯路，陷进了很多坑，感谢[CrazyMilk的这篇博文](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more)以及[陶司机](http://logqtainia.github.io/)的指导，感谢女票的支持，也感谢自己没有就此放弃ヽ(•̀ω•́ )ゝ。\n<!-- more -->\n\n# 为什么要搭建独立博客\n　　最近3个月左右，一直在跟着校内的ACM队进行训练，最初是想提高自己的编程能力，后来发现自己无论对这个团队还是对这项竞赛都有一种由衷的向往，虽然最后因为个人能力以及年级太高(大三下)等方面因素没能成为正式队员，但还是想至少沿这个方向走下去。从接触ACM开始后就发现，优秀的人实在太多太多，自己会的实在太少太少，都不敢以菜鸡自称，简直是菜鸡蛋2333\n　　所以想在这里记录自己的成长，努力成为一个优秀的人。我也十分赞同CrazyMilk博主提到的Litten（Yilia主题的制作者）说的那句话：有了一个独立博客，就有了属于自己的一片田，开始默默耕作。\n　　等到自己不再是小菜鸡的那一天再回头来看那个曾经的小菜鸡的成长历程，应该会别有一番滋味吧，哈哈，期待。\n\n　　Hello, Aincrad.\n\n　　要去耕作了(ง •̀_•́)ง，告辞。\n\n*Ps:博客框架采用hexo,及其经典的next主题。*\n","source":"_posts/new start point.md","raw":"---\ntitle: 新起点\ndate : 2018-04-08 23:12:00\ncategories:\n- Diary\ntags:\n- 生活\n- 总结\n---\n　　搭一个自己的独立博客的想法记得从去年暑假就有了，可是当时还是小菜鸡蛋，什么都不懂＝＝，现在孵成了小菜鸡，才终于磨磨蹭蹭的搭了起来，内心还是十分激动的(〃∇〃)，其间走了很多弯路，陷进了很多坑，感谢[CrazyMilk的这篇博文](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more)以及[陶司机](http://logqtainia.github.io/)的指导，感谢女票的支持，也感谢自己没有就此放弃ヽ(•̀ω•́ )ゝ。\n<!-- more -->\n\n# 为什么要搭建独立博客\n　　最近3个月左右，一直在跟着校内的ACM队进行训练，最初是想提高自己的编程能力，后来发现自己无论对这个团队还是对这项竞赛都有一种由衷的向往，虽然最后因为个人能力以及年级太高(大三下)等方面因素没能成为正式队员，但还是想至少沿这个方向走下去。从接触ACM开始后就发现，优秀的人实在太多太多，自己会的实在太少太少，都不敢以菜鸡自称，简直是菜鸡蛋2333\n　　所以想在这里记录自己的成长，努力成为一个优秀的人。我也十分赞同CrazyMilk博主提到的Litten（Yilia主题的制作者）说的那句话：有了一个独立博客，就有了属于自己的一片田，开始默默耕作。\n　　等到自己不再是小菜鸡的那一天再回头来看那个曾经的小菜鸡的成长历程，应该会别有一番滋味吧，哈哈，期待。\n\n　　Hello, Aincrad.\n\n　　要去耕作了(ง •̀_•́)ง，告辞。\n\n*Ps:博客框架采用hexo,及其经典的next主题。*\n","slug":"new start point","published":1,"updated":"2019-09-01T09:05:17.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lw001n30vn2uh7t1t9","content":"<p>　　搭一个自己的独立博客的想法记得从去年暑假就有了，可是当时还是小菜鸡蛋，什么都不懂＝＝，现在孵成了小菜鸡，才终于磨磨蹭蹭的搭了起来，内心还是十分激动的(〃∇〃)，其间走了很多弯路，陷进了很多坑，感谢<a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"noopener\">CrazyMilk的这篇博文</a>及<a href=\"http://logqtainia.github.io/\" target=\"_blank\" rel=\"noopener\">陶司机</a>指导，感谢女票的支持，也感谢自己没有就此放弃ヽ(•̀ω•́ )ゝ。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"为什么要搭建独立博客\"><a href=\"#为什么要搭建独立博客\" class=\"headerlink\" title=\"为什么要搭建独立博客\"></a>为什么要搭建独立博客</h1><p>　　最近3个月左右，一直在跟着校内的ACM队进行训练，最初是想提高自己的编程能力，后来发现自己无论对这个团队还是对这项竞赛都有一种由衷的向往，虽然最后因为个人能力以及年级太高(大三下)等方面因素没能成为正式队员，但还是想至少沿这个方向走下去。从接触ACM开始后就发现，优秀的人实在太多太多，自己会的实在太少太少，都不敢以菜鸡自称，简直是菜鸡蛋2333<br>　　所以想在这里记录自己的成长，努力成为一个优秀的人。我也十分赞同CrazyMilk博主提到的Litten（Yilia主题的制作者）说的那句话：有了一个独立博客，就有了属于自己的一片田，开始默默耕作。<br>　　等到自己不再是小菜鸡的那一天再回头来看那个曾经的小菜鸡的成长历程，应该会别有一番滋味吧，哈哈，期待。</p>\n<p>　　Hello, Aincrad.</p>\n<p>　　要去耕作了(ง •̀_•́)ง，告辞。</p>\n<p><em>Ps:博客框架采用hexo,及其经典的next主题。</em></p>\n","site":{"data":{}},"excerpt":"<p>　　搭一个自己的独立博客的想法记得从去年暑假就有了，可是当时还是小菜鸡蛋，什么都不懂＝＝，现在孵成了小菜鸡，才终于磨磨蹭蹭的搭了起来，内心还是十分激动的(〃∇〃)，其间走了很多弯路，陷进了很多坑，感谢<a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"noopener\">CrazyMilk的这篇博文</a>及<a href=\"http://logqtainia.github.io/\" target=\"_blank\" rel=\"noopener\">陶司机</a>指导，感谢女票的支持，也感谢自己没有就此放弃ヽ(•̀ω•́ )ゝ。</p>","more":"<h1 id=\"为什么要搭建独立博客\"><a href=\"#为什么要搭建独立博客\" class=\"headerlink\" title=\"为什么要搭建独立博客\"></a>为什么要搭建独立博客</h1><p>　　最近3个月左右，一直在跟着校内的ACM队进行训练，最初是想提高自己的编程能力，后来发现自己无论对这个团队还是对这项竞赛都有一种由衷的向往，虽然最后因为个人能力以及年级太高(大三下)等方面因素没能成为正式队员，但还是想至少沿这个方向走下去。从接触ACM开始后就发现，优秀的人实在太多太多，自己会的实在太少太少，都不敢以菜鸡自称，简直是菜鸡蛋2333<br>　　所以想在这里记录自己的成长，努力成为一个优秀的人。我也十分赞同CrazyMilk博主提到的Litten（Yilia主题的制作者）说的那句话：有了一个独立博客，就有了属于自己的一片田，开始默默耕作。<br>　　等到自己不再是小菜鸡的那一天再回头来看那个曾经的小菜鸡的成长历程，应该会别有一番滋味吧，哈哈，期待。</p>\n<p>　　Hello, Aincrad.</p>\n<p>　　要去耕作了(ง •̀_•́)ง，告辞。</p>\n<p><em>Ps:博客框架采用hexo,及其经典的next主题。</em></p>"},{"title":"next_permutation解析","date":"2018-12-18T02:34:22.000Z","_content":"next_permutation是C++的STL中提供的一个库函数，声明在algorithm头文件中，用来求下一个排列。好奇内部是怎么实现的，在Stack Overflow上看到了精彩的回答。\n<!--more-->\n# 链接\n参考链接[std::next_permutation Implementation Explanation](https://stackoverflow.com/questions/11483060/stdnext-permutation-implementation-explanation)\n\n# 内部实现\n```C++\n\ntemplate<typename It>\nbool next_permutation(It begin, It end)\n{\n    if (begin == end)\n        return false;\n\n    It i = begin;\n    ++i;\n    if (i == end)\n        return false;\n\n    i = end;\n    --i;\n\n    while (true)\n    {\n        It j = i;\n        --i;\n\n        if (*i < *j)\n        {\n            It k = end;\n\n             while (!(*i < *--k))\n                /* pass */;\n\n            iter_swap(i, k);\n            reverse(j, end);\n            return true;\n        }\n\n        if (i == begin)\n        {\n            reverse(begin, end);\n            return false;\n        }\n    }\n}\n\n```\n\n# 解析\n```\n1 2 3 4\n1 2 4 3\n1 3 2 4\n1 3 4 2\n1 4 3 2 \n2 1 3 4\n...\n```\n要得到一个排列的下一个排列，**我们可以把排列中的每一个元素看做数字中的某一位，整个排列看做一个具体的数**。这样求下一个排列的问题就变成了求比当前数字的大的那些数字中最小的那个数（即上确界）。例如排列组成的所有可能的数中，比1234大的数中最小的那个就是1243。\n在上面的例子里我们看到前几个排列都是1作为排列的首部，当1作为首部的情况被改变的时候是1后面的三个数字降序排列的时候。\n所以算法设计的关键是**从后向前找到第一个打破降序的数字，将它和它右边降序排列中它的上确界调换位置，之后再将原本的降序序列部分反转**。之所以反转是因为调换位置后已经是一个新的排列，而反转后的升序序列是原本降序序列的最小状态。\n\n核心代码：\n```\nwhile (true)\n    {\n        It j = i;\n        --i;\n\n        //找到最先打破降序的元素\n        if (*i < *j)\n        {\n            It k = end;\n\n            //找到这个元素在它右边降序序列的上确界\n             while (!(*i < *--k))\n                /* pass */;\n\n            iter_swap(i, k);//交换元素\n            reverse(j, end);//降序序列部分反转\n            return true;\n        }\n\n        //表示整个序列已经是降序序列\n        if (i == begin)\n        {\n            reverse(begin, end);\n            return false;\n        }\n    }\n```\n\n","source":"_posts/next-permutation解析.md","raw":"---\ntitle: next_permutation解析\ndate: 2018-12-18 10:34:22\ncategories:\n- C++\ntags:\n- 排列\n---\nnext_permutation是C++的STL中提供的一个库函数，声明在algorithm头文件中，用来求下一个排列。好奇内部是怎么实现的，在Stack Overflow上看到了精彩的回答。\n<!--more-->\n# 链接\n参考链接[std::next_permutation Implementation Explanation](https://stackoverflow.com/questions/11483060/stdnext-permutation-implementation-explanation)\n\n# 内部实现\n```C++\n\ntemplate<typename It>\nbool next_permutation(It begin, It end)\n{\n    if (begin == end)\n        return false;\n\n    It i = begin;\n    ++i;\n    if (i == end)\n        return false;\n\n    i = end;\n    --i;\n\n    while (true)\n    {\n        It j = i;\n        --i;\n\n        if (*i < *j)\n        {\n            It k = end;\n\n             while (!(*i < *--k))\n                /* pass */;\n\n            iter_swap(i, k);\n            reverse(j, end);\n            return true;\n        }\n\n        if (i == begin)\n        {\n            reverse(begin, end);\n            return false;\n        }\n    }\n}\n\n```\n\n# 解析\n```\n1 2 3 4\n1 2 4 3\n1 3 2 4\n1 3 4 2\n1 4 3 2 \n2 1 3 4\n...\n```\n要得到一个排列的下一个排列，**我们可以把排列中的每一个元素看做数字中的某一位，整个排列看做一个具体的数**。这样求下一个排列的问题就变成了求比当前数字的大的那些数字中最小的那个数（即上确界）。例如排列组成的所有可能的数中，比1234大的数中最小的那个就是1243。\n在上面的例子里我们看到前几个排列都是1作为排列的首部，当1作为首部的情况被改变的时候是1后面的三个数字降序排列的时候。\n所以算法设计的关键是**从后向前找到第一个打破降序的数字，将它和它右边降序排列中它的上确界调换位置，之后再将原本的降序序列部分反转**。之所以反转是因为调换位置后已经是一个新的排列，而反转后的升序序列是原本降序序列的最小状态。\n\n核心代码：\n```\nwhile (true)\n    {\n        It j = i;\n        --i;\n\n        //找到最先打破降序的元素\n        if (*i < *j)\n        {\n            It k = end;\n\n            //找到这个元素在它右边降序序列的上确界\n             while (!(*i < *--k))\n                /* pass */;\n\n            iter_swap(i, k);//交换元素\n            reverse(j, end);//降序序列部分反转\n            return true;\n        }\n\n        //表示整个序列已经是降序序列\n        if (i == begin)\n        {\n            reverse(begin, end);\n            return false;\n        }\n    }\n```\n\n","slug":"next-permutation解析","published":1,"updated":"2019-08-20T14:50:42.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lx001o30vnkvobhk4z","content":"<p>next_permutation是C++的STL中提供的一个库函数，声明在algorithm头文件中，用来求下一个排列。好奇内部是怎么实现的，在Stack Overflow上看到了精彩的回答。</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>参考链接<a href=\"https://stackoverflow.com/questions/11483060/stdnext-permutation-implementation-explanation\" target=\"_blank\" rel=\"noopener\">std::next_permutation Implementation Explanation</a></p>\n<h1 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> It&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">next_permutation</span><span class=\"params\">(It begin, It end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (begin == end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    It i = begin;</span><br><span class=\"line\">    ++i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    i = end;</span><br><span class=\"line\">    --i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        It j = i;</span><br><span class=\"line\">        --i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*i &lt; *j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            It k = end;</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">while</span> (!(*i &lt; *--k))</span><br><span class=\"line\">                <span class=\"comment\">/* pass */</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            iter_swap(i, k);</span><br><span class=\"line\">            reverse(j, end);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == begin)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            reverse(begin, end);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4</span><br><span class=\"line\">1 2 4 3</span><br><span class=\"line\">1 3 2 4</span><br><span class=\"line\">1 3 4 2</span><br><span class=\"line\">1 4 3 2 </span><br><span class=\"line\">2 1 3 4</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>要得到一个排列的下一个排列，<strong>我们可以把排列中的每一个元素看做数字中的某一位，整个排列看做一个具体的数</strong>。这样求下一个排列的问题就变成了求比当前数字的大的那些数字中最小的那个数（即上确界）。例如排列组成的所有可能的数中，比1234大的数中最小的那个就是1243。<br>在上面的例子里我们看到前几个排列都是1作为排列的首部，当1作为首部的情况被改变的时候是1后面的三个数字降序排列的时候。<br>所以算法设计的关键是<strong>从后向前找到第一个打破降序的数字，将它和它右边降序排列中它的上确界调换位置，之后再将原本的降序序列部分反转</strong>。之所以反转是因为调换位置后已经是一个新的排列，而反转后的升序序列是原本降序序列的最小状态。</p>\n<p>核心代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        It j = i;</span><br><span class=\"line\">        --i;</span><br><span class=\"line\"></span><br><span class=\"line\">        //找到最先打破降序的元素</span><br><span class=\"line\">        if (*i &lt; *j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            It k = end;</span><br><span class=\"line\"></span><br><span class=\"line\">            //找到这个元素在它右边降序序列的上确界</span><br><span class=\"line\">             while (!(*i &lt; *--k))</span><br><span class=\"line\">                /* pass */;</span><br><span class=\"line\"></span><br><span class=\"line\">            iter_swap(i, k);//交换元素</span><br><span class=\"line\">            reverse(j, end);//降序序列部分反转</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //表示整个序列已经是降序序列</span><br><span class=\"line\">        if (i == begin)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            reverse(begin, end);</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>next_permutation是C++的STL中提供的一个库函数，声明在algorithm头文件中，用来求下一个排列。好奇内部是怎么实现的，在Stack Overflow上看到了精彩的回答。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>参考链接<a href=\"https://stackoverflow.com/questions/11483060/stdnext-permutation-implementation-explanation\" target=\"_blank\" rel=\"noopener\">std::next_permutation Implementation Explanation</a></p>\n<h1 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> It&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">next_permutation</span><span class=\"params\">(It begin, It end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (begin == end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    It i = begin;</span><br><span class=\"line\">    ++i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    i = end;</span><br><span class=\"line\">    --i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        It j = i;</span><br><span class=\"line\">        --i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*i &lt; *j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            It k = end;</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">while</span> (!(*i &lt; *--k))</span><br><span class=\"line\">                <span class=\"comment\">/* pass */</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            iter_swap(i, k);</span><br><span class=\"line\">            reverse(j, end);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == begin)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            reverse(begin, end);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4</span><br><span class=\"line\">1 2 4 3</span><br><span class=\"line\">1 3 2 4</span><br><span class=\"line\">1 3 4 2</span><br><span class=\"line\">1 4 3 2 </span><br><span class=\"line\">2 1 3 4</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>要得到一个排列的下一个排列，<strong>我们可以把排列中的每一个元素看做数字中的某一位，整个排列看做一个具体的数</strong>。这样求下一个排列的问题就变成了求比当前数字的大的那些数字中最小的那个数（即上确界）。例如排列组成的所有可能的数中，比1234大的数中最小的那个就是1243。<br>在上面的例子里我们看到前几个排列都是1作为排列的首部，当1作为首部的情况被改变的时候是1后面的三个数字降序排列的时候。<br>所以算法设计的关键是<strong>从后向前找到第一个打破降序的数字，将它和它右边降序排列中它的上确界调换位置，之后再将原本的降序序列部分反转</strong>。之所以反转是因为调换位置后已经是一个新的排列，而反转后的升序序列是原本降序序列的最小状态。</p>\n<p>核心代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        It j = i;</span><br><span class=\"line\">        --i;</span><br><span class=\"line\"></span><br><span class=\"line\">        //找到最先打破降序的元素</span><br><span class=\"line\">        if (*i &lt; *j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            It k = end;</span><br><span class=\"line\"></span><br><span class=\"line\">            //找到这个元素在它右边降序序列的上确界</span><br><span class=\"line\">             while (!(*i &lt; *--k))</span><br><span class=\"line\">                /* pass */;</span><br><span class=\"line\"></span><br><span class=\"line\">            iter_swap(i, k);//交换元素</span><br><span class=\"line\">            reverse(j, end);//降序序列部分反转</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //表示整个序列已经是降序序列</span><br><span class=\"line\">        if (i == begin)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            reverse(begin, end);</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"pick numbers-DFS","date":"2018-08-11T09:23:02.000Z","_content":"从$n$个整数中任选$k$个整数相加，求得到的一系列和中为素数的共有多少种．\n<!-- more -->\n# 链接\n[NOIP2002](http://acmoj.shu.edu.cn/problem/264/)\n# 题目\n已知$n$个整数$x1, x2,...,xn$，以及一个整数$k$．从$n$个整数中任选$k$个整数相加，可分别得到一系列的和．例如当$n = 4, k = 3$, $4$个整数分别为$3, 7, 12, 19$时，可得到全部的组合与它们的和为：\n$3 + 7 + 12 = 22$\n$3 + 7 + 19 = 29$\n$7 + 12 + 19 = 38$\n$3 + 12 + 19 = 34$\n现在，要求你计算和为素数共有多少种．\n# 思路\nDFS对每一种情况遍历．\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 11 Aug 16:32:41 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 30;\nint n, k;\nint d[maxn];\nint ans = 0;\nint sum = 0;\n\nbool is_prime(){\n    if(sum < 2)\n        return false;\n    int tmp = sqrt(sum);\n    for(int i = 2; i <= tmp; i++){\n        if(!(sum % i)) \n            return false;\n    }\n    return true;\n}\n\nvoid dfs(int now, int dep){\n    if(dep == k){\n        if(is_prime())\n            ans++;\n        return;\n    }\n    if(now == n){\n        return;\n    }\n    for(int i = now; i < n; i++){\n        sum += d[i];\n        dfs(i + 1, dep + 1);\n        sum -= d[i];\n    }\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(cin >> n >> k){\n        ans = 0;\n        sum = 0;\n        //cout << n << \" \" << k << endl;\n        for(int i = 0; i < n; i++){\n            cin >> d[i];\n        }\n        dfs(0, 0);\n        cout << ans << endl;\n    }\n    \n    return 0;\n}\n```\n","source":"_posts/pick-numbers.md","raw":"---\ntitle: pick numbers-DFS\ndate: 2018-08-11 17:23:02\ncategories:\n- ACM\n- DFS\ntags:\n- DFS\n---\n从$n$个整数中任选$k$个整数相加，求得到的一系列和中为素数的共有多少种．\n<!-- more -->\n# 链接\n[NOIP2002](http://acmoj.shu.edu.cn/problem/264/)\n# 题目\n已知$n$个整数$x1, x2,...,xn$，以及一个整数$k$．从$n$个整数中任选$k$个整数相加，可分别得到一系列的和．例如当$n = 4, k = 3$, $4$个整数分别为$3, 7, 12, 19$时，可得到全部的组合与它们的和为：\n$3 + 7 + 12 = 22$\n$3 + 7 + 19 = 29$\n$7 + 12 + 19 = 38$\n$3 + 12 + 19 = 34$\n现在，要求你计算和为素数共有多少种．\n# 思路\nDFS对每一种情况遍历．\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Sat 11 Aug 16:32:41 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 30;\nint n, k;\nint d[maxn];\nint ans = 0;\nint sum = 0;\n\nbool is_prime(){\n    if(sum < 2)\n        return false;\n    int tmp = sqrt(sum);\n    for(int i = 2; i <= tmp; i++){\n        if(!(sum % i)) \n            return false;\n    }\n    return true;\n}\n\nvoid dfs(int now, int dep){\n    if(dep == k){\n        if(is_prime())\n            ans++;\n        return;\n    }\n    if(now == n){\n        return;\n    }\n    for(int i = now; i < n; i++){\n        sum += d[i];\n        dfs(i + 1, dep + 1);\n        sum -= d[i];\n    }\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    while(cin >> n >> k){\n        ans = 0;\n        sum = 0;\n        //cout << n << \" \" << k << endl;\n        for(int i = 0; i < n; i++){\n            cin >> d[i];\n        }\n        dfs(0, 0);\n        cout << ans << endl;\n    }\n    \n    return 0;\n}\n```\n","slug":"pick-numbers","published":1,"updated":"2019-08-20T14:49:40.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lx001p30vnrctp7nh5","content":"<p>从$n$个整数中任选$k$个整数相加，求得到的一系列和中为素数的共有多少种．</p>\n<a id=\"more\"></a>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://acmoj.shu.edu.cn/problem/264/\" target=\"_blank\" rel=\"noopener\">NOIP2002</a></p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>已知$n$个整数$x1, x2,…,xn$，以及一个整数$k$．从$n$个整数中任选$k$个整数相加，可分别得到一系列的和．例如当$n = 4, k = 3$, $4$个整数分别为$3, 7, 12, 19$时，可得到全部的组合与它们的和为：<br>$3 + 7 + 12 = 22$<br>$3 + 7 + 19 = 29$<br>$7 + 12 + 19 = 38$<br>$3 + 12 + 19 = 34$<br>现在，要求你计算和为素数共有多少种．</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>DFS对每一种情况遍历．</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 11 Aug 16:32:41 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"built_in\">sqrt</span>(sum);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= tmp; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(sum % i)) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> now, <span class=\"keyword\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep == k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(is_prime())</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now == n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = now; i &lt; n; i++)&#123;</span><br><span class=\"line\">        sum += d[i];</span><br><span class=\"line\">        dfs(i + <span class=\"number\">1</span>, dep + <span class=\"number\">1</span>);</span><br><span class=\"line\">        sum -= d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; k)&#123;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; n &lt;&lt; \" \" &lt;&lt; k &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>从$n$个整数中任选$k$个整数相加，求得到的一系列和中为素数的共有多少种．</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p><a href=\"http://acmoj.shu.edu.cn/problem/264/\" target=\"_blank\" rel=\"noopener\">NOIP2002</a></p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>已知$n$个整数$x1, x2,…,xn$，以及一个整数$k$．从$n$个整数中任选$k$个整数相加，可分别得到一系列的和．例如当$n = 4, k = 3$, $4$个整数分别为$3, 7, 12, 19$时，可得到全部的组合与它们的和为：<br>$3 + 7 + 12 = 22$<br>$3 + 7 + 19 = 29$<br>$7 + 12 + 19 = 38$<br>$3 + 12 + 19 = 34$<br>现在，要求你计算和为素数共有多少种．</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>DFS对每一种情况遍历．</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Sat 11 Aug 16:32:41 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"built_in\">sqrt</span>(sum);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= tmp; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(sum % i)) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> now, <span class=\"keyword\">int</span> dep)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep == k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(is_prime())</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now == n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = now; i &lt; n; i++)&#123;</span><br><span class=\"line\">        sum += d[i];</span><br><span class=\"line\">        dfs(i + <span class=\"number\">1</span>, dep + <span class=\"number\">1</span>);</span><br><span class=\"line\">        sum -= d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; k)&#123;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; n &lt;&lt; \" \" &lt;&lt; k &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; d[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"线段树区间更新模板","date":"2018-05-07T16:08:11.000Z","_content":"线段树区间更新中比较重要的一个概念是延迟标记，即lazy思想，当要对某一个区间中的所有节点进行更新时，先找到包含该区间所有节点的那一个（或多个）节点，只对它（们）进行更新，同时保存更新的值lazy。当进行区间查询时，若查询的区间的大小在lazy标记区间之内则直接返回，否则将lazy值向下进行传递，直到包含查询的区间。通过这种方式，可以用更新整个区间的值来代替更新区间中的每一个节点，从而避免了很多不必要的操作，提高了效率。说起来可能比较抽象，详见代码。\n[参考链接](https://www.zybuluo.com/lychee123/note/731591)\n<!-- more -->\n# 基于区间和的线段树区间更新模板\n```C++\nstruct SegTree{\n    int vl, vr;\n    long long sum;\n    long long lazy;//延迟标记\n}tree[maxn << 2];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    tree[k].lazy = 0;//延迟标记初始化为0\n    if(l == r){\n        tree[k].sum = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n//更新下层区间的值，即将lazy向下进行传递，这里是区别于单点更新的最主要的地方\nvoid pushdown(int k){\n    tree[k << 1].lazy += tree[k].lazy;\n    tree[k << 1 | 1].lazy += tree[k].lazy;\n    tree[k << 1].sum += tree[k].lazy * (tree[k << 1].vr - tree[k << 1].vl + 1);//区间长度乘以当前标记\n    tree[k << 1 | 1].sum += tree[k].lazy * (tree[k << 1 | 1].vr - tree[k << 1 | 1].vl + 1);\n    tree[k].lazy = 0;//标记传递后清空为0\n}\n\nvoid update(int k, int l, int r, int val){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        tree[k].lazy += val;\n        tree[k].sum += val * (tree[k].vr - tree[k].vl + 1);\n        return;\n    }\n    if(tree[k].lazy != 0)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        update(k << 1, l, r, val);\n    else if(l > mid)\n        update(k << 1 | 1, l, r, val);\n    else{\n        update(k << 1, l, mid, val);\n        update(k << 1 | 1, mid + 1, r, val);\n    }\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nlong long query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        return tree[k].sum;\n    }\n    if(tree[k].lazy)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\n\n```\n# 例题实现\n[POJ-3468--A Simple Problem with Integers](http://acm.hdu.edu.cn/showproblem.php?pid=1754)\nAC代码\n```C++\n//#include <bits/stdc++.h>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nint n, q;\n\nstruct SegTree{\n    int vl, vr;\n    long long sum;\n    long long lazy;\n}tree[maxn << 2];\nint d[maxn];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    tree[k].lazy = 0;\n    if(l == r){\n        tree[k].sum = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nvoid pushdown(int k){\n    tree[k << 1].lazy += tree[k].lazy;\n    tree[k << 1 | 1].lazy += tree[k].lazy;\n    tree[k << 1].sum += tree[k].lazy * (tree[k << 1].vr - tree[k << 1].vl + 1);\n    tree[k << 1 | 1].sum += tree[k].lazy * (tree[k << 1 | 1].vr - tree[k << 1 | 1].vl + 1);\n    tree[k].lazy = 0;\n}\n\nvoid update(int k, int l, int r, int val){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        tree[k].lazy += val;\n        tree[k].sum += val * (tree[k].vr - tree[k].vl + 1);\n        return;\n    }\n    if(tree[k].lazy != 0)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        update(k << 1, l, r, val);\n    else if(l > mid)\n        update(k << 1 | 1, l, r, val);\n    else{\n        update(k << 1, l, mid, val);\n        update(k << 1 | 1, mid + 1, r, val);\n    }\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nlong long query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        return tree[k].sum;\n    }\n    if(tree[k].lazy)\n    pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n        return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    char s[10];\n    int a, b, c;\n    scanf(\"%d%d\", &n, &q);\n    for(int i = 1; i <= n; i++)\n        scanf(\"%d\", d + i);\n    build(1, 1, n);\n    while(q--){\n        scanf(\"%s\", s);\n        if(s[0] == 'Q'){\n            scanf(\"%d%d\", &a, &b);\n            printf(\"%lld\\n\", query(1, a, b));\n        }\n        else if(s[0] == 'C'){\n            scanf(\"%d%d%d\", &a, &b, &c);\n            update(1, a, b, c);\n        }\n    }\n\t\n    return 0;\n}\n\n```","source":"_posts/segtree-intval.md","raw":"---\ntitle: 线段树区间更新模板\ndate: 2018-05-08 00:08:11\ncategories:\n- Template\ntags:\n- 线段树区间更新\n---\n线段树区间更新中比较重要的一个概念是延迟标记，即lazy思想，当要对某一个区间中的所有节点进行更新时，先找到包含该区间所有节点的那一个（或多个）节点，只对它（们）进行更新，同时保存更新的值lazy。当进行区间查询时，若查询的区间的大小在lazy标记区间之内则直接返回，否则将lazy值向下进行传递，直到包含查询的区间。通过这种方式，可以用更新整个区间的值来代替更新区间中的每一个节点，从而避免了很多不必要的操作，提高了效率。说起来可能比较抽象，详见代码。\n[参考链接](https://www.zybuluo.com/lychee123/note/731591)\n<!-- more -->\n# 基于区间和的线段树区间更新模板\n```C++\nstruct SegTree{\n    int vl, vr;\n    long long sum;\n    long long lazy;//延迟标记\n}tree[maxn << 2];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    tree[k].lazy = 0;//延迟标记初始化为0\n    if(l == r){\n        tree[k].sum = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n//更新下层区间的值，即将lazy向下进行传递，这里是区别于单点更新的最主要的地方\nvoid pushdown(int k){\n    tree[k << 1].lazy += tree[k].lazy;\n    tree[k << 1 | 1].lazy += tree[k].lazy;\n    tree[k << 1].sum += tree[k].lazy * (tree[k << 1].vr - tree[k << 1].vl + 1);//区间长度乘以当前标记\n    tree[k << 1 | 1].sum += tree[k].lazy * (tree[k << 1 | 1].vr - tree[k << 1 | 1].vl + 1);\n    tree[k].lazy = 0;//标记传递后清空为0\n}\n\nvoid update(int k, int l, int r, int val){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        tree[k].lazy += val;\n        tree[k].sum += val * (tree[k].vr - tree[k].vl + 1);\n        return;\n    }\n    if(tree[k].lazy != 0)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        update(k << 1, l, r, val);\n    else if(l > mid)\n        update(k << 1 | 1, l, r, val);\n    else{\n        update(k << 1, l, mid, val);\n        update(k << 1 | 1, mid + 1, r, val);\n    }\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nlong long query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        return tree[k].sum;\n    }\n    if(tree[k].lazy)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\n\n```\n# 例题实现\n[POJ-3468--A Simple Problem with Integers](http://acm.hdu.edu.cn/showproblem.php?pid=1754)\nAC代码\n```C++\n//#include <bits/stdc++.h>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nint n, q;\n\nstruct SegTree{\n    int vl, vr;\n    long long sum;\n    long long lazy;\n}tree[maxn << 2];\nint d[maxn];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    tree[k].lazy = 0;\n    if(l == r){\n        tree[k].sum = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nvoid pushdown(int k){\n    tree[k << 1].lazy += tree[k].lazy;\n    tree[k << 1 | 1].lazy += tree[k].lazy;\n    tree[k << 1].sum += tree[k].lazy * (tree[k << 1].vr - tree[k << 1].vl + 1);\n    tree[k << 1 | 1].sum += tree[k].lazy * (tree[k << 1 | 1].vr - tree[k << 1 | 1].vl + 1);\n    tree[k].lazy = 0;\n}\n\nvoid update(int k, int l, int r, int val){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        tree[k].lazy += val;\n        tree[k].sum += val * (tree[k].vr - tree[k].vl + 1);\n        return;\n    }\n    if(tree[k].lazy != 0)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        update(k << 1, l, r, val);\n    else if(l > mid)\n        update(k << 1 | 1, l, r, val);\n    else{\n        update(k << 1, l, mid, val);\n        update(k << 1 | 1, mid + 1, r, val);\n    }\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nlong long query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        return tree[k].sum;\n    }\n    if(tree[k].lazy)\n    pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n        return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    char s[10];\n    int a, b, c;\n    scanf(\"%d%d\", &n, &q);\n    for(int i = 1; i <= n; i++)\n        scanf(\"%d\", d + i);\n    build(1, 1, n);\n    while(q--){\n        scanf(\"%s\", s);\n        if(s[0] == 'Q'){\n            scanf(\"%d%d\", &a, &b);\n            printf(\"%lld\\n\", query(1, a, b));\n        }\n        else if(s[0] == 'C'){\n            scanf(\"%d%d%d\", &a, &b, &c);\n            update(1, a, b, c);\n        }\n    }\n\t\n    return 0;\n}\n\n```","slug":"segtree-intval","published":1,"updated":"2019-08-20T14:48:41.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ly001q30vnrl6ex3zv","content":"<p>线段树区间更新中比较重要的一个概念是延迟标记，即lazy思想，当要对某一个区间中的所有节点进行更新时，先找到包含该区间所有节点的那一个（或多个）节点，只对它（们）进行更新，同时保存更新的值lazy。当进行区间查询时，若查询的区间的大小在lazy标记区间之内则直接返回，否则将lazy值向下进行传递，直到包含查询的区间。通过这种方式，可以用更新整个区间的值来代替更新区间中的每一个节点，从而避免了很多不必要的操作，提高了效率。说起来可能比较抽象，详见代码。<br><a href=\"https://www.zybuluo.com/lychee123/note/731591\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<a id=\"more\"></a>\n<h1 id=\"基于区间和的线段树区间更新模板\"><a href=\"#基于区间和的线段树区间更新模板\" class=\"headerlink\" title=\"基于区间和的线段树区间更新模板\"></a>基于区间和的线段树区间更新模板</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lazy;<span class=\"comment\">//延迟标记</span></span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;<span class=\"comment\">//延迟标记初始化为0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].sum = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新下层区间的值，即将lazy向下进行传递，这里是区别于单点更新的最主要的地方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);<span class=\"comment\">//区间长度乘以当前标记</span></span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;<span class=\"comment\">//标记传递后清空为0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].lazy += val;</span><br><span class=\"line\">        tree[k].sum += val * (tree[k].vr - tree[k].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy != <span class=\"number\">0</span>)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, mid, val);</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, mid) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"例题实现\"><a href=\"#例题实现\" class=\"headerlink\" title=\"例题实现\"></a>例题实现</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1754\" target=\"_blank\" rel=\"noopener\">POJ-3468–A Simple Problem with Integers</a><br>AC代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lazy;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].sum = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].lazy += val;</span><br><span class=\"line\">        tree[k].sum += val * (tree[k].vr - tree[k].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy != <span class=\"number\">0</span>)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, mid, val);</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy)</span><br><span class=\"line\">    pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, mid) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, d + i);</span><br><span class=\"line\">    build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'C'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, a, b, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>线段树区间更新中比较重要的一个概念是延迟标记，即lazy思想，当要对某一个区间中的所有节点进行更新时，先找到包含该区间所有节点的那一个（或多个）节点，只对它（们）进行更新，同时保存更新的值lazy。当进行区间查询时，若查询的区间的大小在lazy标记区间之内则直接返回，否则将lazy值向下进行传递，直到包含查询的区间。通过这种方式，可以用更新整个区间的值来代替更新区间中的每一个节点，从而避免了很多不必要的操作，提高了效率。说起来可能比较抽象，详见代码。<br><a href=\"https://www.zybuluo.com/lychee123/note/731591\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>","more":"<h1 id=\"基于区间和的线段树区间更新模板\"><a href=\"#基于区间和的线段树区间更新模板\" class=\"headerlink\" title=\"基于区间和的线段树区间更新模板\"></a>基于区间和的线段树区间更新模板</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lazy;<span class=\"comment\">//延迟标记</span></span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;<span class=\"comment\">//延迟标记初始化为0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].sum = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新下层区间的值，即将lazy向下进行传递，这里是区别于单点更新的最主要的地方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);<span class=\"comment\">//区间长度乘以当前标记</span></span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;<span class=\"comment\">//标记传递后清空为0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].lazy += val;</span><br><span class=\"line\">        tree[k].sum += val * (tree[k].vr - tree[k].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy != <span class=\"number\">0</span>)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, mid, val);</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, mid) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"例题实现\"><a href=\"#例题实现\" class=\"headerlink\" title=\"例题实现\"></a>例题实现</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1754\" target=\"_blank\" rel=\"noopener\">POJ-3468–A Simple Problem with Integers</a><br>AC代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lazy;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].sum = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].lazy += val;</span><br><span class=\"line\">        tree[k].sum += val * (tree[k].vr - tree[k].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy != <span class=\"number\">0</span>)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, mid, val);</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy)</span><br><span class=\"line\">    pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, mid) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, d + i);</span><br><span class=\"line\">    build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'C'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, a, b, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"线段树单点更新模板","date":"2018-05-06T13:47:10.000Z","_content":"之前一直在用大白上的线段树单点更新模板，最近渐渐发现有一些不太舒服的地方，一方面是大白上的模板会强行把线段树建成一个满二叉树，这样虽然比较好理解一些，但同时也会因为要考虑多出来的那些点的影响而相对麻烦。另一方面是因为大家貌似都不用大白上的线段树模板= =||，这样搜题解以及和队友交流的时候会存在一些障碍（其实这一方面是主要原因），所以最后通过权衡还是选择了一个自己觉得通用性比较好也比较好实现的模板。[参考博客链接](http://www.hysonn.com/2017/01/26/segtree/)\nPs:关于线段树区间更新目前正在学习中，之后再补上关于区间更新的模板。\n<!-- more -->\n# 基于最大值查询的线段树模板\n```C++\n//首先定义线段树的结构体\nstruct SegTree{\n    int vl, vr;         //每个tree[k]对应一个节点，其中vl, vr是节点对应的区间\n    int mv;             //表示节点维护的数据，视情况而定，以维护区间最大值为例\n}tree[maxn << 2];       //绝对安全的情况是建议开四倍数据量的大小\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    if(l == r){\n        tree[k].mv = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv);\n}\n\nvoid update(int k, int pos, int val){\n    if(tree[k].vl == tree[k].vr){\n        tree[k].mv = val;\n        return;\n    }\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(pos <= mid)\n        update(k << 1, pos, val);\n    else\n        update(k << 1 | 1, pos, val);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv); \n}\n\nint query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr)\n        return tree[k].mv;\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return max(query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r));\n\t\n}\n\n```\n# 例题实现\n[HDU-1754--I Hate It(线段树单点更新入门题)](http://acm.hdu.edu.cn/showproblem.php?pid=1754)\nAC代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 2e5 + 7;\nint n, m;\nstruct SegTree{\n    int vl, vr;\n    int mv;\n}tree[maxn << 2];\n\nint d[maxn];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    if(l == r){\n        tree[k].mv = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv);\n}\n\nvoid update(int k, int pos, int val){\n    if(tree[k].vl == tree[k].vr){\n        tree[k].mv = val;\n        return;\n    }\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(pos <= mid)//doubt\n        update(k << 1, pos, val);\n    else\n        update(k << 1 | 1, pos, val);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv); \n}\n\nint query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr)\n        return tree[k].mv;\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return max(query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r));\n\t\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\t\n    while(~scanf(\"%d%d\", &n, &m)){\n        char c[10];\n        int a, b;\n        for(int i = 1; i <= n; i++){\n            scanf(\"%d\", &d[i]);\n        }\n        build(1, 1, n);\n        for(int i = 1; i <= m; i++){\n            scanf(\"%s%d%d\", c, &a, &b);\n            if(c[0] == 'Q')\n                printf(\"%d\\n\", query(1, a, b));\n            else if(c[0] == 'U')\n            update(1, a, b);\n        }\n\t\t\n\t}\n\t\n    return 0;\n}\n```\n\n","source":"_posts/segtree-template.md","raw":"---\ntitle: 线段树单点更新模板\ndate: 2018-05-06 21:47:10\ncategories:\n- Template\ntags:\n- 线段树单点更新\n---\n之前一直在用大白上的线段树单点更新模板，最近渐渐发现有一些不太舒服的地方，一方面是大白上的模板会强行把线段树建成一个满二叉树，这样虽然比较好理解一些，但同时也会因为要考虑多出来的那些点的影响而相对麻烦。另一方面是因为大家貌似都不用大白上的线段树模板= =||，这样搜题解以及和队友交流的时候会存在一些障碍（其实这一方面是主要原因），所以最后通过权衡还是选择了一个自己觉得通用性比较好也比较好实现的模板。[参考博客链接](http://www.hysonn.com/2017/01/26/segtree/)\nPs:关于线段树区间更新目前正在学习中，之后再补上关于区间更新的模板。\n<!-- more -->\n# 基于最大值查询的线段树模板\n```C++\n//首先定义线段树的结构体\nstruct SegTree{\n    int vl, vr;         //每个tree[k]对应一个节点，其中vl, vr是节点对应的区间\n    int mv;             //表示节点维护的数据，视情况而定，以维护区间最大值为例\n}tree[maxn << 2];       //绝对安全的情况是建议开四倍数据量的大小\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    if(l == r){\n        tree[k].mv = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv);\n}\n\nvoid update(int k, int pos, int val){\n    if(tree[k].vl == tree[k].vr){\n        tree[k].mv = val;\n        return;\n    }\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(pos <= mid)\n        update(k << 1, pos, val);\n    else\n        update(k << 1 | 1, pos, val);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv); \n}\n\nint query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr)\n        return tree[k].mv;\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return max(query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r));\n\t\n}\n\n```\n# 例题实现\n[HDU-1754--I Hate It(线段树单点更新入门题)](http://acm.hdu.edu.cn/showproblem.php?pid=1754)\nAC代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 2e5 + 7;\nint n, m;\nstruct SegTree{\n    int vl, vr;\n    int mv;\n}tree[maxn << 2];\n\nint d[maxn];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    if(l == r){\n        tree[k].mv = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv);\n}\n\nvoid update(int k, int pos, int val){\n    if(tree[k].vl == tree[k].vr){\n        tree[k].mv = val;\n        return;\n    }\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(pos <= mid)//doubt\n        update(k << 1, pos, val);\n    else\n        update(k << 1 | 1, pos, val);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv); \n}\n\nint query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr)\n        return tree[k].mv;\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return max(query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r));\n\t\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\t\n    while(~scanf(\"%d%d\", &n, &m)){\n        char c[10];\n        int a, b;\n        for(int i = 1; i <= n; i++){\n            scanf(\"%d\", &d[i]);\n        }\n        build(1, 1, n);\n        for(int i = 1; i <= m; i++){\n            scanf(\"%s%d%d\", c, &a, &b);\n            if(c[0] == 'Q')\n                printf(\"%d\\n\", query(1, a, b));\n            else if(c[0] == 'U')\n            update(1, a, b);\n        }\n\t\t\n\t}\n\t\n    return 0;\n}\n```\n\n","slug":"segtree-template","published":1,"updated":"2019-08-20T14:48:32.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ly001r30vn9i7d8n71","content":"<p>之前一直在用大白上的线段树单点更新模板，最近渐渐发现有一些不太舒服的地方，一方面是大白上的模板会强行把线段树建成一个满二叉树，这样虽然比较好理解一些，但同时也会因为要考虑多出来的那些点的影响而相对麻烦。另一方面是因为大家貌似都不用大白上的线段树模板= =||，这样搜题解以及和队友交流的时候会存在一些障碍（其实这一方面是主要原因），所以最后通过权衡还是选择了一个自己觉得通用性比较好也比较好实现的模板。<a href=\"http://www.hysonn.com/2017/01/26/segtree/\" target=\"_blank\" rel=\"noopener\">参考博客链接</a><br>Ps:关于线段树区间更新目前正在学习中，之后再补上关于区间更新的模板。</p>\n<a id=\"more\"></a>\n<h1 id=\"基于最大值查询的线段树模板\"><a href=\"#基于最大值查询的线段树模板\" class=\"headerlink\" title=\"基于最大值查询的线段树模板\"></a>基于最大值查询的线段树模板</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先定义线段树的结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;         <span class=\"comment\">//每个tree[k]对应一个节点，其中vl, vr是节点对应的区间</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mv;             <span class=\"comment\">//表示节点维护的数据，视情况而定，以维护区间最大值为例</span></span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];       <span class=\"comment\">//绝对安全的情况是建议开四倍数据量的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].mv = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].vl == tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].mv = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].mv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(query(k &lt;&lt; <span class=\"number\">1</span>, l, mid), query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"例题实现\"><a href=\"#例题实现\" class=\"headerlink\" title=\"例题实现\"></a>例题实现</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1754\" target=\"_blank\" rel=\"noopener\">HDU-1754–I Hate It(线段树单点更新入门题)</a><br>AC代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mv;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].mv = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].vl == tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].mv = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos &lt;= mid)<span class=\"comment\">//doubt</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].mv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(query(k &lt;&lt; <span class=\"number\">1</span>, l, mid), query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;d[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s%d%d\"</span>, c, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, query(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] == <span class=\"string\">'U'</span>)</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>之前一直在用大白上的线段树单点更新模板，最近渐渐发现有一些不太舒服的地方，一方面是大白上的模板会强行把线段树建成一个满二叉树，这样虽然比较好理解一些，但同时也会因为要考虑多出来的那些点的影响而相对麻烦。另一方面是因为大家貌似都不用大白上的线段树模板= =||，这样搜题解以及和队友交流的时候会存在一些障碍（其实这一方面是主要原因），所以最后通过权衡还是选择了一个自己觉得通用性比较好也比较好实现的模板。<a href=\"http://www.hysonn.com/2017/01/26/segtree/\" target=\"_blank\" rel=\"noopener\">参考博客链接</a><br>Ps:关于线段树区间更新目前正在学习中，之后再补上关于区间更新的模板。</p>","more":"<h1 id=\"基于最大值查询的线段树模板\"><a href=\"#基于最大值查询的线段树模板\" class=\"headerlink\" title=\"基于最大值查询的线段树模板\"></a>基于最大值查询的线段树模板</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先定义线段树的结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;         <span class=\"comment\">//每个tree[k]对应一个节点，其中vl, vr是节点对应的区间</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mv;             <span class=\"comment\">//表示节点维护的数据，视情况而定，以维护区间最大值为例</span></span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];       <span class=\"comment\">//绝对安全的情况是建议开四倍数据量的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].mv = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].vl == tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].mv = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].mv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(query(k &lt;&lt; <span class=\"number\">1</span>, l, mid), query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"例题实现\"><a href=\"#例题实现\" class=\"headerlink\" title=\"例题实现\"></a>例题实现</h1><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1754\" target=\"_blank\" rel=\"noopener\">HDU-1754–I Hate It(线段树单点更新入门题)</a><br>AC代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mv;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].mv = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].vl == tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].mv = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos &lt;= mid)<span class=\"comment\">//doubt</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].mv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(query(k &lt;&lt; <span class=\"number\">1</span>, l, mid), query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;d[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s%d%d\"</span>, c, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, query(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] == <span class=\"string\">'U'</span>)</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"sscanf & sprintf","date":"2018-09-15T14:32:35.000Z","_content":"关于$sscanf$和$sprintf$用法的总结。\n<!--more-->\n\n# sscanf\n```int sscanf（const char * str，const char * format，...）```从字符串中读取格式化的输入。\n\n## Example\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main () {\n   int day, year;\n   char weekday[20], month[20], dtm[100];\n\n   strcpy( dtm, \"Saturday March 25 1989\" );\n   sscanf( dtm, \"%s %s %d  %d\", weekday, month, &day, &year );\n\n   printf(\"%s %d, %d = %s\\n\", month, day, year, weekday );\n    \n   return(0);\n}\n```\n## Output\n```\nMarch 25, 1989 = Saturday\n```\n\n# sprintf\n```int sprintf（char * str，const char * format，...）```将格式化的输出发送到str指向的字符串。\n\n## Example\n```C\n#include <stdio.h>\n#include <math.h>\n\nint main () {\n   char str[80];\n\n   sprintf(str, \"Value of Pi = %f\", M_PI);\n   puts(str);\n   \n   return(0);\n}\n```\n## Output\n```\nValue of Pi = 3.141593\n```","source":"_posts/sscanf-sprintf.md","raw":"---\ntitle: sscanf & sprintf\ndate: 2018-09-15 22:32:35\ncategories:\n- C++\ntags:\n- 总结\n---\n关于$sscanf$和$sprintf$用法的总结。\n<!--more-->\n\n# sscanf\n```int sscanf（const char * str，const char * format，...）```从字符串中读取格式化的输入。\n\n## Example\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main () {\n   int day, year;\n   char weekday[20], month[20], dtm[100];\n\n   strcpy( dtm, \"Saturday March 25 1989\" );\n   sscanf( dtm, \"%s %s %d  %d\", weekday, month, &day, &year );\n\n   printf(\"%s %d, %d = %s\\n\", month, day, year, weekday );\n    \n   return(0);\n}\n```\n## Output\n```\nMarch 25, 1989 = Saturday\n```\n\n# sprintf\n```int sprintf（char * str，const char * format，...）```将格式化的输出发送到str指向的字符串。\n\n## Example\n```C\n#include <stdio.h>\n#include <math.h>\n\nint main () {\n   char str[80];\n\n   sprintf(str, \"Value of Pi = %f\", M_PI);\n   puts(str);\n   \n   return(0);\n}\n```\n## Output\n```\nValue of Pi = 3.141593\n```","slug":"sscanf-sprintf","published":1,"updated":"2019-08-29T03:42:17.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ly001s30vn2891zwc8","content":"<p>关于$sscanf$和$sprintf$用法的总结。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"sscanf\"><a href=\"#sscanf\" class=\"headerlink\" title=\"sscanf\"></a>sscanf</h1><figure class=\"highlight plain\"><figcaption><span>sscanf（const char * str，const char * format，...）```从字符串中读取格式化的输入。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Example</span><br><span class=\"line\">```C</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\">   int day, year;</span><br><span class=\"line\">   char weekday[20], month[20], dtm[100];</span><br><span class=\"line\"></span><br><span class=\"line\">   strcpy( dtm, &quot;Saturday March 25 1989&quot; );</span><br><span class=\"line\">   sscanf( dtm, &quot;%s %s %d  %d&quot;, weekday, month, &amp;day, &amp;year );</span><br><span class=\"line\"></span><br><span class=\"line\">   printf(&quot;%s %d, %d = %s\\n&quot;, month, day, year, weekday );</span><br><span class=\"line\">    </span><br><span class=\"line\">   return(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">March 25, 1989 = Saturday</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"sprintf\"><a href=\"#sprintf\" class=\"headerlink\" title=\"sprintf\"></a>sprintf</h1><figure class=\"highlight plain\"><figcaption><span>sprintf（char * str，const char * format，...）```将格式化的输出发送到str指向的字符串。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Example</span><br><span class=\"line\">```C</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\">   char str[80];</span><br><span class=\"line\"></span><br><span class=\"line\">   sprintf(str, &quot;Value of Pi = %f&quot;, M_PI);</span><br><span class=\"line\">   puts(str);</span><br><span class=\"line\">   </span><br><span class=\"line\">   return(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Output-1\"><a href=\"#Output-1\" class=\"headerlink\" title=\"Output\"></a>Output</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of Pi = 3.141593</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>关于$sscanf$和$sprintf$用法的总结。</p>","more":"<h1 id=\"sscanf\"><a href=\"#sscanf\" class=\"headerlink\" title=\"sscanf\"></a>sscanf</h1><figure class=\"highlight plain\"><figcaption><span>sscanf（const char * str，const char * format，...）```从字符串中读取格式化的输入。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Example</span><br><span class=\"line\">```C</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\">   int day, year;</span><br><span class=\"line\">   char weekday[20], month[20], dtm[100];</span><br><span class=\"line\"></span><br><span class=\"line\">   strcpy( dtm, &quot;Saturday March 25 1989&quot; );</span><br><span class=\"line\">   sscanf( dtm, &quot;%s %s %d  %d&quot;, weekday, month, &amp;day, &amp;year );</span><br><span class=\"line\"></span><br><span class=\"line\">   printf(&quot;%s %d, %d = %s\\n&quot;, month, day, year, weekday );</span><br><span class=\"line\">    </span><br><span class=\"line\">   return(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">March 25, 1989 = Saturday</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"sprintf\"><a href=\"#sprintf\" class=\"headerlink\" title=\"sprintf\"></a>sprintf</h1><figure class=\"highlight plain\"><figcaption><span>sprintf（char * str，const char * format，...）```将格式化的输出发送到str指向的字符串。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Example</span><br><span class=\"line\">```C</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\">   char str[80];</span><br><span class=\"line\"></span><br><span class=\"line\">   sprintf(str, &quot;Value of Pi = %f&quot;, M_PI);</span><br><span class=\"line\">   puts(str);</span><br><span class=\"line\">   </span><br><span class=\"line\">   return(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Output-1\"><a href=\"#Output-1\" class=\"headerlink\" title=\"Output\"></a>Output</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of Pi = 3.141593</span><br></pre></td></tr></table></figure>"},{"title":"矩阵快速幂","date":"2018-05-14T01:41:44.000Z","_content":"最近在做一道DP的题时发现数据范围竟然是1e18，这样的话只能用log(n)复杂度的算法来实现了，于是从队长那里了解到了矩阵快速幂。在这里记录一下快速幂以及其它矩阵处理的模板。\n矩阵快速幂模板参考自[eecrazy](https://github.com/eecrazy/ACM/blob/master/%E6%95%B0%E8%AE%BA/poj3233%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.cpp)\n<!-- more -->\n\n# 常数快速幂\n```C++\ntypedef long long ll;\nll mod_pow(ll x, ll n, ll mod){\n    ll res = 1;\n    while(n > 0){\n        if(n & 1) res *= x % mod;\n        x = x * x % mod;\n        n >>= 1;\n    }\n    return res;\n}\n```\n# 矩阵快速幂\n``` C++\nstruct Ma\n{\n    int m[maxn][maxn];\n};\n\nMa a,per;\nint n, mod;\n\nvoid init()//矩阵初始化\n{\n    int i,j;\n    for(i = 0; i < n; i++)\n        for(j = 0; j < n; j++)\n        {\n            scanf(\"%d\", &a.m[i][j]);\n            a.m[i][j] %= mod;\n            per.m[i][j] = (i == j);\n        }\n}\n\nMa add(Ma a,Ma b)//矩阵加法\n{\n    Ma c;\n    for (int i = 0; i < n; ++i)\n    {\n        for (int j = 0; j < n; ++j)\n        {\n            c.m[i][j] = (a.m[i][j] + b.m[i][j]) % mod;\n        }\n    }\n    return c;\n}\n\n\nMa multi(Ma a,Ma b)//矩阵乘法\n{\n    Ma c;\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < n; j++)\n        {\n            c.m[i][j] = 0;\n            for(int k = 0; k < n; k++)\n            {\n                c.m[i][j] += a.m[i][k] * b.m[k][j];\n            }\n            c.m[i][j] %= mod;\n        }\n    return c;\n}\n\nMa quick_pow(long long x)//矩阵快速幂\n{\n    Ma res = per;\n    Ma p = a;\n    while(x)\n    {\n        if(x&1) res = multi(res,p);\n        p = multi(p,p);\n        x >>= 1;\n    }\n    return res;\n}\n```","source":"_posts/quick-matrix.md","raw":"---\ntitle: 矩阵快速幂\ndate: 2018-05-14 09:41:44\ncategories:\n- ACM\ntags:\n- math\n---\n最近在做一道DP的题时发现数据范围竟然是1e18，这样的话只能用log(n)复杂度的算法来实现了，于是从队长那里了解到了矩阵快速幂。在这里记录一下快速幂以及其它矩阵处理的模板。\n矩阵快速幂模板参考自[eecrazy](https://github.com/eecrazy/ACM/blob/master/%E6%95%B0%E8%AE%BA/poj3233%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.cpp)\n<!-- more -->\n\n# 常数快速幂\n```C++\ntypedef long long ll;\nll mod_pow(ll x, ll n, ll mod){\n    ll res = 1;\n    while(n > 0){\n        if(n & 1) res *= x % mod;\n        x = x * x % mod;\n        n >>= 1;\n    }\n    return res;\n}\n```\n# 矩阵快速幂\n``` C++\nstruct Ma\n{\n    int m[maxn][maxn];\n};\n\nMa a,per;\nint n, mod;\n\nvoid init()//矩阵初始化\n{\n    int i,j;\n    for(i = 0; i < n; i++)\n        for(j = 0; j < n; j++)\n        {\n            scanf(\"%d\", &a.m[i][j]);\n            a.m[i][j] %= mod;\n            per.m[i][j] = (i == j);\n        }\n}\n\nMa add(Ma a,Ma b)//矩阵加法\n{\n    Ma c;\n    for (int i = 0; i < n; ++i)\n    {\n        for (int j = 0; j < n; ++j)\n        {\n            c.m[i][j] = (a.m[i][j] + b.m[i][j]) % mod;\n        }\n    }\n    return c;\n}\n\n\nMa multi(Ma a,Ma b)//矩阵乘法\n{\n    Ma c;\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < n; j++)\n        {\n            c.m[i][j] = 0;\n            for(int k = 0; k < n; k++)\n            {\n                c.m[i][j] += a.m[i][k] * b.m[k][j];\n            }\n            c.m[i][j] %= mod;\n        }\n    return c;\n}\n\nMa quick_pow(long long x)//矩阵快速幂\n{\n    Ma res = per;\n    Ma p = a;\n    while(x)\n    {\n        if(x&1) res = multi(res,p);\n        p = multi(p,p);\n        x >>= 1;\n    }\n    return res;\n}\n```","slug":"quick-matrix","published":1,"updated":"2019-08-29T03:45:13.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lz001t30vnjftdpde0","content":"<p>最近在做一道DP的题时发现数据范围竟然是1e18，这样的话只能用log(n)复杂度的算法来实现了，于是从队长那里了解到了矩阵快速幂。在这里记录一下快速幂以及其它矩阵处理的模板。<br>矩阵快速幂模板参考自<a href=\"https://github.com/eecrazy/ACM/blob/master/%E6%95%B0%E8%AE%BA/poj3233%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.cpp\" target=\"_blank\" rel=\"noopener\">eecrazy</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"常数快速幂\"><a href=\"#常数快速幂\" class=\"headerlink\" title=\"常数快速幂\"></a>常数快速幂</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mod_pow</span><span class=\"params\">(ll x, ll n, ll mod)</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) res *= x % mod;</span><br><span class=\"line\">        x = x * x % mod;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Ma</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m[maxn][maxn];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ma a,per;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, mod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span><span class=\"comment\">//矩阵初始化</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a.m[i][j]);</span><br><span class=\"line\">            a.m[i][j] %= mod;</span><br><span class=\"line\">            per.m[i][j] = (i == j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">add</span><span class=\"params\">(Ma a,Ma b)</span><span class=\"comment\">//矩阵加法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.m[i][j] = (a.m[i][j] + b.m[i][j]) % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">multi</span><span class=\"params\">(Ma a,Ma b)</span><span class=\"comment\">//矩阵乘法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.m[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c.m[i][j] += a.m[i][k] * b.m[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            c.m[i][j] %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">quick_pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x)</span><span class=\"comment\">//矩阵快速幂</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma res = per;</span><br><span class=\"line\">    Ma p = a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&amp;<span class=\"number\">1</span>) res = multi(res,p);</span><br><span class=\"line\">        p = multi(p,p);</span><br><span class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近在做一道DP的题时发现数据范围竟然是1e18，这样的话只能用log(n)复杂度的算法来实现了，于是从队长那里了解到了矩阵快速幂。在这里记录一下快速幂以及其它矩阵处理的模板。<br>矩阵快速幂模板参考自<a href=\"https://github.com/eecrazy/ACM/blob/master/%E6%95%B0%E8%AE%BA/poj3233%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.cpp\" target=\"_blank\" rel=\"noopener\">eecrazy</a></p>","more":"<h1 id=\"常数快速幂\"><a href=\"#常数快速幂\" class=\"headerlink\" title=\"常数快速幂\"></a>常数快速幂</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mod_pow</span><span class=\"params\">(ll x, ll n, ll mod)</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) res *= x % mod;</span><br><span class=\"line\">        x = x * x % mod;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Ma</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m[maxn][maxn];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ma a,per;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, mod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span><span class=\"comment\">//矩阵初始化</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a.m[i][j]);</span><br><span class=\"line\">            a.m[i][j] %= mod;</span><br><span class=\"line\">            per.m[i][j] = (i == j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">add</span><span class=\"params\">(Ma a,Ma b)</span><span class=\"comment\">//矩阵加法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.m[i][j] = (a.m[i][j] + b.m[i][j]) % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">multi</span><span class=\"params\">(Ma a,Ma b)</span><span class=\"comment\">//矩阵乘法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.m[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c.m[i][j] += a.m[i][k] * b.m[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            c.m[i][j] %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">quick_pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x)</span><span class=\"comment\">//矩阵快速幂</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma res = per;</span><br><span class=\"line\">    Ma p = a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&amp;<span class=\"number\">1</span>) res = multi(res,p);</span><br><span class=\"line\">        p = multi(p,p);</span><br><span class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"stringstream-类型转换&&字符分割","date":"2018-08-08T14:07:28.000Z","_content":"继续填坑٩(•̤̀ᵕ•̤́๑)，这次是stringstream的内容，最初是看到它可以把字符串直接输出成int类型，惊了，但是一直不是很懂。在网上查了很多资料，才终于差不多理解。stringstream是C++提供的一个字符串流，和cin，cout输入输出流类似，只不过它不是从从键盘或文件输入，也不是输出到屏幕或文件中，而是接受一个对象的输入，或把缓存区的内容输出到一个对象中。具体可以用在类型转换和字符分割中。\n<!-- more -->\n# 基本方法(操作)\n```C++\nclear()－用来清空流标志(输入，输出标志)\nstr()－获得当前流中的内容\nstr(\"content\")－设置流的内容（或清空流的内容）\noperator <<－添加内容到stringstream对象\noperator >>－从stringstream流缓存区中输出内容\n```\n# 应用\n## 类型转换\n```C++\nint a;\nstring s;\nstringstream ss;\n//int型转换为字符串类型\nss << a;　//将a输入流中（输入模式）\nss >> s;　//将流中的数值输出到字符串s中（输出模式）\n\n//字符串类型转换为int型\nss << s;　//将字符串输入到流中\nss >> a;　//将流中的字符串输出到int型变量a中\n\n//注意：如果做多次数据转换须调用clear()和str(\"\")来清空输入输出标志和内容\nint a = 0, b = 0;\nstringstream ss;\nss << \"123\";\nss >> a;\nss.clear();\nss.str(\"\");\nss << \"456\";\nss >> b;\ncout << \"a:\" << a << endl;\ncout << \"b:\" << b << endl;\ncout << \"ss:\" << ss.str() << endl;\n\n//运行结果,不加clear()和str(\"\");\na:123\nb:0\nss:123\n//原因：不加clear()和str(\"\")，流处于输出模式无法接收新内容\"456\"且未被清空，所以ss仍为\"123\"，又由于缓存区的内容已输出到a中，所以b中无内容。\n\n//运行结果，加clear()但不加str(\"\");\na:123\nb:456\nss:123456\n//原因：加入clear()清空模式，可以接收新内容\"456\"，所以ss:123456。缓存区依次缓存\"123\"，\"456\"并分别输出到a, b，所以a:123, b:456\n\n//运行结果，加clear()和str(\"\");\na:123\nb:456\nss:456\n//原因：clear()清空模式，str(\"\")清空ss对象的内容。\n```\n## 支持char*的输入和输出\n```C++\nchar ch[20];\nstringstream ss;\nss << 2333;\nss >> ch; //直接将数输出到ch字符数组中\n```\n## 字符分割\n```C++\nstringstream ss(\"hello hi hey\");\nstring word;\nwhile(ss >> word){\n    cout << word << endl;\n}\n\n//运行结果\nhello\nhi\nhey\n\n```\n# 三种给stringstream对象赋初值的方式\n```C++\nstringstream ss(\"123\"); //创建的时候赋初值\nss.str(\"123\"); //str()函数赋值\nss << \"123\"; //操作符\"<<\"添加内容（需注意当前模式）\n```","source":"_posts/stringstream.md","raw":"---\ntitle: stringstream-类型转换&&字符分割\ndate: 2018-08-08 22:07:28\ncategories:\n- C++\ntags:\n- 字符串\n---\n继续填坑٩(•̤̀ᵕ•̤́๑)，这次是stringstream的内容，最初是看到它可以把字符串直接输出成int类型，惊了，但是一直不是很懂。在网上查了很多资料，才终于差不多理解。stringstream是C++提供的一个字符串流，和cin，cout输入输出流类似，只不过它不是从从键盘或文件输入，也不是输出到屏幕或文件中，而是接受一个对象的输入，或把缓存区的内容输出到一个对象中。具体可以用在类型转换和字符分割中。\n<!-- more -->\n# 基本方法(操作)\n```C++\nclear()－用来清空流标志(输入，输出标志)\nstr()－获得当前流中的内容\nstr(\"content\")－设置流的内容（或清空流的内容）\noperator <<－添加内容到stringstream对象\noperator >>－从stringstream流缓存区中输出内容\n```\n# 应用\n## 类型转换\n```C++\nint a;\nstring s;\nstringstream ss;\n//int型转换为字符串类型\nss << a;　//将a输入流中（输入模式）\nss >> s;　//将流中的数值输出到字符串s中（输出模式）\n\n//字符串类型转换为int型\nss << s;　//将字符串输入到流中\nss >> a;　//将流中的字符串输出到int型变量a中\n\n//注意：如果做多次数据转换须调用clear()和str(\"\")来清空输入输出标志和内容\nint a = 0, b = 0;\nstringstream ss;\nss << \"123\";\nss >> a;\nss.clear();\nss.str(\"\");\nss << \"456\";\nss >> b;\ncout << \"a:\" << a << endl;\ncout << \"b:\" << b << endl;\ncout << \"ss:\" << ss.str() << endl;\n\n//运行结果,不加clear()和str(\"\");\na:123\nb:0\nss:123\n//原因：不加clear()和str(\"\")，流处于输出模式无法接收新内容\"456\"且未被清空，所以ss仍为\"123\"，又由于缓存区的内容已输出到a中，所以b中无内容。\n\n//运行结果，加clear()但不加str(\"\");\na:123\nb:456\nss:123456\n//原因：加入clear()清空模式，可以接收新内容\"456\"，所以ss:123456。缓存区依次缓存\"123\"，\"456\"并分别输出到a, b，所以a:123, b:456\n\n//运行结果，加clear()和str(\"\");\na:123\nb:456\nss:456\n//原因：clear()清空模式，str(\"\")清空ss对象的内容。\n```\n## 支持char*的输入和输出\n```C++\nchar ch[20];\nstringstream ss;\nss << 2333;\nss >> ch; //直接将数输出到ch字符数组中\n```\n## 字符分割\n```C++\nstringstream ss(\"hello hi hey\");\nstring word;\nwhile(ss >> word){\n    cout << word << endl;\n}\n\n//运行结果\nhello\nhi\nhey\n\n```\n# 三种给stringstream对象赋初值的方式\n```C++\nstringstream ss(\"123\"); //创建的时候赋初值\nss.str(\"123\"); //str()函数赋值\nss << \"123\"; //操作符\"<<\"添加内容（需注意当前模式）\n```","slug":"stringstream","published":1,"updated":"2019-08-20T14:47:51.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2lz001u30vn37ykchbm","content":"<p>继续填坑٩(•̤̀ᵕ•̤́๑)，这次是stringstream的内容，最初是看到它可以把字符串直接输出成int类型，惊了，但是一直不是很懂。在网上查了很多资料，才终于差不多理解。stringstream是C++提供的一个字符串流，和cin，cout输入输出流类似，只不过它不是从从键盘或文件输入，也不是输出到屏幕或文件中，而是接受一个对象的输入，或把缓存区的内容输出到一个对象中。具体可以用在类型转换和字符分割中。</p>\n<a id=\"more\"></a>\n<h1 id=\"基本方法-操作\"><a href=\"#基本方法-操作\" class=\"headerlink\" title=\"基本方法(操作)\"></a>基本方法(操作)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear()－用来清空流标志(输入，输出标志)</span><br><span class=\"line\">str()－获得当前流中的内容</span><br><span class=\"line\">str(<span class=\"string\">\"content\"</span>)－设置流的内容（或清空流的内容）</span><br><span class=\"line\"><span class=\"keyword\">operator</span> &lt;&lt;－添加内容到<span class=\"built_in\">stringstream</span>对象</span><br><span class=\"line\"><span class=\"keyword\">operator</span> &gt;&gt;－从<span class=\"built_in\">stringstream</span>流缓存区中输出内容</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"><span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\"><span class=\"comment\">//int型转换为字符串类型</span></span><br><span class=\"line\">ss &lt;&lt; a;　<span class=\"comment\">//将a输入流中（输入模式）</span></span><br><span class=\"line\">ss &gt;&gt; s;　<span class=\"comment\">//将流中的数值输出到字符串s中（输出模式）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串类型转换为int型</span></span><br><span class=\"line\">ss &lt;&lt; s;　<span class=\"comment\">//将字符串输入到流中</span></span><br><span class=\"line\">ss &gt;&gt; a;　<span class=\"comment\">//将流中的字符串输出到int型变量a中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意：如果做多次数据转换须调用clear()和str(\"\")来清空输入输出标志和内容</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">ss &lt;&lt; <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">ss &gt;&gt; a;</span><br><span class=\"line\">ss.clear();</span><br><span class=\"line\">ss.str(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">ss &lt;&lt; <span class=\"string\">\"456\"</span>;</span><br><span class=\"line\">ss &gt;&gt; b;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b:\"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ss:\"</span> &lt;&lt; ss.str() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果,不加clear()和str(\"\");</span></span><br><span class=\"line\">a:<span class=\"number\">123</span></span><br><span class=\"line\">b:<span class=\"number\">0</span></span><br><span class=\"line\">ss:<span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"comment\">//原因：不加clear()和str(\"\")，流处于输出模式无法接收新内容\"456\"且未被清空，所以ss仍为\"123\"，又由于缓存区的内容已输出到a中，所以b中无内容。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果，加clear()但不加str(\"\");</span></span><br><span class=\"line\">a:<span class=\"number\">123</span></span><br><span class=\"line\">b:<span class=\"number\">456</span></span><br><span class=\"line\">ss:<span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"comment\">//原因：加入clear()清空模式，可以接收新内容\"456\"，所以ss:123456。缓存区依次缓存\"123\"，\"456\"并分别输出到a, b，所以a:123, b:456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果，加clear()和str(\"\");</span></span><br><span class=\"line\">a:<span class=\"number\">123</span></span><br><span class=\"line\">b:<span class=\"number\">456</span></span><br><span class=\"line\">ss:<span class=\"number\">456</span></span><br><span class=\"line\"><span class=\"comment\">//原因：clear()清空模式，str(\"\")清空ss对象的内容。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持char-的输入和输出\"><a href=\"#支持char-的输入和输出\" class=\"headerlink\" title=\"支持char*的输入和输出\"></a>支持char*的输入和输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> ch[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">ss &lt;&lt; <span class=\"number\">2333</span>;</span><br><span class=\"line\">ss &gt;&gt; ch; <span class=\"comment\">//直接将数输出到ch字符数组中</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符分割\"><a href=\"#字符分割\" class=\"headerlink\" title=\"字符分割\"></a>字符分割</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(<span class=\"string\">\"hello hi hey\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> word;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(ss &gt;&gt; word)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; word &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果</span></span><br><span class=\"line\">hello</span><br><span class=\"line\">hi</span><br><span class=\"line\">hey</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三种给stringstream对象赋初值的方式\"><a href=\"#三种给stringstream对象赋初值的方式\" class=\"headerlink\" title=\"三种给stringstream对象赋初值的方式\"></a>三种给stringstream对象赋初值的方式</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(<span class=\"string\">\"123\"</span>)</span></span>; <span class=\"comment\">//创建的时候赋初值</span></span><br><span class=\"line\">ss.str(<span class=\"string\">\"123\"</span>); <span class=\"comment\">//str()函数赋值</span></span><br><span class=\"line\">ss &lt;&lt; <span class=\"string\">\"123\"</span>; <span class=\"comment\">//操作符\"&lt;&lt;\"添加内容（需注意当前模式）</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>继续填坑٩(•̤̀ᵕ•̤́๑)，这次是stringstream的内容，最初是看到它可以把字符串直接输出成int类型，惊了，但是一直不是很懂。在网上查了很多资料，才终于差不多理解。stringstream是C++提供的一个字符串流，和cin，cout输入输出流类似，只不过它不是从从键盘或文件输入，也不是输出到屏幕或文件中，而是接受一个对象的输入，或把缓存区的内容输出到一个对象中。具体可以用在类型转换和字符分割中。</p>","more":"<h1 id=\"基本方法-操作\"><a href=\"#基本方法-操作\" class=\"headerlink\" title=\"基本方法(操作)\"></a>基本方法(操作)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear()－用来清空流标志(输入，输出标志)</span><br><span class=\"line\">str()－获得当前流中的内容</span><br><span class=\"line\">str(<span class=\"string\">\"content\"</span>)－设置流的内容（或清空流的内容）</span><br><span class=\"line\"><span class=\"keyword\">operator</span> &lt;&lt;－添加内容到<span class=\"built_in\">stringstream</span>对象</span><br><span class=\"line\"><span class=\"keyword\">operator</span> &gt;&gt;－从<span class=\"built_in\">stringstream</span>流缓存区中输出内容</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"><span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\"><span class=\"comment\">//int型转换为字符串类型</span></span><br><span class=\"line\">ss &lt;&lt; a;　<span class=\"comment\">//将a输入流中（输入模式）</span></span><br><span class=\"line\">ss &gt;&gt; s;　<span class=\"comment\">//将流中的数值输出到字符串s中（输出模式）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串类型转换为int型</span></span><br><span class=\"line\">ss &lt;&lt; s;　<span class=\"comment\">//将字符串输入到流中</span></span><br><span class=\"line\">ss &gt;&gt; a;　<span class=\"comment\">//将流中的字符串输出到int型变量a中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意：如果做多次数据转换须调用clear()和str(\"\")来清空输入输出标志和内容</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">ss &lt;&lt; <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">ss &gt;&gt; a;</span><br><span class=\"line\">ss.clear();</span><br><span class=\"line\">ss.str(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">ss &lt;&lt; <span class=\"string\">\"456\"</span>;</span><br><span class=\"line\">ss &gt;&gt; b;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b:\"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ss:\"</span> &lt;&lt; ss.str() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果,不加clear()和str(\"\");</span></span><br><span class=\"line\">a:<span class=\"number\">123</span></span><br><span class=\"line\">b:<span class=\"number\">0</span></span><br><span class=\"line\">ss:<span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"comment\">//原因：不加clear()和str(\"\")，流处于输出模式无法接收新内容\"456\"且未被清空，所以ss仍为\"123\"，又由于缓存区的内容已输出到a中，所以b中无内容。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果，加clear()但不加str(\"\");</span></span><br><span class=\"line\">a:<span class=\"number\">123</span></span><br><span class=\"line\">b:<span class=\"number\">456</span></span><br><span class=\"line\">ss:<span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"comment\">//原因：加入clear()清空模式，可以接收新内容\"456\"，所以ss:123456。缓存区依次缓存\"123\"，\"456\"并分别输出到a, b，所以a:123, b:456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果，加clear()和str(\"\");</span></span><br><span class=\"line\">a:<span class=\"number\">123</span></span><br><span class=\"line\">b:<span class=\"number\">456</span></span><br><span class=\"line\">ss:<span class=\"number\">456</span></span><br><span class=\"line\"><span class=\"comment\">//原因：clear()清空模式，str(\"\")清空ss对象的内容。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持char-的输入和输出\"><a href=\"#支持char-的输入和输出\" class=\"headerlink\" title=\"支持char*的输入和输出\"></a>支持char*的输入和输出</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> ch[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">ss &lt;&lt; <span class=\"number\">2333</span>;</span><br><span class=\"line\">ss &gt;&gt; ch; <span class=\"comment\">//直接将数输出到ch字符数组中</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符分割\"><a href=\"#字符分割\" class=\"headerlink\" title=\"字符分割\"></a>字符分割</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(<span class=\"string\">\"hello hi hey\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> word;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(ss &gt;&gt; word)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; word &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果</span></span><br><span class=\"line\">hello</span><br><span class=\"line\">hi</span><br><span class=\"line\">hey</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三种给stringstream对象赋初值的方式\"><a href=\"#三种给stringstream对象赋初值的方式\" class=\"headerlink\" title=\"三种给stringstream对象赋初值的方式\"></a>三种给stringstream对象赋初值的方式</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(<span class=\"string\">\"123\"</span>)</span></span>; <span class=\"comment\">//创建的时候赋初值</span></span><br><span class=\"line\">ss.str(<span class=\"string\">\"123\"</span>); <span class=\"comment\">//str()函数赋值</span></span><br><span class=\"line\">ss &lt;&lt; <span class=\"string\">\"123\"</span>; <span class=\"comment\">//操作符\"&lt;&lt;\"添加内容（需注意当前模式）</span></span><br></pre></td></tr></table></figure>"},{"title":"ubuntu下vultr服务器搭建","date":"2018-04-13T11:09:32.000Z","_content":"　　工欲善其事必先利其器。\n　　前一段时间在[陶司机学长](http://logqtainia.github.io/)的帮助下搭了自己的梯子，因为实在是受不了某度的搜索引擎了...，某天电脑出了一个小问题，去某度搜，２个小时过去没有任何头绪，无奈挂了VPN软件搜谷歌，搜索结果的第一条就是解决办法，，，没有对比就没有伤害，google真是一家伟大的公司。\n　　觉得靠免费的VPN软件不是长久之计（一方面是速度不理想，另一方面是考虑安全的问题），于是搭了梯子，终于可以愉快的用google了(•̀⌄•́)，用这篇博客记录一下搭建的过程。\n<!-- more -->\n\n# 注册vultr账号\n[链接](https://www.vultr.com/)\n\n# 创建vultr主机\n　　点击右上角的蓝色加号，创建新的vultr主机\n\n![p1](/p1.png)\n\n　　服务器位置选择，推荐选择新加坡，或者美国的服务器(日本服务器已基本被墙)\n\n![p2](/p2.png)\n\n　　服务器端系统选择，选择ubuntu\n\n![p3](/p3.png)\n\n　　服务器配置选择,配置越高价格也越高，一般最便宜的2.5刀/month就够用了，但是很难抢到，，，于是就选5刀/month的了。\n\n![p4](/p4.png)\n\n　　其它的选项不需要填写，点击支付就ok(ps:从2017年10月开始支持支付宝支付！！)\n\n![p5](/p5.png)\n\n　　接下来等待主机部署完成即可。\n\n# 服务器端配置\n　　服务器端，也就是你刚刚创建的那台主机。\n　　点击主机右侧\"...\"展开菜单，选择\"Server Details\"可以看到这台主机的一些信息。包括这台主机的IP地址(IP Address)、用户名(Username)、密码(Password)等，这些信息下面需要用到。\n![p6](/p6.png)\n\n　　打开终端，使用ssh远程登录到主机\n\n```\n$ ssh root@你的主机IP地址\n```\n\n　　之后输入你的主机密码进行登录(可以在主机信息页面直接复制，粘贴到终端里时不会显示，但已存在,直接回车即可)。\n　　登录成功后使用一键配置脚本进行配置\n\n```\n$ wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n\n　　终端中会出现如下界面，输入１选择安装shadowsocksR\n\n![p7](/p7.png)\n\n　　之后会依次要求设置端口号(推荐设置8000以上)、密码、加密方式、协议、混淆等，下面给出我的几个主要配置选择\n\n```\n加密方式(method):none\n协议(protocol):auth_chain_a\n混淆(obfs):plain\n```\n\n　　服务器端配置完成，终端中输入exit退出ssh登录\n\n```\n$ exit\n```\n\n# 客户端配置\n　　客户端，也就是你的个人电脑。\n　　在终端中依次输入如下命令安装配置客户端的ssr(shadowsocksR)，注意此时一定要确保已经在终端中退出ssh登录，或者新打开一个终端。\n\n```\n$ wget http://www.djangoz.com/ssr\n$ sudo mv ssr /usr/local/bin\n$ sudo chmod 766 /usr/local/bin/ssr\n$ ssr install\n$ ssr config\n```\n\n　　配置和服务器端保持一致即可，下面给出示例，只需配置server、server_port、password、method、protocol、obfs这几项\n\n```\n    \"server\": \"11.22.33.44\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": 1234,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n\n    \"password\": \"123456789\",\n    \"method\": \"none\",\n    \"protocol\": \"auth_chain_a\",\n    \"protocol_param\": \"\",\n    \"obfs\": \"plain\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": 0,\n    \"speed_limit_per_user\": 0,\n\n    \"additional_ports\" : {}, // only works under multi-user mode\n    \"additional_ports_only\" : false, // only works under multi-user mode\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n\n```\n\n　　以后若想修改配置，在终端中输入ssr config即可(服务器端也要对应修改)，还有打开和关闭命令\n\n```\nssr start\nssr stop\n```\n\n# 可能的问题\n　　检查自己是否可以登录google、youtube、twitter等网站，若依旧不能可尝试用以下方法解决。\n* 依次打开ubuntu系统设置->网络->网络代理，设置如下\n![p8](/p8.png)\n\n* 推荐使用chrome浏览器+proxy SwitchyOmega插件(可离线安装)\nproxy SwitchyOmega配置如下\n![p9](/p9.png)\n\n* 有可能申请的服务器的ip被墙，可通过在线网站验证是否可以ping通，若确认ip被墙，在你的vultr账户中申请更换即可(更换服务器位置，或只更换ip地址)\n\n　　*ps:服务器端配置好后，windows、android端只需下载shadowsocksR软件并进行简单配置即可使用*","source":"_posts/vultr.md","raw":"---\ntitle: ubuntu下vultr服务器搭建\ndate: 2018-04-13 19:09:32\ncategories:\n- Messy article\ntags:\n- vultr服务器搭建\n---\n　　工欲善其事必先利其器。\n　　前一段时间在[陶司机学长](http://logqtainia.github.io/)的帮助下搭了自己的梯子，因为实在是受不了某度的搜索引擎了...，某天电脑出了一个小问题，去某度搜，２个小时过去没有任何头绪，无奈挂了VPN软件搜谷歌，搜索结果的第一条就是解决办法，，，没有对比就没有伤害，google真是一家伟大的公司。\n　　觉得靠免费的VPN软件不是长久之计（一方面是速度不理想，另一方面是考虑安全的问题），于是搭了梯子，终于可以愉快的用google了(•̀⌄•́)，用这篇博客记录一下搭建的过程。\n<!-- more -->\n\n# 注册vultr账号\n[链接](https://www.vultr.com/)\n\n# 创建vultr主机\n　　点击右上角的蓝色加号，创建新的vultr主机\n\n![p1](/p1.png)\n\n　　服务器位置选择，推荐选择新加坡，或者美国的服务器(日本服务器已基本被墙)\n\n![p2](/p2.png)\n\n　　服务器端系统选择，选择ubuntu\n\n![p3](/p3.png)\n\n　　服务器配置选择,配置越高价格也越高，一般最便宜的2.5刀/month就够用了，但是很难抢到，，，于是就选5刀/month的了。\n\n![p4](/p4.png)\n\n　　其它的选项不需要填写，点击支付就ok(ps:从2017年10月开始支持支付宝支付！！)\n\n![p5](/p5.png)\n\n　　接下来等待主机部署完成即可。\n\n# 服务器端配置\n　　服务器端，也就是你刚刚创建的那台主机。\n　　点击主机右侧\"...\"展开菜单，选择\"Server Details\"可以看到这台主机的一些信息。包括这台主机的IP地址(IP Address)、用户名(Username)、密码(Password)等，这些信息下面需要用到。\n![p6](/p6.png)\n\n　　打开终端，使用ssh远程登录到主机\n\n```\n$ ssh root@你的主机IP地址\n```\n\n　　之后输入你的主机密码进行登录(可以在主机信息页面直接复制，粘贴到终端里时不会显示，但已存在,直接回车即可)。\n　　登录成功后使用一键配置脚本进行配置\n\n```\n$ wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n\n　　终端中会出现如下界面，输入１选择安装shadowsocksR\n\n![p7](/p7.png)\n\n　　之后会依次要求设置端口号(推荐设置8000以上)、密码、加密方式、协议、混淆等，下面给出我的几个主要配置选择\n\n```\n加密方式(method):none\n协议(protocol):auth_chain_a\n混淆(obfs):plain\n```\n\n　　服务器端配置完成，终端中输入exit退出ssh登录\n\n```\n$ exit\n```\n\n# 客户端配置\n　　客户端，也就是你的个人电脑。\n　　在终端中依次输入如下命令安装配置客户端的ssr(shadowsocksR)，注意此时一定要确保已经在终端中退出ssh登录，或者新打开一个终端。\n\n```\n$ wget http://www.djangoz.com/ssr\n$ sudo mv ssr /usr/local/bin\n$ sudo chmod 766 /usr/local/bin/ssr\n$ ssr install\n$ ssr config\n```\n\n　　配置和服务器端保持一致即可，下面给出示例，只需配置server、server_port、password、method、protocol、obfs这几项\n\n```\n    \"server\": \"11.22.33.44\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": 1234,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n\n    \"password\": \"123456789\",\n    \"method\": \"none\",\n    \"protocol\": \"auth_chain_a\",\n    \"protocol_param\": \"\",\n    \"obfs\": \"plain\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": 0,\n    \"speed_limit_per_user\": 0,\n\n    \"additional_ports\" : {}, // only works under multi-user mode\n    \"additional_ports_only\" : false, // only works under multi-user mode\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n\n```\n\n　　以后若想修改配置，在终端中输入ssr config即可(服务器端也要对应修改)，还有打开和关闭命令\n\n```\nssr start\nssr stop\n```\n\n# 可能的问题\n　　检查自己是否可以登录google、youtube、twitter等网站，若依旧不能可尝试用以下方法解决。\n* 依次打开ubuntu系统设置->网络->网络代理，设置如下\n![p8](/p8.png)\n\n* 推荐使用chrome浏览器+proxy SwitchyOmega插件(可离线安装)\nproxy SwitchyOmega配置如下\n![p9](/p9.png)\n\n* 有可能申请的服务器的ip被墙，可通过在线网站验证是否可以ping通，若确认ip被墙，在你的vultr账户中申请更换即可(更换服务器位置，或只更换ip地址)\n\n　　*ps:服务器端配置好后，windows、android端只需下载shadowsocksR软件并进行简单配置即可使用*","slug":"vultr","published":1,"updated":"2019-09-01T09:01:24.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m0001v30vnv206chjo","content":"<p>　　工欲善其事必先利其器。<br>　　前一段时间在<a href=\"http://logqtainia.github.io/\" target=\"_blank\" rel=\"noopener\">陶司机学长</a>的帮助下搭了自己的梯子，因为实在是受不了某度的搜索引擎了…，某天电脑出了一个小问题，去某度搜，２个小时过去没有任何头绪，无奈挂了VPN软件搜谷歌，搜索结果的第一条就是解决办法，，，没有对比就没有伤害，google真是一家伟大的公司。<br>　　觉得靠免费的VPN软件不是长久之计（一方面是速度不理想，另一方面是考虑安全的问题），于是搭了梯子，终于可以愉快的用google了(•̀⌄•́)，用这篇博客记录一下搭建的过程。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"注册vultr账号\"><a href=\"#注册vultr账号\" class=\"headerlink\" title=\"注册vultr账号\"></a>注册vultr账号</h1><p><a href=\"https://www.vultr.com/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h1 id=\"创建vultr主机\"><a href=\"#创建vultr主机\" class=\"headerlink\" title=\"创建vultr主机\"></a>创建vultr主机</h1><p>　　点击右上角的蓝色加号，创建新的vultr主机</p>\n<p><img src=\"/2018/04/13/vultr/p1.png\" alt=\"p1\"></p>\n<p>　　服务器位置选择，推荐选择新加坡，或者美国的服务器(日本服务器已基本被墙)</p>\n<p><img src=\"/2018/04/13/vultr/p2.png\" alt=\"p2\"></p>\n<p>　　服务器端系统选择，选择ubuntu</p>\n<p><img src=\"/2018/04/13/vultr/p3.png\" alt=\"p3\"></p>\n<p>　　服务器配置选择,配置越高价格也越高，一般最便宜的2.5刀/month就够用了，但是很难抢到，，，于是就选5刀/month的了。</p>\n<p><img src=\"/2018/04/13/vultr/p4.png\" alt=\"p4\"></p>\n<p>　　其它的选项不需要填写，点击支付就ok(ps:从2017年10月开始支持支付宝支付！！)</p>\n<p><img src=\"/2018/04/13/vultr/p5.png\" alt=\"p5\"></p>\n<p>　　接下来等待主机部署完成即可。</p>\n<h1 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h1><p>　　服务器端，也就是你刚刚创建的那台主机。<br>　　点击主机右侧”…”展开菜单，选择”Server Details”可以看到这台主机的一些信息。包括这台主机的IP地址(IP Address)、用户名(Username)、密码(Password)等，这些信息下面需要用到。<br><img src=\"/2018/04/13/vultr/p6.png\" alt=\"p6\"></p>\n<p>　　打开终端，使用ssh远程登录到主机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh root@你的主机IP地址</span><br></pre></td></tr></table></figure>\n\n<p>　　之后输入你的主机密码进行登录(可以在主机信息页面直接复制，粘贴到终端里时不会显示，但已存在,直接回车即可)。<br>　　登录成功后使用一键配置脚本进行配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>\n\n<p>　　终端中会出现如下界面，输入１选择安装shadowsocksR</p>\n<p><img src=\"/2018/04/13/vultr/p7.png\" alt=\"p7\"></p>\n<p>　　之后会依次要求设置端口号(推荐设置8000以上)、密码、加密方式、协议、混淆等，下面给出我的几个主要配置选择</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加密方式(method):none</span><br><span class=\"line\">协议(protocol):auth_chain_a</span><br><span class=\"line\">混淆(obfs):plain</span><br></pre></td></tr></table></figure>\n\n<p>　　服务器端配置完成，终端中输入exit退出ssh登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ exit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h1><p>　　客户端，也就是你的个人电脑。<br>　　在终端中依次输入如下命令安装配置客户端的ssr(shadowsocksR)，注意此时一定要确保已经在终端中退出ssh登录，或者新打开一个终端。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.djangoz.com/ssr</span><br><span class=\"line\">$ sudo mv ssr /usr/local/bin</span><br><span class=\"line\">$ sudo chmod 766 /usr/local/bin/ssr</span><br><span class=\"line\">$ ssr install</span><br><span class=\"line\">$ ssr config</span><br></pre></td></tr></table></figure>\n\n<p>　　配置和服务器端保持一致即可，下面给出示例，只需配置server、server_port、password、method、protocol、obfs这几项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;server&quot;: &quot;11.22.33.44&quot;,</span><br><span class=\"line\">&quot;server_ipv6&quot;: &quot;::&quot;,</span><br><span class=\"line\">&quot;server_port&quot;: 1234,</span><br><span class=\"line\">&quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">&quot;local_port&quot;: 1080,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;password&quot;: &quot;123456789&quot;,</span><br><span class=\"line\">&quot;method&quot;: &quot;none&quot;,</span><br><span class=\"line\">&quot;protocol&quot;: &quot;auth_chain_a&quot;,</span><br><span class=\"line\">&quot;protocol_param&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;obfs&quot;: &quot;plain&quot;,</span><br><span class=\"line\">&quot;obfs_param&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;speed_limit_per_con&quot;: 0,</span><br><span class=\"line\">&quot;speed_limit_per_user&quot;: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;additional_ports&quot; : &#123;&#125;, // only works under multi-user mode</span><br><span class=\"line\">&quot;additional_ports_only&quot; : false, // only works under multi-user mode</span><br><span class=\"line\">&quot;timeout&quot;: 120,</span><br><span class=\"line\">&quot;udp_timeout&quot;: 60,</span><br><span class=\"line\">&quot;dns_ipv6&quot;: false,</span><br><span class=\"line\">&quot;connect_verbose_info&quot;: 0,</span><br><span class=\"line\">&quot;redirect&quot;: &quot;&quot;,</span><br></pre></td></tr></table></figure>\n\n<p>　　以后若想修改配置，在终端中输入ssr config即可(服务器端也要对应修改)，还有打开和关闭命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssr start</span><br><span class=\"line\">ssr stop</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"可能的问题\"><a href=\"#可能的问题\" class=\"headerlink\" title=\"可能的问题\"></a>可能的问题</h1><p>　　检查自己是否可以登录google、youtube、twitter等网站，若依旧不能可尝试用以下方法解决。</p>\n<ul>\n<li><p>依次打开ubuntu系统设置-&gt;网络-&gt;网络代理，设置如下<br><img src=\"/2018/04/13/vultr/p8.png\" alt=\"p8\"></p>\n</li>\n<li><p>推荐使用chrome浏览器+proxy SwitchyOmega插件(可离线安装)<br>proxy SwitchyOmega配置如下<br><img src=\"/2018/04/13/vultr/p9.png\" alt=\"p9\"></p>\n</li>\n<li><p>有可能申请的服务器的ip被墙，可通过在线网站验证是否可以ping通，若确认ip被墙，在你的vultr账户中申请更换即可(更换服务器位置，或只更换ip地址)</p>\n</li>\n</ul>\n<p>　　<em>ps:服务器端配置好后，windows、android端只需下载shadowsocksR软件并进行简单配置即可使用</em></p>\n","site":{"data":{}},"excerpt":"<p>　　工欲善其事必先利其器。<br>　　前一段时间在<a href=\"http://logqtainia.github.io/\" target=\"_blank\" rel=\"noopener\">陶司机学长</a>的帮助下搭了自己的梯子，因为实在是受不了某度的搜索引擎了…，某天电脑出了一个小问题，去某度搜，２个小时过去没有任何头绪，无奈挂了VPN软件搜谷歌，搜索结果的第一条就是解决办法，，，没有对比就没有伤害，google真是一家伟大的公司。<br>　　觉得靠免费的VPN软件不是长久之计（一方面是速度不理想，另一方面是考虑安全的问题），于是搭了梯子，终于可以愉快的用google了(•̀⌄•́)，用这篇博客记录一下搭建的过程。</p>","more":"<h1 id=\"注册vultr账号\"><a href=\"#注册vultr账号\" class=\"headerlink\" title=\"注册vultr账号\"></a>注册vultr账号</h1><p><a href=\"https://www.vultr.com/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h1 id=\"创建vultr主机\"><a href=\"#创建vultr主机\" class=\"headerlink\" title=\"创建vultr主机\"></a>创建vultr主机</h1><p>　　点击右上角的蓝色加号，创建新的vultr主机</p>\n<p><img src=\"/2018/04/13/vultr/p1.png\" alt=\"p1\"></p>\n<p>　　服务器位置选择，推荐选择新加坡，或者美国的服务器(日本服务器已基本被墙)</p>\n<p><img src=\"/2018/04/13/vultr/p2.png\" alt=\"p2\"></p>\n<p>　　服务器端系统选择，选择ubuntu</p>\n<p><img src=\"/2018/04/13/vultr/p3.png\" alt=\"p3\"></p>\n<p>　　服务器配置选择,配置越高价格也越高，一般最便宜的2.5刀/month就够用了，但是很难抢到，，，于是就选5刀/month的了。</p>\n<p><img src=\"/2018/04/13/vultr/p4.png\" alt=\"p4\"></p>\n<p>　　其它的选项不需要填写，点击支付就ok(ps:从2017年10月开始支持支付宝支付！！)</p>\n<p><img src=\"/2018/04/13/vultr/p5.png\" alt=\"p5\"></p>\n<p>　　接下来等待主机部署完成即可。</p>\n<h1 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h1><p>　　服务器端，也就是你刚刚创建的那台主机。<br>　　点击主机右侧”…”展开菜单，选择”Server Details”可以看到这台主机的一些信息。包括这台主机的IP地址(IP Address)、用户名(Username)、密码(Password)等，这些信息下面需要用到。<br><img src=\"/2018/04/13/vultr/p6.png\" alt=\"p6\"></p>\n<p>　　打开终端，使用ssh远程登录到主机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh root@你的主机IP地址</span><br></pre></td></tr></table></figure>\n\n<p>　　之后输入你的主机密码进行登录(可以在主机信息页面直接复制，粘贴到终端里时不会显示，但已存在,直接回车即可)。<br>　　登录成功后使用一键配置脚本进行配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>\n\n<p>　　终端中会出现如下界面，输入１选择安装shadowsocksR</p>\n<p><img src=\"/2018/04/13/vultr/p7.png\" alt=\"p7\"></p>\n<p>　　之后会依次要求设置端口号(推荐设置8000以上)、密码、加密方式、协议、混淆等，下面给出我的几个主要配置选择</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加密方式(method):none</span><br><span class=\"line\">协议(protocol):auth_chain_a</span><br><span class=\"line\">混淆(obfs):plain</span><br></pre></td></tr></table></figure>\n\n<p>　　服务器端配置完成，终端中输入exit退出ssh登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ exit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h1><p>　　客户端，也就是你的个人电脑。<br>　　在终端中依次输入如下命令安装配置客户端的ssr(shadowsocksR)，注意此时一定要确保已经在终端中退出ssh登录，或者新打开一个终端。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.djangoz.com/ssr</span><br><span class=\"line\">$ sudo mv ssr /usr/local/bin</span><br><span class=\"line\">$ sudo chmod 766 /usr/local/bin/ssr</span><br><span class=\"line\">$ ssr install</span><br><span class=\"line\">$ ssr config</span><br></pre></td></tr></table></figure>\n\n<p>　　配置和服务器端保持一致即可，下面给出示例，只需配置server、server_port、password、method、protocol、obfs这几项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;server&quot;: &quot;11.22.33.44&quot;,</span><br><span class=\"line\">&quot;server_ipv6&quot;: &quot;::&quot;,</span><br><span class=\"line\">&quot;server_port&quot;: 1234,</span><br><span class=\"line\">&quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">&quot;local_port&quot;: 1080,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;password&quot;: &quot;123456789&quot;,</span><br><span class=\"line\">&quot;method&quot;: &quot;none&quot;,</span><br><span class=\"line\">&quot;protocol&quot;: &quot;auth_chain_a&quot;,</span><br><span class=\"line\">&quot;protocol_param&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;obfs&quot;: &quot;plain&quot;,</span><br><span class=\"line\">&quot;obfs_param&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;speed_limit_per_con&quot;: 0,</span><br><span class=\"line\">&quot;speed_limit_per_user&quot;: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;additional_ports&quot; : &#123;&#125;, // only works under multi-user mode</span><br><span class=\"line\">&quot;additional_ports_only&quot; : false, // only works under multi-user mode</span><br><span class=\"line\">&quot;timeout&quot;: 120,</span><br><span class=\"line\">&quot;udp_timeout&quot;: 60,</span><br><span class=\"line\">&quot;dns_ipv6&quot;: false,</span><br><span class=\"line\">&quot;connect_verbose_info&quot;: 0,</span><br><span class=\"line\">&quot;redirect&quot;: &quot;&quot;,</span><br></pre></td></tr></table></figure>\n\n<p>　　以后若想修改配置，在终端中输入ssr config即可(服务器端也要对应修改)，还有打开和关闭命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssr start</span><br><span class=\"line\">ssr stop</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"可能的问题\"><a href=\"#可能的问题\" class=\"headerlink\" title=\"可能的问题\"></a>可能的问题</h1><p>　　检查自己是否可以登录google、youtube、twitter等网站，若依旧不能可尝试用以下方法解决。</p>\n<ul>\n<li><p>依次打开ubuntu系统设置-&gt;网络-&gt;网络代理，设置如下<br><img src=\"/2018/04/13/vultr/p8.png\" alt=\"p8\"></p>\n</li>\n<li><p>推荐使用chrome浏览器+proxy SwitchyOmega插件(可离线安装)<br>proxy SwitchyOmega配置如下<br><img src=\"/2018/04/13/vultr/p9.png\" alt=\"p9\"></p>\n</li>\n<li><p>有可能申请的服务器的ip被墙，可通过在线网站验证是否可以ping通，若确认ip被墙，在你的vultr账户中申请更换即可(更换服务器位置，或只更换ip地址)</p>\n</li>\n</ul>\n<p>　　<em>ps:服务器端配置好后，windows、android端只需下载shadowsocksR软件并进行简单配置即可使用</em></p>"},{"title":"Binary Search以及lower_bound & upper_bound实现","date":"2019-07-27T07:22:51.000Z","_content":"![BinarySearch](/BinarySearch.jpeg)\n<!--more-->\n\n# Binary Search\n　　在数组 $A$ 的 $[x, y)$ 区间中查找值 $v$，并返回其位置下标，若不存在则返回 $-1$。\n\n```C++\nint bsearch(int *A, int x, int y, int v){\n    int m;\n    while(x < y){\n        m = x + (y - x) / 2;\n        if(A[m] == v) return m;\n        else if(A[m] > v) y = m;\n        else x = m + 1;\n    }\n\n    return -1;\n}\n```\n\n# lower_bound\n　　当 $v$ 存在时返回它出现的第一个位置；如果不存在，返回这样一个下标 $i$：在此处插入 $v$ 后序列仍然有序。\n\n```C++\nint lower_bound(int *A, int x, int y, int v){\n    int m;\n    while(x < y){\n        m = x + (y - x) / 2;\n        if(A[m] >= v) y = m;\n        else x = m + 1;\n    }\n\n    return x;\n}\n```\n　　最后的返回值不仅可能是 $x, x + 1, x + 2, ..., y - 1$ 中的一个，还可能是 $y$，如果 $v$ 大于 $A[y-1]$ 就只能插入这里了。这样，这样尽管查找区间是左闭右开区间 $[x, y)$，返回值的候选区间却是闭区间 $[x, y]$。\n\n- A[m] = v：至少已经找到一个v，而左边可能还有，因此区间变为[x, m]。\n- A[m] > v：所求位置不可能在后面，但有可能是m，因此区间变为[x, m]。\n- A[m] < v：m和前面都不可行，因此区间变为[m + 1, y]。\n\n# upper_bound\n　　当 $v$ 存在时返回它出现的最后一个位置的后面一个位置；如果不存在，返回这样一个下标 $i$：在此处插入 $v$ 后序列仍然有序。\n\n```C++\nint upper_bound(int *A, int x, int y, int v){\n    int m;\n    while(x < y){\n        m = x + (y - x) / 2;\n        if(A[m] > v) y = m;\n        else x = m + 1; \n    }\n\n    return x;\n}\n```\n\n# 参考\n\n《算法竞赛入门经典（第2版）》","source":"_posts/二分查找以及lower-bound-upper-bound实现.md","raw":"---\ntitle: Binary Search以及lower_bound & upper_bound实现\ndate: 2019-07-27 15:22:51\ncategories:\n- Template\ntags:\n- Binary Search\n---\n![BinarySearch](/BinarySearch.jpeg)\n<!--more-->\n\n# Binary Search\n　　在数组 $A$ 的 $[x, y)$ 区间中查找值 $v$，并返回其位置下标，若不存在则返回 $-1$。\n\n```C++\nint bsearch(int *A, int x, int y, int v){\n    int m;\n    while(x < y){\n        m = x + (y - x) / 2;\n        if(A[m] == v) return m;\n        else if(A[m] > v) y = m;\n        else x = m + 1;\n    }\n\n    return -1;\n}\n```\n\n# lower_bound\n　　当 $v$ 存在时返回它出现的第一个位置；如果不存在，返回这样一个下标 $i$：在此处插入 $v$ 后序列仍然有序。\n\n```C++\nint lower_bound(int *A, int x, int y, int v){\n    int m;\n    while(x < y){\n        m = x + (y - x) / 2;\n        if(A[m] >= v) y = m;\n        else x = m + 1;\n    }\n\n    return x;\n}\n```\n　　最后的返回值不仅可能是 $x, x + 1, x + 2, ..., y - 1$ 中的一个，还可能是 $y$，如果 $v$ 大于 $A[y-1]$ 就只能插入这里了。这样，这样尽管查找区间是左闭右开区间 $[x, y)$，返回值的候选区间却是闭区间 $[x, y]$。\n\n- A[m] = v：至少已经找到一个v，而左边可能还有，因此区间变为[x, m]。\n- A[m] > v：所求位置不可能在后面，但有可能是m，因此区间变为[x, m]。\n- A[m] < v：m和前面都不可行，因此区间变为[m + 1, y]。\n\n# upper_bound\n　　当 $v$ 存在时返回它出现的最后一个位置的后面一个位置；如果不存在，返回这样一个下标 $i$：在此处插入 $v$ 后序列仍然有序。\n\n```C++\nint upper_bound(int *A, int x, int y, int v){\n    int m;\n    while(x < y){\n        m = x + (y - x) / 2;\n        if(A[m] > v) y = m;\n        else x = m + 1; \n    }\n\n    return x;\n}\n```\n\n# 参考\n\n《算法竞赛入门经典（第2版）》","slug":"二分查找以及lower-bound-upper-bound实现","published":1,"updated":"2019-09-01T08:39:51.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m0001w30vnd204ncg3","content":"<p><img src=\"/2019/07/27/二分查找以及lower-bound-upper-bound实现/BinarySearch.jpeg\" alt=\"BinarySearch\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"Binary-Search\"><a href=\"#Binary-Search\" class=\"headerlink\" title=\"Binary Search\"></a>Binary Search</h1><p>　　在数组 $A$ 的 $[x, y)$ 区间中查找值 $v$，并返回其位置下标，若不存在则返回 $-1$。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bsearch</span><span class=\"params\">(<span class=\"keyword\">int</span> *A, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; y)&#123;</span><br><span class=\"line\">        m = x + (y - x) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[m] == v) <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(A[m] &gt; v) y = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"lower-bound\"><a href=\"#lower-bound\" class=\"headerlink\" title=\"lower_bound\"></a>lower_bound</h1><p>　　当 $v$ 存在时返回它出现的第一个位置；如果不存在，返回这样一个下标 $i$：在此处插入 $v$ 后序列仍然有序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lower_bound</span><span class=\"params\">(<span class=\"keyword\">int</span> *A, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; y)&#123;</span><br><span class=\"line\">        m = x + (y - x) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[m] &gt;= v) y = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　最后的返回值不仅可能是 $x, x + 1, x + 2, …, y - 1$ 中的一个，还可能是 $y$，如果 $v$ 大于 $A[y-1]$ 就只能插入这里了。这样，这样尽管查找区间是左闭右开区间 $[x, y)$，返回值的候选区间却是闭区间 $[x, y]$。</p>\n<ul>\n<li>A[m] = v：至少已经找到一个v，而左边可能还有，因此区间变为[x, m]。</li>\n<li>A[m] &gt; v：所求位置不可能在后面，但有可能是m，因此区间变为[x, m]。</li>\n<li>A[m] &lt; v：m和前面都不可行，因此区间变为[m + 1, y]。</li>\n</ul>\n<h1 id=\"upper-bound\"><a href=\"#upper-bound\" class=\"headerlink\" title=\"upper_bound\"></a>upper_bound</h1><p>　　当 $v$ 存在时返回它出现的最后一个位置的后面一个位置；如果不存在，返回这样一个下标 $i$：在此处插入 $v$ 后序列仍然有序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">upper_bound</span><span class=\"params\">(<span class=\"keyword\">int</span> *A, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; y)&#123;</span><br><span class=\"line\">        m = x + (y - x) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[m] &gt; v) y = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = m + <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《算法竞赛入门经典（第2版）》</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/07/27/二分查找以及lower-bound-upper-bound实现/BinarySearch.jpeg\" alt=\"BinarySearch\"></p>","more":"<h1 id=\"Binary-Search\"><a href=\"#Binary-Search\" class=\"headerlink\" title=\"Binary Search\"></a>Binary Search</h1><p>　　在数组 $A$ 的 $[x, y)$ 区间中查找值 $v$，并返回其位置下标，若不存在则返回 $-1$。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bsearch</span><span class=\"params\">(<span class=\"keyword\">int</span> *A, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; y)&#123;</span><br><span class=\"line\">        m = x + (y - x) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[m] == v) <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(A[m] &gt; v) y = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"lower-bound\"><a href=\"#lower-bound\" class=\"headerlink\" title=\"lower_bound\"></a>lower_bound</h1><p>　　当 $v$ 存在时返回它出现的第一个位置；如果不存在，返回这样一个下标 $i$：在此处插入 $v$ 后序列仍然有序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lower_bound</span><span class=\"params\">(<span class=\"keyword\">int</span> *A, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; y)&#123;</span><br><span class=\"line\">        m = x + (y - x) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[m] &gt;= v) y = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　最后的返回值不仅可能是 $x, x + 1, x + 2, …, y - 1$ 中的一个，还可能是 $y$，如果 $v$ 大于 $A[y-1]$ 就只能插入这里了。这样，这样尽管查找区间是左闭右开区间 $[x, y)$，返回值的候选区间却是闭区间 $[x, y]$。</p>\n<ul>\n<li>A[m] = v：至少已经找到一个v，而左边可能还有，因此区间变为[x, m]。</li>\n<li>A[m] &gt; v：所求位置不可能在后面，但有可能是m，因此区间变为[x, m]。</li>\n<li>A[m] &lt; v：m和前面都不可行，因此区间变为[m + 1, y]。</li>\n</ul>\n<h1 id=\"upper-bound\"><a href=\"#upper-bound\" class=\"headerlink\" title=\"upper_bound\"></a>upper_bound</h1><p>　　当 $v$ 存在时返回它出现的最后一个位置的后面一个位置；如果不存在，返回这样一个下标 $i$：在此处插入 $v$ 后序列仍然有序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">upper_bound</span><span class=\"params\">(<span class=\"keyword\">int</span> *A, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x &lt; y)&#123;</span><br><span class=\"line\">        m = x + (y - x) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[m] &gt; v) y = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x = m + <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《算法竞赛入门经典（第2版）》</p>"},{"title":"二叉树中序和后序遍历->层序和先序遍历","date":"2018-09-21T16:39:20.000Z","_content":"给定一个二叉树的中序遍历和后序遍历求出其层序遍历和先序遍历。\n<!--more-->\n# 建成一棵二叉树\n```C++\nint in_order[maxn], post_order[maxn], lch[maxn], rch[maxn];\n//把in_order[l1...r1]和post_order[l2...r2]建成一棵二叉树，返回树根\nint build(int l1, int r1, int l2, int r2){\n    if(l1 > r1) return 0;\n    int v = post_order[r2];\n    int pos = 0;\n    while(in_order[pos] != v) pos++;\n    int len = pos - l1;\n    lch[v] = build(l1, l1 + len - 1, l2, l2 + len - 1);\n    rch[v] = build(l1 + len + 1, r1, l2 + len, l2 - 1);\n    return v;\n}\n```\n# 层序遍历\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 21 Sep 21:39:43 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 107;\nint in_order[maxn], post_order[maxn];\nstring line;\nint n;\nvector<int> vec[maxn];\n\nvoid read(int* s){\n    getline(cin, line);\n    stringstream ss;\n    ss.str(line);\n    n = 0;\n    int x;\n    \n    while(ss >> x){\n        s[n++] = x;\n    }\n}\n\nint findd(int x){\n    int i;\n    for(i = 0; i < n; i++){\n        if(in_order[i] == x) break;\n    }\n    return i;\n}\n\nvoid build(int l1, int r1, int l2, int r2, int l){\n    if(l1 > r1) return;\n    int v = post_order[r2];\n    vec[l].push_back(v);\n    int pos = findd(v);\n    int len = pos - l1;\n    build(l1, l1 + len - 1, l2, l2 + len - 1, l + 1);\n    build(l1 + len + 1, r1, l2 + len, r2 - 1, l + 1);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    read(in_order);\n    read(post_order);\n    build(0, n - 1, 0, n - 1, 0);\n    \n    for(int i = 0; i < n; i++){\n        for(size_t j = 0; j < vec[i].size(); j++){\n            if(i == 0 && j == 0) cout << vec[i][j];\n            else cout << \" \" << vec[i][j];\n        }\n    }\n    cout << endl;\n    return 0;\n}\n```\n# 先序遍历\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 21 Sep 21:39:43 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 107;\nint in_order[maxn], post_order[maxn];\nstring line;\nint n;\nvector<int> vec;\n\nvoid read(int* s){\n    getline(cin, line);\n    stringstream ss;\n    ss.str(line);\n    n = 0;\n    int x;\n    \n    while(ss >> x){\n        s[n++] = x;\n    }\n}\n\nint findd(int x){\n    int i;\n    for(i = 0; i < n; i++){\n        if(in_order[i] == x) break;\n    }\n    return i;\n}\n\nvoid build(int l1, int r1, int l2, int r2){\n    if(l1 > r1) return;\n    int v = post_order[r2];\n    vec.push_back(v);\n    int pos = findd(v);\n    int len = pos - l1;\n    build(l1, l1 + len - 1, l2, l2 + len - 1);\n    build(l1 + len + 1, r1, l2 + len, r2 - 1);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    read(in_order);\n    read(post_order);\n    build(0, n - 1, 0, n - 1);\n    for(size_t i = 0; i < vec.size(); i++){\n        if(i == 0) cout << vec[i];\n        else cout << \" \" << vec[i];\n    }\n    cout << endl;\n    return 0;\n}\n```\n","source":"_posts/二叉树中序和后序遍历-层序和先序遍历.md","raw":"---\ntitle: 二叉树中序和后序遍历->层序和先序遍历\ndate: 2018-09-22 00:39:20\ncategories:\n- Template\ntags:\n- 二叉树\n---\n给定一个二叉树的中序遍历和后序遍历求出其层序遍历和先序遍历。\n<!--more-->\n# 建成一棵二叉树\n```C++\nint in_order[maxn], post_order[maxn], lch[maxn], rch[maxn];\n//把in_order[l1...r1]和post_order[l2...r2]建成一棵二叉树，返回树根\nint build(int l1, int r1, int l2, int r2){\n    if(l1 > r1) return 0;\n    int v = post_order[r2];\n    int pos = 0;\n    while(in_order[pos] != v) pos++;\n    int len = pos - l1;\n    lch[v] = build(l1, l1 + len - 1, l2, l2 + len - 1);\n    rch[v] = build(l1 + len + 1, r1, l2 + len, l2 - 1);\n    return v;\n}\n```\n# 层序遍历\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 21 Sep 21:39:43 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 107;\nint in_order[maxn], post_order[maxn];\nstring line;\nint n;\nvector<int> vec[maxn];\n\nvoid read(int* s){\n    getline(cin, line);\n    stringstream ss;\n    ss.str(line);\n    n = 0;\n    int x;\n    \n    while(ss >> x){\n        s[n++] = x;\n    }\n}\n\nint findd(int x){\n    int i;\n    for(i = 0; i < n; i++){\n        if(in_order[i] == x) break;\n    }\n    return i;\n}\n\nvoid build(int l1, int r1, int l2, int r2, int l){\n    if(l1 > r1) return;\n    int v = post_order[r2];\n    vec[l].push_back(v);\n    int pos = findd(v);\n    int len = pos - l1;\n    build(l1, l1 + len - 1, l2, l2 + len - 1, l + 1);\n    build(l1 + len + 1, r1, l2 + len, r2 - 1, l + 1);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    read(in_order);\n    read(post_order);\n    build(0, n - 1, 0, n - 1, 0);\n    \n    for(int i = 0; i < n; i++){\n        for(size_t j = 0; j < vec[i].size(); j++){\n            if(i == 0 && j == 0) cout << vec[i][j];\n            else cout << \" \" << vec[i][j];\n        }\n    }\n    cout << endl;\n    return 0;\n}\n```\n# 先序遍历\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Fri 21 Sep 21:39:43 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 107;\nint in_order[maxn], post_order[maxn];\nstring line;\nint n;\nvector<int> vec;\n\nvoid read(int* s){\n    getline(cin, line);\n    stringstream ss;\n    ss.str(line);\n    n = 0;\n    int x;\n    \n    while(ss >> x){\n        s[n++] = x;\n    }\n}\n\nint findd(int x){\n    int i;\n    for(i = 0; i < n; i++){\n        if(in_order[i] == x) break;\n    }\n    return i;\n}\n\nvoid build(int l1, int r1, int l2, int r2){\n    if(l1 > r1) return;\n    int v = post_order[r2];\n    vec.push_back(v);\n    int pos = findd(v);\n    int len = pos - l1;\n    build(l1, l1 + len - 1, l2, l2 + len - 1);\n    build(l1 + len + 1, r1, l2 + len, r2 - 1);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    \n    read(in_order);\n    read(post_order);\n    build(0, n - 1, 0, n - 1);\n    for(size_t i = 0; i < vec.size(); i++){\n        if(i == 0) cout << vec[i];\n        else cout << \" \" << vec[i];\n    }\n    cout << endl;\n    return 0;\n}\n```\n","slug":"二叉树中序和后序遍历-层序和先序遍历","published":1,"updated":"2019-08-20T14:40:54.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m1001x30vnpcll4toy","content":"<p>给定一个二叉树的中序遍历和后序遍历求出其层序遍历和先序遍历。</p>\n<a id=\"more\"></a>\n<h1 id=\"建成一棵二叉树\"><a href=\"#建成一棵二叉树\" class=\"headerlink\" title=\"建成一棵二叉树\"></a>建成一棵二叉树</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> in_order[maxn], post_order[maxn], lch[maxn], rch[maxn];</span><br><span class=\"line\"><span class=\"comment\">//把in_order[l1...r1]和post_order[l2...r2]建成一棵二叉树，返回树根</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l1, <span class=\"keyword\">int</span> r1, <span class=\"keyword\">int</span> l2, <span class=\"keyword\">int</span> r2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = post_order[r2];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in_order[pos] != v) pos++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pos - l1;</span><br><span class=\"line\">    lch[v] = build(l1, l1 + len - <span class=\"number\">1</span>, l2, l2 + len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    rch[v] = build(l1 + len + <span class=\"number\">1</span>, r1, l2 + len, l2 - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"层序遍历\"><a href=\"#层序遍历\" class=\"headerlink\" title=\"层序遍历\"></a>层序遍历</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 21 Sep 21:39:43 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">107</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> in_order[maxn], post_order[maxn];</span><br><span class=\"line\"><span class=\"built_in\">string</span> line;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>* s)</span></span>&#123;</span><br><span class=\"line\">    getline(<span class=\"built_in\">cin</span>, line);</span><br><span class=\"line\">    <span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">    ss.str(line);</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss &gt;&gt; x)&#123;</span><br><span class=\"line\">        s[n++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findd</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in_order[i] == x) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l1, <span class=\"keyword\">int</span> r1, <span class=\"keyword\">int</span> l2, <span class=\"keyword\">int</span> r2, <span class=\"keyword\">int</span> l)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = post_order[r2];</span><br><span class=\"line\">    vec[l].push_back(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = findd(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pos - l1;</span><br><span class=\"line\">    build(l1, l1 + len - <span class=\"number\">1</span>, l2, l2 + len - <span class=\"number\">1</span>, l + <span class=\"number\">1</span>);</span><br><span class=\"line\">    build(l1 + len + <span class=\"number\">1</span>, r1, l2 + len, r2 - <span class=\"number\">1</span>, l + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    read(in_order);</span><br><span class=\"line\">    read(post_order);</span><br><span class=\"line\">    build(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; vec[i].size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> &amp;&amp; j == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; vec[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"先序遍历\"><a href=\"#先序遍历\" class=\"headerlink\" title=\"先序遍历\"></a>先序遍历</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 21 Sep 21:39:43 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">107</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> in_order[maxn], post_order[maxn];</span><br><span class=\"line\"><span class=\"built_in\">string</span> line;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>* s)</span></span>&#123;</span><br><span class=\"line\">    getline(<span class=\"built_in\">cin</span>, line);</span><br><span class=\"line\">    <span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">    ss.str(line);</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss &gt;&gt; x)&#123;</span><br><span class=\"line\">        s[n++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findd</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in_order[i] == x) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l1, <span class=\"keyword\">int</span> r1, <span class=\"keyword\">int</span> l2, <span class=\"keyword\">int</span> r2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = post_order[r2];</span><br><span class=\"line\">    vec.push_back(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = findd(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pos - l1;</span><br><span class=\"line\">    build(l1, l1 + len - <span class=\"number\">1</span>, l2, l2 + len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    build(l1 + len + <span class=\"number\">1</span>, r1, l2 + len, r2 - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    read(in_order);</span><br><span class=\"line\">    read(post_order);</span><br><span class=\"line\">    build(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>给定一个二叉树的中序遍历和后序遍历求出其层序遍历和先序遍历。</p>","more":"<h1 id=\"建成一棵二叉树\"><a href=\"#建成一棵二叉树\" class=\"headerlink\" title=\"建成一棵二叉树\"></a>建成一棵二叉树</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> in_order[maxn], post_order[maxn], lch[maxn], rch[maxn];</span><br><span class=\"line\"><span class=\"comment\">//把in_order[l1...r1]和post_order[l2...r2]建成一棵二叉树，返回树根</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l1, <span class=\"keyword\">int</span> r1, <span class=\"keyword\">int</span> l2, <span class=\"keyword\">int</span> r2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = post_order[r2];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in_order[pos] != v) pos++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pos - l1;</span><br><span class=\"line\">    lch[v] = build(l1, l1 + len - <span class=\"number\">1</span>, l2, l2 + len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    rch[v] = build(l1 + len + <span class=\"number\">1</span>, r1, l2 + len, l2 - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"层序遍历\"><a href=\"#层序遍历\" class=\"headerlink\" title=\"层序遍历\"></a>层序遍历</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 21 Sep 21:39:43 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">107</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> in_order[maxn], post_order[maxn];</span><br><span class=\"line\"><span class=\"built_in\">string</span> line;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>* s)</span></span>&#123;</span><br><span class=\"line\">    getline(<span class=\"built_in\">cin</span>, line);</span><br><span class=\"line\">    <span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">    ss.str(line);</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss &gt;&gt; x)&#123;</span><br><span class=\"line\">        s[n++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findd</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in_order[i] == x) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l1, <span class=\"keyword\">int</span> r1, <span class=\"keyword\">int</span> l2, <span class=\"keyword\">int</span> r2, <span class=\"keyword\">int</span> l)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = post_order[r2];</span><br><span class=\"line\">    vec[l].push_back(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = findd(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pos - l1;</span><br><span class=\"line\">    build(l1, l1 + len - <span class=\"number\">1</span>, l2, l2 + len - <span class=\"number\">1</span>, l + <span class=\"number\">1</span>);</span><br><span class=\"line\">    build(l1 + len + <span class=\"number\">1</span>, r1, l2 + len, r2 - <span class=\"number\">1</span>, l + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    read(in_order);</span><br><span class=\"line\">    read(post_order);</span><br><span class=\"line\">    build(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; vec[i].size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> &amp;&amp; j == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; vec[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"先序遍历\"><a href=\"#先序遍历\" class=\"headerlink\" title=\"先序遍历\"></a>先序遍历</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Fri 21 Sep 21:39:43 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">107</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> in_order[maxn], post_order[maxn];</span><br><span class=\"line\"><span class=\"built_in\">string</span> line;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>* s)</span></span>&#123;</span><br><span class=\"line\">    getline(<span class=\"built_in\">cin</span>, line);</span><br><span class=\"line\">    <span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">    ss.str(line);</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss &gt;&gt; x)&#123;</span><br><span class=\"line\">        s[n++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findd</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in_order[i] == x) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l1, <span class=\"keyword\">int</span> r1, <span class=\"keyword\">int</span> l2, <span class=\"keyword\">int</span> r2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = post_order[r2];</span><br><span class=\"line\">    vec.push_back(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = findd(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pos - l1;</span><br><span class=\"line\">    build(l1, l1 + len - <span class=\"number\">1</span>, l2, l2 + len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    build(l1 + len + <span class=\"number\">1</span>, r1, l2 + len, r2 - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    read(in_order);</span><br><span class=\"line\">    read(post_order);</span><br><span class=\"line\">    build(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"倒水问题","date":"2018-12-31T01:22:54.000Z","_content":"设有3个没有刻度的杯子的容量分别是a，b，c，最初只有第3个杯子装满了c升水，其他两个杯子为空。最少需要倒多少升水才能让某一个杯子中的水有d升。如果无法做到恰好有d升，就让某一个杯子里的水是d'升，其中d'< d，并且尽量接近d。\n<!--more-->\n\n# 解法\n解法和八数码问题一样，关键在于建立图模型，进行状态转移，把状态想象成图中的结点。\n![fill.png](/fill.png)\n问题形式有总倒水量最少和总步数最少。如果是总倒水量最少，可以用优先队列priority_queue来维护每个状态当前的总倒水量；如果是总步数最少，就可以用队列来维护状态，采用BFS进行搜索。\n\n# 总倒水量最少\n\n题目链接[Uva10603-Fill](https://vjudge.net/problem/UVA-10603)\n\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu 27 Dec 11:54:46 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 200 + 7;\nint T;\nstruct Node{\n    int v[3];\n    int vol;\n    bool operator < (const Node& nd) const {\n        return vol > nd.vol;\n    }\n};\nint ans[maxn];\nbool vis[maxn][maxn];\nint cap[3];\n\nvoid update_ans(Node nd){\n    for(int i = 0; i < 3; i++){\n        int d = nd.v[i];\n        if(ans[d] < 0 || nd.vol < ans[d]) ans[d] = nd.vol;\n    }\n}\n\nvoid solve(int a, int b, int c, int d){\n    priority_queue<Node> q;\n    Node FirstItem;\n    FirstItem.v[0] = 0, FirstItem.v[1] = 0, FirstItem.v[2] = c;\n    FirstItem.vol = 0;\n    q.push(FirstItem);\n    vis[0][0] = 1;\n    while(!q.empty()){\n        Node nd = q.top();\n        q.pop();\n        update_ans(nd);\n        if(ans[d] >= 0) break;\n        for(int i = 0; i < 3; i++){\n            for(int j = 0; j < 3; j++){\n                if(i == j) continue;\n                if(nd.v[i] == 0 || nd.v[j] == cap[j]) continue;\n                int amount = min(cap[j], nd.v[i] + nd.v[j]) - nd.v[j];\n                Node NewItem;\n                memcpy(&NewItem, &nd, sizeof(NewItem));\n                NewItem.v[i] -= amount;\n                NewItem.v[j] += amount;\n                NewItem.vol += amount;\n                if(!vis[NewItem.v[0]][NewItem.v[1]]){\n                    q.push(NewItem);\n                    vis[NewItem.v[0]][NewItem.v[1]] = 1;\n                }\n            }\n        }\n    }\n    for(int i = d; i >= 0; i--){\n        if(ans[i] >= 0){\n            cout << ans[i] << \" \" << i << endl;\n            break;\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    cin >> T;\n    while(T--){\n        memset(vis, 0, sizeof(vis));\n        memset(ans, -1, sizeof(ans));\n        int a, b, c, d;\n        cin >> a >> b >> c >> d;\n        cap[0] = a, cap[1] = b, cap[2] = c;\n        solve(a, b, c, d);\n    }\n    return 0;\n}\n```\n\n# 总步数最少\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 31 Dec 09:44:46 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 200 + 7;\nstruct Node{\n    int v[3];\n    int dis;\n};\nint cap[3];\nbool vis[maxn][maxn];\nint ans[maxn];\n\nvoid update_ans(Node& u){\n    for(int i = 0; i < 3; i++){\n        int d = u.v[i];\n        if(ans[d] < 0 || u.dis < ans[d]) ans[d] = u.dis;\n    }\n}\n\nvoid solve(int a, int b, int c, int d){\n    queue<Node> que;\n    Node FirstItem;\n    FirstItem.v[0] = 0, FirstItem.v[1] = 0, FirstItem.v[2] = c;\n    FirstItem.dis = 0;\n    que.push(FirstItem);\n    vis[0][0] = 1;\n\n    while(!que.empty()){\n        Node nd = que.front();\n        que.pop();\n        update_ans(nd);\n        if(ans[d] >= 0) break;\n        for(int i = 0; i < 3; i++){\n            for(int j = 0; j < 3; j++){\n                if(i == j) continue;\n                if(nd.v[i] == 0 || nd.v[j] == cap[j]) continue;\n                int amount = min(cap[j], nd.v[i] + nd.v[j]) - nd.v[j];\n                Node NewItem;\n                memcpy(NewItem.v, nd.v, sizeof(NewItem.v));\n                NewItem.v[i] -= amount;\n                NewItem.v[j] += amount;\n                NewItem.dis = nd.dis + 1;\n                if(!vis[NewItem.v[0]][NewItem.v[1]]){\n                    que.push(NewItem);\n                    vis[NewItem.v[0]][NewItem.v[1]] = 1;\n                }\n            }\n        }\n    }\n\n    for(int i = d; i >= 0; i--){\n        if(ans[i] >= 0){\n            cout << ans[i] << \" \" << i << endl;\n            break;\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    memset(vis, 0, sizeof(vis));\n    memset(ans, -1, sizeof(ans));\n    int a, b, c, d;\n    cin >> a >> b >> c >> d;\n    cap[0] = a, cap[1] = b, cap[2] = c;\n    solve(a, b, c, d);\n\n    return 0;\n}\n```","source":"_posts/倒水问题.md","raw":"---\ntitle: 倒水问题\ndate: 2018-12-31 09:22:54\ncategories:\n- Summary\ntags:\n- 状态转移\n---\n设有3个没有刻度的杯子的容量分别是a，b，c，最初只有第3个杯子装满了c升水，其他两个杯子为空。最少需要倒多少升水才能让某一个杯子中的水有d升。如果无法做到恰好有d升，就让某一个杯子里的水是d'升，其中d'< d，并且尽量接近d。\n<!--more-->\n\n# 解法\n解法和八数码问题一样，关键在于建立图模型，进行状态转移，把状态想象成图中的结点。\n![fill.png](/fill.png)\n问题形式有总倒水量最少和总步数最少。如果是总倒水量最少，可以用优先队列priority_queue来维护每个状态当前的总倒水量；如果是总步数最少，就可以用队列来维护状态，采用BFS进行搜索。\n\n# 总倒水量最少\n\n题目链接[Uva10603-Fill](https://vjudge.net/problem/UVA-10603)\n\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu 27 Dec 11:54:46 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 200 + 7;\nint T;\nstruct Node{\n    int v[3];\n    int vol;\n    bool operator < (const Node& nd) const {\n        return vol > nd.vol;\n    }\n};\nint ans[maxn];\nbool vis[maxn][maxn];\nint cap[3];\n\nvoid update_ans(Node nd){\n    for(int i = 0; i < 3; i++){\n        int d = nd.v[i];\n        if(ans[d] < 0 || nd.vol < ans[d]) ans[d] = nd.vol;\n    }\n}\n\nvoid solve(int a, int b, int c, int d){\n    priority_queue<Node> q;\n    Node FirstItem;\n    FirstItem.v[0] = 0, FirstItem.v[1] = 0, FirstItem.v[2] = c;\n    FirstItem.vol = 0;\n    q.push(FirstItem);\n    vis[0][0] = 1;\n    while(!q.empty()){\n        Node nd = q.top();\n        q.pop();\n        update_ans(nd);\n        if(ans[d] >= 0) break;\n        for(int i = 0; i < 3; i++){\n            for(int j = 0; j < 3; j++){\n                if(i == j) continue;\n                if(nd.v[i] == 0 || nd.v[j] == cap[j]) continue;\n                int amount = min(cap[j], nd.v[i] + nd.v[j]) - nd.v[j];\n                Node NewItem;\n                memcpy(&NewItem, &nd, sizeof(NewItem));\n                NewItem.v[i] -= amount;\n                NewItem.v[j] += amount;\n                NewItem.vol += amount;\n                if(!vis[NewItem.v[0]][NewItem.v[1]]){\n                    q.push(NewItem);\n                    vis[NewItem.v[0]][NewItem.v[1]] = 1;\n                }\n            }\n        }\n    }\n    for(int i = d; i >= 0; i--){\n        if(ans[i] >= 0){\n            cout << ans[i] << \" \" << i << endl;\n            break;\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    cin >> T;\n    while(T--){\n        memset(vis, 0, sizeof(vis));\n        memset(ans, -1, sizeof(ans));\n        int a, b, c, d;\n        cin >> a >> b >> c >> d;\n        cap[0] = a, cap[1] = b, cap[2] = c;\n        solve(a, b, c, d);\n    }\n    return 0;\n}\n```\n\n# 总步数最少\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 31 Dec 09:44:46 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 200 + 7;\nstruct Node{\n    int v[3];\n    int dis;\n};\nint cap[3];\nbool vis[maxn][maxn];\nint ans[maxn];\n\nvoid update_ans(Node& u){\n    for(int i = 0; i < 3; i++){\n        int d = u.v[i];\n        if(ans[d] < 0 || u.dis < ans[d]) ans[d] = u.dis;\n    }\n}\n\nvoid solve(int a, int b, int c, int d){\n    queue<Node> que;\n    Node FirstItem;\n    FirstItem.v[0] = 0, FirstItem.v[1] = 0, FirstItem.v[2] = c;\n    FirstItem.dis = 0;\n    que.push(FirstItem);\n    vis[0][0] = 1;\n\n    while(!que.empty()){\n        Node nd = que.front();\n        que.pop();\n        update_ans(nd);\n        if(ans[d] >= 0) break;\n        for(int i = 0; i < 3; i++){\n            for(int j = 0; j < 3; j++){\n                if(i == j) continue;\n                if(nd.v[i] == 0 || nd.v[j] == cap[j]) continue;\n                int amount = min(cap[j], nd.v[i] + nd.v[j]) - nd.v[j];\n                Node NewItem;\n                memcpy(NewItem.v, nd.v, sizeof(NewItem.v));\n                NewItem.v[i] -= amount;\n                NewItem.v[j] += amount;\n                NewItem.dis = nd.dis + 1;\n                if(!vis[NewItem.v[0]][NewItem.v[1]]){\n                    que.push(NewItem);\n                    vis[NewItem.v[0]][NewItem.v[1]] = 1;\n                }\n            }\n        }\n    }\n\n    for(int i = d; i >= 0; i--){\n        if(ans[i] >= 0){\n            cout << ans[i] << \" \" << i << endl;\n            break;\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    memset(vis, 0, sizeof(vis));\n    memset(ans, -1, sizeof(ans));\n    int a, b, c, d;\n    cin >> a >> b >> c >> d;\n    cap[0] = a, cap[1] = b, cap[2] = c;\n    solve(a, b, c, d);\n\n    return 0;\n}\n```","slug":"倒水问题","published":1,"updated":"2019-08-20T14:41:05.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m1001y30vn9v2rcdne","content":"<p>设有3个没有刻度的杯子的容量分别是a，b，c，最初只有第3个杯子装满了c升水，其他两个杯子为空。最少需要倒多少升水才能让某一个杯子中的水有d升。如果无法做到恰好有d升，就让某一个杯子里的水是d’升，其中d’&lt; d，并且尽量接近d。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>解法和八数码问题一样，关键在于建立图模型，进行状态转移，把状态想象成图中的结点。<br><img src=\"/2018/12/31/倒水问题/fill.png\" alt=\"fill.png\"><br>问题形式有总倒水量最少和总步数最少。如果是总倒水量最少，可以用优先队列priority_queue来维护每个状态当前的总倒水量；如果是总步数最少，就可以用队列来维护状态，采用BFS进行搜索。</p>\n<h1 id=\"总倒水量最少\"><a href=\"#总倒水量最少\" class=\"headerlink\" title=\"总倒水量最少\"></a>总倒水量最少</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-10603\" target=\"_blank\" rel=\"noopener\">Uva10603-Fill</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu 27 Dec 11:54:46 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> vol;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Node&amp; nd) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vol &gt; nd.vol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cap[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_ans</span><span class=\"params\">(Node nd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = nd.v[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[d] &lt; <span class=\"number\">0</span> || nd.vol &lt; ans[d]) ans[d] = nd.vol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;Node&gt; q;</span><br><span class=\"line\">    Node FirstItem;</span><br><span class=\"line\">    FirstItem.v[<span class=\"number\">0</span>] = <span class=\"number\">0</span>, FirstItem.v[<span class=\"number\">1</span>] = <span class=\"number\">0</span>, FirstItem.v[<span class=\"number\">2</span>] = c;</span><br><span class=\"line\">    FirstItem.vol = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(FirstItem);</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        Node nd = q.top();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        update_ans(nd);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[d] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nd.v[i] == <span class=\"number\">0</span> || nd.v[j] == cap[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> amount = min(cap[j], nd.v[i] + nd.v[j]) - nd.v[j];</span><br><span class=\"line\">                Node NewItem;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(&amp;NewItem, &amp;nd, <span class=\"keyword\">sizeof</span>(NewItem));</span><br><span class=\"line\">                NewItem.v[i] -= amount;</span><br><span class=\"line\">                NewItem.v[j] += amount;</span><br><span class=\"line\">                NewItem.vol += amount;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[NewItem.v[<span class=\"number\">0</span>]][NewItem.v[<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\">                    q.push(NewItem);</span><br><span class=\"line\">                    vis[NewItem.v[<span class=\"number\">0</span>]][NewItem.v[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = d; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(ans, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class=\"line\">        cap[<span class=\"number\">0</span>] = a, cap[<span class=\"number\">1</span>] = b, cap[<span class=\"number\">2</span>] = c;</span><br><span class=\"line\">        solve(a, b, c, d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总步数最少\"><a href=\"#总步数最少\" class=\"headerlink\" title=\"总步数最少\"></a>总步数最少</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 31 Dec 09:44:46 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cap[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_ans</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = u.v[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[d] &lt; <span class=\"number\">0</span> || u.dis &lt; ans[d]) ans[d] = u.dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    Node FirstItem;</span><br><span class=\"line\">    FirstItem.v[<span class=\"number\">0</span>] = <span class=\"number\">0</span>, FirstItem.v[<span class=\"number\">1</span>] = <span class=\"number\">0</span>, FirstItem.v[<span class=\"number\">2</span>] = c;</span><br><span class=\"line\">    FirstItem.dis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(FirstItem);</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node nd = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        update_ans(nd);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[d] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nd.v[i] == <span class=\"number\">0</span> || nd.v[j] == cap[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> amount = min(cap[j], nd.v[i] + nd.v[j]) - nd.v[j];</span><br><span class=\"line\">                Node NewItem;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(NewItem.v, nd.v, <span class=\"keyword\">sizeof</span>(NewItem.v));</span><br><span class=\"line\">                NewItem.v[i] -= amount;</span><br><span class=\"line\">                NewItem.v[j] += amount;</span><br><span class=\"line\">                NewItem.dis = nd.dis + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[NewItem.v[<span class=\"number\">0</span>]][NewItem.v[<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\">                    que.push(NewItem);</span><br><span class=\"line\">                    vis[NewItem.v[<span class=\"number\">0</span>]][NewItem.v[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = d; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ans, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class=\"line\">    cap[<span class=\"number\">0</span>] = a, cap[<span class=\"number\">1</span>] = b, cap[<span class=\"number\">2</span>] = c;</span><br><span class=\"line\">    solve(a, b, c, d);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>设有3个没有刻度的杯子的容量分别是a，b，c，最初只有第3个杯子装满了c升水，其他两个杯子为空。最少需要倒多少升水才能让某一个杯子中的水有d升。如果无法做到恰好有d升，就让某一个杯子里的水是d’升，其中d’&lt; d，并且尽量接近d。</p>","more":"<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>解法和八数码问题一样，关键在于建立图模型，进行状态转移，把状态想象成图中的结点。<br><img src=\"/2018/12/31/倒水问题/fill.png\" alt=\"fill.png\"><br>问题形式有总倒水量最少和总步数最少。如果是总倒水量最少，可以用优先队列priority_queue来维护每个状态当前的总倒水量；如果是总步数最少，就可以用队列来维护状态，采用BFS进行搜索。</p>\n<h1 id=\"总倒水量最少\"><a href=\"#总倒水量最少\" class=\"headerlink\" title=\"总倒水量最少\"></a>总倒水量最少</h1><p>题目链接<a href=\"https://vjudge.net/problem/UVA-10603\" target=\"_blank\" rel=\"noopener\">Uva10603-Fill</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu 27 Dec 11:54:46 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> vol;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Node&amp; nd) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vol &gt; nd.vol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cap[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_ans</span><span class=\"params\">(Node nd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = nd.v[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[d] &lt; <span class=\"number\">0</span> || nd.vol &lt; ans[d]) ans[d] = nd.vol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt;Node&gt; q;</span><br><span class=\"line\">    Node FirstItem;</span><br><span class=\"line\">    FirstItem.v[<span class=\"number\">0</span>] = <span class=\"number\">0</span>, FirstItem.v[<span class=\"number\">1</span>] = <span class=\"number\">0</span>, FirstItem.v[<span class=\"number\">2</span>] = c;</span><br><span class=\"line\">    FirstItem.vol = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(FirstItem);</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        Node nd = q.top();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        update_ans(nd);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[d] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nd.v[i] == <span class=\"number\">0</span> || nd.v[j] == cap[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> amount = min(cap[j], nd.v[i] + nd.v[j]) - nd.v[j];</span><br><span class=\"line\">                Node NewItem;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(&amp;NewItem, &amp;nd, <span class=\"keyword\">sizeof</span>(NewItem));</span><br><span class=\"line\">                NewItem.v[i] -= amount;</span><br><span class=\"line\">                NewItem.v[j] += amount;</span><br><span class=\"line\">                NewItem.vol += amount;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[NewItem.v[<span class=\"number\">0</span>]][NewItem.v[<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\">                    q.push(NewItem);</span><br><span class=\"line\">                    vis[NewItem.v[<span class=\"number\">0</span>]][NewItem.v[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = d; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(ans, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class=\"line\">        cap[<span class=\"number\">0</span>] = a, cap[<span class=\"number\">1</span>] = b, cap[<span class=\"number\">2</span>] = c;</span><br><span class=\"line\">        solve(a, b, c, d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总步数最少\"><a href=\"#总步数最少\" class=\"headerlink\" title=\"总步数最少\"></a>总步数最少</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 31 Dec 09:44:46 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cap[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_ans</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = u.v[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[d] &lt; <span class=\"number\">0</span> || u.dis &lt; ans[d]) ans[d] = u.dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    Node FirstItem;</span><br><span class=\"line\">    FirstItem.v[<span class=\"number\">0</span>] = <span class=\"number\">0</span>, FirstItem.v[<span class=\"number\">1</span>] = <span class=\"number\">0</span>, FirstItem.v[<span class=\"number\">2</span>] = c;</span><br><span class=\"line\">    FirstItem.dis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(FirstItem);</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node nd = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        update_ans(nd);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[d] &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nd.v[i] == <span class=\"number\">0</span> || nd.v[j] == cap[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> amount = min(cap[j], nd.v[i] + nd.v[j]) - nd.v[j];</span><br><span class=\"line\">                Node NewItem;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(NewItem.v, nd.v, <span class=\"keyword\">sizeof</span>(NewItem.v));</span><br><span class=\"line\">                NewItem.v[i] -= amount;</span><br><span class=\"line\">                NewItem.v[j] += amount;</span><br><span class=\"line\">                NewItem.dis = nd.dis + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[NewItem.v[<span class=\"number\">0</span>]][NewItem.v[<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\">                    que.push(NewItem);</span><br><span class=\"line\">                    vis[NewItem.v[<span class=\"number\">0</span>]][NewItem.v[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = d; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ans, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class=\"line\">    cap[<span class=\"number\">0</span>] = a, cap[<span class=\"number\">1</span>] = b, cap[<span class=\"number\">2</span>] = c;</span><br><span class=\"line\">    solve(a, b, c, d);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"光栅化渲染(1)-算法总述","date":"2019-08-10T03:56:14.000Z","_content":"\n![discrete](/discrete.png)\n\n　　*光栅化也可以看做是针对由像素构成的平面的一种离散化。*\n<!--more-->\n\n# 光栅化算法\n　　光栅化渲染技术是一种十分常用的3D场景渲染技术。它同时也是GPU生成3D图形所采用的技术。\n　　光栅化的过程分为两个主要步骤：先将空间中的物体投影(透视投影)到成像平面上；再遍历图像中的每一个像素，检测是否在物体的投影区域内，如果在的话就用相应颜色填充该像素(Figure 1)。\n\n![Figure 1](/figure1.png)\n<center>Figure 1</center>\n\n　　*以上过程以三角面片为基本操作对象，三角面片由于几何求解方便一般作为构成3D物体的基本图元(Figure 2)。*\n\n![Figure 2](/figure2.jpg)\n<center>Figure 2</center>\n\n# Z-Buffer\n　　当有多个三角形相互重叠时，它们之上的某些点可能会投影到同一个像素位置，我们需要借助``z-buffer``来确定这种情况下像素用来显示哪个三角形的颜色（以及其它属性）。(Figure 3)\n\n![Figure 3](/figure3.png)\n<center>Figure 3</center>\n\n　　``z-buffer``其实就是一个二维矩阵，用来存储每个像素对应空间物体上某一点的深度。这样就可以在重叠的情况下找出距离相机最近的一点，用于像素的着色或其它属性操作。\n\n# 光栅化原理图\n　　其中``image-buffer``是一个二维数组，在之后的例子中用来保存每一个像素的颜色信息(RGB)，最后渲染结果以ppm（一种图片格式）的形式保存到本地。\n\n![Figure 4](/figure4.png)\n<center>Figure 4</center>\n\n# 参考链接\n\n[Scratchpixel-Rasterization: a Practical Implementation](https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/overview-rasterization-algorithm)\n\n\n","source":"_posts/光栅化渲染-1-算法总述.md","raw":"---\ntitle: 光栅化渲染(1)-算法总述\ndate: 2019-08-10 11:56:14\ncategories:\n- Computer Graphics\n- 光栅化渲染\ntags:\n- Rasterization\n---\n\n![discrete](/discrete.png)\n\n　　*光栅化也可以看做是针对由像素构成的平面的一种离散化。*\n<!--more-->\n\n# 光栅化算法\n　　光栅化渲染技术是一种十分常用的3D场景渲染技术。它同时也是GPU生成3D图形所采用的技术。\n　　光栅化的过程分为两个主要步骤：先将空间中的物体投影(透视投影)到成像平面上；再遍历图像中的每一个像素，检测是否在物体的投影区域内，如果在的话就用相应颜色填充该像素(Figure 1)。\n\n![Figure 1](/figure1.png)\n<center>Figure 1</center>\n\n　　*以上过程以三角面片为基本操作对象，三角面片由于几何求解方便一般作为构成3D物体的基本图元(Figure 2)。*\n\n![Figure 2](/figure2.jpg)\n<center>Figure 2</center>\n\n# Z-Buffer\n　　当有多个三角形相互重叠时，它们之上的某些点可能会投影到同一个像素位置，我们需要借助``z-buffer``来确定这种情况下像素用来显示哪个三角形的颜色（以及其它属性）。(Figure 3)\n\n![Figure 3](/figure3.png)\n<center>Figure 3</center>\n\n　　``z-buffer``其实就是一个二维矩阵，用来存储每个像素对应空间物体上某一点的深度。这样就可以在重叠的情况下找出距离相机最近的一点，用于像素的着色或其它属性操作。\n\n# 光栅化原理图\n　　其中``image-buffer``是一个二维数组，在之后的例子中用来保存每一个像素的颜色信息(RGB)，最后渲染结果以ppm（一种图片格式）的形式保存到本地。\n\n![Figure 4](/figure4.png)\n<center>Figure 4</center>\n\n# 参考链接\n\n[Scratchpixel-Rasterization: a Practical Implementation](https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/overview-rasterization-algorithm)\n\n\n","slug":"光栅化渲染-1-算法总述","published":1,"updated":"2019-09-01T08:38:51.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m2001z30vnz66b41pd","content":"<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/discrete.png\" alt=\"discrete\"></p>\n<p>　　<em>光栅化也可以看做是针对由像素构成的平面的一种离散化。</em></p>\n<a id=\"more\"></a>\n\n<h1 id=\"光栅化算法\"><a href=\"#光栅化算法\" class=\"headerlink\" title=\"光栅化算法\"></a>光栅化算法</h1><p>　　光栅化渲染技术是一种十分常用的3D场景渲染技术。它同时也是GPU生成3D图形所采用的技术。<br>　　光栅化的过程分为两个主要步骤：先将空间中的物体投影(透视投影)到成像平面上；再遍历图像中的每一个像素，检测是否在物体的投影区域内，如果在的话就用相应颜色填充该像素(Figure 1)。</p>\n<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/figure1.png\" alt=\"Figure 1\"></p>\n<center>Figure 1</center>\n\n<p>　　<em>以上过程以三角面片为基本操作对象，三角面片由于几何求解方便一般作为构成3D物体的基本图元(Figure 2)。</em></p>\n<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/figure2.jpg\" alt=\"Figure 2\"></p>\n<center>Figure 2</center>\n\n<h1 id=\"Z-Buffer\"><a href=\"#Z-Buffer\" class=\"headerlink\" title=\"Z-Buffer\"></a>Z-Buffer</h1><p>　　当有多个三角形相互重叠时，它们之上的某些点可能会投影到同一个像素位置，我们需要借助<code>z-buffer</code>来确定这种情况下像素用来显示哪个三角形的颜色（以及其它属性）。(Figure 3)</p>\n<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/figure3.png\" alt=\"Figure 3\"></p>\n<center>Figure 3</center>\n\n<p>　　<code>z-buffer</code>其实就是一个二维矩阵，用来存储每个像素对应空间物体上某一点的深度。这样就可以在重叠的情况下找出距离相机最近的一点，用于像素的着色或其它属性操作。</p>\n<h1 id=\"光栅化原理图\"><a href=\"#光栅化原理图\" class=\"headerlink\" title=\"光栅化原理图\"></a>光栅化原理图</h1><p>　　其中<code>image-buffer</code>是一个二维数组，在之后的例子中用来保存每一个像素的颜色信息(RGB)，最后渲染结果以ppm（一种图片格式）的形式保存到本地。</p>\n<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/figure4.png\" alt=\"Figure 4\"></p>\n<center>Figure 4</center>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/overview-rasterization-algorithm\" target=\"_blank\" rel=\"noopener\">Scratchpixel-Rasterization: a Practical Implementation</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/discrete.png\" alt=\"discrete\"></p>\n<p>　　<em>光栅化也可以看做是针对由像素构成的平面的一种离散化。</em></p>","more":"<h1 id=\"光栅化算法\"><a href=\"#光栅化算法\" class=\"headerlink\" title=\"光栅化算法\"></a>光栅化算法</h1><p>　　光栅化渲染技术是一种十分常用的3D场景渲染技术。它同时也是GPU生成3D图形所采用的技术。<br>　　光栅化的过程分为两个主要步骤：先将空间中的物体投影(透视投影)到成像平面上；再遍历图像中的每一个像素，检测是否在物体的投影区域内，如果在的话就用相应颜色填充该像素(Figure 1)。</p>\n<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/figure1.png\" alt=\"Figure 1\"></p>\n<center>Figure 1</center>\n\n<p>　　<em>以上过程以三角面片为基本操作对象，三角面片由于几何求解方便一般作为构成3D物体的基本图元(Figure 2)。</em></p>\n<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/figure2.jpg\" alt=\"Figure 2\"></p>\n<center>Figure 2</center>\n\n<h1 id=\"Z-Buffer\"><a href=\"#Z-Buffer\" class=\"headerlink\" title=\"Z-Buffer\"></a>Z-Buffer</h1><p>　　当有多个三角形相互重叠时，它们之上的某些点可能会投影到同一个像素位置，我们需要借助<code>z-buffer</code>来确定这种情况下像素用来显示哪个三角形的颜色（以及其它属性）。(Figure 3)</p>\n<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/figure3.png\" alt=\"Figure 3\"></p>\n<center>Figure 3</center>\n\n<p>　　<code>z-buffer</code>其实就是一个二维矩阵，用来存储每个像素对应空间物体上某一点的深度。这样就可以在重叠的情况下找出距离相机最近的一点，用于像素的着色或其它属性操作。</p>\n<h1 id=\"光栅化原理图\"><a href=\"#光栅化原理图\" class=\"headerlink\" title=\"光栅化原理图\"></a>光栅化原理图</h1><p>　　其中<code>image-buffer</code>是一个二维数组，在之后的例子中用来保存每一个像素的颜色信息(RGB)，最后渲染结果以ppm（一种图片格式）的形式保存到本地。</p>\n<p><img src=\"/2019/08/10/光栅化渲染-1-算法总述/figure4.png\" alt=\"Figure 4\"></p>\n<center>Figure 4</center>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/overview-rasterization-algorithm\" target=\"_blank\" rel=\"noopener\">Scratchpixel-Rasterization: a Practical Implementation</a></p>"},{"title":"光栅化渲染(2)-透视投影","date":"2019-08-11T02:55:42.000Z","_content":"\n![perspective projection](/perspective.png)\n\n　　*画家用透视投影的方法作画，以获得接近真实三维物体的视觉效果。*\n<!--more-->\n\n# 透视投影\n　　透视投影是三维投影的一种，是将三维空间中的点映射到二维平面上的方法。由于目前绝大多数图形数据的显示方式仍是二维的，因此三维投影的在计算机图形学等方面应用广泛。\n\n# 投影原理\n　　透视投影符合人眼成像的特点，以人眼作为视点，在视网膜上的图像就是空间物体投影的结果。\n　　如图(Figure 1)，点 $P$ 为空间中的一点，$P^\\prime$ 为其投影在成像平面上的点，$A$ 为视点。\n\n![figure 1](/figure1.png)\n<center>Figure 1</center>\n\n　　由 $\\Delta ABC$ 和 $\\Delta AB^\\prime C^\\prime$ 相似可以得到：\n\n$$\n\\cfrac{BC}{AB}=\\cfrac{B^\\prime C^\\prime}{AB^\\prime}，即 \\cfrac{P.y}{P.z}=\\cfrac{P^\\prime.y}{near}\n$$\n\n　　其中``near``为视点到成像平面的距离。\n\n$$P^\\prime.y=\\cfrac{near * P.y}{P.z}$$\n\n　　同理可得，\n\n$$P^\\prime.x=\\cfrac{near * P.x}{P.z}$$\n\n　　由于默认情况下相机指向z轴的负半轴(Figure 2)，所以实际上要对相机坐标系下的z轴坐标取反。\n\n![figure 2](/figure2.png)\n<center>Figure 2</center>\n\n$$\nP_{screen}.x = \\cfrac{near * P_{camera}.x}{-P_{camera}.z} \\\\\\\\\nP_{screen}.y = \\cfrac{near * P_{camera}.y}{-P_{camera}.z}\n$$\n\n　　假设图片的尺寸为 $W \\* H$，那么投影后的坐标与该点可见性的关系如下：\n\n$$\nvisible=\n\\begin{cases}\n    yes & |P_{screen}.x| <= \\cfrac{W}{2} \\quad \\text{or} \\quad |P_{screen}.y| <= \\cfrac{H}{2} \\\\\\\\\n    no & \\text{otherwise}\n\\end{cases}\n$$\n\n# 坐标系变换\n　　我们的目标是获得投影点的像素坐标，所以要对坐标系进行变换，由成像平面坐标系变为光栅坐标系。\n　　相机成像平面上一点 $P_{screen}$ (Figure 3)\n\n![figure 3](/figure3.png)\n<center>Figure 3</center>\n\n　　先将其转换为 $NDC$ 坐标系下(Figure 4)，范围为 $[0, 1]$\n\n![figure 4](/figure4.png)\n<center>Figure 4</center>\n\n$$\nP_{normalized}.x=\\cfrac{P_{screen}.x + W/2}{W} \\\\\\\\\nP_{normalized}.y=\\cfrac{P_{screen}.y + H/2}{H}\n$$\n\n　　最后转换为光栅化坐标(Figure 5)\n\n![figure 5](/figure5.png)\n<center>Figure 5</center>\n\n$$\nP_{raster}.x=P_{normalized}.x * pixelWidth \\\\\\\\\nP_{raster}.y=(1-P_{normalized}.y) * pixelHeight\n$$\n\n　　*注意区分* $W$ *和* $pixelWidth$，*W指的是图片的物理尺寸，以 m 或 mm 等为单位，pixelWidth指的是图片的横向像素的个数。*\n　　由此可得**相机坐标系**到**光栅坐标系**的转换公式：\n\n$$\nP_{raster}.x=(1 + \\cfrac{near * P_{camera}.x}{-W * P_{camera}.z})* 0.5 * pixelWidth \\\\\\\\\nP_{raster}.y=(1 - \\cfrac{near * P_{camera}.y}{-W * P_{camera}.z}) * 0.5 * pixelHeight\n$$\n\n# 拓展\n　　上面提到的 $NDC$ 坐标范围为 $[0, 1]$，实际上在GPU的实现中， $NDC$ 坐标范围为 $[-1, 1]$。另外讨论更一般的情况，假设成像平面坐标系的 $x$　坐标范围为 $[l, r]$，$y$ 坐标范围为 $[b, t]$。\n　　此时由成像平面坐标系到 $NDC$ 坐标系的映射关系可以通过以下方式求解，先考虑 $x$：\n　　由 $l<x<r$，可得 $0<x-l<r-l$，各项同时除以 $(r-l)$：\n\n$$\n0 < \\cfrac{x-l}{r-l} < 1\n$$\n\n　　公式各项同时乘以 $2$ 再减去 $1$：\n\n$$\n-1 < 2 * \\cfrac{x-l}{r-l} - 1 < 1\n$$\n\n　　化简得：\n\n$$\n-1 < \\cfrac{2x}{r-l}-\\cfrac{r+l}{r-l} < 1，即 \\quad P_{normalized}.x = \\cfrac{2*P_{screen}.x}{r-l}-\\cfrac{r+l}{r-l}\n$$\n\n　　同理可得：\n\n$$\n-1 < \\cfrac{2y}{t-b}-\\cfrac{t+b}{t-b} < 1，即 \\quad P_{normalized}.y = \\cfrac{2*P_{screen}.y}{t-b}-\\cfrac{t+b}{t-b}\n$$\n\n# 参考链接\n\n[Scratchpixel-Mathematics of Computing the 2D Coordinates of a 3D Point](https://www.scratchapixel.com/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point/mathematics-computing-2d-coordinates-of-3d-points)\n[Scratchpixel-The Projection Stage](https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/projection-stage)\n","source":"_posts/光栅化渲染-2-透视投影.md","raw":"---\ntitle: 光栅化渲染(2)-透视投影\ndate: 2019-08-11 10:55:42\ncategories:\n- Computer Graphics\n- 光栅化渲染\ntags:\n- rasterization\n---\n\n![perspective projection](/perspective.png)\n\n　　*画家用透视投影的方法作画，以获得接近真实三维物体的视觉效果。*\n<!--more-->\n\n# 透视投影\n　　透视投影是三维投影的一种，是将三维空间中的点映射到二维平面上的方法。由于目前绝大多数图形数据的显示方式仍是二维的，因此三维投影的在计算机图形学等方面应用广泛。\n\n# 投影原理\n　　透视投影符合人眼成像的特点，以人眼作为视点，在视网膜上的图像就是空间物体投影的结果。\n　　如图(Figure 1)，点 $P$ 为空间中的一点，$P^\\prime$ 为其投影在成像平面上的点，$A$ 为视点。\n\n![figure 1](/figure1.png)\n<center>Figure 1</center>\n\n　　由 $\\Delta ABC$ 和 $\\Delta AB^\\prime C^\\prime$ 相似可以得到：\n\n$$\n\\cfrac{BC}{AB}=\\cfrac{B^\\prime C^\\prime}{AB^\\prime}，即 \\cfrac{P.y}{P.z}=\\cfrac{P^\\prime.y}{near}\n$$\n\n　　其中``near``为视点到成像平面的距离。\n\n$$P^\\prime.y=\\cfrac{near * P.y}{P.z}$$\n\n　　同理可得，\n\n$$P^\\prime.x=\\cfrac{near * P.x}{P.z}$$\n\n　　由于默认情况下相机指向z轴的负半轴(Figure 2)，所以实际上要对相机坐标系下的z轴坐标取反。\n\n![figure 2](/figure2.png)\n<center>Figure 2</center>\n\n$$\nP_{screen}.x = \\cfrac{near * P_{camera}.x}{-P_{camera}.z} \\\\\\\\\nP_{screen}.y = \\cfrac{near * P_{camera}.y}{-P_{camera}.z}\n$$\n\n　　假设图片的尺寸为 $W \\* H$，那么投影后的坐标与该点可见性的关系如下：\n\n$$\nvisible=\n\\begin{cases}\n    yes & |P_{screen}.x| <= \\cfrac{W}{2} \\quad \\text{or} \\quad |P_{screen}.y| <= \\cfrac{H}{2} \\\\\\\\\n    no & \\text{otherwise}\n\\end{cases}\n$$\n\n# 坐标系变换\n　　我们的目标是获得投影点的像素坐标，所以要对坐标系进行变换，由成像平面坐标系变为光栅坐标系。\n　　相机成像平面上一点 $P_{screen}$ (Figure 3)\n\n![figure 3](/figure3.png)\n<center>Figure 3</center>\n\n　　先将其转换为 $NDC$ 坐标系下(Figure 4)，范围为 $[0, 1]$\n\n![figure 4](/figure4.png)\n<center>Figure 4</center>\n\n$$\nP_{normalized}.x=\\cfrac{P_{screen}.x + W/2}{W} \\\\\\\\\nP_{normalized}.y=\\cfrac{P_{screen}.y + H/2}{H}\n$$\n\n　　最后转换为光栅化坐标(Figure 5)\n\n![figure 5](/figure5.png)\n<center>Figure 5</center>\n\n$$\nP_{raster}.x=P_{normalized}.x * pixelWidth \\\\\\\\\nP_{raster}.y=(1-P_{normalized}.y) * pixelHeight\n$$\n\n　　*注意区分* $W$ *和* $pixelWidth$，*W指的是图片的物理尺寸，以 m 或 mm 等为单位，pixelWidth指的是图片的横向像素的个数。*\n　　由此可得**相机坐标系**到**光栅坐标系**的转换公式：\n\n$$\nP_{raster}.x=(1 + \\cfrac{near * P_{camera}.x}{-W * P_{camera}.z})* 0.5 * pixelWidth \\\\\\\\\nP_{raster}.y=(1 - \\cfrac{near * P_{camera}.y}{-W * P_{camera}.z}) * 0.5 * pixelHeight\n$$\n\n# 拓展\n　　上面提到的 $NDC$ 坐标范围为 $[0, 1]$，实际上在GPU的实现中， $NDC$ 坐标范围为 $[-1, 1]$。另外讨论更一般的情况，假设成像平面坐标系的 $x$　坐标范围为 $[l, r]$，$y$ 坐标范围为 $[b, t]$。\n　　此时由成像平面坐标系到 $NDC$ 坐标系的映射关系可以通过以下方式求解，先考虑 $x$：\n　　由 $l<x<r$，可得 $0<x-l<r-l$，各项同时除以 $(r-l)$：\n\n$$\n0 < \\cfrac{x-l}{r-l} < 1\n$$\n\n　　公式各项同时乘以 $2$ 再减去 $1$：\n\n$$\n-1 < 2 * \\cfrac{x-l}{r-l} - 1 < 1\n$$\n\n　　化简得：\n\n$$\n-1 < \\cfrac{2x}{r-l}-\\cfrac{r+l}{r-l} < 1，即 \\quad P_{normalized}.x = \\cfrac{2*P_{screen}.x}{r-l}-\\cfrac{r+l}{r-l}\n$$\n\n　　同理可得：\n\n$$\n-1 < \\cfrac{2y}{t-b}-\\cfrac{t+b}{t-b} < 1，即 \\quad P_{normalized}.y = \\cfrac{2*P_{screen}.y}{t-b}-\\cfrac{t+b}{t-b}\n$$\n\n# 参考链接\n\n[Scratchpixel-Mathematics of Computing the 2D Coordinates of a 3D Point](https://www.scratchapixel.com/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point/mathematics-computing-2d-coordinates-of-3d-points)\n[Scratchpixel-The Projection Stage](https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/projection-stage)\n","slug":"光栅化渲染-2-透视投影","published":1,"updated":"2019-09-01T08:38:08.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m2002030vnzg9or5sq","content":"<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/perspective.png\" alt=\"perspective projection\"></p>\n<p>　　<em>画家用透视投影的方法作画，以获得接近真实三维物体的视觉效果。</em></p>\n<a id=\"more\"></a>\n\n<h1 id=\"透视投影\"><a href=\"#透视投影\" class=\"headerlink\" title=\"透视投影\"></a>透视投影</h1><p>　　透视投影是三维投影的一种，是将三维空间中的点映射到二维平面上的方法。由于目前绝大多数图形数据的显示方式仍是二维的，因此三维投影的在计算机图形学等方面应用广泛。</p>\n<h1 id=\"投影原理\"><a href=\"#投影原理\" class=\"headerlink\" title=\"投影原理\"></a>投影原理</h1><p>　　透视投影符合人眼成像的特点，以人眼作为视点，在视网膜上的图像就是空间物体投影的结果。<br>　　如图(Figure 1)，点 $P$ 为空间中的一点，$P^\\prime$ 为其投影在成像平面上的点，$A$ 为视点。</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure1.png\" alt=\"figure 1\"></p>\n<center>Figure 1</center>\n\n<p>　　由 $\\Delta ABC$ 和 $\\Delta AB^\\prime C^\\prime$ 相似可以得到：</p>\n<p>$$<br>\\cfrac{BC}{AB}=\\cfrac{B^\\prime C^\\prime}{AB^\\prime}，即 \\cfrac{P.y}{P.z}=\\cfrac{P^\\prime.y}{near}<br>$$</p>\n<p>　　其中<code>near</code>为视点到成像平面的距离。</p>\n<p>$$P^\\prime.y=\\cfrac{near * P.y}{P.z}$$</p>\n<p>　　同理可得，</p>\n<p>$$P^\\prime.x=\\cfrac{near * P.x}{P.z}$$</p>\n<p>　　由于默认情况下相机指向z轴的负半轴(Figure 2)，所以实际上要对相机坐标系下的z轴坐标取反。</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure2.png\" alt=\"figure 2\"></p>\n<center>Figure 2</center>\n\n<p>$$<br>P_{screen}.x = \\cfrac{near * P_{camera}.x}{-P_{camera}.z} \\\\<br>P_{screen}.y = \\cfrac{near * P_{camera}.y}{-P_{camera}.z}<br>$$</p>\n<p>　　假设图片的尺寸为 $W * H$，那么投影后的坐标与该点可见性的关系如下：</p>\n<p>$$<br>visible=<br>\\begin{cases}<br>    yes &amp; |P_{screen}.x| &lt;= \\cfrac{W}{2} \\quad \\text{or} \\quad |P_{screen}.y| &lt;= \\cfrac{H}{2} \\\\<br>    no &amp; \\text{otherwise}<br>\\end{cases}<br>$$</p>\n<h1 id=\"坐标系变换\"><a href=\"#坐标系变换\" class=\"headerlink\" title=\"坐标系变换\"></a>坐标系变换</h1><p>　　我们的目标是获得投影点的像素坐标，所以要对坐标系进行变换，由成像平面坐标系变为光栅坐标系。<br>　　相机成像平面上一点 $P_{screen}$ (Figure 3)</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure3.png\" alt=\"figure 3\"></p>\n<center>Figure 3</center>\n\n<p>　　先将其转换为 $NDC$ 坐标系下(Figure 4)，范围为 $[0, 1]$</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure4.png\" alt=\"figure 4\"></p>\n<center>Figure 4</center>\n\n<p>$$<br>P_{normalized}.x=\\cfrac{P_{screen}.x + W/2}{W} \\\\<br>P_{normalized}.y=\\cfrac{P_{screen}.y + H/2}{H}<br>$$</p>\n<p>　　最后转换为光栅化坐标(Figure 5)</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure5.png\" alt=\"figure 5\"></p>\n<center>Figure 5</center>\n\n<p>$$<br>P_{raster}.x=P_{normalized}.x * pixelWidth \\\\<br>P_{raster}.y=(1-P_{normalized}.y) * pixelHeight<br>$$</p>\n<p>　　<em>注意区分</em> $W$ <em>和</em> $pixelWidth$，<em>W指的是图片的物理尺寸，以 m 或 mm 等为单位，pixelWidth指的是图片的横向像素的个数。</em><br>　　由此可得<strong>相机坐标系</strong>到<strong>光栅坐标系</strong>的转换公式：</p>\n<p>$$<br>P_{raster}.x=(1 + \\cfrac{near * P_{camera}.x}{-W * P_{camera}.z})* 0.5 * pixelWidth \\\\<br>P_{raster}.y=(1 - \\cfrac{near * P_{camera}.y}{-W * P_{camera}.z}) * 0.5 * pixelHeight<br>$$</p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>　　上面提到的 $NDC$ 坐标范围为 $[0, 1]$，实际上在GPU的实现中， $NDC$ 坐标范围为 $[-1, 1]$。另外讨论更一般的情况，假设成像平面坐标系的 $x$　坐标范围为 $[l, r]$，$y$ 坐标范围为 $[b, t]$。<br>　　此时由成像平面坐标系到 $NDC$ 坐标系的映射关系可以通过以下方式求解，先考虑 $x$：<br>　　由 $l&lt;x&lt;r$，可得 $0&lt;x-l&lt;r-l$，各项同时除以 $(r-l)$：</p>\n<p>$$<br>0 &lt; \\cfrac{x-l}{r-l} &lt; 1<br>$$</p>\n<p>　　公式各项同时乘以 $2$ 再减去 $1$：</p>\n<p>$$<br>-1 &lt; 2 * \\cfrac{x-l}{r-l} - 1 &lt; 1<br>$$</p>\n<p>　　化简得：</p>\n<p>$$<br>-1 &lt; \\cfrac{2x}{r-l}-\\cfrac{r+l}{r-l} &lt; 1，即 \\quad P_{normalized}.x = \\cfrac{2*P_{screen}.x}{r-l}-\\cfrac{r+l}{r-l}<br>$$</p>\n<p>　　同理可得：</p>\n<p>$$<br>-1 &lt; \\cfrac{2y}{t-b}-\\cfrac{t+b}{t-b} &lt; 1，即 \\quad P_{normalized}.y = \\cfrac{2*P_{screen}.y}{t-b}-\\cfrac{t+b}{t-b}<br>$$</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.scratchapixel.com/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point/mathematics-computing-2d-coordinates-of-3d-points\" target=\"_blank\" rel=\"noopener\">Scratchpixel-Mathematics of Computing the 2D Coordinates of a 3D Point</a><br><a href=\"https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/projection-stage\" target=\"_blank\" rel=\"noopener\">Scratchpixel-The Projection Stage</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/perspective.png\" alt=\"perspective projection\"></p>\n<p>　　<em>画家用透视投影的方法作画，以获得接近真实三维物体的视觉效果。</em></p>","more":"<h1 id=\"透视投影\"><a href=\"#透视投影\" class=\"headerlink\" title=\"透视投影\"></a>透视投影</h1><p>　　透视投影是三维投影的一种，是将三维空间中的点映射到二维平面上的方法。由于目前绝大多数图形数据的显示方式仍是二维的，因此三维投影的在计算机图形学等方面应用广泛。</p>\n<h1 id=\"投影原理\"><a href=\"#投影原理\" class=\"headerlink\" title=\"投影原理\"></a>投影原理</h1><p>　　透视投影符合人眼成像的特点，以人眼作为视点，在视网膜上的图像就是空间物体投影的结果。<br>　　如图(Figure 1)，点 $P$ 为空间中的一点，$P^\\prime$ 为其投影在成像平面上的点，$A$ 为视点。</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure1.png\" alt=\"figure 1\"></p>\n<center>Figure 1</center>\n\n<p>　　由 $\\Delta ABC$ 和 $\\Delta AB^\\prime C^\\prime$ 相似可以得到：</p>\n<p>$$<br>\\cfrac{BC}{AB}=\\cfrac{B^\\prime C^\\prime}{AB^\\prime}，即 \\cfrac{P.y}{P.z}=\\cfrac{P^\\prime.y}{near}<br>$$</p>\n<p>　　其中<code>near</code>为视点到成像平面的距离。</p>\n<p>$$P^\\prime.y=\\cfrac{near * P.y}{P.z}$$</p>\n<p>　　同理可得，</p>\n<p>$$P^\\prime.x=\\cfrac{near * P.x}{P.z}$$</p>\n<p>　　由于默认情况下相机指向z轴的负半轴(Figure 2)，所以实际上要对相机坐标系下的z轴坐标取反。</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure2.png\" alt=\"figure 2\"></p>\n<center>Figure 2</center>\n\n<p>$$<br>P_{screen}.x = \\cfrac{near * P_{camera}.x}{-P_{camera}.z} \\\\<br>P_{screen}.y = \\cfrac{near * P_{camera}.y}{-P_{camera}.z}<br>$$</p>\n<p>　　假设图片的尺寸为 $W * H$，那么投影后的坐标与该点可见性的关系如下：</p>\n<p>$$<br>visible=<br>\\begin{cases}<br>    yes &amp; |P_{screen}.x| &lt;= \\cfrac{W}{2} \\quad \\text{or} \\quad |P_{screen}.y| &lt;= \\cfrac{H}{2} \\\\<br>    no &amp; \\text{otherwise}<br>\\end{cases}<br>$$</p>\n<h1 id=\"坐标系变换\"><a href=\"#坐标系变换\" class=\"headerlink\" title=\"坐标系变换\"></a>坐标系变换</h1><p>　　我们的目标是获得投影点的像素坐标，所以要对坐标系进行变换，由成像平面坐标系变为光栅坐标系。<br>　　相机成像平面上一点 $P_{screen}$ (Figure 3)</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure3.png\" alt=\"figure 3\"></p>\n<center>Figure 3</center>\n\n<p>　　先将其转换为 $NDC$ 坐标系下(Figure 4)，范围为 $[0, 1]$</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure4.png\" alt=\"figure 4\"></p>\n<center>Figure 4</center>\n\n<p>$$<br>P_{normalized}.x=\\cfrac{P_{screen}.x + W/2}{W} \\\\<br>P_{normalized}.y=\\cfrac{P_{screen}.y + H/2}{H}<br>$$</p>\n<p>　　最后转换为光栅化坐标(Figure 5)</p>\n<p><img src=\"/2019/08/11/光栅化渲染-2-透视投影/figure5.png\" alt=\"figure 5\"></p>\n<center>Figure 5</center>\n\n<p>$$<br>P_{raster}.x=P_{normalized}.x * pixelWidth \\\\<br>P_{raster}.y=(1-P_{normalized}.y) * pixelHeight<br>$$</p>\n<p>　　<em>注意区分</em> $W$ <em>和</em> $pixelWidth$，<em>W指的是图片的物理尺寸，以 m 或 mm 等为单位，pixelWidth指的是图片的横向像素的个数。</em><br>　　由此可得<strong>相机坐标系</strong>到<strong>光栅坐标系</strong>的转换公式：</p>\n<p>$$<br>P_{raster}.x=(1 + \\cfrac{near * P_{camera}.x}{-W * P_{camera}.z})* 0.5 * pixelWidth \\\\<br>P_{raster}.y=(1 - \\cfrac{near * P_{camera}.y}{-W * P_{camera}.z}) * 0.5 * pixelHeight<br>$$</p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>　　上面提到的 $NDC$ 坐标范围为 $[0, 1]$，实际上在GPU的实现中， $NDC$ 坐标范围为 $[-1, 1]$。另外讨论更一般的情况，假设成像平面坐标系的 $x$　坐标范围为 $[l, r]$，$y$ 坐标范围为 $[b, t]$。<br>　　此时由成像平面坐标系到 $NDC$ 坐标系的映射关系可以通过以下方式求解，先考虑 $x$：<br>　　由 $l&lt;x&lt;r$，可得 $0&lt;x-l&lt;r-l$，各项同时除以 $(r-l)$：</p>\n<p>$$<br>0 &lt; \\cfrac{x-l}{r-l} &lt; 1<br>$$</p>\n<p>　　公式各项同时乘以 $2$ 再减去 $1$：</p>\n<p>$$<br>-1 &lt; 2 * \\cfrac{x-l}{r-l} - 1 &lt; 1<br>$$</p>\n<p>　　化简得：</p>\n<p>$$<br>-1 &lt; \\cfrac{2x}{r-l}-\\cfrac{r+l}{r-l} &lt; 1，即 \\quad P_{normalized}.x = \\cfrac{2*P_{screen}.x}{r-l}-\\cfrac{r+l}{r-l}<br>$$</p>\n<p>　　同理可得：</p>\n<p>$$<br>-1 &lt; \\cfrac{2y}{t-b}-\\cfrac{t+b}{t-b} &lt; 1，即 \\quad P_{normalized}.y = \\cfrac{2*P_{screen}.y}{t-b}-\\cfrac{t+b}{t-b}<br>$$</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.scratchapixel.com/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point/mathematics-computing-2d-coordinates-of-3d-points\" target=\"_blank\" rel=\"noopener\">Scratchpixel-Mathematics of Computing the 2D Coordinates of a 3D Point</a><br><a href=\"https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/projection-stage\" target=\"_blank\" rel=\"noopener\">Scratchpixel-The Projection Stage</a></p>"},{"title":"光栅化渲染(4)-深度检测","date":"2019-08-27T12:08:56.000Z","_content":"\n![depth](/depth.png)\n\n　　*如何确定投影区域内每个像素对应的空间物体上一点的深度是本节主要讨论的内容。*\n\n# Z-Buffer\n　　在[光栅化算法总述](https://ain-crad.github.io/2019/08/10/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-1-%E7%AE%97%E6%B3%95%E6%80%BB%E8%BF%B0/#more)里我们提到当有多个三角形相互重叠时，它们之上的某些点可能会投影到同一个像素位置，我们要通过``z-buffer``方法来确定这些点的深度大小关系，从而决定像素显示哪一点的颜色。\n　　``z-buffer``是一个二维矩阵，矩阵元素初始化为一个较大的值，当遍历三角面片进行投影时不断更新元素值，用来记录每个像素对应的距离相机最近的空间物体上一点的深度。\n　　关于如何求解每个像素对应的空间深度值，首先想到的可能是借助上一节提到的**重心坐标**插值的方法。但是由于投影后的比例变化（Figure 1），我们不能直接把投影平面上三角形的面积比作为空间三角形的面积比来得到重心坐标。\n\n![figure 1](/figure1.png)\n<center>Figure 1</center>\n\n　　我们的目标是由投影平面上三角形的重心坐标来推出空间三角形的重心坐标。在[透视投影](https://ain-crad.github.io/2019/08/11/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-2-%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/)部分我们得到了投影坐标：\n\n$$\n\\begin{align}\n&P_{screen}.x = \\cfrac{near * P_{camera}.x}{-P_{camera}.z} \\\\\\\\\n&P_{screen}.y = \\cfrac{near * P_{camera}.y}{-P_{camera}.z} \\\\\\\\\n&P_{screen}.z = -P_{camera}.z\n\\end{align}\n$$\n\n　　*注意与之前不同的是，投影之后我们仍然保留空间点的z坐标，利用它们还原计算空间三角形的重心坐标。*\n　　","source":"_posts/光栅化渲染-4-深度检测.md","raw":"---\ntitle: 光栅化渲染(4)-深度检测\ndate: 2019-08-27 20:08:56\ncategories:\n- Computer Graphics\n- 光栅化渲染\ntags:\n---\n\n![depth](/depth.png)\n\n　　*如何确定投影区域内每个像素对应的空间物体上一点的深度是本节主要讨论的内容。*\n\n# Z-Buffer\n　　在[光栅化算法总述](https://ain-crad.github.io/2019/08/10/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-1-%E7%AE%97%E6%B3%95%E6%80%BB%E8%BF%B0/#more)里我们提到当有多个三角形相互重叠时，它们之上的某些点可能会投影到同一个像素位置，我们要通过``z-buffer``方法来确定这些点的深度大小关系，从而决定像素显示哪一点的颜色。\n　　``z-buffer``是一个二维矩阵，矩阵元素初始化为一个较大的值，当遍历三角面片进行投影时不断更新元素值，用来记录每个像素对应的距离相机最近的空间物体上一点的深度。\n　　关于如何求解每个像素对应的空间深度值，首先想到的可能是借助上一节提到的**重心坐标**插值的方法。但是由于投影后的比例变化（Figure 1），我们不能直接把投影平面上三角形的面积比作为空间三角形的面积比来得到重心坐标。\n\n![figure 1](/figure1.png)\n<center>Figure 1</center>\n\n　　我们的目标是由投影平面上三角形的重心坐标来推出空间三角形的重心坐标。在[透视投影](https://ain-crad.github.io/2019/08/11/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-2-%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/)部分我们得到了投影坐标：\n\n$$\n\\begin{align}\n&P_{screen}.x = \\cfrac{near * P_{camera}.x}{-P_{camera}.z} \\\\\\\\\n&P_{screen}.y = \\cfrac{near * P_{camera}.y}{-P_{camera}.z} \\\\\\\\\n&P_{screen}.z = -P_{camera}.z\n\\end{align}\n$$\n\n　　*注意与之前不同的是，投影之后我们仍然保留空间点的z坐标，利用它们还原计算空间三角形的重心坐标。*\n　　","slug":"光栅化渲染-4-深度检测","published":1,"updated":"2019-09-01T08:30:39.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m3002130vne0u98g3h","content":"<p><img src=\"/2019/08/27/光栅化渲染-4-深度检测/depth.png\" alt=\"depth\"></p>\n<p>　　<em>如何确定投影区域内每个像素对应的空间物体上一点的深度是本节主要讨论的内容。</em></p>\n<h1 id=\"Z-Buffer\"><a href=\"#Z-Buffer\" class=\"headerlink\" title=\"Z-Buffer\"></a>Z-Buffer</h1><p>　　在<a href=\"https://ain-crad.github.io/2019/08/10/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-1-%E7%AE%97%E6%B3%95%E6%80%BB%E8%BF%B0/#more\" target=\"_blank\" rel=\"noopener\">光栅化算法总述</a>里我们提到当有多个三角形相互重叠时，它们之上的某些点可能会投影到同一个像素位置，我们要通过<code>z-buffer</code>方法来确定这些点的深度大小关系，从而决定像素显示哪一点的颜色。<br>　　<code>z-buffer</code>是一个二维矩阵，矩阵元素初始化为一个较大的值，当遍历三角面片进行投影时不断更新元素值，用来记录每个像素对应的距离相机最近的空间物体上一点的深度。<br>　　关于如何求解每个像素对应的空间深度值，首先想到的可能是借助上一节提到的<strong>重心坐标</strong>插值的方法。但是由于投影后的比例变化（Figure 1），我们不能直接把投影平面上三角形的面积比作为空间三角形的面积比来得到重心坐标。</p>\n<p><img src=\"/2019/08/27/光栅化渲染-4-深度检测/figure1.png\" alt=\"figure 1\"></p>\n<center>Figure 1</center>\n\n<p>　　我们的目标是由投影平面上三角形的重心坐标来推出空间三角形的重心坐标。在<a href=\"https://ain-crad.github.io/2019/08/11/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-2-%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/\" target=\"_blank\" rel=\"noopener\">透视投影</a>部分我们得到了投影坐标：</p>\n<p>$$<br>\\begin{align}<br>&amp;P_{screen}.x = \\cfrac{near * P_{camera}.x}{-P_{camera}.z} \\\\<br>&amp;P_{screen}.y = \\cfrac{near * P_{camera}.y}{-P_{camera}.z} \\\\<br>&amp;P_{screen}.z = -P_{camera}.z<br>\\end{align}<br>$$</p>\n<p>　　<em>注意与之前不同的是，投影之后我们仍然保留空间点的z坐标，利用它们还原计算空间三角形的重心坐标。</em>\n　　</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2019/08/27/光栅化渲染-4-深度检测/depth.png\" alt=\"depth\"></p>\n<p>　　<em>如何确定投影区域内每个像素对应的空间物体上一点的深度是本节主要讨论的内容。</em></p>\n<h1 id=\"Z-Buffer\"><a href=\"#Z-Buffer\" class=\"headerlink\" title=\"Z-Buffer\"></a>Z-Buffer</h1><p>　　在<a href=\"https://ain-crad.github.io/2019/08/10/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-1-%E7%AE%97%E6%B3%95%E6%80%BB%E8%BF%B0/#more\" target=\"_blank\" rel=\"noopener\">光栅化算法总述</a>里我们提到当有多个三角形相互重叠时，它们之上的某些点可能会投影到同一个像素位置，我们要通过<code>z-buffer</code>方法来确定这些点的深度大小关系，从而决定像素显示哪一点的颜色。<br>　　<code>z-buffer</code>是一个二维矩阵，矩阵元素初始化为一个较大的值，当遍历三角面片进行投影时不断更新元素值，用来记录每个像素对应的距离相机最近的空间物体上一点的深度。<br>　　关于如何求解每个像素对应的空间深度值，首先想到的可能是借助上一节提到的<strong>重心坐标</strong>插值的方法。但是由于投影后的比例变化（Figure 1），我们不能直接把投影平面上三角形的面积比作为空间三角形的面积比来得到重心坐标。</p>\n<p><img src=\"/2019/08/27/光栅化渲染-4-深度检测/figure1.png\" alt=\"figure 1\"></p>\n<center>Figure 1</center>\n\n<p>　　我们的目标是由投影平面上三角形的重心坐标来推出空间三角形的重心坐标。在<a href=\"https://ain-crad.github.io/2019/08/11/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93-2-%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/\" target=\"_blank\" rel=\"noopener\">透视投影</a>部分我们得到了投影坐标：</p>\n<p>$$<br>\\begin{align}<br>&amp;P_{screen}.x = \\cfrac{near * P_{camera}.x}{-P_{camera}.z} \\\\<br>&amp;P_{screen}.y = \\cfrac{near * P_{camera}.y}{-P_{camera}.z} \\\\<br>&amp;P_{screen}.z = -P_{camera}.z<br>\\end{align}<br>$$</p>\n<p>　　<em>注意与之前不同的是，投影之后我们仍然保留空间点的z坐标，利用它们还原计算空间三角形的重心坐标。</em>\n　　</p>\n"},{"title":"八数码问题","date":"2018-12-26T15:07:55.000Z","_content":"八数码问题，最开始是在人工智能基础课上学的，然而我已无力吐槽这门课了，现在我才回想起来原来她当时所讲的open表其实就是栈和队列。而当时那些手算看起来很简单的搜索算法，实际写起来还是会有很多坑的，如果现在再重新学这门课我应该会有很多新的思考和认识吧。\n![EightDigital](/EightDigital.png)\n<!--more-->\n# 八数码问题\n编号为$1-8$的八个正方形滑块被摆成3行3列，其中有一个格子留空。每次可以把与空格相邻的滑块移到空格中，它原来的位置就成了新的空格。给定初始局面和目标局面，计算最少的移动步数。\n因为是计算最少移动步数，所以用BFS来搜索比较合适。但是和一般的图搜索不太一样，这里没有显式的结点。可以想到把每一个“状态”看做图的一个结点，然后根据合法的移动方式去扩展其它结点，直到到达目标状态。\n还有一个问题是如何标记已经访问过的状态，以避免对同一个结点做多次访问。在显式的图搜索里我们一般会开一个vis数组来标记，但是这里如果要用vis数组的话，要开到九维，$9^9$，这对空间的消耗太大了。于是我们可以考虑用之前提到的**哈希**，每一个状态对应一个整型数，一共的状态数是$9! = 362880$种。这样我们用一个vis数组就可以表示出来了。\n*下面的代码是用STL里的set代替vis数组实现判断状态是否已访问过*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed 26 Dec 08:39:43 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Node{\n    int d[9];\n    int dis;\n};\nint st[9], ed[9];\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nset<int> rec;\nint ans;\n\nbool vis(int x){\n    int len = rec.size();\n    rec.insert(x);\n    if((int)rec.size() > len) return false;\n    else return true;\n}\n\nint Trans(Node& u){\n    int sum = 0;\n    for(int i = 0; i < 9; i++){\n        sum *= 10;\n        sum += u.d[i];\n    }\n    return sum;\n}\n\nbool Match(Node& u){\n    if(memcmp(u.d, ed, sizeof(u.d)) == 0) return true;\n    else return false;\n}\n\nvoid bfs(){\n    queue<Node> que;\n    Node nd;\n    memcpy(nd.d, st, sizeof(nd.d));\n    nd.dis = 0;\n    que.push(nd);\n\n    while(!que.empty()){\n        Node TopItem = que.front();\n        que.pop();\n        if(Match(TopItem)){\n            ans = TopItem.dis;\n            break;\n        }\n        int pos;\n        for(int i = 0; i < 9; i++){\n            if(TopItem.d[i] == 0){\n                pos = i;\n                break;\n            }\n        }\n        int x = pos / 3, y = pos % 3;\n        for(int i = 0; i < 4; i++){\n            int nx = x + dx[i], ny = y + dy[i];\n            if(nx >= 0 && nx < 3 && ny >= 0 && ny < 3){\n                Node u;\n                memcpy(&u, &TopItem, sizeof(u));\n                int p2 = nx * 3 + ny;\n                int tmp = u.d[pos];\n                u.d[pos] = u.d[p2];\n                u.d[p2] = tmp;\n                u.dis = TopItem.dis + 1;\n                if(!vis(Trans(u))){\n                    que.push(u);\n                }\n            }\n        }\n    }\n\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    for(int i = 0; i < 9; i++){\n        cin >> st[i];\n    }\n    for(int i = 0; i < 9; i++){\n        cin >> ed[i];\n    }\n    bfs();\n    cout << ans << endl;\n\n    return 0;\n}\n```\n\n# 打印路径版代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Node{\n    int d[9];\n    int dis;\n    int id;\n};\nint st[9], ed[9];\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nset<int> rec;\nint ans, num, ItemId;\nint pre[1000000];\nNode data[1000000];\n\nvoid PrintPath(){\n    vector<int> vec;\n    while(ItemId >= 0){\n        vec.push_back(ItemId);\n        ItemId = pre[ItemId];\n    }\n    reverse(vec.begin(), vec.end());\n    for(int x : vec){\n        int* ptr = data[x].d;\n        for(int i = 0; i < 9; i++){\n            if((i + 1) % 3 != 0) cout << ptr[i] << \" \";\n            else cout << ptr[i] << endl;\n        }\n        cout << endl;\n        ItemId = pre[ItemId];\n    }\n}\n\nbool vis(int x){\n    int len = rec.size();\n    rec.insert(x);\n    if((int)rec.size() > len) return false;\n    else return true;\n}\n\nint Trans(Node& u){\n    int sum = 0;\n    for(int i = 0; i < 9; i++){\n        sum *= 10;\n        sum += u.d[i];\n    }\n    return sum;\n}\n\nbool Match(Node& u){\n    if(memcmp(u.d, ed, sizeof(u.d)) == 0) return true;\n    else return false;\n}\n\nvoid bfs(){\n    queue<Node> que;\n    Node nd;\n    memcpy(nd.d, st, sizeof(nd.d));\n    nd.dis = 0;\n    nd.id = num++;\n    que.push(nd);\n    data[nd.id] = nd;\n\n    while(!que.empty()){\n        Node TopItem = que.front();\n        que.pop();\n        if(Match(TopItem)){\n            ans = TopItem.dis;\n            ItemId = TopItem.id;\n            break;\n        }\n        int pos;\n        for(int i = 0; i < 9; i++){\n            if(TopItem.d[i] == 0){\n                pos = i;\n                break;\n            }\n        }\n        int x = pos / 3, y = pos % 3;\n        for(int i = 0; i < 4; i++){\n            int nx = x + dx[i], ny = y + dy[i];\n            if(nx >= 0 && nx < 3 && ny >= 0 && ny < 3){\n                Node u;\n                memcpy(&u, &TopItem, sizeof(u));\n                int p2 = nx * 3 + ny;\n                int tmp = u.d[pos];\n                u.d[pos] = u.d[p2];\n                u.d[p2] = tmp;\n                u.dis = TopItem.dis + 1;\n                if(!vis(Trans(u))){\n                    u.id = num++;\n                    pre[u.id] = TopItem.id;\n                    data[u.id] = u;\n                    que.push(u);\n                }\n            }\n        }\n    }\n\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    num = 0;\n    ans = -1;\n    memset(pre, -1, sizeof(pre));\n\n    for(int i = 0; i < 9; i++){\n        cin >> st[i];\n    }\n    for(int i = 0; i < 9; i++){\n        cin >> ed[i];\n    }\n    bfs();\n    PrintPath();\n    cout << \"Steps: \" << ans << endl;\n\n    return 0;\n}\n```","source":"_posts/八数码问题.md","raw":"---\ntitle: 八数码问题\ndate: 2018-12-26 23:07:55\ncategories:\n- Summary\ntags:\n---\n八数码问题，最开始是在人工智能基础课上学的，然而我已无力吐槽这门课了，现在我才回想起来原来她当时所讲的open表其实就是栈和队列。而当时那些手算看起来很简单的搜索算法，实际写起来还是会有很多坑的，如果现在再重新学这门课我应该会有很多新的思考和认识吧。\n![EightDigital](/EightDigital.png)\n<!--more-->\n# 八数码问题\n编号为$1-8$的八个正方形滑块被摆成3行3列，其中有一个格子留空。每次可以把与空格相邻的滑块移到空格中，它原来的位置就成了新的空格。给定初始局面和目标局面，计算最少的移动步数。\n因为是计算最少移动步数，所以用BFS来搜索比较合适。但是和一般的图搜索不太一样，这里没有显式的结点。可以想到把每一个“状态”看做图的一个结点，然后根据合法的移动方式去扩展其它结点，直到到达目标状态。\n还有一个问题是如何标记已经访问过的状态，以避免对同一个结点做多次访问。在显式的图搜索里我们一般会开一个vis数组来标记，但是这里如果要用vis数组的话，要开到九维，$9^9$，这对空间的消耗太大了。于是我们可以考虑用之前提到的**哈希**，每一个状态对应一个整型数，一共的状态数是$9! = 362880$种。这样我们用一个vis数组就可以表示出来了。\n*下面的代码是用STL里的set代替vis数组实现判断状态是否已访问过*\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed 26 Dec 08:39:43 CST 2018\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Node{\n    int d[9];\n    int dis;\n};\nint st[9], ed[9];\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nset<int> rec;\nint ans;\n\nbool vis(int x){\n    int len = rec.size();\n    rec.insert(x);\n    if((int)rec.size() > len) return false;\n    else return true;\n}\n\nint Trans(Node& u){\n    int sum = 0;\n    for(int i = 0; i < 9; i++){\n        sum *= 10;\n        sum += u.d[i];\n    }\n    return sum;\n}\n\nbool Match(Node& u){\n    if(memcmp(u.d, ed, sizeof(u.d)) == 0) return true;\n    else return false;\n}\n\nvoid bfs(){\n    queue<Node> que;\n    Node nd;\n    memcpy(nd.d, st, sizeof(nd.d));\n    nd.dis = 0;\n    que.push(nd);\n\n    while(!que.empty()){\n        Node TopItem = que.front();\n        que.pop();\n        if(Match(TopItem)){\n            ans = TopItem.dis;\n            break;\n        }\n        int pos;\n        for(int i = 0; i < 9; i++){\n            if(TopItem.d[i] == 0){\n                pos = i;\n                break;\n            }\n        }\n        int x = pos / 3, y = pos % 3;\n        for(int i = 0; i < 4; i++){\n            int nx = x + dx[i], ny = y + dy[i];\n            if(nx >= 0 && nx < 3 && ny >= 0 && ny < 3){\n                Node u;\n                memcpy(&u, &TopItem, sizeof(u));\n                int p2 = nx * 3 + ny;\n                int tmp = u.d[pos];\n                u.d[pos] = u.d[p2];\n                u.d[p2] = tmp;\n                u.dis = TopItem.dis + 1;\n                if(!vis(Trans(u))){\n                    que.push(u);\n                }\n            }\n        }\n    }\n\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    for(int i = 0; i < 9; i++){\n        cin >> st[i];\n    }\n    for(int i = 0; i < 9; i++){\n        cin >> ed[i];\n    }\n    bfs();\n    cout << ans << endl;\n\n    return 0;\n}\n```\n\n# 打印路径版代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Node{\n    int d[9];\n    int dis;\n    int id;\n};\nint st[9], ed[9];\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nset<int> rec;\nint ans, num, ItemId;\nint pre[1000000];\nNode data[1000000];\n\nvoid PrintPath(){\n    vector<int> vec;\n    while(ItemId >= 0){\n        vec.push_back(ItemId);\n        ItemId = pre[ItemId];\n    }\n    reverse(vec.begin(), vec.end());\n    for(int x : vec){\n        int* ptr = data[x].d;\n        for(int i = 0; i < 9; i++){\n            if((i + 1) % 3 != 0) cout << ptr[i] << \" \";\n            else cout << ptr[i] << endl;\n        }\n        cout << endl;\n        ItemId = pre[ItemId];\n    }\n}\n\nbool vis(int x){\n    int len = rec.size();\n    rec.insert(x);\n    if((int)rec.size() > len) return false;\n    else return true;\n}\n\nint Trans(Node& u){\n    int sum = 0;\n    for(int i = 0; i < 9; i++){\n        sum *= 10;\n        sum += u.d[i];\n    }\n    return sum;\n}\n\nbool Match(Node& u){\n    if(memcmp(u.d, ed, sizeof(u.d)) == 0) return true;\n    else return false;\n}\n\nvoid bfs(){\n    queue<Node> que;\n    Node nd;\n    memcpy(nd.d, st, sizeof(nd.d));\n    nd.dis = 0;\n    nd.id = num++;\n    que.push(nd);\n    data[nd.id] = nd;\n\n    while(!que.empty()){\n        Node TopItem = que.front();\n        que.pop();\n        if(Match(TopItem)){\n            ans = TopItem.dis;\n            ItemId = TopItem.id;\n            break;\n        }\n        int pos;\n        for(int i = 0; i < 9; i++){\n            if(TopItem.d[i] == 0){\n                pos = i;\n                break;\n            }\n        }\n        int x = pos / 3, y = pos % 3;\n        for(int i = 0; i < 4; i++){\n            int nx = x + dx[i], ny = y + dy[i];\n            if(nx >= 0 && nx < 3 && ny >= 0 && ny < 3){\n                Node u;\n                memcpy(&u, &TopItem, sizeof(u));\n                int p2 = nx * 3 + ny;\n                int tmp = u.d[pos];\n                u.d[pos] = u.d[p2];\n                u.d[p2] = tmp;\n                u.dis = TopItem.dis + 1;\n                if(!vis(Trans(u))){\n                    u.id = num++;\n                    pre[u.id] = TopItem.id;\n                    data[u.id] = u;\n                    que.push(u);\n                }\n            }\n        }\n    }\n\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    num = 0;\n    ans = -1;\n    memset(pre, -1, sizeof(pre));\n\n    for(int i = 0; i < 9; i++){\n        cin >> st[i];\n    }\n    for(int i = 0; i < 9; i++){\n        cin >> ed[i];\n    }\n    bfs();\n    PrintPath();\n    cout << \"Steps: \" << ans << endl;\n\n    return 0;\n}\n```","slug":"八数码问题","published":1,"updated":"2019-08-20T14:41:32.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m3002230vn8s1ieequ","content":"<p>八数码问题，最开始是在人工智能基础课上学的，然而我已无力吐槽这门课了，现在我才回想起来原来她当时所讲的open表其实就是栈和队列。而当时那些手算看起来很简单的搜索算法，实际写起来还是会有很多坑的，如果现在再重新学这门课我应该会有很多新的思考和认识吧。<br><img src=\"/2018/12/26/八数码问题/EightDigital.png\" alt=\"EightDigital\"></p>\n<a id=\"more\"></a>\n<h1 id=\"八数码问题\"><a href=\"#八数码问题\" class=\"headerlink\" title=\"八数码问题\"></a>八数码问题</h1><p>编号为$1-8$的八个正方形滑块被摆成3行3列，其中有一个格子留空。每次可以把与空格相邻的滑块移到空格中，它原来的位置就成了新的空格。给定初始局面和目标局面，计算最少的移动步数。<br>因为是计算最少移动步数，所以用BFS来搜索比较合适。但是和一般的图搜索不太一样，这里没有显式的结点。可以想到把每一个“状态”看做图的一个结点，然后根据合法的移动方式去扩展其它结点，直到到达目标状态。<br>还有一个问题是如何标记已经访问过的状态，以避免对同一个结点做多次访问。在显式的图搜索里我们一般会开一个vis数组来标记，但是这里如果要用vis数组的话，要开到九维，$9^9$，这对空间的消耗太大了。于是我们可以考虑用之前提到的<strong>哈希</strong>，每一个状态对应一个整型数，一共的状态数是$9! = 362880$种。这样我们用一个vis数组就可以表示出来了。<br><em>下面的代码是用STL里的set代替vis数组实现判断状态是否已访问过</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed 26 Dec 08:39:43 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> st[<span class=\"number\">9</span>], ed[<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; rec;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">vis</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = rec.size();</span><br><span class=\"line\">    rec.insert(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"keyword\">int</span>)rec.size() &gt; len) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Trans</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        sum *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += u.d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Match</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">memcmp</span>(u.d, ed, <span class=\"keyword\">sizeof</span>(u.d)) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    Node nd;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(nd.d, st, <span class=\"keyword\">sizeof</span>(nd.d));</span><br><span class=\"line\">    nd.dis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(nd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node TopItem = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Match(TopItem))&#123;</span><br><span class=\"line\">            ans = TopItem.dis;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TopItem.d[i] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = pos / <span class=\"number\">3</span>, y = pos % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; <span class=\"number\">3</span> &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                Node u;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(&amp;u, &amp;TopItem, <span class=\"keyword\">sizeof</span>(u));</span><br><span class=\"line\">                <span class=\"keyword\">int</span> p2 = nx * <span class=\"number\">3</span> + ny;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = u.d[pos];</span><br><span class=\"line\">                u.d[pos] = u.d[p2];</span><br><span class=\"line\">                u.d[p2] = tmp;</span><br><span class=\"line\">                u.dis = TopItem.dis + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis(Trans(u)))&#123;</span><br><span class=\"line\">                    que.push(u);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; st[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; ed[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打印路径版代码\"><a href=\"#打印路径版代码\" class=\"headerlink\" title=\"打印路径版代码\"></a>打印路径版代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> st[<span class=\"number\">9</span>], ed[<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; rec;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, num, ItemId;</span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">Node data[<span class=\"number\">1000000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintPath</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ItemId &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        vec.push_back(ItemId);</span><br><span class=\"line\">        ItemId = pre[ItemId];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reverse(vec.begin(), vec.end());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>* ptr = data[x].d;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i + <span class=\"number\">1</span>) % <span class=\"number\">3</span> != <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; ptr[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; ptr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        ItemId = pre[ItemId];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">vis</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = rec.size();</span><br><span class=\"line\">    rec.insert(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"keyword\">int</span>)rec.size() &gt; len) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Trans</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        sum *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += u.d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Match</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">memcmp</span>(u.d, ed, <span class=\"keyword\">sizeof</span>(u.d)) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    Node nd;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(nd.d, st, <span class=\"keyword\">sizeof</span>(nd.d));</span><br><span class=\"line\">    nd.dis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    nd.id = num++;</span><br><span class=\"line\">    que.push(nd);</span><br><span class=\"line\">    data[nd.id] = nd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node TopItem = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Match(TopItem))&#123;</span><br><span class=\"line\">            ans = TopItem.dis;</span><br><span class=\"line\">            ItemId = TopItem.id;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TopItem.d[i] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = pos / <span class=\"number\">3</span>, y = pos % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; <span class=\"number\">3</span> &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                Node u;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(&amp;u, &amp;TopItem, <span class=\"keyword\">sizeof</span>(u));</span><br><span class=\"line\">                <span class=\"keyword\">int</span> p2 = nx * <span class=\"number\">3</span> + ny;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = u.d[pos];</span><br><span class=\"line\">                u.d[pos] = u.d[p2];</span><br><span class=\"line\">                u.d[p2] = tmp;</span><br><span class=\"line\">                u.dis = TopItem.dis + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis(Trans(u)))&#123;</span><br><span class=\"line\">                    u.id = num++;</span><br><span class=\"line\">                    pre[u.id] = TopItem.id;</span><br><span class=\"line\">                    data[u.id] = u;</span><br><span class=\"line\">                    que.push(u);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(pre, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(pre));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; st[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; ed[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    PrintPath();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Steps: \"</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>八数码问题，最开始是在人工智能基础课上学的，然而我已无力吐槽这门课了，现在我才回想起来原来她当时所讲的open表其实就是栈和队列。而当时那些手算看起来很简单的搜索算法，实际写起来还是会有很多坑的，如果现在再重新学这门课我应该会有很多新的思考和认识吧。<br><img src=\"/2018/12/26/八数码问题/EightDigital.png\" alt=\"EightDigital\"></p>","more":"<h1 id=\"八数码问题\"><a href=\"#八数码问题\" class=\"headerlink\" title=\"八数码问题\"></a>八数码问题</h1><p>编号为$1-8$的八个正方形滑块被摆成3行3列，其中有一个格子留空。每次可以把与空格相邻的滑块移到空格中，它原来的位置就成了新的空格。给定初始局面和目标局面，计算最少的移动步数。<br>因为是计算最少移动步数，所以用BFS来搜索比较合适。但是和一般的图搜索不太一样，这里没有显式的结点。可以想到把每一个“状态”看做图的一个结点，然后根据合法的移动方式去扩展其它结点，直到到达目标状态。<br>还有一个问题是如何标记已经访问过的状态，以避免对同一个结点做多次访问。在显式的图搜索里我们一般会开一个vis数组来标记，但是这里如果要用vis数组的话，要开到九维，$9^9$，这对空间的消耗太大了。于是我们可以考虑用之前提到的<strong>哈希</strong>，每一个状态对应一个整型数，一共的状态数是$9! = 362880$种。这样我们用一个vis数组就可以表示出来了。<br><em>下面的代码是用STL里的set代替vis数组实现判断状态是否已访问过</em></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed 26 Dec 08:39:43 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> st[<span class=\"number\">9</span>], ed[<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; rec;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">vis</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = rec.size();</span><br><span class=\"line\">    rec.insert(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"keyword\">int</span>)rec.size() &gt; len) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Trans</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        sum *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += u.d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Match</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">memcmp</span>(u.d, ed, <span class=\"keyword\">sizeof</span>(u.d)) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    Node nd;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(nd.d, st, <span class=\"keyword\">sizeof</span>(nd.d));</span><br><span class=\"line\">    nd.dis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(nd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node TopItem = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Match(TopItem))&#123;</span><br><span class=\"line\">            ans = TopItem.dis;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TopItem.d[i] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = pos / <span class=\"number\">3</span>, y = pos % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; <span class=\"number\">3</span> &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                Node u;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(&amp;u, &amp;TopItem, <span class=\"keyword\">sizeof</span>(u));</span><br><span class=\"line\">                <span class=\"keyword\">int</span> p2 = nx * <span class=\"number\">3</span> + ny;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = u.d[pos];</span><br><span class=\"line\">                u.d[pos] = u.d[p2];</span><br><span class=\"line\">                u.d[p2] = tmp;</span><br><span class=\"line\">                u.dis = TopItem.dis + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis(Trans(u)))&#123;</span><br><span class=\"line\">                    que.push(u);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; st[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; ed[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打印路径版代码\"><a href=\"#打印路径版代码\" class=\"headerlink\" title=\"打印路径版代码\"></a>打印路径版代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> st[<span class=\"number\">9</span>], ed[<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; rec;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, num, ItemId;</span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">Node data[<span class=\"number\">1000000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintPath</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ItemId &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        vec.push_back(ItemId);</span><br><span class=\"line\">        ItemId = pre[ItemId];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reverse(vec.begin(), vec.end());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>* ptr = data[x].d;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i + <span class=\"number\">1</span>) % <span class=\"number\">3</span> != <span class=\"number\">0</span>) <span class=\"built_in\">cout</span> &lt;&lt; ptr[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; ptr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        ItemId = pre[ItemId];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">vis</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = rec.size();</span><br><span class=\"line\">    rec.insert(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"keyword\">int</span>)rec.size() &gt; len) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Trans</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        sum *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += u.d[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Match</span><span class=\"params\">(Node&amp; u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">memcmp</span>(u.d, ed, <span class=\"keyword\">sizeof</span>(u.d)) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node&gt; que;</span><br><span class=\"line\">    Node nd;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(nd.d, st, <span class=\"keyword\">sizeof</span>(nd.d));</span><br><span class=\"line\">    nd.dis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    nd.id = num++;</span><br><span class=\"line\">    que.push(nd);</span><br><span class=\"line\">    data[nd.id] = nd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Node TopItem = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Match(TopItem))&#123;</span><br><span class=\"line\">            ans = TopItem.dis;</span><br><span class=\"line\">            ItemId = TopItem.id;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TopItem.d[i] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = pos / <span class=\"number\">3</span>, y = pos % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; <span class=\"number\">3</span> &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                Node u;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(&amp;u, &amp;TopItem, <span class=\"keyword\">sizeof</span>(u));</span><br><span class=\"line\">                <span class=\"keyword\">int</span> p2 = nx * <span class=\"number\">3</span> + ny;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = u.d[pos];</span><br><span class=\"line\">                u.d[pos] = u.d[p2];</span><br><span class=\"line\">                u.d[p2] = tmp;</span><br><span class=\"line\">                u.dis = TopItem.dis + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis(Trans(u)))&#123;</span><br><span class=\"line\">                    u.id = num++;</span><br><span class=\"line\">                    pre[u.id] = TopItem.id;</span><br><span class=\"line\">                    data[u.id] = u;</span><br><span class=\"line\">                    que.push(u);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(pre, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(pre));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; st[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; ed[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    PrintPath();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Steps: \"</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"八皇后问题","date":"2018-12-20T15:16:17.000Z","_content":"八皇后问题，即在$8 \\times 8$的棋盘上放置8个皇后，使得它们互不攻击（皇后的攻击范围为同行同列和同对角线）。\n![queen](/queen.png)\n<!--more-->\n# 参考\n刘汝佳《算法竞赛入门经典》（第2版）\n\n# 解法\n比较容易想到的一个思路是把这个问题转换为“从64个格子中选8个格子”的问题。但是这一共有$C^8_{64} = 4.426 \\times 10^9$种情况。我们可以考虑先排除一些明显不成立的情况，减少枚举量。首先八个皇后肯定是位于不同行不同列的，所以逐行放置可以把这个问题看做一个求$0-7$列的全排列问题。这样的话总的情况数为$8! = 40302$种，同时用回溯法进行剪枝操作，可以在1秒内完成检索。\n$(i，C[i])$和$(j，C[j])$分别表示两个皇后坐标，它们位于同一对角线上的条件：\n``i - C[i] == j - C[j] || i + C[i] == j + C[j]`` \n\n![diagonal](/diagonal.png)\n\n\n# 代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 8;\nbool vis[3][100]; //record visited columns and  diagonals\nint c[100]; //represent columns\nint cnt;\n\nvoid dfs(int n){\n    if(n == N){\n        cnt++;\n        for(int i = 0; i < N; i++){\n            cout << c[i] << \" \";\n        }\n        cout << endl;\n        return;\n    }\n    for(int i = 0; i < N; i++){\n        // n - i　could be negative number, so we plus N.\n        if(!vis[0][i] && !vis[1][n + i] && !vis[2][n - i + N]){\n            c[n] = i;\n            vis[0][i] = vis[1][n + c[n]] = vis[2][n - c[n] + N] = 1;\n            dfs(n + 1);\n            vis[0][i] = vis[1][n + c[n]] = vis[2][n - c[n] + N] = 0;\n        }\n    }\n}\n\nint main(){\n    memset(vis, 0, sizeof(vis));\n    memset(c, -1, sizeof(c));\n    cnt = 0;\n    dfs(0);\n    cout << endl;\n    cout << \"total number: \" << cnt << endl;\n    return 0;\n}\n```\n","source":"_posts/八皇后问题.md","raw":"---\ntitle: 八皇后问题\ndate: 2018-12-20 23:16:17\ncategories:\n- Summary\ntags:\n---\n八皇后问题，即在$8 \\times 8$的棋盘上放置8个皇后，使得它们互不攻击（皇后的攻击范围为同行同列和同对角线）。\n![queen](/queen.png)\n<!--more-->\n# 参考\n刘汝佳《算法竞赛入门经典》（第2版）\n\n# 解法\n比较容易想到的一个思路是把这个问题转换为“从64个格子中选8个格子”的问题。但是这一共有$C^8_{64} = 4.426 \\times 10^9$种情况。我们可以考虑先排除一些明显不成立的情况，减少枚举量。首先八个皇后肯定是位于不同行不同列的，所以逐行放置可以把这个问题看做一个求$0-7$列的全排列问题。这样的话总的情况数为$8! = 40302$种，同时用回溯法进行剪枝操作，可以在1秒内完成检索。\n$(i，C[i])$和$(j，C[j])$分别表示两个皇后坐标，它们位于同一对角线上的条件：\n``i - C[i] == j - C[j] || i + C[i] == j + C[j]`` \n\n![diagonal](/diagonal.png)\n\n\n# 代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 8;\nbool vis[3][100]; //record visited columns and  diagonals\nint c[100]; //represent columns\nint cnt;\n\nvoid dfs(int n){\n    if(n == N){\n        cnt++;\n        for(int i = 0; i < N; i++){\n            cout << c[i] << \" \";\n        }\n        cout << endl;\n        return;\n    }\n    for(int i = 0; i < N; i++){\n        // n - i　could be negative number, so we plus N.\n        if(!vis[0][i] && !vis[1][n + i] && !vis[2][n - i + N]){\n            c[n] = i;\n            vis[0][i] = vis[1][n + c[n]] = vis[2][n - c[n] + N] = 1;\n            dfs(n + 1);\n            vis[0][i] = vis[1][n + c[n]] = vis[2][n - c[n] + N] = 0;\n        }\n    }\n}\n\nint main(){\n    memset(vis, 0, sizeof(vis));\n    memset(c, -1, sizeof(c));\n    cnt = 0;\n    dfs(0);\n    cout << endl;\n    cout << \"total number: \" << cnt << endl;\n    return 0;\n}\n```\n","slug":"八皇后问题","published":1,"updated":"2019-08-20T14:41:42.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m3002330vnbadhgdmt","content":"<p>八皇后问题，即在$8 \\times 8$的棋盘上放置8个皇后，使得它们互不攻击（皇后的攻击范围为同行同列和同对角线）。<br><img src=\"/2018/12/20/八皇后问题/queen.png\" alt=\"queen\"></p>\n<a id=\"more\"></a>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>刘汝佳《算法竞赛入门经典》（第2版）</p>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>比较容易想到的一个思路是把这个问题转换为“从64个格子中选8个格子”的问题。但是这一共有$C^8_{64} = 4.426 \\times 10^9$种情况。我们可以考虑先排除一些明显不成立的情况，减少枚举量。首先八个皇后肯定是位于不同行不同列的，所以逐行放置可以把这个问题看做一个求$0-7$列的全排列问题。这样的话总的情况数为$8! = 40302$种，同时用回溯法进行剪枝操作，可以在1秒内完成检索。<br>$(i，C[i])$和$(j，C[j])$分别表示两个皇后坐标，它们位于同一对角线上的条件：<br><code>i - C[i] == j - C[j] || i + C[i] == j + C[j]</code> </p>\n<p><img src=\"/2018/12/20/八皇后问题/diagonal.png\" alt=\"diagonal\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">3</span>][<span class=\"number\">100</span>]; <span class=\"comment\">//record visited columns and  diagonals</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c[<span class=\"number\">100</span>]; <span class=\"comment\">//represent columns</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == N)&#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; c[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// n - i　could be negative number, so we plus N.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[<span class=\"number\">0</span>][i] &amp;&amp; !vis[<span class=\"number\">1</span>][n + i] &amp;&amp; !vis[<span class=\"number\">2</span>][n - i + N])&#123;</span><br><span class=\"line\">            c[n] = i;</span><br><span class=\"line\">            vis[<span class=\"number\">0</span>][i] = vis[<span class=\"number\">1</span>][n + c[n]] = vis[<span class=\"number\">2</span>][n - c[n] + N] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">            vis[<span class=\"number\">0</span>][i] = vis[<span class=\"number\">1</span>][n + c[n]] = vis[<span class=\"number\">2</span>][n - c[n] + N] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(c, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(c));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"total number: \"</span> &lt;&lt; cnt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>八皇后问题，即在$8 \\times 8$的棋盘上放置8个皇后，使得它们互不攻击（皇后的攻击范围为同行同列和同对角线）。<br><img src=\"/2018/12/20/八皇后问题/queen.png\" alt=\"queen\"></p>","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>刘汝佳《算法竞赛入门经典》（第2版）</p>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>比较容易想到的一个思路是把这个问题转换为“从64个格子中选8个格子”的问题。但是这一共有$C^8_{64} = 4.426 \\times 10^9$种情况。我们可以考虑先排除一些明显不成立的情况，减少枚举量。首先八个皇后肯定是位于不同行不同列的，所以逐行放置可以把这个问题看做一个求$0-7$列的全排列问题。这样的话总的情况数为$8! = 40302$种，同时用回溯法进行剪枝操作，可以在1秒内完成检索。<br>$(i，C[i])$和$(j，C[j])$分别表示两个皇后坐标，它们位于同一对角线上的条件：<br><code>i - C[i] == j - C[j] || i + C[i] == j + C[j]</code> </p>\n<p><img src=\"/2018/12/20/八皇后问题/diagonal.png\" alt=\"diagonal\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">3</span>][<span class=\"number\">100</span>]; <span class=\"comment\">//record visited columns and  diagonals</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c[<span class=\"number\">100</span>]; <span class=\"comment\">//represent columns</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == N)&#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; c[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// n - i　could be negative number, so we plus N.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[<span class=\"number\">0</span>][i] &amp;&amp; !vis[<span class=\"number\">1</span>][n + i] &amp;&amp; !vis[<span class=\"number\">2</span>][n - i + N])&#123;</span><br><span class=\"line\">            c[n] = i;</span><br><span class=\"line\">            vis[<span class=\"number\">0</span>][i] = vis[<span class=\"number\">1</span>][n + c[n]] = vis[<span class=\"number\">2</span>][n - c[n] + N] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">            vis[<span class=\"number\">0</span>][i] = vis[<span class=\"number\">1</span>][n + c[n]] = vis[<span class=\"number\">2</span>][n - c[n] + N] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(c, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(c));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"total number: \"</span> &lt;&lt; cnt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"哈希表","date":"2018-12-25T13:54:22.000Z","_content":"Youtube上看到一个小哥讲的Hash Table，讲清它的原理和结构之后又带着从零开始实现了构造哈希函数、创建哈希表、增加/删除数据等一系列系统的操作，讲解和示例清晰完整，丝毫不拖泥带水，大赞。\n<!--more-->\n## 链接\n[Introduction to Hash Tables](https://www.youtube.com/watch?v=MfhjkfocRR0&list=PLTxllHdfUq4f7-uHOpxXnBUbsuLiI9pmb&index=1&pbjreload=10)\n\n*需要科学上网，有强烈欲望想要看的同学可以参考之前这篇[ubuntu下服务器搭建](https://ain-crad.github.io/2018/04/13/vultr/)的博客，自己配置外网服务器*\n\n# 哈希表\n![hash](/hash.png)\n哈希表(Hash Table)，是一种数据结构。它通过计算一个关于键值的函数，将所需查询的数据映射到表中的一个位置来访问，这加快了查找的速度。STL中的map就是哈希表的一种实现。\n键值可以是字符串或者其它较为复杂的类型，下面以字符串为例。若将它们直接存储在数组里，当想要访问它们的时候只能O(n)复杂度的遍历一遍。但是通过构造哈希函数，我们可以首先将这个字符串映射为一个整数类型，将这个整数作为它们所在数组位置的下标，这样当我们想要访问某一个字符串，只需要把它送到哈希函数里得到一个返回的哈希值，也就是它所在数组位置的下标，就能以O(1)的复杂度访问它。\n哈希函数的构造方法有很多，但一般我们得不到一个完美的哈希函数，即可能会存在两个字符串它们对应的哈希值相同。为了应对这种冲突，我们可以把数组的每个位置当做链表，存在多值时就链接到链表后面。如上图所示。\n\n# 代码\n边听着小哥的讲解边写的代码，包括了构造哈希函数、创建哈希表、增加/删除数据等操作。\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int tablesize = 40;\nstring s;\nstruct item{\n    item(){\n        name = \"empty\";\n        drink = \"empty\";\n        next = NULL;\n    }\n    string name;\n    string drink;\n    item* next;\n};\nitem* hashTable[tablesize];\n\nvoid Init();\nint Hash(string s);\nvoid AddItem(string name, string drink);\nint NumberOfItemsIndex(int idx);\nvoid PrintTable();\nvoid PrintItemInIndex(int idx);\nvoid FindDrink(string name);\nvoid RemoveItem(string name);\n\nvoid RemoveItem(string name){\n    int idx = Hash(name);\n    item* ptr = hashTable[idx];\n\n    //Case 0 - bucket is empty\n    if(ptr->name == \"empty\"){\n        cout << name << \" was not found in the hashTable\" << endl;\n    }\n\n    //Case 1 - only 1 item contained in bucket and that item has matching name\n    else if(ptr->name == name && ptr->next == NULL){\n        ptr->name = \"empty\";\n        ptr->drink = \"empty\";\n        cout << name << \"was removed from the Hash Table.\" << endl;\n    }\n\n    //Case 2 - match is located in the first item int the bucket but there are \n    //more items in the bucket\n    else if(ptr->name == name && ptr->next != NULL){\n        hashTable[idx] = ptr->next;\n        delete ptr;\n        cout << name << \" was removed from the Hash Table.\" << endl;\n    }\n\n    //Case3 - bucket contains item but first item is not a match\n    else{\n        item* p1;\n        item* p2;\n        p1 = ptr->next;\n        p2 = ptr;\n        while(p1 != NULL && p1->name != name){\n            p1 = p1->next;\n            p2 = p2->next;\n        }\n        //Case 3.1 - no match\n        if(p1 == NULL){\n            cout << name << \" was not found in the hashTable\" << endl;\n        }\n        //Case 3.2 - match is found\n        else{\n            p2->next = p1->next;\n            delete p1;\n            cout << name << \" was removed from the Hash Table.\" << endl;\n        }\n    }\n}\n\nvoid FindDrink(string name){\n    int idx = Hash(name);\n    bool foundName = false;\n    string drink;\n\n    item* ptr = hashTable[idx];\n    while(ptr){\n        if(ptr->name == name){\n            foundName = true;\n            drink = ptr->drink;\n            break;\n        }\n        ptr = ptr->next;\n    }\n    if(foundName){\n        cout << name << \"'s favorite drink = \" << drink << endl;\n    }\n    else{\n        cout << name << \"'s info was not found in the hashTable.\" << endl;\n    }\n}\n\nvoid PrintItemInIndex(int idx){\n    item* ptr = hashTable[idx];\n    if(ptr->name == \"empty\"){\n        cout << \"index \" << idx << \" is empty\" << endl;\n    }\n    else{\n        cout << \"index \" << idx << \" contains the following item\" << endl;\n        while(ptr){\n            cout << \"--------------------\\n\";\n            cout << ptr->name << endl;\n            cout << ptr->drink << endl;\n            cout << \"--------------------\\n\";\n            ptr = ptr->next;\n        }\n    }\n}\n\nvoid PrintTable(){\n    int number;\n    for(int i = 0;i < tablesize; i++){\n        number = NumberOfItemsIndex(i);\n        cout << \"--------------------\\n\";\n        cout << \"index = \" << i << endl;\n        cout << hashTable[i]->name << endl;\n        cout << hashTable[i]->drink << endl;\n        cout << \"number of items = \" << number << endl;\n        cout << \"--------------------\\n\";\n\n    }\n}\n\nint NumberOfItemsIndex(int idx){\n    int count = 0;\n    if(hashTable[idx]->name == \"empty\"){\n        return 0;\n    }\n    else{\n        item* ptr = hashTable[idx];\n        while(ptr){\n            count++;\n            ptr = ptr->next;\n        }\n        return count;\n    }\n}\n\nint Hash(string s){\n    int hashVal = 0;\n    int idx;\n    int len = s.length();\n    for(int i = 0; i < len; i++){\n        hashVal = (hashVal + s[i])*17;\n    }\n    idx = hashVal % tablesize;\n\n    return idx;\n}\n\nvoid AddItem(string name, string drink){\n    int idx = Hash(name);\n    if(hashTable[idx]->name == \"empty\"){\n        hashTable[idx]->name = name;\n        hashTable[idx]->drink = drink;\n    }\n    else{\n        item* newItem = new item();\n        newItem->name = name;\n        newItem->drink = drink;\n        newItem->next = NULL;\n\n        item* ptr = hashTable[idx];\n        while(ptr->next != NULL){\n            ptr = ptr->next;\n        }\n        ptr->next = newItem;\n    }\n}\n\nvoid Init(){\n    for(int i = 0; i < tablesize; i++){\n        hashTable[i] = new item();\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    Init();\n    \n    AddItem(\"Paul\", \"Locha\");\n    AddItem(\"Kim\", \"Iced Mocha\");\n    AddItem(\"Emma\", \"Strawberry Smoothy\");\n    AddItem(\"Annie\", \"Hot Chocolate\");\n    AddItem(\"Sarah\", \"Passion Tea\");\n    AddItem(\"Pepper\", \"Caramel Mocha\");\n    AddItem(\"Mike\", \"Chai Tea\");\n    AddItem(\"Steve\", \"Apple Cider\");\n    AddItem(\"Sill\", \"Root Beer\");\n    AddItem(\"Marie\", \"Skinny Latte\");\n    AddItem(\"Susan\", \"Water\");\n    AddItem(\"Joe\", \"Green Tea\");\n\n    //PrintTable();\n    //PrintItemInIndex(2);\n    //FindDrink(\"Joe\");\n    /*\n    string name;\n    while(name != \"exit\"){\n        cout << \"Remove \";\n        cin >> name;\n        if(s != \"exit\");\n        RemoveItem(name);\n    }\n    */\n\n    return 0;\n}\n```","source":"_posts/哈希表.md","raw":"---\ntitle: 哈希表\ndate: 2018-12-25 21:54:22\ncategories:\n- Summary\ntags:\n- Hash\n---\nYoutube上看到一个小哥讲的Hash Table，讲清它的原理和结构之后又带着从零开始实现了构造哈希函数、创建哈希表、增加/删除数据等一系列系统的操作，讲解和示例清晰完整，丝毫不拖泥带水，大赞。\n<!--more-->\n## 链接\n[Introduction to Hash Tables](https://www.youtube.com/watch?v=MfhjkfocRR0&list=PLTxllHdfUq4f7-uHOpxXnBUbsuLiI9pmb&index=1&pbjreload=10)\n\n*需要科学上网，有强烈欲望想要看的同学可以参考之前这篇[ubuntu下服务器搭建](https://ain-crad.github.io/2018/04/13/vultr/)的博客，自己配置外网服务器*\n\n# 哈希表\n![hash](/hash.png)\n哈希表(Hash Table)，是一种数据结构。它通过计算一个关于键值的函数，将所需查询的数据映射到表中的一个位置来访问，这加快了查找的速度。STL中的map就是哈希表的一种实现。\n键值可以是字符串或者其它较为复杂的类型，下面以字符串为例。若将它们直接存储在数组里，当想要访问它们的时候只能O(n)复杂度的遍历一遍。但是通过构造哈希函数，我们可以首先将这个字符串映射为一个整数类型，将这个整数作为它们所在数组位置的下标，这样当我们想要访问某一个字符串，只需要把它送到哈希函数里得到一个返回的哈希值，也就是它所在数组位置的下标，就能以O(1)的复杂度访问它。\n哈希函数的构造方法有很多，但一般我们得不到一个完美的哈希函数，即可能会存在两个字符串它们对应的哈希值相同。为了应对这种冲突，我们可以把数组的每个位置当做链表，存在多值时就链接到链表后面。如上图所示。\n\n# 代码\n边听着小哥的讲解边写的代码，包括了构造哈希函数、创建哈希表、增加/删除数据等操作。\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int tablesize = 40;\nstring s;\nstruct item{\n    item(){\n        name = \"empty\";\n        drink = \"empty\";\n        next = NULL;\n    }\n    string name;\n    string drink;\n    item* next;\n};\nitem* hashTable[tablesize];\n\nvoid Init();\nint Hash(string s);\nvoid AddItem(string name, string drink);\nint NumberOfItemsIndex(int idx);\nvoid PrintTable();\nvoid PrintItemInIndex(int idx);\nvoid FindDrink(string name);\nvoid RemoveItem(string name);\n\nvoid RemoveItem(string name){\n    int idx = Hash(name);\n    item* ptr = hashTable[idx];\n\n    //Case 0 - bucket is empty\n    if(ptr->name == \"empty\"){\n        cout << name << \" was not found in the hashTable\" << endl;\n    }\n\n    //Case 1 - only 1 item contained in bucket and that item has matching name\n    else if(ptr->name == name && ptr->next == NULL){\n        ptr->name = \"empty\";\n        ptr->drink = \"empty\";\n        cout << name << \"was removed from the Hash Table.\" << endl;\n    }\n\n    //Case 2 - match is located in the first item int the bucket but there are \n    //more items in the bucket\n    else if(ptr->name == name && ptr->next != NULL){\n        hashTable[idx] = ptr->next;\n        delete ptr;\n        cout << name << \" was removed from the Hash Table.\" << endl;\n    }\n\n    //Case3 - bucket contains item but first item is not a match\n    else{\n        item* p1;\n        item* p2;\n        p1 = ptr->next;\n        p2 = ptr;\n        while(p1 != NULL && p1->name != name){\n            p1 = p1->next;\n            p2 = p2->next;\n        }\n        //Case 3.1 - no match\n        if(p1 == NULL){\n            cout << name << \" was not found in the hashTable\" << endl;\n        }\n        //Case 3.2 - match is found\n        else{\n            p2->next = p1->next;\n            delete p1;\n            cout << name << \" was removed from the Hash Table.\" << endl;\n        }\n    }\n}\n\nvoid FindDrink(string name){\n    int idx = Hash(name);\n    bool foundName = false;\n    string drink;\n\n    item* ptr = hashTable[idx];\n    while(ptr){\n        if(ptr->name == name){\n            foundName = true;\n            drink = ptr->drink;\n            break;\n        }\n        ptr = ptr->next;\n    }\n    if(foundName){\n        cout << name << \"'s favorite drink = \" << drink << endl;\n    }\n    else{\n        cout << name << \"'s info was not found in the hashTable.\" << endl;\n    }\n}\n\nvoid PrintItemInIndex(int idx){\n    item* ptr = hashTable[idx];\n    if(ptr->name == \"empty\"){\n        cout << \"index \" << idx << \" is empty\" << endl;\n    }\n    else{\n        cout << \"index \" << idx << \" contains the following item\" << endl;\n        while(ptr){\n            cout << \"--------------------\\n\";\n            cout << ptr->name << endl;\n            cout << ptr->drink << endl;\n            cout << \"--------------------\\n\";\n            ptr = ptr->next;\n        }\n    }\n}\n\nvoid PrintTable(){\n    int number;\n    for(int i = 0;i < tablesize; i++){\n        number = NumberOfItemsIndex(i);\n        cout << \"--------------------\\n\";\n        cout << \"index = \" << i << endl;\n        cout << hashTable[i]->name << endl;\n        cout << hashTable[i]->drink << endl;\n        cout << \"number of items = \" << number << endl;\n        cout << \"--------------------\\n\";\n\n    }\n}\n\nint NumberOfItemsIndex(int idx){\n    int count = 0;\n    if(hashTable[idx]->name == \"empty\"){\n        return 0;\n    }\n    else{\n        item* ptr = hashTable[idx];\n        while(ptr){\n            count++;\n            ptr = ptr->next;\n        }\n        return count;\n    }\n}\n\nint Hash(string s){\n    int hashVal = 0;\n    int idx;\n    int len = s.length();\n    for(int i = 0; i < len; i++){\n        hashVal = (hashVal + s[i])*17;\n    }\n    idx = hashVal % tablesize;\n\n    return idx;\n}\n\nvoid AddItem(string name, string drink){\n    int idx = Hash(name);\n    if(hashTable[idx]->name == \"empty\"){\n        hashTable[idx]->name = name;\n        hashTable[idx]->drink = drink;\n    }\n    else{\n        item* newItem = new item();\n        newItem->name = name;\n        newItem->drink = drink;\n        newItem->next = NULL;\n\n        item* ptr = hashTable[idx];\n        while(ptr->next != NULL){\n            ptr = ptr->next;\n        }\n        ptr->next = newItem;\n    }\n}\n\nvoid Init(){\n    for(int i = 0; i < tablesize; i++){\n        hashTable[i] = new item();\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        //freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    Init();\n    \n    AddItem(\"Paul\", \"Locha\");\n    AddItem(\"Kim\", \"Iced Mocha\");\n    AddItem(\"Emma\", \"Strawberry Smoothy\");\n    AddItem(\"Annie\", \"Hot Chocolate\");\n    AddItem(\"Sarah\", \"Passion Tea\");\n    AddItem(\"Pepper\", \"Caramel Mocha\");\n    AddItem(\"Mike\", \"Chai Tea\");\n    AddItem(\"Steve\", \"Apple Cider\");\n    AddItem(\"Sill\", \"Root Beer\");\n    AddItem(\"Marie\", \"Skinny Latte\");\n    AddItem(\"Susan\", \"Water\");\n    AddItem(\"Joe\", \"Green Tea\");\n\n    //PrintTable();\n    //PrintItemInIndex(2);\n    //FindDrink(\"Joe\");\n    /*\n    string name;\n    while(name != \"exit\"){\n        cout << \"Remove \";\n        cin >> name;\n        if(s != \"exit\");\n        RemoveItem(name);\n    }\n    */\n\n    return 0;\n}\n```","slug":"哈希表","published":1,"updated":"2019-08-20T14:40:05.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m4002430vnudfv8kd3","content":"<p>Youtube上看到一个小哥讲的Hash Table，讲清它的原理和结构之后又带着从零开始实现了构造哈希函数、创建哈希表、增加/删除数据等一系列系统的操作，讲解和示例清晰完整，丝毫不拖泥带水，大赞。</p>\n<a id=\"more\"></a>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://www.youtube.com/watch?v=MfhjkfocRR0&list=PLTxllHdfUq4f7-uHOpxXnBUbsuLiI9pmb&index=1&pbjreload=10\" target=\"_blank\" rel=\"noopener\">Introduction to Hash Tables</a></p>\n<p><em>需要科学上网，有强烈欲望想要看的同学可以参考之前这篇<a href=\"https://ain-crad.github.io/2018/04/13/vultr/\" target=\"_blank\" rel=\"noopener\">ubuntu下服务器搭建</a>的博客，自己配置外网服务器</em></p>\n<h1 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h1><p><img src=\"/2018/12/25/哈希表/hash.png\" alt=\"hash\"><br>哈希表(Hash Table)，是一种数据结构。它通过计算一个关于键值的函数，将所需查询的数据映射到表中的一个位置来访问，这加快了查找的速度。STL中的map就是哈希表的一种实现。<br>键值可以是字符串或者其它较为复杂的类型，下面以字符串为例。若将它们直接存储在数组里，当想要访问它们的时候只能O(n)复杂度的遍历一遍。但是通过构造哈希函数，我们可以首先将这个字符串映射为一个整数类型，将这个整数作为它们所在数组位置的下标，这样当我们想要访问某一个字符串，只需要把它送到哈希函数里得到一个返回的哈希值，也就是它所在数组位置的下标，就能以O(1)的复杂度访问它。<br>哈希函数的构造方法有很多，但一般我们得不到一个完美的哈希函数，即可能会存在两个字符串它们对应的哈希值相同。为了应对这种冲突，我们可以把数组的每个位置当做链表，存在多值时就链接到链表后面。如上图所示。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>边听着小哥的讲解边写的代码，包括了构造哈希函数、创建哈希表、增加/删除数据等操作。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> tablesize = <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span>&#123;</span></span><br><span class=\"line\">    item()&#123;</span><br><span class=\"line\">        name = <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">        drink = <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">        next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> drink;</span><br><span class=\"line\">    item* next;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">item* hashTable[tablesize];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Hash</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddItem</span><span class=\"params\">(<span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> drink)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">NumberOfItemsIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintTable</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintItemInIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FindDrink</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RemoveItem</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RemoveItem</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = Hash(name);</span><br><span class=\"line\">    item* ptr = hashTable[idx];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Case 0 - bucket is empty</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ptr-&gt;name == <span class=\"string\">\"empty\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\" was not found in the hashTable\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Case 1 - only 1 item contained in bucket and that item has matching name</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ptr-&gt;name == name &amp;&amp; ptr-&gt;next == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        ptr-&gt;name = <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">        ptr-&gt;drink = <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\"was removed from the Hash Table.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Case 2 - match is located in the first item int the bucket but there are </span></span><br><span class=\"line\">    <span class=\"comment\">//more items in the bucket</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ptr-&gt;name == name &amp;&amp; ptr-&gt;next != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        hashTable[idx] = ptr-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\" was removed from the Hash Table.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Case3 - bucket contains item but first item is not a match</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        item* p1;</span><br><span class=\"line\">        item* p2;</span><br><span class=\"line\">        p1 = ptr-&gt;next;</span><br><span class=\"line\">        p2 = ptr;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1 != <span class=\"literal\">NULL</span> &amp;&amp; p1-&gt;name != name)&#123;</span><br><span class=\"line\">            p1 = p1-&gt;next;</span><br><span class=\"line\">            p2 = p2-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Case 3.1 - no match</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1 == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\" was not found in the hashTable\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Case 3.2 - match is found</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            p2-&gt;next = p1-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> p1;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\" was removed from the Hash Table.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FindDrink</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = Hash(name);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> foundName = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> drink;</span><br><span class=\"line\"></span><br><span class=\"line\">    item* ptr = hashTable[idx];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ptr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr-&gt;name == name)&#123;</span><br><span class=\"line\">            foundName = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            drink = ptr-&gt;drink;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ptr = ptr-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(foundName)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\"'s favorite drink = \"</span> &lt;&lt; drink &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\"'s info was not found in the hashTable.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintItemInIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>&#123;</span><br><span class=\"line\">    item* ptr = hashTable[idx];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ptr-&gt;name == <span class=\"string\">\"empty\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index \"</span> &lt;&lt; idx &lt;&lt; <span class=\"string\">\" is empty\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index \"</span> &lt;&lt; idx &lt;&lt; <span class=\"string\">\" contains the following item\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ptr)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\\n\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ptr-&gt;name &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ptr-&gt;drink &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\\n\"</span>;</span><br><span class=\"line\">            ptr = ptr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintTable</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; tablesize; i++)&#123;</span><br><span class=\"line\">        number = NumberOfItemsIndex(i);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\\n\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index = \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hashTable[i]-&gt;name &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hashTable[i]-&gt;drink &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"number of items = \"</span> &lt;&lt; number &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">NumberOfItemsIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hashTable[idx]-&gt;name == <span class=\"string\">\"empty\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        item* ptr = hashTable[idx];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ptr)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            ptr = ptr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Hash</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hashVal = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        hashVal = (hashVal + s[i])*<span class=\"number\">17</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    idx = hashVal % tablesize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddItem</span><span class=\"params\">(<span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> drink)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = Hash(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hashTable[idx]-&gt;name == <span class=\"string\">\"empty\"</span>)&#123;</span><br><span class=\"line\">        hashTable[idx]-&gt;name = name;</span><br><span class=\"line\">        hashTable[idx]-&gt;drink = drink;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        item* newItem = <span class=\"keyword\">new</span> item();</span><br><span class=\"line\">        newItem-&gt;name = name;</span><br><span class=\"line\">        newItem-&gt;drink = drink;</span><br><span class=\"line\">        newItem-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        item* ptr = hashTable[idx];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ptr-&gt;next != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            ptr = ptr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ptr-&gt;next = newItem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tablesize; i++)&#123;</span><br><span class=\"line\">        hashTable[i] = <span class=\"keyword\">new</span> item();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    Init();</span><br><span class=\"line\">    </span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Paul\"</span>, <span class=\"string\">\"Locha\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Kim\"</span>, <span class=\"string\">\"Iced Mocha\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Emma\"</span>, <span class=\"string\">\"Strawberry Smoothy\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Annie\"</span>, <span class=\"string\">\"Hot Chocolate\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Sarah\"</span>, <span class=\"string\">\"Passion Tea\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Pepper\"</span>, <span class=\"string\">\"Caramel Mocha\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Chai Tea\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Steve\"</span>, <span class=\"string\">\"Apple Cider\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Sill\"</span>, <span class=\"string\">\"Root Beer\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Marie\"</span>, <span class=\"string\">\"Skinny Latte\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Susan\"</span>, <span class=\"string\">\"Water\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Joe\"</span>, <span class=\"string\">\"Green Tea\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//PrintTable();</span></span><br><span class=\"line\">    <span class=\"comment\">//PrintItemInIndex(2);</span></span><br><span class=\"line\">    <span class=\"comment\">//FindDrink(\"Joe\");</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    string name;</span></span><br><span class=\"line\"><span class=\"comment\">    while(name != \"exit\")&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        cout &lt;&lt; \"Remove \";</span></span><br><span class=\"line\"><span class=\"comment\">        cin &gt;&gt; name;</span></span><br><span class=\"line\"><span class=\"comment\">        if(s != \"exit\");</span></span><br><span class=\"line\"><span class=\"comment\">        RemoveItem(name);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Youtube上看到一个小哥讲的Hash Table，讲清它的原理和结构之后又带着从零开始实现了构造哈希函数、创建哈希表、增加/删除数据等一系列系统的操作，讲解和示例清晰完整，丝毫不拖泥带水，大赞。</p>","more":"<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://www.youtube.com/watch?v=MfhjkfocRR0&list=PLTxllHdfUq4f7-uHOpxXnBUbsuLiI9pmb&index=1&pbjreload=10\" target=\"_blank\" rel=\"noopener\">Introduction to Hash Tables</a></p>\n<p><em>需要科学上网，有强烈欲望想要看的同学可以参考之前这篇<a href=\"https://ain-crad.github.io/2018/04/13/vultr/\" target=\"_blank\" rel=\"noopener\">ubuntu下服务器搭建</a>的博客，自己配置外网服务器</em></p>\n<h1 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h1><p><img src=\"/2018/12/25/哈希表/hash.png\" alt=\"hash\"><br>哈希表(Hash Table)，是一种数据结构。它通过计算一个关于键值的函数，将所需查询的数据映射到表中的一个位置来访问，这加快了查找的速度。STL中的map就是哈希表的一种实现。<br>键值可以是字符串或者其它较为复杂的类型，下面以字符串为例。若将它们直接存储在数组里，当想要访问它们的时候只能O(n)复杂度的遍历一遍。但是通过构造哈希函数，我们可以首先将这个字符串映射为一个整数类型，将这个整数作为它们所在数组位置的下标，这样当我们想要访问某一个字符串，只需要把它送到哈希函数里得到一个返回的哈希值，也就是它所在数组位置的下标，就能以O(1)的复杂度访问它。<br>哈希函数的构造方法有很多，但一般我们得不到一个完美的哈希函数，即可能会存在两个字符串它们对应的哈希值相同。为了应对这种冲突，我们可以把数组的每个位置当做链表，存在多值时就链接到链表后面。如上图所示。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>边听着小哥的讲解边写的代码，包括了构造哈希函数、创建哈希表、增加/删除数据等操作。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> tablesize = <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span>&#123;</span></span><br><span class=\"line\">    item()&#123;</span><br><span class=\"line\">        name = <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">        drink = <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">        next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> drink;</span><br><span class=\"line\">    item* next;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">item* hashTable[tablesize];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Hash</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddItem</span><span class=\"params\">(<span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> drink)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">NumberOfItemsIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintTable</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintItemInIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FindDrink</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RemoveItem</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RemoveItem</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = Hash(name);</span><br><span class=\"line\">    item* ptr = hashTable[idx];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Case 0 - bucket is empty</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ptr-&gt;name == <span class=\"string\">\"empty\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\" was not found in the hashTable\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Case 1 - only 1 item contained in bucket and that item has matching name</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ptr-&gt;name == name &amp;&amp; ptr-&gt;next == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        ptr-&gt;name = <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">        ptr-&gt;drink = <span class=\"string\">\"empty\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\"was removed from the Hash Table.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Case 2 - match is located in the first item int the bucket but there are </span></span><br><span class=\"line\">    <span class=\"comment\">//more items in the bucket</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ptr-&gt;name == name &amp;&amp; ptr-&gt;next != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        hashTable[idx] = ptr-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\" was removed from the Hash Table.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Case3 - bucket contains item but first item is not a match</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        item* p1;</span><br><span class=\"line\">        item* p2;</span><br><span class=\"line\">        p1 = ptr-&gt;next;</span><br><span class=\"line\">        p2 = ptr;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1 != <span class=\"literal\">NULL</span> &amp;&amp; p1-&gt;name != name)&#123;</span><br><span class=\"line\">            p1 = p1-&gt;next;</span><br><span class=\"line\">            p2 = p2-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Case 3.1 - no match</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1 == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\" was not found in the hashTable\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Case 3.2 - match is found</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            p2-&gt;next = p1-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> p1;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\" was removed from the Hash Table.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FindDrink</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = Hash(name);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> foundName = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> drink;</span><br><span class=\"line\"></span><br><span class=\"line\">    item* ptr = hashTable[idx];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ptr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr-&gt;name == name)&#123;</span><br><span class=\"line\">            foundName = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            drink = ptr-&gt;drink;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ptr = ptr-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(foundName)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\"'s favorite drink = \"</span> &lt;&lt; drink &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\"'s info was not found in the hashTable.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintItemInIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>&#123;</span><br><span class=\"line\">    item* ptr = hashTable[idx];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ptr-&gt;name == <span class=\"string\">\"empty\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index \"</span> &lt;&lt; idx &lt;&lt; <span class=\"string\">\" is empty\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index \"</span> &lt;&lt; idx &lt;&lt; <span class=\"string\">\" contains the following item\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ptr)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\\n\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ptr-&gt;name &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ptr-&gt;drink &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\\n\"</span>;</span><br><span class=\"line\">            ptr = ptr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintTable</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; tablesize; i++)&#123;</span><br><span class=\"line\">        number = NumberOfItemsIndex(i);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\\n\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index = \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hashTable[i]-&gt;name &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hashTable[i]-&gt;drink &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"number of items = \"</span> &lt;&lt; number &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">NumberOfItemsIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hashTable[idx]-&gt;name == <span class=\"string\">\"empty\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        item* ptr = hashTable[idx];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ptr)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            ptr = ptr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Hash</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hashVal = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        hashVal = (hashVal + s[i])*<span class=\"number\">17</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    idx = hashVal % tablesize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddItem</span><span class=\"params\">(<span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> drink)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx = Hash(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hashTable[idx]-&gt;name == <span class=\"string\">\"empty\"</span>)&#123;</span><br><span class=\"line\">        hashTable[idx]-&gt;name = name;</span><br><span class=\"line\">        hashTable[idx]-&gt;drink = drink;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        item* newItem = <span class=\"keyword\">new</span> item();</span><br><span class=\"line\">        newItem-&gt;name = name;</span><br><span class=\"line\">        newItem-&gt;drink = drink;</span><br><span class=\"line\">        newItem-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        item* ptr = hashTable[idx];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ptr-&gt;next != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            ptr = ptr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ptr-&gt;next = newItem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tablesize; i++)&#123;</span><br><span class=\"line\">        hashTable[i] = <span class=\"keyword\">new</span> item();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"in.txt\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    Init();</span><br><span class=\"line\">    </span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Paul\"</span>, <span class=\"string\">\"Locha\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Kim\"</span>, <span class=\"string\">\"Iced Mocha\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Emma\"</span>, <span class=\"string\">\"Strawberry Smoothy\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Annie\"</span>, <span class=\"string\">\"Hot Chocolate\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Sarah\"</span>, <span class=\"string\">\"Passion Tea\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Pepper\"</span>, <span class=\"string\">\"Caramel Mocha\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Chai Tea\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Steve\"</span>, <span class=\"string\">\"Apple Cider\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Sill\"</span>, <span class=\"string\">\"Root Beer\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Marie\"</span>, <span class=\"string\">\"Skinny Latte\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Susan\"</span>, <span class=\"string\">\"Water\"</span>);</span><br><span class=\"line\">    AddItem(<span class=\"string\">\"Joe\"</span>, <span class=\"string\">\"Green Tea\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//PrintTable();</span></span><br><span class=\"line\">    <span class=\"comment\">//PrintItemInIndex(2);</span></span><br><span class=\"line\">    <span class=\"comment\">//FindDrink(\"Joe\");</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    string name;</span></span><br><span class=\"line\"><span class=\"comment\">    while(name != \"exit\")&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        cout &lt;&lt; \"Remove \";</span></span><br><span class=\"line\"><span class=\"comment\">        cin &gt;&gt; name;</span></span><br><span class=\"line\"><span class=\"comment\">        if(s != \"exit\");</span></span><br><span class=\"line\"><span class=\"comment\">        RemoveItem(name);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"python脚本-tab转空格","date":"2018-06-12T03:38:20.000Z","_content":"有一个一直比较麻烦的问题，平时写代码都是在gedit上写，然后设置了tab键是4个空格的位置，但是代码粘到博客里tab就变成了8个空格的位置，严重破坏了代码的美观！不能容忍！一直没有找到怎么在hexo里面设置，所以之前一直手动把tab换成4个空格QAQ，慢慢的觉得这样很傻，我为什么不写个程序帮我自动改＝＝，首选python！（人生苦短，我用python）。虽然对python不是很熟悉，但是边查边写应该问题不大，最终完成了，从此再也不用傻傻的手动转换了，幸福/(ㄒoㄒ)/~~代码量很小\n<!-- more -->\n# 简介\n就是把文档里的tab全部转换成4个空格，其余不变\n效果图：\n转换前\n![tab](/tab.png)\n转换后\n![space](/space.png)\n# 代码\n``` python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*- \n\ndef T2S():\n    str = raw_input(\"file name:\")\n    file_path = \"/home/aincrad/Desktop/\" + str\n    f = open(file_path, \"r\")\n    fnew = open(\"/home/aincrad/Desktop/new\", \"w\")\n    data = f.read()\n    for c in data:\n        if c == '\\t':\n            fnew.write(\"    \")\n        else:\n            fnew.write(c)\n    f.close()\n    fnew.close()\n    print \"Done\"\n\nif __name__ == \"__main__\":\n    T2S()\n```\n*说明:默认了需要转换的文件在桌面，运行程序后只需要输入文件名即可，之后会在桌面上生成名为new的转换后的文件。*\n","source":"_posts/tab-to-spaces.md","raw":"---\ntitle: python脚本-tab转空格\ndate: 2018-06-12 11:38:20\ncategories:\n- Messy article\ntags:\n- python\n---\n有一个一直比较麻烦的问题，平时写代码都是在gedit上写，然后设置了tab键是4个空格的位置，但是代码粘到博客里tab就变成了8个空格的位置，严重破坏了代码的美观！不能容忍！一直没有找到怎么在hexo里面设置，所以之前一直手动把tab换成4个空格QAQ，慢慢的觉得这样很傻，我为什么不写个程序帮我自动改＝＝，首选python！（人生苦短，我用python）。虽然对python不是很熟悉，但是边查边写应该问题不大，最终完成了，从此再也不用傻傻的手动转换了，幸福/(ㄒoㄒ)/~~代码量很小\n<!-- more -->\n# 简介\n就是把文档里的tab全部转换成4个空格，其余不变\n效果图：\n转换前\n![tab](/tab.png)\n转换后\n![space](/space.png)\n# 代码\n``` python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*- \n\ndef T2S():\n    str = raw_input(\"file name:\")\n    file_path = \"/home/aincrad/Desktop/\" + str\n    f = open(file_path, \"r\")\n    fnew = open(\"/home/aincrad/Desktop/new\", \"w\")\n    data = f.read()\n    for c in data:\n        if c == '\\t':\n            fnew.write(\"    \")\n        else:\n            fnew.write(c)\n    f.close()\n    fnew.close()\n    print \"Done\"\n\nif __name__ == \"__main__\":\n    T2S()\n```\n*说明:默认了需要转换的文件在桌面，运行程序后只需要输入文件名即可，之后会在桌面上生成名为new的转换后的文件。*\n","slug":"tab-to-spaces","published":1,"updated":"2019-08-20T14:47:25.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m4002530vnw6qugw9t","content":"<p>有一个一直比较麻烦的问题，平时写代码都是在gedit上写，然后设置了tab键是4个空格的位置，但是代码粘到博客里tab就变成了8个空格的位置，严重破坏了代码的美观！不能容忍！一直没有找到怎么在hexo里面设置，所以之前一直手动把tab换成4个空格QAQ，慢慢的觉得这样很傻，我为什么不写个程序帮我自动改＝＝，首选python！（人生苦短，我用python）。虽然对python不是很熟悉，但是边查边写应该问题不大，最终完成了，从此再也不用傻傻的手动转换了，幸福/(ㄒoㄒ)/~~代码量很小</p>\n<a id=\"more\"></a>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>就是把文档里的tab全部转换成4个空格，其余不变<br>效果图：<br>转换前<br><img src=\"/2018/06/12/tab-to-spaces/tab.png\" alt=\"tab\"><br>转换后<br><img src=\"/2018/06/12/tab-to-spaces/space.png\" alt=\"space\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*- </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">T2S</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    str = raw_input(<span class=\"string\">\"file name:\"</span>)</span><br><span class=\"line\">    file_path = <span class=\"string\">\"/home/aincrad/Desktop/\"</span> + str</span><br><span class=\"line\">    f = open(file_path, <span class=\"string\">\"r\"</span>)</span><br><span class=\"line\">    fnew = open(<span class=\"string\">\"/home/aincrad/Desktop/new\"</span>, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\">    data = f.read()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c == <span class=\"string\">'\\t'</span>:</span><br><span class=\"line\">            fnew.write(<span class=\"string\">\"    \"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fnew.write(c)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    fnew.close()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Done\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    T2S()</span><br></pre></td></tr></table></figure>\n\n<p><em>说明:默认了需要转换的文件在桌面，运行程序后只需要输入文件名即可，之后会在桌面上生成名为new的转换后的文件。</em></p>\n","site":{"data":{}},"excerpt":"<p>有一个一直比较麻烦的问题，平时写代码都是在gedit上写，然后设置了tab键是4个空格的位置，但是代码粘到博客里tab就变成了8个空格的位置，严重破坏了代码的美观！不能容忍！一直没有找到怎么在hexo里面设置，所以之前一直手动把tab换成4个空格QAQ，慢慢的觉得这样很傻，我为什么不写个程序帮我自动改＝＝，首选python！（人生苦短，我用python）。虽然对python不是很熟悉，但是边查边写应该问题不大，最终完成了，从此再也不用傻傻的手动转换了，幸福/(ㄒoㄒ)/~~代码量很小</p>","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>就是把文档里的tab全部转换成4个空格，其余不变<br>效果图：<br>转换前<br><img src=\"/2018/06/12/tab-to-spaces/tab.png\" alt=\"tab\"><br>转换后<br><img src=\"/2018/06/12/tab-to-spaces/space.png\" alt=\"space\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*- </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">T2S</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    str = raw_input(<span class=\"string\">\"file name:\"</span>)</span><br><span class=\"line\">    file_path = <span class=\"string\">\"/home/aincrad/Desktop/\"</span> + str</span><br><span class=\"line\">    f = open(file_path, <span class=\"string\">\"r\"</span>)</span><br><span class=\"line\">    fnew = open(<span class=\"string\">\"/home/aincrad/Desktop/new\"</span>, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\">    data = f.read()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c == <span class=\"string\">'\\t'</span>:</span><br><span class=\"line\">            fnew.write(<span class=\"string\">\"    \"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fnew.write(c)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    fnew.close()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Done\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    T2S()</span><br></pre></td></tr></table></figure>\n\n<p><em>说明:默认了需要转换的文件在桌面，运行程序后只需要输入文件名即可，之后会在桌面上生成名为new的转换后的文件。</em></p>"},{"title":"埃及分数-迭代加深搜索","date":"2019-01-03T08:21:30.000Z","_content":"迭代加深搜索实际上是人为规定搜索深度的DFS。从小到大枚举深度上限maxd，每次执行只考虑深度不超过maxd的结点。这样，只要解的深度有限，就一定可以在有限时间内枚举到。\n\n*对于可以用回溯法求解但解答树深度没有明显上限的题目，可以考虑使用迭代加深搜索。*\n<!--more-->\n\n# 埃及分数问题\n在古埃及，人们使用单位分数的和（即1/a，a是自然数）表示一切有理数。例如，``2/3 = 1/2 + 1/6``，但不允许``2/3 = 1/3 + 1/3``，因为在加数中不允许有相同的。\n对于一个分数a/b，表示方法有很多种，其中加数少的比加数多的好，如果加数个数相同，则最小的分数越大越好。例如，``19/45 = 1/5 + 1/6 + 1/18``是最优方案。\n输入整数a，b（0< a < b < 500），计算最佳表达式。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu  3 Jan 07:11:15 CST 2019\n *\n */\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e3;\nlong long a, b;\nlong long ans[maxn];\nlong long maxd;\nlong long v[maxn];\nbool ok;\n\nlong long get_first(long long a, long long b){\n    if(b % a == 0) return b / a;\n    else return b / a + 1;\n}\n\nlong long gcd(long long a, long long b){\n    if(b == 0) return a;\n    gcd(b, a % b);\n}\n\nvoid dfs(int dep, long long from, long long a, long long b){\n    if(dep == maxd){\n        if(a * b == 0){\n            for(int i = dep - 1; i >= 0; i--){\n                if(ans[i] == -1 || v[i] < ans[i]){\n                    memcpy(ans, v, sizeof(ans));\n                    break;\n                }\n            }\n            ok = 1;\n        }\n        //cout << \"return\" << endl;\n        return;\n    }\n    from = max(from, get_first(a, b));\n    for(long long i = from; ; i++){\n        //cout << \"true: \" << maxd << \" \" << dep << \" \" << i << \" \" << a << \" \" << b << endl;\n        if(b * (maxd - dep) < i * a){\n            //cout << \"cut\" << endl;\n            break;\n        }\n        long long b2 = b * i;\n        long long a2 = a * i - b;\n        long long g = gcd(a2, b2);\n        v[dep] = i;\n        //cout << \"next: \" << maxd << \" \" << dep + 1 << \" \" << i + 1 << \" \" << a2 / g << \" \" << b2 / g << endl;\n        dfs(dep + 1, i + 1, a2 / g, b2 / g);\n    }\n}\n\nint  main(){\n    while(cin >> a >> b){\n        for(maxd = 1; ; maxd++){\n            memset(ans, -1, sizeof(ans));\n            ok = 0;\n            dfs(0, get_first(a, b), a, b);\n            if(ok) break;\n        }\n        if(ok){\n            cout << a << \"/\" << b << \" = \";\n            for(int i = 0; i < maxd; i++){\n                cout << 1 << \"/\" << ans[i];\n                if(i != maxd - 1) cout << \" + \";\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}\n```\n","source":"_posts/埃及分数-迭代加深搜索.md","raw":"---\ntitle: 埃及分数-迭代加深搜索\ndate: 2019-01-03 16:21:30\ncategories:\n- Summary\ntags:\n- 迭代加深搜索\n---\n迭代加深搜索实际上是人为规定搜索深度的DFS。从小到大枚举深度上限maxd，每次执行只考虑深度不超过maxd的结点。这样，只要解的深度有限，就一定可以在有限时间内枚举到。\n\n*对于可以用回溯法求解但解答树深度没有明显上限的题目，可以考虑使用迭代加深搜索。*\n<!--more-->\n\n# 埃及分数问题\n在古埃及，人们使用单位分数的和（即1/a，a是自然数）表示一切有理数。例如，``2/3 = 1/2 + 1/6``，但不允许``2/3 = 1/3 + 1/3``，因为在加数中不允许有相同的。\n对于一个分数a/b，表示方法有很多种，其中加数少的比加数多的好，如果加数个数相同，则最小的分数越大越好。例如，``19/45 = 1/5 + 1/6 + 1/18``是最优方案。\n输入整数a，b（0< a < b < 500），计算最佳表达式。\n\n# 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu  3 Jan 07:11:15 CST 2019\n *\n */\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 1e3;\nlong long a, b;\nlong long ans[maxn];\nlong long maxd;\nlong long v[maxn];\nbool ok;\n\nlong long get_first(long long a, long long b){\n    if(b % a == 0) return b / a;\n    else return b / a + 1;\n}\n\nlong long gcd(long long a, long long b){\n    if(b == 0) return a;\n    gcd(b, a % b);\n}\n\nvoid dfs(int dep, long long from, long long a, long long b){\n    if(dep == maxd){\n        if(a * b == 0){\n            for(int i = dep - 1; i >= 0; i--){\n                if(ans[i] == -1 || v[i] < ans[i]){\n                    memcpy(ans, v, sizeof(ans));\n                    break;\n                }\n            }\n            ok = 1;\n        }\n        //cout << \"return\" << endl;\n        return;\n    }\n    from = max(from, get_first(a, b));\n    for(long long i = from; ; i++){\n        //cout << \"true: \" << maxd << \" \" << dep << \" \" << i << \" \" << a << \" \" << b << endl;\n        if(b * (maxd - dep) < i * a){\n            //cout << \"cut\" << endl;\n            break;\n        }\n        long long b2 = b * i;\n        long long a2 = a * i - b;\n        long long g = gcd(a2, b2);\n        v[dep] = i;\n        //cout << \"next: \" << maxd << \" \" << dep + 1 << \" \" << i + 1 << \" \" << a2 / g << \" \" << b2 / g << endl;\n        dfs(dep + 1, i + 1, a2 / g, b2 / g);\n    }\n}\n\nint  main(){\n    while(cin >> a >> b){\n        for(maxd = 1; ; maxd++){\n            memset(ans, -1, sizeof(ans));\n            ok = 0;\n            dfs(0, get_first(a, b), a, b);\n            if(ok) break;\n        }\n        if(ok){\n            cout << a << \"/\" << b << \" = \";\n            for(int i = 0; i < maxd; i++){\n                cout << 1 << \"/\" << ans[i];\n                if(i != maxd - 1) cout << \" + \";\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}\n```\n","slug":"埃及分数-迭代加深搜索","published":1,"updated":"2019-08-20T14:41:51.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m5002630vn8nbw8uca","content":"<p>迭代加深搜索实际上是人为规定搜索深度的DFS。从小到大枚举深度上限maxd，每次执行只考虑深度不超过maxd的结点。这样，只要解的深度有限，就一定可以在有限时间内枚举到。</p>\n<p><em>对于可以用回溯法求解但解答树深度没有明显上限的题目，可以考虑使用迭代加深搜索。</em></p>\n<a id=\"more\"></a>\n\n<h1 id=\"埃及分数问题\"><a href=\"#埃及分数问题\" class=\"headerlink\" title=\"埃及分数问题\"></a>埃及分数问题</h1><p>在古埃及，人们使用单位分数的和（即1/a，a是自然数）表示一切有理数。例如，<code>2/3 = 1/2 + 1/6</code>，但不允许<code>2/3 = 1/3 + 1/3</code>，因为在加数中不允许有相同的。<br>对于一个分数a/b，表示方法有很多种，其中加数少的比加数多的好，如果加数个数相同，则最小的分数越大越好。例如，<code>19/45 = 1/5 + 1/6 + 1/18</code>是最优方案。<br>输入整数a，b（0&lt; a &lt; b &lt; 500），计算最佳表达式。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu  3 Jan 07:11:15 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e3</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, b;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans[maxn];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> maxd;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> v[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ok;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">get_first</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b % a == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b / a;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b / a + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    gcd(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> from, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep == maxd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a * b == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = dep - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans[i] == <span class=\"number\">-1</span> || v[i] &lt; ans[i])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">memcpy</span>(ans, v, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"return\" &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    from = max(from, get_first(a, b));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = from; ; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"true: \" &lt;&lt; maxd &lt;&lt; \" \" &lt;&lt; dep &lt;&lt; \" \" &lt;&lt; i &lt;&lt; \" \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b * (maxd - dep) &lt; i * a)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"cut\" &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b2 = b * i;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a2 = a * i - b;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> g = gcd(a2, b2);</span><br><span class=\"line\">        v[dep] = i;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"next: \" &lt;&lt; maxd &lt;&lt; \" \" &lt;&lt; dep + 1 &lt;&lt; \" \" &lt;&lt; i + 1 &lt;&lt; \" \" &lt;&lt; a2 / g &lt;&lt; \" \" &lt;&lt; b2 / g &lt;&lt; endl;</span></span><br><span class=\"line\">        dfs(dep + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>, a2 / g, b2 / g);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(maxd = <span class=\"number\">1</span>; ; maxd++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(ans, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">            ok = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dfs(<span class=\"number\">0</span>, get_first(a, b), a, b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ok) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\"/\"</span> &lt;&lt; b &lt;&lt; <span class=\"string\">\" = \"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxd; i++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\"/\"</span> &lt;&lt; ans[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i != maxd - <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" + \"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>迭代加深搜索实际上是人为规定搜索深度的DFS。从小到大枚举深度上限maxd，每次执行只考虑深度不超过maxd的结点。这样，只要解的深度有限，就一定可以在有限时间内枚举到。</p>\n<p><em>对于可以用回溯法求解但解答树深度没有明显上限的题目，可以考虑使用迭代加深搜索。</em></p>","more":"<h1 id=\"埃及分数问题\"><a href=\"#埃及分数问题\" class=\"headerlink\" title=\"埃及分数问题\"></a>埃及分数问题</h1><p>在古埃及，人们使用单位分数的和（即1/a，a是自然数）表示一切有理数。例如，<code>2/3 = 1/2 + 1/6</code>，但不允许<code>2/3 = 1/3 + 1/3</code>，因为在加数中不允许有相同的。<br>对于一个分数a/b，表示方法有很多种，其中加数少的比加数多的好，如果加数个数相同，则最小的分数越大越好。例如，<code>19/45 = 1/5 + 1/6 + 1/18</code>是最优方案。<br>输入整数a，b（0&lt; a &lt; b &lt; 500），计算最佳表达式。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu  3 Jan 07:11:15 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e3</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, b;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans[maxn];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> maxd;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> v[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ok;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">get_first</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b % a == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b / a;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b / a + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    gcd(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> dep, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> from, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep == maxd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a * b == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = dep - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans[i] == <span class=\"number\">-1</span> || v[i] &lt; ans[i])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">memcpy</span>(ans, v, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"return\" &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    from = max(from, get_first(a, b));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = from; ; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"true: \" &lt;&lt; maxd &lt;&lt; \" \" &lt;&lt; dep &lt;&lt; \" \" &lt;&lt; i &lt;&lt; \" \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b * (maxd - dep) &lt; i * a)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"cut\" &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b2 = b * i;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a2 = a * i - b;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> g = gcd(a2, b2);</span><br><span class=\"line\">        v[dep] = i;</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"next: \" &lt;&lt; maxd &lt;&lt; \" \" &lt;&lt; dep + 1 &lt;&lt; \" \" &lt;&lt; i + 1 &lt;&lt; \" \" &lt;&lt; a2 / g &lt;&lt; \" \" &lt;&lt; b2 / g &lt;&lt; endl;</span></span><br><span class=\"line\">        dfs(dep + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>, a2 / g, b2 / g);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(maxd = <span class=\"number\">1</span>; ; maxd++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(ans, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">            ok = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dfs(<span class=\"number\">0</span>, get_first(a, b), a, b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ok) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\"/\"</span> &lt;&lt; b &lt;&lt; <span class=\"string\">\" = \"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxd; i++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\"/\"</span> &lt;&lt; ans[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i != maxd - <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" + \"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"循环小数化为分数的方法","date":"2018-12-09T15:14:07.000Z","_content":"修数学双学位的朋友给我出了一道小学奥数题= =，一个以abc为循环节的小数0.abc...，（其中a，b，c都是0～9的整数，且互不相同）。假设它的真分数表达形式为$\\frac{m}{n}，0 < n < 100$，求这个范围里的所有的n的可能取值。然而我用程序暴力破解了2333。虽然被朋友谴责了，但是这就是程序猿的解决方式(逃\n下面先给出数学求解方式，最后附上暴力破解程序。\n<!--more-->\n# 参考链接\n[Wikiwand-循环小数](https://www.wikiwand.com/zh-cn/%E5%BE%AA%E7%8E%AF%E5%B0%8F%E6%95%B0)\n[无限循环小数化分数](http://math001.com/decimal_to_fraction/)\n\n# 数学解法\n设x = 0.abcabcabc...，则1000x = abc.abcabcabc...。\n1000x - x = abc.abcabcabc... - 0.abcabcabc...，即999x = abc。所以$$x = \\frac{abc}{999}$$999的因子有1，3，9，27，37，111，333，999，因为a，b，c各不相同且0 < n < 100，所以n的可能取值为27和37。\n\n维基百科上关于计算更一般情况的解法：\n![wiki](/wiki.png)\n此外第二个参考链接的博主还提出了一种计算等比数列和的求解方式也很有意思。\n\n# 暴力解法\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 10 Dec 00:11:35 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring s;\n\nbool ok(string s){\n    if(s[2] == s[5] && s[3] == s[6] && s[4] == s[7] && s[2] != s[3] && s[2] != s[4] && s[3] != s[4]){\n        return true;\n    }\n    return false;\n}\n\nint gcd(int a, int b){\n    if(b == 0) return a;\n    return gcd(b, a % b);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n\n    for(int m = 1; m < 100; m++){\n        for(int n = m + 1; n < 100; n++){\n            double x = (double)m / n;\n            stringstream ss;\n            ss << x;\n            ss >> s;\n            if(ok(s)){\n                int d = gcd(m, n);\n                cout << m / d << \" \" << n / d << \" \" << x << endl;\n            }\n        }\n    }\n\n    return 0;\n}\n```","source":"_posts/循环小数化为分数的方法.md","raw":"---\ntitle: 循环小数化为分数的方法\ndate: 2018-12-09 23:14:07\ncategories:\n- Math\ntags:\n- Math\n---\n修数学双学位的朋友给我出了一道小学奥数题= =，一个以abc为循环节的小数0.abc...，（其中a，b，c都是0～9的整数，且互不相同）。假设它的真分数表达形式为$\\frac{m}{n}，0 < n < 100$，求这个范围里的所有的n的可能取值。然而我用程序暴力破解了2333。虽然被朋友谴责了，但是这就是程序猿的解决方式(逃\n下面先给出数学求解方式，最后附上暴力破解程序。\n<!--more-->\n# 参考链接\n[Wikiwand-循环小数](https://www.wikiwand.com/zh-cn/%E5%BE%AA%E7%8E%AF%E5%B0%8F%E6%95%B0)\n[无限循环小数化分数](http://math001.com/decimal_to_fraction/)\n\n# 数学解法\n设x = 0.abcabcabc...，则1000x = abc.abcabcabc...。\n1000x - x = abc.abcabcabc... - 0.abcabcabc...，即999x = abc。所以$$x = \\frac{abc}{999}$$999的因子有1，3，9，27，37，111，333，999，因为a，b，c各不相同且0 < n < 100，所以n的可能取值为27和37。\n\n维基百科上关于计算更一般情况的解法：\n![wiki](/wiki.png)\n此外第二个参考链接的博主还提出了一种计算等比数列和的求解方式也很有意思。\n\n# 暴力解法\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Mon 10 Dec 00:11:35 CST 2018\n *\n */\n \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring s;\n\nbool ok(string s){\n    if(s[2] == s[5] && s[3] == s[6] && s[4] == s[7] && s[2] != s[3] && s[2] != s[4] && s[3] != s[4]){\n        return true;\n    }\n    return false;\n}\n\nint gcd(int a, int b){\n    if(b == 0) return a;\n    return gcd(b, a % b);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n\n    for(int m = 1; m < 100; m++){\n        for(int n = m + 1; n < 100; n++){\n            double x = (double)m / n;\n            stringstream ss;\n            ss << x;\n            ss >> s;\n            if(ok(s)){\n                int d = gcd(m, n);\n                cout << m / d << \" \" << n / d << \" \" << x << endl;\n            }\n        }\n    }\n\n    return 0;\n}\n```","slug":"循环小数化为分数的方法","published":1,"updated":"2019-08-20T14:39:13.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m5002730vnv91lzx9d","content":"<p>修数学双学位的朋友给我出了一道小学奥数题= =，一个以abc为循环节的小数0.abc…，（其中a，b，c都是0～9的整数，且互不相同）。假设它的真分数表达形式为$\\frac{m}{n}，0 &lt; n &lt; 100$，求这个范围里的所有的n的可能取值。然而我用程序暴力破解了2333。虽然被朋友谴责了，但是这就是程序猿的解决方式(逃<br>下面先给出数学求解方式，最后附上暴力破解程序。</p>\n<a id=\"more\"></a>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.wikiwand.com/zh-cn/%E5%BE%AA%E7%8E%AF%E5%B0%8F%E6%95%B0\" target=\"_blank\" rel=\"noopener\">Wikiwand-循环小数</a><br><a href=\"http://math001.com/decimal_to_fraction/\" target=\"_blank\" rel=\"noopener\">无限循环小数化分数</a></p>\n<h1 id=\"数学解法\"><a href=\"#数学解法\" class=\"headerlink\" title=\"数学解法\"></a>数学解法</h1><p>设x = 0.abcabcabc…，则1000x = abc.abcabcabc…。<br>1000x - x = abc.abcabcabc… - 0.abcabcabc…，即999x = abc。所以$$x = \\frac{abc}{999}$$999的因子有1，3，9，27，37，111，333，999，因为a，b，c各不相同且0 &lt; n &lt; 100，所以n的可能取值为27和37。</p>\n<p>维基百科上关于计算更一般情况的解法：<br><img src=\"/2018/12/09/循环小数化为分数的方法/wiki.png\" alt=\"wiki\"><br>此外第二个参考链接的博主还提出了一种计算等比数列和的求解方式也很有意思。</p>\n<h1 id=\"暴力解法\"><a href=\"#暴力解法\" class=\"headerlink\" title=\"暴力解法\"></a>暴力解法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 10 Dec 00:11:35 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[<span class=\"number\">2</span>] == s[<span class=\"number\">5</span>] &amp;&amp; s[<span class=\"number\">3</span>] == s[<span class=\"number\">6</span>] &amp;&amp; s[<span class=\"number\">4</span>] == s[<span class=\"number\">7</span>] &amp;&amp; s[<span class=\"number\">2</span>] != s[<span class=\"number\">3</span>] &amp;&amp; s[<span class=\"number\">2</span>] != s[<span class=\"number\">4</span>] &amp;&amp; s[<span class=\"number\">3</span>] != s[<span class=\"number\">4</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gcd(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = <span class=\"number\">1</span>; m &lt; <span class=\"number\">100</span>; m++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = m + <span class=\"number\">1</span>; n &lt; <span class=\"number\">100</span>; n++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> x = (<span class=\"keyword\">double</span>)m / n;</span><br><span class=\"line\">            <span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">            ss &lt;&lt; x;</span><br><span class=\"line\">            ss &gt;&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ok(s))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> d = gcd(m, n);</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; m / d &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; n / d &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>修数学双学位的朋友给我出了一道小学奥数题= =，一个以abc为循环节的小数0.abc…，（其中a，b，c都是0～9的整数，且互不相同）。假设它的真分数表达形式为$\\frac{m}{n}，0 &lt; n &lt; 100$，求这个范围里的所有的n的可能取值。然而我用程序暴力破解了2333。虽然被朋友谴责了，但是这就是程序猿的解决方式(逃<br>下面先给出数学求解方式，最后附上暴力破解程序。</p>","more":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.wikiwand.com/zh-cn/%E5%BE%AA%E7%8E%AF%E5%B0%8F%E6%95%B0\" target=\"_blank\" rel=\"noopener\">Wikiwand-循环小数</a><br><a href=\"http://math001.com/decimal_to_fraction/\" target=\"_blank\" rel=\"noopener\">无限循环小数化分数</a></p>\n<h1 id=\"数学解法\"><a href=\"#数学解法\" class=\"headerlink\" title=\"数学解法\"></a>数学解法</h1><p>设x = 0.abcabcabc…，则1000x = abc.abcabcabc…。<br>1000x - x = abc.abcabcabc… - 0.abcabcabc…，即999x = abc。所以$$x = \\frac{abc}{999}$$999的因子有1，3，9，27，37，111，333，999，因为a，b，c各不相同且0 &lt; n &lt; 100，所以n的可能取值为27和37。</p>\n<p>维基百科上关于计算更一般情况的解法：<br><img src=\"/2018/12/09/循环小数化为分数的方法/wiki.png\" alt=\"wiki\"><br>此外第二个参考链接的博主还提出了一种计算等比数列和的求解方式也很有意思。</p>\n<h1 id=\"暴力解法\"><a href=\"#暴力解法\" class=\"headerlink\" title=\"暴力解法\"></a>暴力解法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Mon 10 Dec 00:11:35 CST 2018</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ok</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[<span class=\"number\">2</span>] == s[<span class=\"number\">5</span>] &amp;&amp; s[<span class=\"number\">3</span>] == s[<span class=\"number\">6</span>] &amp;&amp; s[<span class=\"number\">4</span>] == s[<span class=\"number\">7</span>] &amp;&amp; s[<span class=\"number\">2</span>] != s[<span class=\"number\">3</span>] &amp;&amp; s[<span class=\"number\">2</span>] != s[<span class=\"number\">4</span>] &amp;&amp; s[<span class=\"number\">3</span>] != s[<span class=\"number\">4</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gcd(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = <span class=\"number\">1</span>; m &lt; <span class=\"number\">100</span>; m++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = m + <span class=\"number\">1</span>; n &lt; <span class=\"number\">100</span>; n++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> x = (<span class=\"keyword\">double</span>)m / n;</span><br><span class=\"line\">            <span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">            ss &lt;&lt; x;</span><br><span class=\"line\">            ss &gt;&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ok(s))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> d = gcd(m, n);</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; m / d &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; n / d &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"欧拉路","date":"2018-11-04T12:54:42.000Z","_content":"有一条名为Pregel的河流经过Konigsberg城。城中有7座桥，把河中的两个岛与河岸连接起来。当地居民热衷于一个难题：是否存在一条线路，可以不重复的走遍7座桥。这就是著名的七桥问题。它由大数学家欧拉首先提出，并给出完美的解答，所以这样的一条路也叫欧拉道路。\n![Elur](/Elur.png)\n\n<!--more-->\n# 参考\n《算法竞赛入门经典（2）》\n\nPs：图片来自[维基百科](https://www.wikiwand.com/zh-hans/%E6%9F%AF%E5%B0%BC%E6%96%AF%E5%A0%A1%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98)\n\n# 欧拉路（欧拉回路）\n将七桥问题用图论的形式表达：能否从无向图中的一个结点出发走出一条道路，每条边恰好经过一次。\n\n可以发现，除起点和终点外其它点的“进”和“出”是对应的，即其它点的度数应为偶数。这也是判断欧拉路是否存在的充分条件--**如果一个无向图是连通的，且最多只有两个奇点，则一定存在欧拉道路。如果有两个奇点，则必须从其中一个奇点出发，另一个奇点终止；如果奇点不存在，则可以从任意点出发，最终一点会回到该点（欧拉回路）**\n\n类似的对有向图来说--**最多只能有两个点的入度不等于出度， 而且必须是其中一个点的出度恰好比入度大1（把它作为起点），另一个的入度比出度大1（把它作为终点）。还有一个前提条件：在忽略边的方向后，图必须是连通的**\n\n# 代码\n```C++\nvoid elur(int u){\n    for(int v = 0; v < n; v++){\n        if(G[u][v] && !vis[u][v]){\n            vis[u][v] = vis[v][u] = 1;\n            elur(v);\n        }\n        printf(\"%d %d\\n\", u, v);\n    }\n}\n\n//说明\n1.上面的代码适用于无向图，但是可以改为有向图：把vis[u][v] = vis[v][u] = 1改成vis[u][v] = 1\n2.上面的代码是逆序打印，可以把printf改为push，将边压栈，最后顺序打印。\n```\n","source":"_posts/欧拉回路.md","raw":"---\ntitle: 欧拉路\ndate: 2018-11-04 20:54:42\ncategories:\n- Summary\ntags:\n- 欧拉路\n---\n有一条名为Pregel的河流经过Konigsberg城。城中有7座桥，把河中的两个岛与河岸连接起来。当地居民热衷于一个难题：是否存在一条线路，可以不重复的走遍7座桥。这就是著名的七桥问题。它由大数学家欧拉首先提出，并给出完美的解答，所以这样的一条路也叫欧拉道路。\n![Elur](/Elur.png)\n\n<!--more-->\n# 参考\n《算法竞赛入门经典（2）》\n\nPs：图片来自[维基百科](https://www.wikiwand.com/zh-hans/%E6%9F%AF%E5%B0%BC%E6%96%AF%E5%A0%A1%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98)\n\n# 欧拉路（欧拉回路）\n将七桥问题用图论的形式表达：能否从无向图中的一个结点出发走出一条道路，每条边恰好经过一次。\n\n可以发现，除起点和终点外其它点的“进”和“出”是对应的，即其它点的度数应为偶数。这也是判断欧拉路是否存在的充分条件--**如果一个无向图是连通的，且最多只有两个奇点，则一定存在欧拉道路。如果有两个奇点，则必须从其中一个奇点出发，另一个奇点终止；如果奇点不存在，则可以从任意点出发，最终一点会回到该点（欧拉回路）**\n\n类似的对有向图来说--**最多只能有两个点的入度不等于出度， 而且必须是其中一个点的出度恰好比入度大1（把它作为起点），另一个的入度比出度大1（把它作为终点）。还有一个前提条件：在忽略边的方向后，图必须是连通的**\n\n# 代码\n```C++\nvoid elur(int u){\n    for(int v = 0; v < n; v++){\n        if(G[u][v] && !vis[u][v]){\n            vis[u][v] = vis[v][u] = 1;\n            elur(v);\n        }\n        printf(\"%d %d\\n\", u, v);\n    }\n}\n\n//说明\n1.上面的代码适用于无向图，但是可以改为有向图：把vis[u][v] = vis[v][u] = 1改成vis[u][v] = 1\n2.上面的代码是逆序打印，可以把printf改为push，将边压栈，最后顺序打印。\n```\n","slug":"欧拉回路","published":1,"updated":"2019-08-29T04:45:11.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m5002830vnp76edsxa","content":"<p>有一条名为Pregel的河流经过Konigsberg城。城中有7座桥，把河中的两个岛与河岸连接起来。当地居民热衷于一个难题：是否存在一条线路，可以不重复的走遍7座桥。这就是著名的七桥问题。它由大数学家欧拉首先提出，并给出完美的解答，所以这样的一条路也叫欧拉道路。<br><img src=\"/2018/11/04/欧拉回路/Elur.png\" alt=\"Elur\"></p>\n<a id=\"more\"></a>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《算法竞赛入门经典（2）》</p>\n<p>Ps：图片来自<a href=\"https://www.wikiwand.com/zh-hans/%E6%9F%AF%E5%B0%BC%E6%96%AF%E5%A0%A1%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<h1 id=\"欧拉路（欧拉回路）\"><a href=\"#欧拉路（欧拉回路）\" class=\"headerlink\" title=\"欧拉路（欧拉回路）\"></a>欧拉路（欧拉回路）</h1><p>将七桥问题用图论的形式表达：能否从无向图中的一个结点出发走出一条道路，每条边恰好经过一次。</p>\n<p>可以发现，除起点和终点外其它点的“进”和“出”是对应的，即其它点的度数应为偶数。这也是判断欧拉路是否存在的充分条件–<strong>如果一个无向图是连通的，且最多只有两个奇点，则一定存在欧拉道路。如果有两个奇点，则必须从其中一个奇点出发，另一个奇点终止；如果奇点不存在，则可以从任意点出发，最终一点会回到该点（欧拉回路）</strong></p>\n<p>类似的对有向图来说–<strong>最多只能有两个点的入度不等于出度， 而且必须是其中一个点的出度恰好比入度大1（把它作为起点），另一个的入度比出度大1（把它作为终点）。还有一个前提条件：在忽略边的方向后，图必须是连通的</strong></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">elur</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; n; v++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(G[u][v] &amp;&amp; !vis[u][v])&#123;</span><br><span class=\"line\">            vis[u][v] = vis[v][u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            elur(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, u, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//说明</span></span><br><span class=\"line\"><span class=\"number\">1.</span>上面的代码适用于无向图，但是可以改为有向图：把vis[u][v] = vis[v][u] = <span class=\"number\">1</span>改成vis[u][v] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2.</span>上面的代码是逆序打印，可以把<span class=\"built_in\">printf</span>改为push，将边压栈，最后顺序打印。</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>有一条名为Pregel的河流经过Konigsberg城。城中有7座桥，把河中的两个岛与河岸连接起来。当地居民热衷于一个难题：是否存在一条线路，可以不重复的走遍7座桥。这就是著名的七桥问题。它由大数学家欧拉首先提出，并给出完美的解答，所以这样的一条路也叫欧拉道路。<br><img src=\"/2018/11/04/欧拉回路/Elur.png\" alt=\"Elur\"></p>","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>《算法竞赛入门经典（2）》</p>\n<p>Ps：图片来自<a href=\"https://www.wikiwand.com/zh-hans/%E6%9F%AF%E5%B0%BC%E6%96%AF%E5%A0%A1%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<h1 id=\"欧拉路（欧拉回路）\"><a href=\"#欧拉路（欧拉回路）\" class=\"headerlink\" title=\"欧拉路（欧拉回路）\"></a>欧拉路（欧拉回路）</h1><p>将七桥问题用图论的形式表达：能否从无向图中的一个结点出发走出一条道路，每条边恰好经过一次。</p>\n<p>可以发现，除起点和终点外其它点的“进”和“出”是对应的，即其它点的度数应为偶数。这也是判断欧拉路是否存在的充分条件–<strong>如果一个无向图是连通的，且最多只有两个奇点，则一定存在欧拉道路。如果有两个奇点，则必须从其中一个奇点出发，另一个奇点终止；如果奇点不存在，则可以从任意点出发，最终一点会回到该点（欧拉回路）</strong></p>\n<p>类似的对有向图来说–<strong>最多只能有两个点的入度不等于出度， 而且必须是其中一个点的出度恰好比入度大1（把它作为起点），另一个的入度比出度大1（把它作为终点）。还有一个前提条件：在忽略边的方向后，图必须是连通的</strong></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">elur</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; n; v++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(G[u][v] &amp;&amp; !vis[u][v])&#123;</span><br><span class=\"line\">            vis[u][v] = vis[v][u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            elur(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, u, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//说明</span></span><br><span class=\"line\"><span class=\"number\">1.</span>上面的代码适用于无向图，但是可以改为有向图：把vis[u][v] = vis[v][u] = <span class=\"number\">1</span>改成vis[u][v] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2.</span>上面的代码是逆序打印，可以把<span class=\"built_in\">printf</span>改为push，将边压栈，最后顺序打印。</span><br></pre></td></tr></table></figure>"},{"title":"静态链接库(STATIC)和动态链接库(SHARED)","date":"2019-04-03T13:38:29.000Z","_content":"　　静态链接库、动态链接库的区别和特点。\n<!--more-->\n# 静态链接库\n## 概念\n　　静态链接库是以.a为后缀的文件（window下以.lib为后缀）。和库相关的所有代码都在这个文件中，它在**编译**时直接链接到程序中。如果一个程序使用静态编译，它会从静态链接库中**复制**需要的那部分代码，并使其成为**程序的一部分**。\n\n## 特点\n- 对静态库的链接是在**编译时期**完成的。\n- 由于程序是直接从静态库中**复制**代码，所以生成的二进制文件的**体积会比较大**。\n- 正是因为第二个特点程序会将静态库中代码整合成为程序的一部分，所以使得生成的程序**移植十分方便**。因为程序在运行时已经和库之间没有联系。\n- 静态库更新时，使用它的应用程序需要**重新编译**。\n\n## 示意图\n![static](/static.png)\n\n　　*图片来源：[Tyler's Blog-C++静态库与动态库](https://www.cnblogs.com/skynet/p/3372855.html)*\n\n# 动态链接库\n## 概念\n　　动态链接库是以.so为后缀的文件(windows下以.dll为后缀，OS X下以.dylib为后缀)。和库相关的所有代码都在这个文件中，它在程序**运行**时被**引用**。如果一个程序使用动态编译，它只会**引用**需要的那部分代码，不会将库中代码和自身整合在一起。\n\n## 特点\n- 动态库是在程序**运行**时被链接的。\n- 每个使用动态库的程序都只**引用**动态库的代码，使得二进制文件**体积较小**。\n- 动态库更新时，**不需要重新编译**使用它的应用程序。\n- 动态库会**增加额外的程序运行时间**，因为需要在运行时链接库中相关代码。\n\n## 示意图\n![shared](/shared.png)\n\n　　*图片来源：[Tyler's Blog-C++静态库与动态库](https://www.cnblogs.com/skynet/p/3372855.html)*\n\n# 总结\n　　静态链接库和动态链接库有各自的特点，一般情况下为了节省内存资源我们会比较多的使用动态库，但是在需要保证应用程序不受外部依赖限制的时候我们会使用静态库。\n\n# 参考链接\n\n[Stack Overflow--Difference between static and shared libraries](https://stackoverflow.com/questions/2649334/difference-between-static-and-shared-libraries)\n[Tyler's Blog-C++静态库与动态库](https://www.cnblogs.com/skynet/p/3372855.html)","source":"_posts/静态链接库-STATIC-和动态链接库-SHARED.md","raw":"---\ntitle: 静态链接库(STATIC)和动态链接库(SHARED)\ndate: 2019-04-03 21:38:29\ncategories:\n- Summary\ntags:\n- Link Library\n---\n　　静态链接库、动态链接库的区别和特点。\n<!--more-->\n# 静态链接库\n## 概念\n　　静态链接库是以.a为后缀的文件（window下以.lib为后缀）。和库相关的所有代码都在这个文件中，它在**编译**时直接链接到程序中。如果一个程序使用静态编译，它会从静态链接库中**复制**需要的那部分代码，并使其成为**程序的一部分**。\n\n## 特点\n- 对静态库的链接是在**编译时期**完成的。\n- 由于程序是直接从静态库中**复制**代码，所以生成的二进制文件的**体积会比较大**。\n- 正是因为第二个特点程序会将静态库中代码整合成为程序的一部分，所以使得生成的程序**移植十分方便**。因为程序在运行时已经和库之间没有联系。\n- 静态库更新时，使用它的应用程序需要**重新编译**。\n\n## 示意图\n![static](/static.png)\n\n　　*图片来源：[Tyler's Blog-C++静态库与动态库](https://www.cnblogs.com/skynet/p/3372855.html)*\n\n# 动态链接库\n## 概念\n　　动态链接库是以.so为后缀的文件(windows下以.dll为后缀，OS X下以.dylib为后缀)。和库相关的所有代码都在这个文件中，它在程序**运行**时被**引用**。如果一个程序使用动态编译，它只会**引用**需要的那部分代码，不会将库中代码和自身整合在一起。\n\n## 特点\n- 动态库是在程序**运行**时被链接的。\n- 每个使用动态库的程序都只**引用**动态库的代码，使得二进制文件**体积较小**。\n- 动态库更新时，**不需要重新编译**使用它的应用程序。\n- 动态库会**增加额外的程序运行时间**，因为需要在运行时链接库中相关代码。\n\n## 示意图\n![shared](/shared.png)\n\n　　*图片来源：[Tyler's Blog-C++静态库与动态库](https://www.cnblogs.com/skynet/p/3372855.html)*\n\n# 总结\n　　静态链接库和动态链接库有各自的特点，一般情况下为了节省内存资源我们会比较多的使用动态库，但是在需要保证应用程序不受外部依赖限制的时候我们会使用静态库。\n\n# 参考链接\n\n[Stack Overflow--Difference between static and shared libraries](https://stackoverflow.com/questions/2649334/difference-between-static-and-shared-libraries)\n[Tyler's Blog-C++静态库与动态库](https://www.cnblogs.com/skynet/p/3372855.html)","slug":"静态链接库-STATIC-和动态链接库-SHARED","published":1,"updated":"2019-09-01T08:50:45.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2m6002930vnnfdzon0v","content":"<p>　　静态链接库、动态链接库的区别和特点。</p>\n<a id=\"more\"></a>\n<h1 id=\"静态链接库\"><a href=\"#静态链接库\" class=\"headerlink\" title=\"静态链接库\"></a>静态链接库</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>　　静态链接库是以.a为后缀的文件（window下以.lib为后缀）。和库相关的所有代码都在这个文件中，它在<strong>编译</strong>时直接链接到程序中。如果一个程序使用静态编译，它会从静态链接库中<strong>复制</strong>需要的那部分代码，并使其成为<strong>程序的一部分</strong>。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>对静态库的链接是在<strong>编译时期</strong>完成的。</li>\n<li>由于程序是直接从静态库中<strong>复制</strong>代码，所以生成的二进制文件的<strong>体积会比较大</strong>。</li>\n<li>正是因为第二个特点程序会将静态库中代码整合成为程序的一部分，所以使得生成的程序<strong>移植十分方便</strong>。因为程序在运行时已经和库之间没有联系。</li>\n<li>静态库更新时，使用它的应用程序需要<strong>重新编译</strong>。</li>\n</ul>\n<h2 id=\"示意图\"><a href=\"#示意图\" class=\"headerlink\" title=\"示意图\"></a>示意图</h2><p><img src=\"/2019/04/03/静态链接库-STATIC-和动态链接库-SHARED/static.png\" alt=\"static\"></p>\n<p>　　<em>图片来源：<a href=\"https://www.cnblogs.com/skynet/p/3372855.html\" target=\"_blank\" rel=\"noopener\">Tyler’s Blog-C++静态库与动态库</a></em></p>\n<h1 id=\"动态链接库\"><a href=\"#动态链接库\" class=\"headerlink\" title=\"动态链接库\"></a>动态链接库</h1><h2 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>　　动态链接库是以.so为后缀的文件(windows下以.dll为后缀，OS X下以.dylib为后缀)。和库相关的所有代码都在这个文件中，它在程序<strong>运行</strong>时被<strong>引用</strong>。如果一个程序使用动态编译，它只会<strong>引用</strong>需要的那部分代码，不会将库中代码和自身整合在一起。</p>\n<h2 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>动态库是在程序<strong>运行</strong>时被链接的。</li>\n<li>每个使用动态库的程序都只<strong>引用</strong>动态库的代码，使得二进制文件<strong>体积较小</strong>。</li>\n<li>动态库更新时，<strong>不需要重新编译</strong>使用它的应用程序。</li>\n<li>动态库会<strong>增加额外的程序运行时间</strong>，因为需要在运行时链接库中相关代码。</li>\n</ul>\n<h2 id=\"示意图-1\"><a href=\"#示意图-1\" class=\"headerlink\" title=\"示意图\"></a>示意图</h2><p><img src=\"/2019/04/03/静态链接库-STATIC-和动态链接库-SHARED/shared.png\" alt=\"shared\"></p>\n<p>　　<em>图片来源：<a href=\"https://www.cnblogs.com/skynet/p/3372855.html\" target=\"_blank\" rel=\"noopener\">Tyler’s Blog-C++静态库与动态库</a></em></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>　　静态链接库和动态链接库有各自的特点，一般情况下为了节省内存资源我们会比较多的使用动态库，但是在需要保证应用程序不受外部依赖限制的时候我们会使用静态库。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://stackoverflow.com/questions/2649334/difference-between-static-and-shared-libraries\" target=\"_blank\" rel=\"noopener\">Stack Overflow–Difference between static and shared libraries</a><br><a href=\"https://www.cnblogs.com/skynet/p/3372855.html\" target=\"_blank\" rel=\"noopener\">Tyler’s Blog-C++静态库与动态库</a></p>\n","site":{"data":{}},"excerpt":"<p>　　静态链接库、动态链接库的区别和特点。</p>","more":"<h1 id=\"静态链接库\"><a href=\"#静态链接库\" class=\"headerlink\" title=\"静态链接库\"></a>静态链接库</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>　　静态链接库是以.a为后缀的文件（window下以.lib为后缀）。和库相关的所有代码都在这个文件中，它在<strong>编译</strong>时直接链接到程序中。如果一个程序使用静态编译，它会从静态链接库中<strong>复制</strong>需要的那部分代码，并使其成为<strong>程序的一部分</strong>。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>对静态库的链接是在<strong>编译时期</strong>完成的。</li>\n<li>由于程序是直接从静态库中<strong>复制</strong>代码，所以生成的二进制文件的<strong>体积会比较大</strong>。</li>\n<li>正是因为第二个特点程序会将静态库中代码整合成为程序的一部分，所以使得生成的程序<strong>移植十分方便</strong>。因为程序在运行时已经和库之间没有联系。</li>\n<li>静态库更新时，使用它的应用程序需要<strong>重新编译</strong>。</li>\n</ul>\n<h2 id=\"示意图\"><a href=\"#示意图\" class=\"headerlink\" title=\"示意图\"></a>示意图</h2><p><img src=\"/2019/04/03/静态链接库-STATIC-和动态链接库-SHARED/static.png\" alt=\"static\"></p>\n<p>　　<em>图片来源：<a href=\"https://www.cnblogs.com/skynet/p/3372855.html\" target=\"_blank\" rel=\"noopener\">Tyler’s Blog-C++静态库与动态库</a></em></p>\n<h1 id=\"动态链接库\"><a href=\"#动态链接库\" class=\"headerlink\" title=\"动态链接库\"></a>动态链接库</h1><h2 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>　　动态链接库是以.so为后缀的文件(windows下以.dll为后缀，OS X下以.dylib为后缀)。和库相关的所有代码都在这个文件中，它在程序<strong>运行</strong>时被<strong>引用</strong>。如果一个程序使用动态编译，它只会<strong>引用</strong>需要的那部分代码，不会将库中代码和自身整合在一起。</p>\n<h2 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>动态库是在程序<strong>运行</strong>时被链接的。</li>\n<li>每个使用动态库的程序都只<strong>引用</strong>动态库的代码，使得二进制文件<strong>体积较小</strong>。</li>\n<li>动态库更新时，<strong>不需要重新编译</strong>使用它的应用程序。</li>\n<li>动态库会<strong>增加额外的程序运行时间</strong>，因为需要在运行时链接库中相关代码。</li>\n</ul>\n<h2 id=\"示意图-1\"><a href=\"#示意图-1\" class=\"headerlink\" title=\"示意图\"></a>示意图</h2><p><img src=\"/2019/04/03/静态链接库-STATIC-和动态链接库-SHARED/shared.png\" alt=\"shared\"></p>\n<p>　　<em>图片来源：<a href=\"https://www.cnblogs.com/skynet/p/3372855.html\" target=\"_blank\" rel=\"noopener\">Tyler’s Blog-C++静态库与动态库</a></em></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>　　静态链接库和动态链接库有各自的特点，一般情况下为了节省内存资源我们会比较多的使用动态库，但是在需要保证应用程序不受外部依赖限制的时候我们会使用静态库。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://stackoverflow.com/questions/2649334/difference-between-static-and-shared-libraries\" target=\"_blank\" rel=\"noopener\">Stack Overflow–Difference between static and shared libraries</a><br><a href=\"https://www.cnblogs.com/skynet/p/3372855.html\" target=\"_blank\" rel=\"noopener\">Tyler’s Blog-C++静态库与动态库</a></p>"},{"title":"Kalman filter-卡尔曼滤波器","date":"2019-04-17T07:15:33.000Z","_content":"　　卡尔曼滤波理论，由卡尔曼博士在1960年访问NASA时首次提出，震惊了NASA，促成了著名的“阿波罗”计划，使人类第一次登上月球。\n\n![Rudolf_Kalman](/Rudolf_Kalman.jpg)\n<!--more-->\n\n# 什么是卡尔曼滤波\n　　[维基百科上的解释](https://www.wikiwand.com/zh-hans/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2)：卡尔曼滤波是一种高效率的递归滤波器，它能从一系列的不完全及包含杂讯的测量中，估计动态系统的状态。\n　　简单来说就是它可以有效利用多个粗糙数据之间的关系，对多个数据进行融合。下面举个简单的例子：\n\n*例子来源[Kent Zeng](https://www.zhihu.com/question/23971601/answer/26254459)*\n　　假设我们有两个传感器，测的是同一个信号，譬如说物体的位置$(x, y, z)$。可是它们每次的读数都不太一样，即传感器的信号有波动，怎么办？\n　　**取平均。**\n　　再假设我们知道其中那个价格贵一些的传感器应该更准一些，比取平均更好的方法是：\n　　**取加权平均。**即我们把精度更高的传感器的权值设的高一点，表示我们更相信它的测量结果。假设两个传感器的测量误差都符合正态分布，我们可以将这**两个正态分布合成为一个新的正态分布**。具体过程在下面的原理部分讨论，这种理解方式很重要。\n　　但是如果我们只有一个传感器，但是还有一个数学模型，譬如物体的运动模型。模型可以帮我们算出一个物体的位置值，但也不是那么准。怎么办？\n　　**把模型算出来的值和传感器测出来的值，像两个传感器那样，取加权平均。**\n\n# 卡尔曼滤波原理\n## 运动模型\n　　同样我们用测量物体的位置的例子来说明。假设我们要实时的得到机器人在空间中的位置。如上面所说，我们需要一个机器人的运动模型，如果我们不知道机器人确切的运动模型，可以先简单的假定其为匀速运动模型。\n　　有了运动模型之后，我们就可以通过一组**状态变量**$x$来描述机器人在某一时刻的状态，包括位置$p$和速度$v$。\n\n$$\nx=\n \\begin{bmatrix}\n    p \\\\\\\\\n    v \\\\\\\\\n  \\end{bmatrix}\n$$\n\n　　这里的$x, p, v$都是向量，其中，$p=\\begin{bmatrix} x \\\\\\\\ y \\\\\\\\ z \\end{bmatrix}$，$v=\\begin{bmatrix} v_x \\\\\\\\ v_y \\\\\\\\ v_z \\end{bmatrix}$\n　　这里我们只记录了位置和速度，但是取决于我们的模型以及我们期望获得的数据我们可以把任何数据变量放进系统状态里。\n　　用运动方程来表示我们建立的匀速模型：\n\n$$\np_k = p_{k - 1} + \\Delta t \\times{v_{k - 1}} \\\\\\\\\nv_k = v_{k - 1}\n$$\n\n　　写成矩阵形式：\n\n$$\nx_k=\n \\begin{bmatrix}\n    p_k \\\\\\\\\n    v_k \\\\\\\\\n  \\end{bmatrix}\n=\n \\begin{bmatrix}\n    1 & \\Delta t \\\\\\\\\n    0 & 1 \\\\\\\\\n \\end{bmatrix}\n \\begin{bmatrix}\n    p_{k -1} \\\\\\\\\n    v_{k - 1} \\\\\\\\\n \\end{bmatrix}\n$$\n\n　　因为$x$实际上是一个包含三个位置量和三个速度量的六维向量，所以由$x_{k - 1}$到$x_{k}$的转移矩阵可具体表示为：\n\n$$\nx_k=\n \\begin{bmatrix}\n    1 & 0 & 0 & \\Delta t & 0 & 0 \\\\\\\\\n    0 & 1 & 0 & 0 & \\Delta t & 0 \\\\\\\\\n    0 & 0 & 1 & 0 & 0 & \\Delta t \\\\\\\\\n    0 & 0 & 0 & 1 & 0 & 0 \\\\\\\\\n    0 & 0 & 0 & 0 & 1 & 0 \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & 1 \\\\\\\\\n \\end{bmatrix}\n x_{k - 1}\n$$\n\n　　把转移矩阵记为$F$，则$x_k = Fx_{k - 1}$\n　　卡尔曼滤波假设所有变量的值符合**正态分布**，那么系统各变量间的**不确定度**可以用**[协方差](https://ain-crad.github.io/2019/03/27/Covariance-%E5%8D%8F%E6%96%B9%E5%B7%AE/)**来表示，系统状态的协方差记为$P_k$，这是一个$6\\times{6}$的对称矩阵。\n　　由于我们有下面的公式：\n\n$$\nCov(x) = \\Sigma \\\\\\\\\nCov(Ax) = A \\Sigma A^T\n$$\n\n　　所以综合上面的运动模型我们可以得到**状态变量以及误差的更新公式**：\n\n$$\nx_k = Fx_{k - 1} \\\\\\\\\nP_k = FP_{k -1}F^T\n$$\n\n　　之前提到我们的模型一般不会是100%准确的，那么就会存在一个**预测误差**，我们把这个预测误差矩阵记为$Q$，表示预测上的高斯噪声。对误差做简单的叠加，可以得到**完整的预测转换方程**：\n\n$$\nx_k = Fx_{k - 1} \\\\\\\\\nP_k = FP_{k - 1}F^T + Q\n$$\n\n　　*Ps.有时我们会看到$x_k = Fx_{k - 1} + Bu_k$这种转移方程的写法，这是引入了一个可以预测的外力影响因素，表示系统当前状态并不只依靠上一个系统状态。譬如，机器人的运动受当时风速的影响，那么$u_k$就表示风速变量，$B$表示风速变量到系统状态变量的转换矩阵。*\n\n## 观测模型\n　　我们还需要一个（或多个）传感器来提供系统状态的**观测数据**，通过测量值来精炼上一阶段模型的预测值。传感器所能够测得的变量由其功能决定，假设我们现在有一个传感器可以直接得到机器人的位置状态量$p$，$p=\\begin{bmatrix} x & y & z \\end{bmatrix}^T$。\n　　注意传感器测量量的范围和单位可能与系统状态变量的范围和单位不一致，所以我们需要做如下变换：\n\n$$\n\\mu = Hx_k \\\\\\\\\n\\Sigma = HP_kH^T\n$$\n\n　　其中$H$为变换矩阵，具体到我们所讨论的例子，传感器只能测得6个系统状态量中的3个，所以要做如下变换，把系统状态量变换到传感器测量空间中去：\n\n$$\n\\begin{bmatrix}\n    x \\\\\\\\\n    y \\\\\\\\\n    z \\\\\\\\\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n    1 & 0 & 0 & 0 & 0 & 0 \\\\\\\\\n    0 & 1 & 0 & 0 & 0 & 0 \\\\\\\\\n    0 & 0 & 1 & 0 & 0 & 0 \\\\\\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n    x \\\\\\\\\n    y \\\\\\\\\n    z \\\\\\\\\n    v_x \\\\\\\\\n    v_y \\\\\\\\\n    v_z \\\\\\\\\n\\end{bmatrix}\n$$\n\n　　传感器也有自己的精度范围，换句话说传感器的读数会收到高斯噪声的影响在某个范围内波动。我们把传感器**测量值不确定性**的方差记为$R$，传感器实际返回的值（即正态分布均值）记为$z_k$。\n\n## 数据融合\n　　现在每一时刻我们都有了两个高维的正态分布模型，一个来自模型的预测值，另一个来自传感器的测量值。我们尝试去进行**数据的融合**。其实非常简单，对每一个模型来说我们有了它在空间各个位置的**概率密度函数**，我们需要找到**最大可能性**的那个位置，那么我们只要将**两者相乘**就好了。\n　　非常值得高兴的是，**两个正态分布相乘，结果还是一个正态分布！**于是新的正态分布的**均值位置**就是两模型相乘后**概率密度最大**的位置处。理所当然的我们就可以把它选做该时刻的机器人的位置**估计值**。\n![gauss](/gauss.jpg)\n\n　　下面做一些简要的推导：\n\n*太懒了直接贴图，来源[米开朗基罗赵](https://www.zhihu.com/question/23971601)*\n\n　　一维正态分布定义：\n\n![g1](/g1.jpg)\n\n　　我们想知道两个均值、方差不同的正态分布相乘的结果：\n\n![g2](/g2.jpg)\n\n　　把公式(9)带入(10)然后做一些变换，可以得到：\n\n![g3](/g3.jpg)\n\n　　因式分解出一部分，表示为$k$：\n\n![g4](/g4.jpg)\n\n　　上面是一维的情况，扩展到高维，直接把(12)和(13)表示成矩阵形式就好了：\n\n![g5](/g5.jpg)\n\n　　现在出现的这个$K$就是那个让人很难理解的**卡尔曼增益**了，但是在这里这很简单，只是两个正态分布合并过程中因式分解出的一项。\n　　现在我们来把(14)和(15)中的变量替换一下，替换成我们分析出的运动模型和观测模型的均值、方差，其中把运动模型变换到传感器测量空间中：\n\n$$\n(\\mu_0, \\Sigma_0)=(Hx_k, HP_kH^T) \\\\\\\\\n(\\mu_1, \\Sigma_1)=(z_k, R)\n$$\n\n　　经过化简，我们就可以得到三个更新公式了，再加上之前的两个运动模型方程，共同组成卡尔曼滤波的**五个核心公式**：\n\n$$\nx_k = Fx_{k - 1} \\\\\\\\\nP_k = FP_{k - 1}F^T + Q \\\\\\\\\nK = P_kH^T(HP_kH^T + R)^{-1} \\\\\\\\\n\\hat{x_k} = x_k + G(z_k - Hx_k) \\\\\\\\\n\\hat{P_k} = (I - GH)P_k\n$$\n\n　　其中$\\hat{x_k}$为该时刻的位置估计值，同时将作为下一次迭代的$x_{k - 1}$，$\\hat{P_k}$为更新后的系统方差，将作为下一下迭代的$P_{k - 1}$\n\n# 实例\n　　这一部分是一个实例，具体背景是我通过双目相机追踪并还原了手指在空间中运动的一些三维轨迹点（螺旋上升轨迹），但是数据有些噪音（波动），下面是原始数据以及用卡尔曼滤波后的效果图：\n\n![origin](/origin.png)\n![afterFilter](/afterFilter.png)\n\n附上源代码：\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu 18 Apr 18:51:49 CST 2019\n *\n */\n\n#include <Eigen/Core>\n#include <Eigen/LU>\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\nusing namespace Eigen;\n\ntypedef Matrix<double, 6, 6> Matrix6d;\ntypedef Matrix<double, 6, 1> Vector6d;\n\nint main(int argc, char* argv[]){\n    char c;\n    double x, y, z, dx, dy, dz;\n    double nx, ny, nz;\n    double x1, y1, z1, x2, y2, z2;\n\n    Matrix6d F, P, Q, P_;\n    Matrix<double, 3, 6> H;\n    Matrix<double, 6, 3> G;\n    Matrix3d R;\n\n    ifstream fin;\n    ofstream fout;\n    fin.open(argv[1]);\n    fout.open(argv[2]);\n    fin >> c >> x1 >> y1 >> z1;\n    fin >> c >> x2 >> y2  >> z2;\n    fout << c << \" \" << x1 << \" \" << y1  << \" \" << z1 << endl;\n    fout << c << \" \" << x2 << \" \" << y2  << \" \" << z2 << endl;\n    x = x2, y = y2, z = z2;\n    dx = x2 - x1, dy = y2 - y1, dz = z2 - z1;\n\n    Vector6d X, X_;\n    Vector3d Z;\n    X << x , y , z , dx , dy , dz;\n\n    F << 1, 0, 0, 1, 0, 0,\n         0, 1, 0, 0, 1, 0,\n         0, 0, 1, 0, 0, 1,\n         0, 0, 0, 1, 0, 0,\n         0, 0, 0, 0, 1, 0,\n         0, 0, 0, 0, 0, 1;\n\n    H << 1, 0, 0, 0, 0, 0,\n         0, 1, 0, 0, 0, 0,\n         0, 0, 1, 0, 0, 0;\n\n    P = Matrix6d::Identity() * 1;\n\n    Q = Matrix6d::Identity() * 1e-4;\n    R = Matrix3d::Identity() * 1;\n\n    while(fin >> c >> nx >> ny >> nz){\n        Z << nx , ny , nz;\n\n        X_ = F * X;\n        P_ = F * P * F.transpose() + Q;\n\n        G = P_ * H.transpose() * (H * P_ * H.transpose() + R).inverse();\n        X = X_ + G * (Z - H * X_);\n        P = (Matrix6d::Identity() - G * H) * P_;\n        \n        fout << \"v \" << X(0) << ' ' << X(1) << ' ' << X(2) << endl;\n    }\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n```\n使用cmake编译，CMakeLists.txt中的内容：\n```makefile\ncmake_minimum_required(VERSION 3.5.1)\nproject(Ekf)\n\nfind_package(Eigen3 REQUIRED)\ninclude_directories(${EIGEN3_INCLUDE_DIRS})\n\nadd_executable(ekf ekf.cpp)\n```\n# 参考链接\n\n[The Extended Kalman Filter:An Interactive Tutorial for Non-Experts](https://home.wlu.edu/~levys/kalman_tutorial/)\n[卡尔曼滤波－－从推导到应用](https://blog.csdn.net/heyijia0327/article/details/17487467)\n[如何通俗并尽可能详尽解释卡尔曼滤波](https://www.zhihu.com/question/23971601)\n[理解Kalman滤波的使用](https://www.cnblogs.com/jcchen1987/p/4371439.html)\n\n　　这些文章在我学习卡尔曼滤波的过程中给予了我很大的帮助，感谢各位博主。其中第三个链接为知乎的回答，我主要参考了其中的[Kent Zeng]用户、[太空精酿]用户以及[米开朗基罗赵]用户的回答。\n\n# 总结\n　　卡尔曼老爷子实在是太强了Orz。","source":"_posts/Kalman-filter-卡尔曼滤波器.md","raw":"---\ntitle: Kalman filter-卡尔曼滤波器\ndate: 2019-04-17 15:15:33\ncategories:\n- Summary\ntags:\n- Kalman filter\n---\n　　卡尔曼滤波理论，由卡尔曼博士在1960年访问NASA时首次提出，震惊了NASA，促成了著名的“阿波罗”计划，使人类第一次登上月球。\n\n![Rudolf_Kalman](/Rudolf_Kalman.jpg)\n<!--more-->\n\n# 什么是卡尔曼滤波\n　　[维基百科上的解释](https://www.wikiwand.com/zh-hans/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2)：卡尔曼滤波是一种高效率的递归滤波器，它能从一系列的不完全及包含杂讯的测量中，估计动态系统的状态。\n　　简单来说就是它可以有效利用多个粗糙数据之间的关系，对多个数据进行融合。下面举个简单的例子：\n\n*例子来源[Kent Zeng](https://www.zhihu.com/question/23971601/answer/26254459)*\n　　假设我们有两个传感器，测的是同一个信号，譬如说物体的位置$(x, y, z)$。可是它们每次的读数都不太一样，即传感器的信号有波动，怎么办？\n　　**取平均。**\n　　再假设我们知道其中那个价格贵一些的传感器应该更准一些，比取平均更好的方法是：\n　　**取加权平均。**即我们把精度更高的传感器的权值设的高一点，表示我们更相信它的测量结果。假设两个传感器的测量误差都符合正态分布，我们可以将这**两个正态分布合成为一个新的正态分布**。具体过程在下面的原理部分讨论，这种理解方式很重要。\n　　但是如果我们只有一个传感器，但是还有一个数学模型，譬如物体的运动模型。模型可以帮我们算出一个物体的位置值，但也不是那么准。怎么办？\n　　**把模型算出来的值和传感器测出来的值，像两个传感器那样，取加权平均。**\n\n# 卡尔曼滤波原理\n## 运动模型\n　　同样我们用测量物体的位置的例子来说明。假设我们要实时的得到机器人在空间中的位置。如上面所说，我们需要一个机器人的运动模型，如果我们不知道机器人确切的运动模型，可以先简单的假定其为匀速运动模型。\n　　有了运动模型之后，我们就可以通过一组**状态变量**$x$来描述机器人在某一时刻的状态，包括位置$p$和速度$v$。\n\n$$\nx=\n \\begin{bmatrix}\n    p \\\\\\\\\n    v \\\\\\\\\n  \\end{bmatrix}\n$$\n\n　　这里的$x, p, v$都是向量，其中，$p=\\begin{bmatrix} x \\\\\\\\ y \\\\\\\\ z \\end{bmatrix}$，$v=\\begin{bmatrix} v_x \\\\\\\\ v_y \\\\\\\\ v_z \\end{bmatrix}$\n　　这里我们只记录了位置和速度，但是取决于我们的模型以及我们期望获得的数据我们可以把任何数据变量放进系统状态里。\n　　用运动方程来表示我们建立的匀速模型：\n\n$$\np_k = p_{k - 1} + \\Delta t \\times{v_{k - 1}} \\\\\\\\\nv_k = v_{k - 1}\n$$\n\n　　写成矩阵形式：\n\n$$\nx_k=\n \\begin{bmatrix}\n    p_k \\\\\\\\\n    v_k \\\\\\\\\n  \\end{bmatrix}\n=\n \\begin{bmatrix}\n    1 & \\Delta t \\\\\\\\\n    0 & 1 \\\\\\\\\n \\end{bmatrix}\n \\begin{bmatrix}\n    p_{k -1} \\\\\\\\\n    v_{k - 1} \\\\\\\\\n \\end{bmatrix}\n$$\n\n　　因为$x$实际上是一个包含三个位置量和三个速度量的六维向量，所以由$x_{k - 1}$到$x_{k}$的转移矩阵可具体表示为：\n\n$$\nx_k=\n \\begin{bmatrix}\n    1 & 0 & 0 & \\Delta t & 0 & 0 \\\\\\\\\n    0 & 1 & 0 & 0 & \\Delta t & 0 \\\\\\\\\n    0 & 0 & 1 & 0 & 0 & \\Delta t \\\\\\\\\n    0 & 0 & 0 & 1 & 0 & 0 \\\\\\\\\n    0 & 0 & 0 & 0 & 1 & 0 \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & 1 \\\\\\\\\n \\end{bmatrix}\n x_{k - 1}\n$$\n\n　　把转移矩阵记为$F$，则$x_k = Fx_{k - 1}$\n　　卡尔曼滤波假设所有变量的值符合**正态分布**，那么系统各变量间的**不确定度**可以用**[协方差](https://ain-crad.github.io/2019/03/27/Covariance-%E5%8D%8F%E6%96%B9%E5%B7%AE/)**来表示，系统状态的协方差记为$P_k$，这是一个$6\\times{6}$的对称矩阵。\n　　由于我们有下面的公式：\n\n$$\nCov(x) = \\Sigma \\\\\\\\\nCov(Ax) = A \\Sigma A^T\n$$\n\n　　所以综合上面的运动模型我们可以得到**状态变量以及误差的更新公式**：\n\n$$\nx_k = Fx_{k - 1} \\\\\\\\\nP_k = FP_{k -1}F^T\n$$\n\n　　之前提到我们的模型一般不会是100%准确的，那么就会存在一个**预测误差**，我们把这个预测误差矩阵记为$Q$，表示预测上的高斯噪声。对误差做简单的叠加，可以得到**完整的预测转换方程**：\n\n$$\nx_k = Fx_{k - 1} \\\\\\\\\nP_k = FP_{k - 1}F^T + Q\n$$\n\n　　*Ps.有时我们会看到$x_k = Fx_{k - 1} + Bu_k$这种转移方程的写法，这是引入了一个可以预测的外力影响因素，表示系统当前状态并不只依靠上一个系统状态。譬如，机器人的运动受当时风速的影响，那么$u_k$就表示风速变量，$B$表示风速变量到系统状态变量的转换矩阵。*\n\n## 观测模型\n　　我们还需要一个（或多个）传感器来提供系统状态的**观测数据**，通过测量值来精炼上一阶段模型的预测值。传感器所能够测得的变量由其功能决定，假设我们现在有一个传感器可以直接得到机器人的位置状态量$p$，$p=\\begin{bmatrix} x & y & z \\end{bmatrix}^T$。\n　　注意传感器测量量的范围和单位可能与系统状态变量的范围和单位不一致，所以我们需要做如下变换：\n\n$$\n\\mu = Hx_k \\\\\\\\\n\\Sigma = HP_kH^T\n$$\n\n　　其中$H$为变换矩阵，具体到我们所讨论的例子，传感器只能测得6个系统状态量中的3个，所以要做如下变换，把系统状态量变换到传感器测量空间中去：\n\n$$\n\\begin{bmatrix}\n    x \\\\\\\\\n    y \\\\\\\\\n    z \\\\\\\\\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n    1 & 0 & 0 & 0 & 0 & 0 \\\\\\\\\n    0 & 1 & 0 & 0 & 0 & 0 \\\\\\\\\n    0 & 0 & 1 & 0 & 0 & 0 \\\\\\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n    x \\\\\\\\\n    y \\\\\\\\\n    z \\\\\\\\\n    v_x \\\\\\\\\n    v_y \\\\\\\\\n    v_z \\\\\\\\\n\\end{bmatrix}\n$$\n\n　　传感器也有自己的精度范围，换句话说传感器的读数会收到高斯噪声的影响在某个范围内波动。我们把传感器**测量值不确定性**的方差记为$R$，传感器实际返回的值（即正态分布均值）记为$z_k$。\n\n## 数据融合\n　　现在每一时刻我们都有了两个高维的正态分布模型，一个来自模型的预测值，另一个来自传感器的测量值。我们尝试去进行**数据的融合**。其实非常简单，对每一个模型来说我们有了它在空间各个位置的**概率密度函数**，我们需要找到**最大可能性**的那个位置，那么我们只要将**两者相乘**就好了。\n　　非常值得高兴的是，**两个正态分布相乘，结果还是一个正态分布！**于是新的正态分布的**均值位置**就是两模型相乘后**概率密度最大**的位置处。理所当然的我们就可以把它选做该时刻的机器人的位置**估计值**。\n![gauss](/gauss.jpg)\n\n　　下面做一些简要的推导：\n\n*太懒了直接贴图，来源[米开朗基罗赵](https://www.zhihu.com/question/23971601)*\n\n　　一维正态分布定义：\n\n![g1](/g1.jpg)\n\n　　我们想知道两个均值、方差不同的正态分布相乘的结果：\n\n![g2](/g2.jpg)\n\n　　把公式(9)带入(10)然后做一些变换，可以得到：\n\n![g3](/g3.jpg)\n\n　　因式分解出一部分，表示为$k$：\n\n![g4](/g4.jpg)\n\n　　上面是一维的情况，扩展到高维，直接把(12)和(13)表示成矩阵形式就好了：\n\n![g5](/g5.jpg)\n\n　　现在出现的这个$K$就是那个让人很难理解的**卡尔曼增益**了，但是在这里这很简单，只是两个正态分布合并过程中因式分解出的一项。\n　　现在我们来把(14)和(15)中的变量替换一下，替换成我们分析出的运动模型和观测模型的均值、方差，其中把运动模型变换到传感器测量空间中：\n\n$$\n(\\mu_0, \\Sigma_0)=(Hx_k, HP_kH^T) \\\\\\\\\n(\\mu_1, \\Sigma_1)=(z_k, R)\n$$\n\n　　经过化简，我们就可以得到三个更新公式了，再加上之前的两个运动模型方程，共同组成卡尔曼滤波的**五个核心公式**：\n\n$$\nx_k = Fx_{k - 1} \\\\\\\\\nP_k = FP_{k - 1}F^T + Q \\\\\\\\\nK = P_kH^T(HP_kH^T + R)^{-1} \\\\\\\\\n\\hat{x_k} = x_k + G(z_k - Hx_k) \\\\\\\\\n\\hat{P_k} = (I - GH)P_k\n$$\n\n　　其中$\\hat{x_k}$为该时刻的位置估计值，同时将作为下一次迭代的$x_{k - 1}$，$\\hat{P_k}$为更新后的系统方差，将作为下一下迭代的$P_{k - 1}$\n\n# 实例\n　　这一部分是一个实例，具体背景是我通过双目相机追踪并还原了手指在空间中运动的一些三维轨迹点（螺旋上升轨迹），但是数据有些噪音（波动），下面是原始数据以及用卡尔曼滤波后的效果图：\n\n![origin](/origin.png)\n![afterFilter](/afterFilter.png)\n\n附上源代码：\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Thu 18 Apr 18:51:49 CST 2019\n *\n */\n\n#include <Eigen/Core>\n#include <Eigen/LU>\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\nusing namespace Eigen;\n\ntypedef Matrix<double, 6, 6> Matrix6d;\ntypedef Matrix<double, 6, 1> Vector6d;\n\nint main(int argc, char* argv[]){\n    char c;\n    double x, y, z, dx, dy, dz;\n    double nx, ny, nz;\n    double x1, y1, z1, x2, y2, z2;\n\n    Matrix6d F, P, Q, P_;\n    Matrix<double, 3, 6> H;\n    Matrix<double, 6, 3> G;\n    Matrix3d R;\n\n    ifstream fin;\n    ofstream fout;\n    fin.open(argv[1]);\n    fout.open(argv[2]);\n    fin >> c >> x1 >> y1 >> z1;\n    fin >> c >> x2 >> y2  >> z2;\n    fout << c << \" \" << x1 << \" \" << y1  << \" \" << z1 << endl;\n    fout << c << \" \" << x2 << \" \" << y2  << \" \" << z2 << endl;\n    x = x2, y = y2, z = z2;\n    dx = x2 - x1, dy = y2 - y1, dz = z2 - z1;\n\n    Vector6d X, X_;\n    Vector3d Z;\n    X << x , y , z , dx , dy , dz;\n\n    F << 1, 0, 0, 1, 0, 0,\n         0, 1, 0, 0, 1, 0,\n         0, 0, 1, 0, 0, 1,\n         0, 0, 0, 1, 0, 0,\n         0, 0, 0, 0, 1, 0,\n         0, 0, 0, 0, 0, 1;\n\n    H << 1, 0, 0, 0, 0, 0,\n         0, 1, 0, 0, 0, 0,\n         0, 0, 1, 0, 0, 0;\n\n    P = Matrix6d::Identity() * 1;\n\n    Q = Matrix6d::Identity() * 1e-4;\n    R = Matrix3d::Identity() * 1;\n\n    while(fin >> c >> nx >> ny >> nz){\n        Z << nx , ny , nz;\n\n        X_ = F * X;\n        P_ = F * P * F.transpose() + Q;\n\n        G = P_ * H.transpose() * (H * P_ * H.transpose() + R).inverse();\n        X = X_ + G * (Z - H * X_);\n        P = (Matrix6d::Identity() - G * H) * P_;\n        \n        fout << \"v \" << X(0) << ' ' << X(1) << ' ' << X(2) << endl;\n    }\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n```\n使用cmake编译，CMakeLists.txt中的内容：\n```makefile\ncmake_minimum_required(VERSION 3.5.1)\nproject(Ekf)\n\nfind_package(Eigen3 REQUIRED)\ninclude_directories(${EIGEN3_INCLUDE_DIRS})\n\nadd_executable(ekf ekf.cpp)\n```\n# 参考链接\n\n[The Extended Kalman Filter:An Interactive Tutorial for Non-Experts](https://home.wlu.edu/~levys/kalman_tutorial/)\n[卡尔曼滤波－－从推导到应用](https://blog.csdn.net/heyijia0327/article/details/17487467)\n[如何通俗并尽可能详尽解释卡尔曼滤波](https://www.zhihu.com/question/23971601)\n[理解Kalman滤波的使用](https://www.cnblogs.com/jcchen1987/p/4371439.html)\n\n　　这些文章在我学习卡尔曼滤波的过程中给予了我很大的帮助，感谢各位博主。其中第三个链接为知乎的回答，我主要参考了其中的[Kent Zeng]用户、[太空精酿]用户以及[米开朗基罗赵]用户的回答。\n\n# 总结\n　　卡尔曼老爷子实在是太强了Orz。","slug":"Kalman-filter-卡尔曼滤波器","published":1,"updated":"2019-09-01T08:49:46.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ng002c30vnttvpv7jk","content":"<p>　　卡尔曼滤波理论，由卡尔曼博士在1960年访问NASA时首次提出，震惊了NASA，促成了著名的“阿波罗”计划，使人类第一次登上月球。</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/Rudolf_Kalman.jpg\" alt=\"Rudolf_Kalman\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"什么是卡尔曼滤波\"><a href=\"#什么是卡尔曼滤波\" class=\"headerlink\" title=\"什么是卡尔曼滤波\"></a>什么是卡尔曼滤波</h1><p>　　<a href=\"https://www.wikiwand.com/zh-hans/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2\" target=\"_blank\" rel=\"noopener\">维基百科上的解释</a>：卡尔曼滤波是一种高效率的递归滤波器，它能从一系列的不完全及包含杂讯的测量中，估计动态系统的状态。<br>　　简单来说就是它可以有效利用多个粗糙数据之间的关系，对多个数据进行融合。下面举个简单的例子：</p>\n<p><em>例子来源<a href=\"https://www.zhihu.com/question/23971601/answer/26254459\" target=\"_blank\" rel=\"noopener\">Kent Zeng</a></em><br>　　假设我们有两个传感器，测的是同一个信号，譬如说物体的位置$(x, y, z)$。可是它们每次的读数都不太一样，即传感器的信号有波动，怎么办？<br>　　<strong>取平均。</strong><br>　　再假设我们知道其中那个价格贵一些的传感器应该更准一些，比取平均更好的方法是：<br>　　<strong>取加权平均。</strong>即我们把精度更高的传感器的权值设的高一点，表示我们更相信它的测量结果。假设两个传感器的测量误差都符合正态分布，我们可以将这<strong>两个正态分布合成为一个新的正态分布</strong>。具体过程在下面的原理部分讨论，这种理解方式很重要。<br>　　但是如果我们只有一个传感器，但是还有一个数学模型，譬如物体的运动模型。模型可以帮我们算出一个物体的位置值，但也不是那么准。怎么办？<br>　　<strong>把模型算出来的值和传感器测出来的值，像两个传感器那样，取加权平均。</strong></p>\n<h1 id=\"卡尔曼滤波原理\"><a href=\"#卡尔曼滤波原理\" class=\"headerlink\" title=\"卡尔曼滤波原理\"></a>卡尔曼滤波原理</h1><h2 id=\"运动模型\"><a href=\"#运动模型\" class=\"headerlink\" title=\"运动模型\"></a>运动模型</h2><p>　　同样我们用测量物体的位置的例子来说明。假设我们要实时的得到机器人在空间中的位置。如上面所说，我们需要一个机器人的运动模型，如果我们不知道机器人确切的运动模型，可以先简单的假定其为匀速运动模型。<br>　　有了运动模型之后，我们就可以通过一组<strong>状态变量</strong>$x$来描述机器人在某一时刻的状态，包括位置$p$和速度$v$。</p>\n<p>$$<br>x=<br> \\begin{bmatrix}<br>    p \\\\<br>    v \\\\<br>  \\end{bmatrix}<br>$$</p>\n<p>　　这里的$x, p, v$都是向量，其中，$p=\\begin{bmatrix} x \\\\ y \\\\ z \\end{bmatrix}$，$v=\\begin{bmatrix} v_x \\\\ v_y \\\\ v_z \\end{bmatrix}$<br>　　这里我们只记录了位置和速度，但是取决于我们的模型以及我们期望获得的数据我们可以把任何数据变量放进系统状态里。<br>　　用运动方程来表示我们建立的匀速模型：</p>\n<p>$$<br>p_k = p_{k - 1} + \\Delta t \\times{v_{k - 1}} \\\\<br>v_k = v_{k - 1}<br>$$</p>\n<p>　　写成矩阵形式：</p>\n<p>$$<br>x_k=<br> \\begin{bmatrix}<br>    p_k \\\\<br>    v_k \\\\<br>  \\end{bmatrix}<br>=<br> \\begin{bmatrix}<br>    1 &amp; \\Delta t \\\\<br>    0 &amp; 1 \\\\<br> \\end{bmatrix}<br> \\begin{bmatrix}<br>    p_{k -1} \\\\<br>    v_{k - 1} \\\\<br> \\end{bmatrix}<br>$$</p>\n<p>　　因为$x$实际上是一个包含三个位置量和三个速度量的六维向量，所以由$x_{k - 1}$到$x_{k}$的转移矩阵可具体表示为：</p>\n<p>$$<br>x_k=<br> \\begin{bmatrix}<br>    1 &amp; 0 &amp; 0 &amp; \\Delta t &amp; 0 &amp; 0 \\\\<br>    0 &amp; 1 &amp; 0 &amp; 0 &amp; \\Delta t &amp; 0 \\\\<br>    0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; \\Delta t \\\\<br>    0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\\\<br>    0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\\\<br>    0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\\<br> \\end{bmatrix}<br> x_{k - 1}<br>$$</p>\n<p>　　把转移矩阵记为$F$，则$x_k = Fx_{k - 1}$<br>　　卡尔曼滤波假设所有变量的值符合<strong>正态分布</strong>，那么系统各变量间的<strong>不确定度</strong>可以用<strong><a href=\"https://ain-crad.github.io/2019/03/27/Covariance-%E5%8D%8F%E6%96%B9%E5%B7%AE/\" target=\"_blank\" rel=\"noopener\">协方差</a></strong>来表示，系统状态的协方差记为$P_k$，这是一个$6\\times{6}$的对称矩阵。<br>　　由于我们有下面的公式：</p>\n<p>$$<br>Cov(x) = \\Sigma \\\\<br>Cov(Ax) = A \\Sigma A^T<br>$$</p>\n<p>　　所以综合上面的运动模型我们可以得到<strong>状态变量以及误差的更新公式</strong>：</p>\n<p>$$<br>x_k = Fx_{k - 1} \\\\<br>P_k = FP_{k -1}F^T<br>$$</p>\n<p>　　之前提到我们的模型一般不会是100%准确的，那么就会存在一个<strong>预测误差</strong>，我们把这个预测误差矩阵记为$Q$，表示预测上的高斯噪声。对误差做简单的叠加，可以得到<strong>完整的预测转换方程</strong>：</p>\n<p>$$<br>x_k = Fx_{k - 1} \\\\<br>P_k = FP_{k - 1}F^T + Q<br>$$</p>\n<p>　　<em>Ps.有时我们会看到$x_k = Fx_{k - 1} + Bu_k$这种转移方程的写法，这是引入了一个可以预测的外力影响因素，表示系统当前状态并不只依靠上一个系统状态。譬如，机器人的运动受当时风速的影响，那么$u_k$就表示风速变量，$B$表示风速变量到系统状态变量的转换矩阵。</em></p>\n<h2 id=\"观测模型\"><a href=\"#观测模型\" class=\"headerlink\" title=\"观测模型\"></a>观测模型</h2><p>　　我们还需要一个（或多个）传感器来提供系统状态的<strong>观测数据</strong>，通过测量值来精炼上一阶段模型的预测值。传感器所能够测得的变量由其功能决定，假设我们现在有一个传感器可以直接得到机器人的位置状态量$p$，$p=\\begin{bmatrix} x &amp; y &amp; z \\end{bmatrix}^T$。<br>　　注意传感器测量量的范围和单位可能与系统状态变量的范围和单位不一致，所以我们需要做如下变换：</p>\n<p>$$<br>\\mu = Hx_k \\\\<br>\\Sigma = HP_kH^T<br>$$</p>\n<p>　　其中$H$为变换矩阵，具体到我们所讨论的例子，传感器只能测得6个系统状态量中的3个，所以要做如下变换，把系统状态量变换到传感器测量空间中去：</p>\n<p>$$<br>\\begin{bmatrix}<br>    x \\\\<br>    y \\\\<br>    z \\\\<br>\\end{bmatrix}<br>=<br>\\begin{bmatrix}<br>    1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\<br>    0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\<br>    0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>    x \\\\<br>    y \\\\<br>    z \\\\<br>    v_x \\\\<br>    v_y \\\\<br>    v_z \\\\<br>\\end{bmatrix}<br>$$</p>\n<p>　　传感器也有自己的精度范围，换句话说传感器的读数会收到高斯噪声的影响在某个范围内波动。我们把传感器<strong>测量值不确定性</strong>的方差记为$R$，传感器实际返回的值（即正态分布均值）记为$z_k$。</p>\n<h2 id=\"数据融合\"><a href=\"#数据融合\" class=\"headerlink\" title=\"数据融合\"></a>数据融合</h2><p>　　现在每一时刻我们都有了两个高维的正态分布模型，一个来自模型的预测值，另一个来自传感器的测量值。我们尝试去进行<strong>数据的融合</strong>。其实非常简单，对每一个模型来说我们有了它在空间各个位置的<strong>概率密度函数</strong>，我们需要找到<strong>最大可能性</strong>的那个位置，那么我们只要将<strong>两者相乘</strong>就好了。<br>　　非常值得高兴的是，<strong>两个正态分布相乘，结果还是一个正态分布！</strong>于是新的正态分布的<strong>均值位置</strong>就是两模型相乘后<strong>概率密度最大</strong>的位置处。理所当然的我们就可以把它选做该时刻的机器人的位置<strong>估计值</strong>。<br><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/gauss.jpg\" alt=\"gauss\"></p>\n<p>　　下面做一些简要的推导：</p>\n<p><em>太懒了直接贴图，来源<a href=\"https://www.zhihu.com/question/23971601\" target=\"_blank\" rel=\"noopener\">米开朗基罗赵</a></em></p>\n<p>　　一维正态分布定义：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g1.jpg\" alt=\"g1\"></p>\n<p>　　我们想知道两个均值、方差不同的正态分布相乘的结果：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g2.jpg\" alt=\"g2\"></p>\n<p>　　把公式(9)带入(10)然后做一些变换，可以得到：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g3.jpg\" alt=\"g3\"></p>\n<p>　　因式分解出一部分，表示为$k$：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g4.jpg\" alt=\"g4\"></p>\n<p>　　上面是一维的情况，扩展到高维，直接把(12)和(13)表示成矩阵形式就好了：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g5.jpg\" alt=\"g5\"></p>\n<p>　　现在出现的这个$K$就是那个让人很难理解的<strong>卡尔曼增益</strong>了，但是在这里这很简单，只是两个正态分布合并过程中因式分解出的一项。<br>　　现在我们来把(14)和(15)中的变量替换一下，替换成我们分析出的运动模型和观测模型的均值、方差，其中把运动模型变换到传感器测量空间中：</p>\n<p>$$<br>(\\mu_0, \\Sigma_0)=(Hx_k, HP_kH^T) \\\\<br>(\\mu_1, \\Sigma_1)=(z_k, R)<br>$$</p>\n<p>　　经过化简，我们就可以得到三个更新公式了，再加上之前的两个运动模型方程，共同组成卡尔曼滤波的<strong>五个核心公式</strong>：</p>\n<p>$$<br>x_k = Fx_{k - 1} \\\\<br>P_k = FP_{k - 1}F^T + Q \\\\<br>K = P_kH^T(HP_kH^T + R)^{-1} \\\\<br>\\hat{x_k} = x_k + G(z_k - Hx_k) \\\\<br>\\hat{P_k} = (I - GH)P_k<br>$$</p>\n<p>　　其中$\\hat{x_k}$为该时刻的位置估计值，同时将作为下一次迭代的$x_{k - 1}$，$\\hat{P_k}$为更新后的系统方差，将作为下一下迭代的$P_{k - 1}$</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>　　这一部分是一个实例，具体背景是我通过双目相机追踪并还原了手指在空间中运动的一些三维轨迹点（螺旋上升轨迹），但是数据有些噪音（波动），下面是原始数据以及用卡尔曼滤波后的效果图：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/origin.png\" alt=\"origin\"><br><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/afterFilter.png\" alt=\"afterFilter\"></p>\n<p>附上源代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu 18 Apr 18:51:49 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Core&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/LU&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Matrix&lt;<span class=\"keyword\">double</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>&gt; Matrix6d;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Matrix&lt;<span class=\"keyword\">double</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>&gt; Vector6d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x, y, z, dx, dy, dz;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> nx, ny, nz;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x1, y1, z1, x2, y2, z2;</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix6d F, P, Q, P_;</span><br><span class=\"line\">    Matrix&lt;<span class=\"keyword\">double</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>&gt; H;</span><br><span class=\"line\">    Matrix&lt;<span class=\"keyword\">double</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>&gt; G;</span><br><span class=\"line\">    Matrix3d R;</span><br><span class=\"line\"></span><br><span class=\"line\">    ifstream fin;</span><br><span class=\"line\">    ofstream fout;</span><br><span class=\"line\">    fin.open(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    fout.open(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    fin &gt;&gt; c &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; z1;</span><br><span class=\"line\">    fin &gt;&gt; c &gt;&gt; x2 &gt;&gt; y2  &gt;&gt; z2;</span><br><span class=\"line\">    fout &lt;&lt; c &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x1 &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; y1  &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; z1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    fout &lt;&lt; c &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x2 &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; y2  &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; z2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    x = x2, y = y2, z = z2;</span><br><span class=\"line\">    dx = x2 - x1, dy = y2 - y1, dz = z2 - z1;</span><br><span class=\"line\"></span><br><span class=\"line\">    Vector6d X, X_;</span><br><span class=\"line\">    Vector3d Z;</span><br><span class=\"line\">    X &lt;&lt; x , y , z , dx , dy , dz;</span><br><span class=\"line\"></span><br><span class=\"line\">    F &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    H &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    P = Matrix6d::Identity() * <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Q = Matrix6d::Identity() * <span class=\"number\">1e-4</span>;</span><br><span class=\"line\">    R = Matrix3d::Identity() * <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fin &gt;&gt; c &gt;&gt; nx &gt;&gt; ny &gt;&gt; nz)&#123;</span><br><span class=\"line\">        Z &lt;&lt; nx , ny , nz;</span><br><span class=\"line\"></span><br><span class=\"line\">        X_ = F * X;</span><br><span class=\"line\">        P_ = F * P * F.transpose() + Q;</span><br><span class=\"line\"></span><br><span class=\"line\">        G = P_ * H.transpose() * (H * P_ * H.transpose() + R).inverse();</span><br><span class=\"line\">        X = X_ + G * (Z - H * X_);</span><br><span class=\"line\">        P = (Matrix6d::Identity() - G * H) * P_;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fout &lt;&lt; <span class=\"string\">\"v \"</span> &lt;&lt; X(<span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; X(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; X(<span class=\"number\">2</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fin.close();</span><br><span class=\"line\">    fout.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用cmake编译，CMakeLists.txt中的内容：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION 3.5.1)</span><br><span class=\"line\">project(Ekf)</span><br><span class=\"line\"></span><br><span class=\"line\">find_package(Eigen3 REQUIRED)</span><br><span class=\"line\">include_directories($&#123;EIGEN3_INCLUDE_DIRS&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(ekf ekf.cpp)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://home.wlu.edu/~levys/kalman_tutorial/\" target=\"_blank\" rel=\"noopener\">The Extended Kalman Filter:An Interactive Tutorial for Non-Experts</a><br><a href=\"https://blog.csdn.net/heyijia0327/article/details/17487467\" target=\"_blank\" rel=\"noopener\">卡尔曼滤波－－从推导到应用</a><br><a href=\"https://www.zhihu.com/question/23971601\" target=\"_blank\" rel=\"noopener\">如何通俗并尽可能详尽解释卡尔曼滤波</a><br><a href=\"https://www.cnblogs.com/jcchen1987/p/4371439.html\" target=\"_blank\" rel=\"noopener\">理解Kalman滤波的使用</a></p>\n<p>　　这些文章在我学习卡尔曼滤波的过程中给予了我很大的帮助，感谢各位博主。其中第三个链接为知乎的回答，我主要参考了其中的[Kent Zeng]用户、[太空精酿]用户以及[米开朗基罗赵]用户的回答。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>　　卡尔曼老爷子实在是太强了Orz。</p>\n","site":{"data":{}},"excerpt":"<p>　　卡尔曼滤波理论，由卡尔曼博士在1960年访问NASA时首次提出，震惊了NASA，促成了著名的“阿波罗”计划，使人类第一次登上月球。</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/Rudolf_Kalman.jpg\" alt=\"Rudolf_Kalman\"></p>","more":"<h1 id=\"什么是卡尔曼滤波\"><a href=\"#什么是卡尔曼滤波\" class=\"headerlink\" title=\"什么是卡尔曼滤波\"></a>什么是卡尔曼滤波</h1><p>　　<a href=\"https://www.wikiwand.com/zh-hans/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2\" target=\"_blank\" rel=\"noopener\">维基百科上的解释</a>：卡尔曼滤波是一种高效率的递归滤波器，它能从一系列的不完全及包含杂讯的测量中，估计动态系统的状态。<br>　　简单来说就是它可以有效利用多个粗糙数据之间的关系，对多个数据进行融合。下面举个简单的例子：</p>\n<p><em>例子来源<a href=\"https://www.zhihu.com/question/23971601/answer/26254459\" target=\"_blank\" rel=\"noopener\">Kent Zeng</a></em><br>　　假设我们有两个传感器，测的是同一个信号，譬如说物体的位置$(x, y, z)$。可是它们每次的读数都不太一样，即传感器的信号有波动，怎么办？<br>　　<strong>取平均。</strong><br>　　再假设我们知道其中那个价格贵一些的传感器应该更准一些，比取平均更好的方法是：<br>　　<strong>取加权平均。</strong>即我们把精度更高的传感器的权值设的高一点，表示我们更相信它的测量结果。假设两个传感器的测量误差都符合正态分布，我们可以将这<strong>两个正态分布合成为一个新的正态分布</strong>。具体过程在下面的原理部分讨论，这种理解方式很重要。<br>　　但是如果我们只有一个传感器，但是还有一个数学模型，譬如物体的运动模型。模型可以帮我们算出一个物体的位置值，但也不是那么准。怎么办？<br>　　<strong>把模型算出来的值和传感器测出来的值，像两个传感器那样，取加权平均。</strong></p>\n<h1 id=\"卡尔曼滤波原理\"><a href=\"#卡尔曼滤波原理\" class=\"headerlink\" title=\"卡尔曼滤波原理\"></a>卡尔曼滤波原理</h1><h2 id=\"运动模型\"><a href=\"#运动模型\" class=\"headerlink\" title=\"运动模型\"></a>运动模型</h2><p>　　同样我们用测量物体的位置的例子来说明。假设我们要实时的得到机器人在空间中的位置。如上面所说，我们需要一个机器人的运动模型，如果我们不知道机器人确切的运动模型，可以先简单的假定其为匀速运动模型。<br>　　有了运动模型之后，我们就可以通过一组<strong>状态变量</strong>$x$来描述机器人在某一时刻的状态，包括位置$p$和速度$v$。</p>\n<p>$$<br>x=<br> \\begin{bmatrix}<br>    p \\\\<br>    v \\\\<br>  \\end{bmatrix}<br>$$</p>\n<p>　　这里的$x, p, v$都是向量，其中，$p=\\begin{bmatrix} x \\\\ y \\\\ z \\end{bmatrix}$，$v=\\begin{bmatrix} v_x \\\\ v_y \\\\ v_z \\end{bmatrix}$<br>　　这里我们只记录了位置和速度，但是取决于我们的模型以及我们期望获得的数据我们可以把任何数据变量放进系统状态里。<br>　　用运动方程来表示我们建立的匀速模型：</p>\n<p>$$<br>p_k = p_{k - 1} + \\Delta t \\times{v_{k - 1}} \\\\<br>v_k = v_{k - 1}<br>$$</p>\n<p>　　写成矩阵形式：</p>\n<p>$$<br>x_k=<br> \\begin{bmatrix}<br>    p_k \\\\<br>    v_k \\\\<br>  \\end{bmatrix}<br>=<br> \\begin{bmatrix}<br>    1 &amp; \\Delta t \\\\<br>    0 &amp; 1 \\\\<br> \\end{bmatrix}<br> \\begin{bmatrix}<br>    p_{k -1} \\\\<br>    v_{k - 1} \\\\<br> \\end{bmatrix}<br>$$</p>\n<p>　　因为$x$实际上是一个包含三个位置量和三个速度量的六维向量，所以由$x_{k - 1}$到$x_{k}$的转移矩阵可具体表示为：</p>\n<p>$$<br>x_k=<br> \\begin{bmatrix}<br>    1 &amp; 0 &amp; 0 &amp; \\Delta t &amp; 0 &amp; 0 \\\\<br>    0 &amp; 1 &amp; 0 &amp; 0 &amp; \\Delta t &amp; 0 \\\\<br>    0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; \\Delta t \\\\<br>    0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\\\<br>    0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\\\<br>    0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\\<br> \\end{bmatrix}<br> x_{k - 1}<br>$$</p>\n<p>　　把转移矩阵记为$F$，则$x_k = Fx_{k - 1}$<br>　　卡尔曼滤波假设所有变量的值符合<strong>正态分布</strong>，那么系统各变量间的<strong>不确定度</strong>可以用<strong><a href=\"https://ain-crad.github.io/2019/03/27/Covariance-%E5%8D%8F%E6%96%B9%E5%B7%AE/\" target=\"_blank\" rel=\"noopener\">协方差</a></strong>来表示，系统状态的协方差记为$P_k$，这是一个$6\\times{6}$的对称矩阵。<br>　　由于我们有下面的公式：</p>\n<p>$$<br>Cov(x) = \\Sigma \\\\<br>Cov(Ax) = A \\Sigma A^T<br>$$</p>\n<p>　　所以综合上面的运动模型我们可以得到<strong>状态变量以及误差的更新公式</strong>：</p>\n<p>$$<br>x_k = Fx_{k - 1} \\\\<br>P_k = FP_{k -1}F^T<br>$$</p>\n<p>　　之前提到我们的模型一般不会是100%准确的，那么就会存在一个<strong>预测误差</strong>，我们把这个预测误差矩阵记为$Q$，表示预测上的高斯噪声。对误差做简单的叠加，可以得到<strong>完整的预测转换方程</strong>：</p>\n<p>$$<br>x_k = Fx_{k - 1} \\\\<br>P_k = FP_{k - 1}F^T + Q<br>$$</p>\n<p>　　<em>Ps.有时我们会看到$x_k = Fx_{k - 1} + Bu_k$这种转移方程的写法，这是引入了一个可以预测的外力影响因素，表示系统当前状态并不只依靠上一个系统状态。譬如，机器人的运动受当时风速的影响，那么$u_k$就表示风速变量，$B$表示风速变量到系统状态变量的转换矩阵。</em></p>\n<h2 id=\"观测模型\"><a href=\"#观测模型\" class=\"headerlink\" title=\"观测模型\"></a>观测模型</h2><p>　　我们还需要一个（或多个）传感器来提供系统状态的<strong>观测数据</strong>，通过测量值来精炼上一阶段模型的预测值。传感器所能够测得的变量由其功能决定，假设我们现在有一个传感器可以直接得到机器人的位置状态量$p$，$p=\\begin{bmatrix} x &amp; y &amp; z \\end{bmatrix}^T$。<br>　　注意传感器测量量的范围和单位可能与系统状态变量的范围和单位不一致，所以我们需要做如下变换：</p>\n<p>$$<br>\\mu = Hx_k \\\\<br>\\Sigma = HP_kH^T<br>$$</p>\n<p>　　其中$H$为变换矩阵，具体到我们所讨论的例子，传感器只能测得6个系统状态量中的3个，所以要做如下变换，把系统状态量变换到传感器测量空间中去：</p>\n<p>$$<br>\\begin{bmatrix}<br>    x \\\\<br>    y \\\\<br>    z \\\\<br>\\end{bmatrix}<br>=<br>\\begin{bmatrix}<br>    1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\<br>    0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\<br>    0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>    x \\\\<br>    y \\\\<br>    z \\\\<br>    v_x \\\\<br>    v_y \\\\<br>    v_z \\\\<br>\\end{bmatrix}<br>$$</p>\n<p>　　传感器也有自己的精度范围，换句话说传感器的读数会收到高斯噪声的影响在某个范围内波动。我们把传感器<strong>测量值不确定性</strong>的方差记为$R$，传感器实际返回的值（即正态分布均值）记为$z_k$。</p>\n<h2 id=\"数据融合\"><a href=\"#数据融合\" class=\"headerlink\" title=\"数据融合\"></a>数据融合</h2><p>　　现在每一时刻我们都有了两个高维的正态分布模型，一个来自模型的预测值，另一个来自传感器的测量值。我们尝试去进行<strong>数据的融合</strong>。其实非常简单，对每一个模型来说我们有了它在空间各个位置的<strong>概率密度函数</strong>，我们需要找到<strong>最大可能性</strong>的那个位置，那么我们只要将<strong>两者相乘</strong>就好了。<br>　　非常值得高兴的是，<strong>两个正态分布相乘，结果还是一个正态分布！</strong>于是新的正态分布的<strong>均值位置</strong>就是两模型相乘后<strong>概率密度最大</strong>的位置处。理所当然的我们就可以把它选做该时刻的机器人的位置<strong>估计值</strong>。<br><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/gauss.jpg\" alt=\"gauss\"></p>\n<p>　　下面做一些简要的推导：</p>\n<p><em>太懒了直接贴图，来源<a href=\"https://www.zhihu.com/question/23971601\" target=\"_blank\" rel=\"noopener\">米开朗基罗赵</a></em></p>\n<p>　　一维正态分布定义：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g1.jpg\" alt=\"g1\"></p>\n<p>　　我们想知道两个均值、方差不同的正态分布相乘的结果：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g2.jpg\" alt=\"g2\"></p>\n<p>　　把公式(9)带入(10)然后做一些变换，可以得到：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g3.jpg\" alt=\"g3\"></p>\n<p>　　因式分解出一部分，表示为$k$：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g4.jpg\" alt=\"g4\"></p>\n<p>　　上面是一维的情况，扩展到高维，直接把(12)和(13)表示成矩阵形式就好了：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/g5.jpg\" alt=\"g5\"></p>\n<p>　　现在出现的这个$K$就是那个让人很难理解的<strong>卡尔曼增益</strong>了，但是在这里这很简单，只是两个正态分布合并过程中因式分解出的一项。<br>　　现在我们来把(14)和(15)中的变量替换一下，替换成我们分析出的运动模型和观测模型的均值、方差，其中把运动模型变换到传感器测量空间中：</p>\n<p>$$<br>(\\mu_0, \\Sigma_0)=(Hx_k, HP_kH^T) \\\\<br>(\\mu_1, \\Sigma_1)=(z_k, R)<br>$$</p>\n<p>　　经过化简，我们就可以得到三个更新公式了，再加上之前的两个运动模型方程，共同组成卡尔曼滤波的<strong>五个核心公式</strong>：</p>\n<p>$$<br>x_k = Fx_{k - 1} \\\\<br>P_k = FP_{k - 1}F^T + Q \\\\<br>K = P_kH^T(HP_kH^T + R)^{-1} \\\\<br>\\hat{x_k} = x_k + G(z_k - Hx_k) \\\\<br>\\hat{P_k} = (I - GH)P_k<br>$$</p>\n<p>　　其中$\\hat{x_k}$为该时刻的位置估计值，同时将作为下一次迭代的$x_{k - 1}$，$\\hat{P_k}$为更新后的系统方差，将作为下一下迭代的$P_{k - 1}$</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>　　这一部分是一个实例，具体背景是我通过双目相机追踪并还原了手指在空间中运动的一些三维轨迹点（螺旋上升轨迹），但是数据有些噪音（波动），下面是原始数据以及用卡尔曼滤波后的效果图：</p>\n<p><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/origin.png\" alt=\"origin\"><br><img src=\"/2019/04/17/Kalman-filter-卡尔曼滤波器/afterFilter.png\" alt=\"afterFilter\"></p>\n<p>附上源代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Thu 18 Apr 18:51:49 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Core&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/LU&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Matrix&lt;<span class=\"keyword\">double</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>&gt; Matrix6d;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Matrix&lt;<span class=\"keyword\">double</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>&gt; Vector6d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x, y, z, dx, dy, dz;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> nx, ny, nz;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x1, y1, z1, x2, y2, z2;</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix6d F, P, Q, P_;</span><br><span class=\"line\">    Matrix&lt;<span class=\"keyword\">double</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>&gt; H;</span><br><span class=\"line\">    Matrix&lt;<span class=\"keyword\">double</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>&gt; G;</span><br><span class=\"line\">    Matrix3d R;</span><br><span class=\"line\"></span><br><span class=\"line\">    ifstream fin;</span><br><span class=\"line\">    ofstream fout;</span><br><span class=\"line\">    fin.open(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    fout.open(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    fin &gt;&gt; c &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; z1;</span><br><span class=\"line\">    fin &gt;&gt; c &gt;&gt; x2 &gt;&gt; y2  &gt;&gt; z2;</span><br><span class=\"line\">    fout &lt;&lt; c &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x1 &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; y1  &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; z1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    fout &lt;&lt; c &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x2 &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; y2  &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; z2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    x = x2, y = y2, z = z2;</span><br><span class=\"line\">    dx = x2 - x1, dy = y2 - y1, dz = z2 - z1;</span><br><span class=\"line\"></span><br><span class=\"line\">    Vector6d X, X_;</span><br><span class=\"line\">    Vector3d Z;</span><br><span class=\"line\">    X &lt;&lt; x , y , z , dx , dy , dz;</span><br><span class=\"line\"></span><br><span class=\"line\">    F &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    H &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">         <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    P = Matrix6d::Identity() * <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Q = Matrix6d::Identity() * <span class=\"number\">1e-4</span>;</span><br><span class=\"line\">    R = Matrix3d::Identity() * <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fin &gt;&gt; c &gt;&gt; nx &gt;&gt; ny &gt;&gt; nz)&#123;</span><br><span class=\"line\">        Z &lt;&lt; nx , ny , nz;</span><br><span class=\"line\"></span><br><span class=\"line\">        X_ = F * X;</span><br><span class=\"line\">        P_ = F * P * F.transpose() + Q;</span><br><span class=\"line\"></span><br><span class=\"line\">        G = P_ * H.transpose() * (H * P_ * H.transpose() + R).inverse();</span><br><span class=\"line\">        X = X_ + G * (Z - H * X_);</span><br><span class=\"line\">        P = (Matrix6d::Identity() - G * H) * P_;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fout &lt;&lt; <span class=\"string\">\"v \"</span> &lt;&lt; X(<span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; X(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; X(<span class=\"number\">2</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fin.close();</span><br><span class=\"line\">    fout.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用cmake编译，CMakeLists.txt中的内容：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION 3.5.1)</span><br><span class=\"line\">project(Ekf)</span><br><span class=\"line\"></span><br><span class=\"line\">find_package(Eigen3 REQUIRED)</span><br><span class=\"line\">include_directories($&#123;EIGEN3_INCLUDE_DIRS&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(ekf ekf.cpp)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://home.wlu.edu/~levys/kalman_tutorial/\" target=\"_blank\" rel=\"noopener\">The Extended Kalman Filter:An Interactive Tutorial for Non-Experts</a><br><a href=\"https://blog.csdn.net/heyijia0327/article/details/17487467\" target=\"_blank\" rel=\"noopener\">卡尔曼滤波－－从推导到应用</a><br><a href=\"https://www.zhihu.com/question/23971601\" target=\"_blank\" rel=\"noopener\">如何通俗并尽可能详尽解释卡尔曼滤波</a><br><a href=\"https://www.cnblogs.com/jcchen1987/p/4371439.html\" target=\"_blank\" rel=\"noopener\">理解Kalman滤波的使用</a></p>\n<p>　　这些文章在我学习卡尔曼滤波的过程中给予了我很大的帮助，感谢各位博主。其中第三个链接为知乎的回答，我主要参考了其中的[Kent Zeng]用户、[太空精酿]用户以及[米开朗基罗赵]用户的回答。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>　　卡尔曼老爷子实在是太强了Orz。</p>"},{"title":"Uva1601-The Morning after Halloween-建图+BFS状态搜索/双向BFS","date":"2019-01-02T02:02:57.000Z","_content":"卡了两天，中间曾一度自闭...(●°u°●)​ 」。不过理解了之后发现确实是好题。\n$w \\times h，（w, h <= 16）$的网格上有$n（n <= 3）$个小写字母（代表ghost）。要求把它们分别移动到对应的大写字母里。每步可以有多个ghost同时移动（均为上下左右4个方向之一移动），但每步结束之后任何两个ghost不能占用同一个位置，也不能在一步之内交换位置。\n<!--more-->\n\n# 链接\n题目链接：[Uva1601-The Morning after Halloween](https://vjudge.net/problem/UVA-1601)\n参考链接：[crazysillynerd's blog](https://blog.csdn.net/crazysillynerd/article/details/42562959)\n\n# 题解\n总的状态数为$256^3$。另外每次转移时需要$5^3$枚举每一个ghost的下一个位置（上下左右+不动）。如果这样直接BFS的话，肯定会超时。于是要进行优化，第一次接触这类问题的优化方法，感谢博主[crazysillynerd](https://blog.csdn.net/crazysillynerd/article/details/42562959)，讲解的很清晰。\n首先是尽量避免搜索不合法的走法。题目条件“任何一个2\\*2子网格中至少有一个障碍格”说明了有很多格子都是障碍，可转移的状态很多都是不合法的。每次都压到队列里然后不合法再排除就会浪费很多时间。以这里为优化点，可以**把迷宫图转换成图，用邻接表保存起来**，这样搜索的时候就只走可以走的点，而不是临时判断5种方案是否合法。\n其次在查重上。因为任何一个2\\*2的子网格中至少有一个障碍格，所有最多有256 \\* 75%的格子即不超过200个格子可以走。**首先把坐标(x，y)，映射到一个整型数上，（这个整型数相当于把16*16的网格拉伸成一维之后原坐标点此时的数组下标，但是排除了'#'的格子）。然后建立一个数组vis[200][200][200]用来查重。**\n最后考虑ghost的数量不同的问题。在建图的时候把多余的不存在的ghost**放到一个孤立的点中，然后使其起始位置和目标位置相同**，这样就避免了需要根据情况动态调整的麻烦。\n总体思路：**输入->建图->BFS**\n\n## 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed  2 Jan 07:17:12 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 20;\nint w, h, n;\nchar d[maxn][maxn];\nint s[3], t[3];\nint cnt;\nint x[200], y[200], id[maxn][maxn];;\nbool vis[200][200][200];\nvector<int> G[200];\nint dx[] = {1, 0, -1, 0, 0};\nint dy[] = {0, 1, 0, -1, 0};\nint ans;\nstruct Pos{\n    Pos(int a = 0, int b = 0, int c = 0, int dis = 0):a(a), b(b), c(c), dis(dis){}\n    int a, b, c;\n    int dis;\n};\n\nvoid bfs(){\n    queue<Pos> que;\n    que.push(Pos(s[0], s[1], s[2], 0));\n    vis[s[0]][s[1]][s[2]] = 1;\n\n    while(!que.empty()){\n        Pos u = que.front();\n        que.pop();\n        if(u.a == t[0] && u.b == t[1] && u.c == t[2]){\n            ans = u.dis;\n            break;\n        }\n        for(int i = 0; i < (int)G[u.a].size(); i++){\n            for(int j = 0; j < (int)G[u.b].size(); j++){\n                for(int k = 0; k < (int)G[u.c].size(); k++){\n                    int p1 = G[u.a][i], p2 = G[u.b][j], p3 = G[u.c][k];\n\n                    //check conflict\n                    if(vis[p1][p2][p3]) continue;\n                    if(p1 == p2 || p1 == p3 || p2 == p3) continue;\n                    if(p1 == u.b && p2 == u.a) continue;\n                    if(p1 == u.c && p3 == u.a) continue;\n                    if(p2 == u.c && p3 == u.b) continue;\n\n                    que.push(Pos(p1, p2, p3, u.dis + 1));\n                    vis[p1][p2][p3] = 1; \n                }\n            }\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> w >> h >> n){\n        if(w == 0 && h == 0 && n == 0) break;\n        getchar();\n        cnt = 0;\n        memset(id, -1, sizeof(id));\n        memset(vis, 0, sizeof(vis));\n        for(int i = 0; i < 200; i++){\n            G[i].clear();\n        }\n\n        for(int i = 0; i < h; i++){\n            fgets(d[i], maxn, stdin);\n        }\n\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(d[i][j] != '#'){\n                    x[cnt] = i, y[cnt] = j, id[i][j] = cnt;\n                    if(islower(d[i][j])) s[d[i][j] - 'a'] = cnt;\n                    if(isupper(d[i][j])) t[d[i][j] - 'A'] = cnt;\n                    cnt++;\n                }\n            }\n        }\n\n        for(int i = 0; i < cnt; i++){\n            for(int dir = 0; dir < 5; dir++){\n                int nx = x[i] + dx[dir], ny = y[i] + dy[dir];\n                //\"Outermost cells of a map are walls\" means we don't need to check out-of-bound\n                if(d[nx][ny] != '#') G[i].push_back(id[nx][ny]);\n            }\n        }\n\n        //add fake nodes\n        if(n <= 2){\n            G[cnt].push_back(cnt);\n            s[2] = t[2] = cnt;\n            cnt++;\n        } \n        if(n <= 1){\n            G[cnt].push_back(cnt);\n            s[1] = t[1] = cnt;\n            cnt++;\n        }\n\n        ans = -1;\n        bfs();\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n# 双向BFS解法\n参考链接：[phlsheji's blog](https://www.cnblogs.com/bhlsheji/p/4804022.html)\n参考连接：[crazysillynerd](https://blog.csdn.net/crazysillynerd/article/details/42681579)\n\n双向BFS是利用两个队列。一个队列保存从起点开始向后搜索的状态，另一个保存从终点开始向前搜索的状态，**双向BFS主要是区分每一个格子是从起点开始搜索到的还是从终点开始搜索到的**，每一个经过的格子结点保存到达该格子经过的步数，这样两边出现相交，两个方向的步数相加就是最终结果。\n*双向BFS的效率会高一些。*\n\n## 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed  2 Jan 07:17:12 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 20;\nint w, h, n;\nchar d[maxn][maxn];\nint s[3], t[3];\nint cnt;\nint x[200], y[200], id[maxn][maxn];;\nint vis[200][200][200];\nint dis_s[200][200][200], dis_t[200][200][200];\nvector<int> G[200];\nint dx[] = {1, 0, -1, 0, 0};\nint dy[] = {0, 1, 0, -1, 0};\nint ans;\nstruct Pos{\n    Pos(int a = 0, int b = 0, int c = 0):a(a), b(b), c(c){}\n    int a, b, c;\n};\n\nvoid adv_bfs(){\n    queue<Pos> que_s;\n    que_s.push(Pos(s[0], s[1], s[2]));\n    vis[s[0]][s[1]][s[2]] = 1;\n    dis_s[s[0]][s[1]][s[2]] = 0;\n    queue<Pos> que_t;\n    que_t.push(Pos(t[0], t[1], t[2]));\n    vis[t[0]][t[1]][t[2]] = 2;\n    dis_t[t[0]][t[1]][t[2]] = 0;\n\n    while(!que_s.empty() || !que_t.empty()){\n        if(!que_s.empty()){\n            Pos u = que_s.front();\n            que_s.pop();\n            if(vis[u.a][u.b][u.c] == 2){\n                ans = dis_s[u.a][u.b][u.c] + dis_t[u.a][u.b][u.c];\n                return;\n            }\n\n            for(int i = 0; i < (int)G[u.a].size(); i++){\n                for(int j = 0; j < (int)G[u.b].size(); j++){\n                    for(int k = 0; k < (int)G[u.c].size(); k++){\n                        int p1 = G[u.a][i], p2 = G[u.b][j], p3 = G[u.c][k];\n                        //check conflict\n                        if(vis[p1][p2][p3] == 1) continue;\n                        if(p1 == p2 || p1 == p3 || p2 == p3) continue;\n                        if(p1 == u.b && p2 == u.a) continue;\n                        if(p1 == u.c && p3 == u.a) continue;\n                        if(p2 == u.c && p3 == u.b) continue;\n\n                        dis_s[p1][p2][p3] = dis_s[u.a][u.b][u.c] + 1;\n\n                        if(vis[p1][p2][p3] == 2){\n                            ans = dis_s[p1][p2][p3] + dis_t[p1][p2][p3];\n                            return;\n                        }\n                        else if(vis[p1][p2][p3] == 0){\n                            vis[p1][p2][p3] = 1;\n                            que_s.push(Pos(p1, p2, p3));\n                        }\n                    }\n                }\n            }\n        }\n\n        if(!que_t.empty()){\n            Pos v = que_t.front();\n            que_t.pop();\n            if(vis[v.a][v.b][v.c] == 1){\n                ans = dis_t[v.a][v.b][v.c] + dis_s[v.a][v.b][v.c];\n                return;\n            }\n\n            for(int i = 0; i < (int)G[v.a].size(); i++){\n                for(int j = 0; j < (int)G[v.b].size(); j++){\n                    for(int k = 0; k < (int)G[v.c].size(); k++){\n                        int p1 = G[v.a][i], p2 = G[v.b][j], p3 = G[v.c][k];\n                        //check conflict\n                        if(vis[p1][p2][p3] == 2) continue;\n                        if(p1 == p2 || p1 == p3 || p2 == p3) continue;\n                        if(p1 == v.b && p2 == v.a) continue;\n                        if(p1 == v.c && p3 == v.a) continue;\n                        if(p2 == v.c && p3 == v.b) continue;\n\n                        dis_t[p1][p2][p3] = dis_t[v.a][v.b][v.c] + 1;\n\n                        if(vis[p1][p2][p3] == 1){\n                            ans = dis_t[p1][p2][p3] + dis_s[p1][p2][p3];\n                            return;\n                        }\n                        else if(vis[p1][p2][p3] == 0){\n                            vis[p1][p2][p3] = 2;\n                            que_t.push(Pos(p1, p2, p3));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> w >> h >> n){\n        if(w == 0 && h == 0 && n == 0) break;\n        getchar();\n        cnt = 0;\n        memset(id, -1, sizeof(id));\n        memset(vis, 0, sizeof(vis));\n        memset(dis_s, 0, sizeof(dis_s));\n        memset(dis_t, 0, sizeof(dis_t));\n        for(int i = 0; i < 200; i++){\n            G[i].clear();\n        }\n\n        for(int i = 0; i < h; i++){\n            fgets(d[i], maxn, stdin);\n        }\n\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(d[i][j] != '#'){\n                    x[cnt] = i, y[cnt] = j, id[i][j] = cnt;\n                    if(islower(d[i][j])) s[d[i][j] - 'a'] = cnt;\n                    if(isupper(d[i][j])) t[d[i][j] - 'A'] = cnt;\n                    cnt++;\n                }\n            }\n        }\n\n        for(int i = 0; i < cnt; i++){\n            for(int dir = 0; dir < 5; dir++){\n                int nx = x[i] + dx[dir], ny = y[i] + dy[dir];\n                //\"Outermost cells of a map are walls\" means we don't need to check out-of-bound\n                if(d[nx][ny] != '#') G[i].push_back(id[nx][ny]);\n            }\n        }\n\n        //add fake nodes\n        if(n <= 2){\n            G[cnt].push_back(cnt);\n            s[2] = t[2] = cnt;\n            cnt++;\n        } \n        if(n <= 1){\n            G[cnt].push_back(cnt);\n            s[1] = t[1] = cnt;\n            cnt++;\n        }\n        \n        ans = -1;\n        adv_bfs();\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n","source":"_posts/Uva1601-The-Morning-after-Halloween.md","raw":"---\ntitle: Uva1601-The Morning after Halloween-建图+BFS状态搜索/双向BFS\ndate: 2019-01-02 10:02:57\ncategories:\n- ACM\n- BFS\ntags:\n- 建图\n- 双向BFS\n---\n卡了两天，中间曾一度自闭...(●°u°●)​ 」。不过理解了之后发现确实是好题。\n$w \\times h，（w, h <= 16）$的网格上有$n（n <= 3）$个小写字母（代表ghost）。要求把它们分别移动到对应的大写字母里。每步可以有多个ghost同时移动（均为上下左右4个方向之一移动），但每步结束之后任何两个ghost不能占用同一个位置，也不能在一步之内交换位置。\n<!--more-->\n\n# 链接\n题目链接：[Uva1601-The Morning after Halloween](https://vjudge.net/problem/UVA-1601)\n参考链接：[crazysillynerd's blog](https://blog.csdn.net/crazysillynerd/article/details/42562959)\n\n# 题解\n总的状态数为$256^3$。另外每次转移时需要$5^3$枚举每一个ghost的下一个位置（上下左右+不动）。如果这样直接BFS的话，肯定会超时。于是要进行优化，第一次接触这类问题的优化方法，感谢博主[crazysillynerd](https://blog.csdn.net/crazysillynerd/article/details/42562959)，讲解的很清晰。\n首先是尽量避免搜索不合法的走法。题目条件“任何一个2\\*2子网格中至少有一个障碍格”说明了有很多格子都是障碍，可转移的状态很多都是不合法的。每次都压到队列里然后不合法再排除就会浪费很多时间。以这里为优化点，可以**把迷宫图转换成图，用邻接表保存起来**，这样搜索的时候就只走可以走的点，而不是临时判断5种方案是否合法。\n其次在查重上。因为任何一个2\\*2的子网格中至少有一个障碍格，所有最多有256 \\* 75%的格子即不超过200个格子可以走。**首先把坐标(x，y)，映射到一个整型数上，（这个整型数相当于把16*16的网格拉伸成一维之后原坐标点此时的数组下标，但是排除了'#'的格子）。然后建立一个数组vis[200][200][200]用来查重。**\n最后考虑ghost的数量不同的问题。在建图的时候把多余的不存在的ghost**放到一个孤立的点中，然后使其起始位置和目标位置相同**，这样就避免了需要根据情况动态调整的麻烦。\n总体思路：**输入->建图->BFS**\n\n## 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed  2 Jan 07:17:12 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 20;\nint w, h, n;\nchar d[maxn][maxn];\nint s[3], t[3];\nint cnt;\nint x[200], y[200], id[maxn][maxn];;\nbool vis[200][200][200];\nvector<int> G[200];\nint dx[] = {1, 0, -1, 0, 0};\nint dy[] = {0, 1, 0, -1, 0};\nint ans;\nstruct Pos{\n    Pos(int a = 0, int b = 0, int c = 0, int dis = 0):a(a), b(b), c(c), dis(dis){}\n    int a, b, c;\n    int dis;\n};\n\nvoid bfs(){\n    queue<Pos> que;\n    que.push(Pos(s[0], s[1], s[2], 0));\n    vis[s[0]][s[1]][s[2]] = 1;\n\n    while(!que.empty()){\n        Pos u = que.front();\n        que.pop();\n        if(u.a == t[0] && u.b == t[1] && u.c == t[2]){\n            ans = u.dis;\n            break;\n        }\n        for(int i = 0; i < (int)G[u.a].size(); i++){\n            for(int j = 0; j < (int)G[u.b].size(); j++){\n                for(int k = 0; k < (int)G[u.c].size(); k++){\n                    int p1 = G[u.a][i], p2 = G[u.b][j], p3 = G[u.c][k];\n\n                    //check conflict\n                    if(vis[p1][p2][p3]) continue;\n                    if(p1 == p2 || p1 == p3 || p2 == p3) continue;\n                    if(p1 == u.b && p2 == u.a) continue;\n                    if(p1 == u.c && p3 == u.a) continue;\n                    if(p2 == u.c && p3 == u.b) continue;\n\n                    que.push(Pos(p1, p2, p3, u.dis + 1));\n                    vis[p1][p2][p3] = 1; \n                }\n            }\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> w >> h >> n){\n        if(w == 0 && h == 0 && n == 0) break;\n        getchar();\n        cnt = 0;\n        memset(id, -1, sizeof(id));\n        memset(vis, 0, sizeof(vis));\n        for(int i = 0; i < 200; i++){\n            G[i].clear();\n        }\n\n        for(int i = 0; i < h; i++){\n            fgets(d[i], maxn, stdin);\n        }\n\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(d[i][j] != '#'){\n                    x[cnt] = i, y[cnt] = j, id[i][j] = cnt;\n                    if(islower(d[i][j])) s[d[i][j] - 'a'] = cnt;\n                    if(isupper(d[i][j])) t[d[i][j] - 'A'] = cnt;\n                    cnt++;\n                }\n            }\n        }\n\n        for(int i = 0; i < cnt; i++){\n            for(int dir = 0; dir < 5; dir++){\n                int nx = x[i] + dx[dir], ny = y[i] + dy[dir];\n                //\"Outermost cells of a map are walls\" means we don't need to check out-of-bound\n                if(d[nx][ny] != '#') G[i].push_back(id[nx][ny]);\n            }\n        }\n\n        //add fake nodes\n        if(n <= 2){\n            G[cnt].push_back(cnt);\n            s[2] = t[2] = cnt;\n            cnt++;\n        } \n        if(n <= 1){\n            G[cnt].push_back(cnt);\n            s[1] = t[1] = cnt;\n            cnt++;\n        }\n\n        ans = -1;\n        bfs();\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n# 双向BFS解法\n参考链接：[phlsheji's blog](https://www.cnblogs.com/bhlsheji/p/4804022.html)\n参考连接：[crazysillynerd](https://blog.csdn.net/crazysillynerd/article/details/42681579)\n\n双向BFS是利用两个队列。一个队列保存从起点开始向后搜索的状态，另一个保存从终点开始向前搜索的状态，**双向BFS主要是区分每一个格子是从起点开始搜索到的还是从终点开始搜索到的**，每一个经过的格子结点保存到达该格子经过的步数，这样两边出现相交，两个方向的步数相加就是最终结果。\n*双向BFS的效率会高一些。*\n\n## 代码\n```C++\n/*\n *\n * Author : Aincrad\n *\n * Date : Wed  2 Jan 07:17:12 CST 2019\n *\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 20;\nint w, h, n;\nchar d[maxn][maxn];\nint s[3], t[3];\nint cnt;\nint x[200], y[200], id[maxn][maxn];;\nint vis[200][200][200];\nint dis_s[200][200][200], dis_t[200][200][200];\nvector<int> G[200];\nint dx[] = {1, 0, -1, 0, 0};\nint dy[] = {0, 1, 0, -1, 0};\nint ans;\nstruct Pos{\n    Pos(int a = 0, int b = 0, int c = 0):a(a), b(b), c(c){}\n    int a, b, c;\n};\n\nvoid adv_bfs(){\n    queue<Pos> que_s;\n    que_s.push(Pos(s[0], s[1], s[2]));\n    vis[s[0]][s[1]][s[2]] = 1;\n    dis_s[s[0]][s[1]][s[2]] = 0;\n    queue<Pos> que_t;\n    que_t.push(Pos(t[0], t[1], t[2]));\n    vis[t[0]][t[1]][t[2]] = 2;\n    dis_t[t[0]][t[1]][t[2]] = 0;\n\n    while(!que_s.empty() || !que_t.empty()){\n        if(!que_s.empty()){\n            Pos u = que_s.front();\n            que_s.pop();\n            if(vis[u.a][u.b][u.c] == 2){\n                ans = dis_s[u.a][u.b][u.c] + dis_t[u.a][u.b][u.c];\n                return;\n            }\n\n            for(int i = 0; i < (int)G[u.a].size(); i++){\n                for(int j = 0; j < (int)G[u.b].size(); j++){\n                    for(int k = 0; k < (int)G[u.c].size(); k++){\n                        int p1 = G[u.a][i], p2 = G[u.b][j], p3 = G[u.c][k];\n                        //check conflict\n                        if(vis[p1][p2][p3] == 1) continue;\n                        if(p1 == p2 || p1 == p3 || p2 == p3) continue;\n                        if(p1 == u.b && p2 == u.a) continue;\n                        if(p1 == u.c && p3 == u.a) continue;\n                        if(p2 == u.c && p3 == u.b) continue;\n\n                        dis_s[p1][p2][p3] = dis_s[u.a][u.b][u.c] + 1;\n\n                        if(vis[p1][p2][p3] == 2){\n                            ans = dis_s[p1][p2][p3] + dis_t[p1][p2][p3];\n                            return;\n                        }\n                        else if(vis[p1][p2][p3] == 0){\n                            vis[p1][p2][p3] = 1;\n                            que_s.push(Pos(p1, p2, p3));\n                        }\n                    }\n                }\n            }\n        }\n\n        if(!que_t.empty()){\n            Pos v = que_t.front();\n            que_t.pop();\n            if(vis[v.a][v.b][v.c] == 1){\n                ans = dis_t[v.a][v.b][v.c] + dis_s[v.a][v.b][v.c];\n                return;\n            }\n\n            for(int i = 0; i < (int)G[v.a].size(); i++){\n                for(int j = 0; j < (int)G[v.b].size(); j++){\n                    for(int k = 0; k < (int)G[v.c].size(); k++){\n                        int p1 = G[v.a][i], p2 = G[v.b][j], p3 = G[v.c][k];\n                        //check conflict\n                        if(vis[p1][p2][p3] == 2) continue;\n                        if(p1 == p2 || p1 == p3 || p2 == p3) continue;\n                        if(p1 == v.b && p2 == v.a) continue;\n                        if(p1 == v.c && p3 == v.a) continue;\n                        if(p2 == v.c && p3 == v.b) continue;\n\n                        dis_t[p1][p2][p3] = dis_t[v.a][v.b][v.c] + 1;\n\n                        if(vis[p1][p2][p3] == 1){\n                            ans = dis_t[p1][p2][p3] + dis_s[p1][p2][p3];\n                            return;\n                        }\n                        else if(vis[p1][p2][p3] == 0){\n                            vis[p1][p2][p3] = 2;\n                            que_t.push(Pos(p1, p2, p3));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\n    while(cin >> w >> h >> n){\n        if(w == 0 && h == 0 && n == 0) break;\n        getchar();\n        cnt = 0;\n        memset(id, -1, sizeof(id));\n        memset(vis, 0, sizeof(vis));\n        memset(dis_s, 0, sizeof(dis_s));\n        memset(dis_t, 0, sizeof(dis_t));\n        for(int i = 0; i < 200; i++){\n            G[i].clear();\n        }\n\n        for(int i = 0; i < h; i++){\n            fgets(d[i], maxn, stdin);\n        }\n\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(d[i][j] != '#'){\n                    x[cnt] = i, y[cnt] = j, id[i][j] = cnt;\n                    if(islower(d[i][j])) s[d[i][j] - 'a'] = cnt;\n                    if(isupper(d[i][j])) t[d[i][j] - 'A'] = cnt;\n                    cnt++;\n                }\n            }\n        }\n\n        for(int i = 0; i < cnt; i++){\n            for(int dir = 0; dir < 5; dir++){\n                int nx = x[i] + dx[dir], ny = y[i] + dy[dir];\n                //\"Outermost cells of a map are walls\" means we don't need to check out-of-bound\n                if(d[nx][ny] != '#') G[i].push_back(id[nx][ny]);\n            }\n        }\n\n        //add fake nodes\n        if(n <= 2){\n            G[cnt].push_back(cnt);\n            s[2] = t[2] = cnt;\n            cnt++;\n        } \n        if(n <= 1){\n            G[cnt].push_back(cnt);\n            s[1] = t[1] = cnt;\n            cnt++;\n        }\n        \n        ans = -1;\n        adv_bfs();\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n","slug":"Uva1601-The-Morning-after-Halloween","published":1,"updated":"2019-08-20T14:44:13.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2nh002e30vnx0ch7tbl","content":"<p>卡了两天，中间曾一度自闭…(●°u°●)​ 」。不过理解了之后发现确实是好题。<br>$w \\times h，（w, h &lt;= 16）$的网格上有$n（n &lt;= 3）$个小写字母（代表ghost）。要求把它们分别移动到对应的大写字母里。每步可以有多个ghost同时移动（均为上下左右4个方向之一移动），但每步结束之后任何两个ghost不能占用同一个位置，也不能在一步之内交换位置。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接：<a href=\"https://vjudge.net/problem/UVA-1601\" target=\"_blank\" rel=\"noopener\">Uva1601-The Morning after Halloween</a><br>参考链接：<a href=\"https://blog.csdn.net/crazysillynerd/article/details/42562959\" target=\"_blank\" rel=\"noopener\">crazysillynerd’s blog</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>总的状态数为$256^3$。另外每次转移时需要$5^3$枚举每一个ghost的下一个位置（上下左右+不动）。如果这样直接BFS的话，肯定会超时。于是要进行优化，第一次接触这类问题的优化方法，感谢博主<a href=\"https://blog.csdn.net/crazysillynerd/article/details/42562959\" target=\"_blank\" rel=\"noopener\">crazysillynerd</a>，讲解的很清晰。<br>首先是尽量避免搜索不合法的走法。题目条件“任何一个2*2子网格中至少有一个障碍格”说明了有很多格子都是障碍，可转移的状态很多都是不合法的。每次都压到队列里然后不合法再排除就会浪费很多时间。以这里为优化点，可以<strong>把迷宫图转换成图，用邻接表保存起来</strong>，这样搜索的时候就只走可以走的点，而不是临时判断5种方案是否合法。<br>其次在查重上。因为任何一个2*2的子网格中至少有一个障碍格，所有最多有256 * 75%的格子即不超过200个格子可以走。<strong>首先把坐标(x，y)，映射到一个整型数上，（这个整型数相当于把16*16的网格拉伸成一维之后原坐标点此时的数组下标，但是排除了’#’的格子）。然后建立一个数组vis[200][200][200]用来查重。</strong><br>最后考虑ghost的数量不同的问题。在建图的时候把多余的不存在的ghost<strong>放到一个孤立的点中，然后使其起始位置和目标位置相同</strong>，这样就避免了需要根据情况动态调整的麻烦。<br>总体思路：<strong>输入-&gt;建图-&gt;BFS</strong></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed  2 Jan 07:17:12 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> w, h, n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">3</span>], t[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[<span class=\"number\">200</span>], y[<span class=\"number\">200</span>], id[maxn][maxn];;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">200</span>][<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pos</span>&#123;</span></span><br><span class=\"line\">    Pos(<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> b = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> dis = <span class=\"number\">0</span>):a(a), b(b), c(c), dis(dis)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Pos&gt; que;</span><br><span class=\"line\">    que.push(Pos(s[<span class=\"number\">0</span>], s[<span class=\"number\">1</span>], s[<span class=\"number\">2</span>], <span class=\"number\">0</span>));</span><br><span class=\"line\">    vis[s[<span class=\"number\">0</span>]][s[<span class=\"number\">1</span>]][s[<span class=\"number\">2</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Pos u = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u.a == t[<span class=\"number\">0</span>] &amp;&amp; u.b == t[<span class=\"number\">1</span>] &amp;&amp; u.c == t[<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">            ans = u.dis;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>)G[u.a].size(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"keyword\">int</span>)G[u.b].size(); j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; (<span class=\"keyword\">int</span>)G[u.c].size(); k++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> p1 = G[u.a][i], p2 = G[u.b][j], p3 = G[u.c][k];</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//check conflict</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(vis[p1][p2][p3]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p1 == p2 || p1 == p3 || p2 == p3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p1 == u.b &amp;&amp; p2 == u.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p1 == u.c &amp;&amp; p3 == u.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p2 == u.c &amp;&amp; p3 == u.b) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    que.push(Pos(p1, p2, p3, u.dis + <span class=\"number\">1</span>));</span><br><span class=\"line\">                    vis[p1][p2][p3] = <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(w == <span class=\"number\">0</span> &amp;&amp; h == <span class=\"number\">0</span> &amp;&amp; n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(id, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(id));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">200</span>; i++)&#123;</span><br><span class=\"line\">            G[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            fgets(d[i], maxn, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[i][j] != <span class=\"string\">'#'</span>)&#123;</span><br><span class=\"line\">                    x[cnt] = i, y[cnt] = j, id[i][j] = cnt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">islower</span>(d[i][j])) s[d[i][j] - <span class=\"string\">'a'</span>] = cnt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">isupper</span>(d[i][j])) t[d[i][j] - <span class=\"string\">'A'</span>] = cnt;</span><br><span class=\"line\">                    cnt++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dir = <span class=\"number\">0</span>; dir &lt; <span class=\"number\">5</span>; dir++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nx = x[i] + dx[dir], ny = y[i] + dy[dir];</span><br><span class=\"line\">                <span class=\"comment\">//\"Outermost cells of a map are walls\" means we don't need to check out-of-bound</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[nx][ny] != <span class=\"string\">'#'</span>) G[i].push_back(id[nx][ny]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//add fake nodes</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            G[cnt].push_back(cnt);</span><br><span class=\"line\">            s[<span class=\"number\">2</span>] = t[<span class=\"number\">2</span>] = cnt;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            G[cnt].push_back(cnt);</span><br><span class=\"line\">            s[<span class=\"number\">1</span>] = t[<span class=\"number\">1</span>] = cnt;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        bfs();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"双向BFS解法\"><a href=\"#双向BFS解法\" class=\"headerlink\" title=\"双向BFS解法\"></a>双向BFS解法</h1><p>参考链接：<a href=\"https://www.cnblogs.com/bhlsheji/p/4804022.html\" target=\"_blank\" rel=\"noopener\">phlsheji’s blog</a><br>参考连接：<a href=\"https://blog.csdn.net/crazysillynerd/article/details/42681579\" target=\"_blank\" rel=\"noopener\">crazysillynerd</a></p>\n<p>双向BFS是利用两个队列。一个队列保存从起点开始向后搜索的状态，另一个保存从终点开始向前搜索的状态，<strong>双向BFS主要是区分每一个格子是从起点开始搜索到的还是从终点开始搜索到的</strong>，每一个经过的格子结点保存到达该格子经过的步数，这样两边出现相交，两个方向的步数相加就是最终结果。<br><em>双向BFS的效率会高一些。</em></p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed  2 Jan 07:17:12 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> w, h, n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">3</span>], t[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[<span class=\"number\">200</span>], y[<span class=\"number\">200</span>], id[maxn][maxn];;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">200</span>][<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis_s[<span class=\"number\">200</span>][<span class=\"number\">200</span>][<span class=\"number\">200</span>], <span class=\"keyword\">dis_t</span>[<span class=\"number\">200</span>][<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pos</span>&#123;</span></span><br><span class=\"line\">    Pos(<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> b = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>):a(a), b(b), c(c)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">adv_bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Pos&gt; que_s;</span><br><span class=\"line\">    que_s.push(Pos(s[<span class=\"number\">0</span>], s[<span class=\"number\">1</span>], s[<span class=\"number\">2</span>]));</span><br><span class=\"line\">    vis[s[<span class=\"number\">0</span>]][s[<span class=\"number\">1</span>]][s[<span class=\"number\">2</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dis_s[s[<span class=\"number\">0</span>]][s[<span class=\"number\">1</span>]][s[<span class=\"number\">2</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Pos&gt; <span class=\"keyword\">que_t</span>;</span><br><span class=\"line\">    <span class=\"keyword\">que_t</span>.push(Pos(t[<span class=\"number\">0</span>], t[<span class=\"number\">1</span>], t[<span class=\"number\">2</span>]));</span><br><span class=\"line\">    vis[t[<span class=\"number\">0</span>]][t[<span class=\"number\">1</span>]][t[<span class=\"number\">2</span>]] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">dis_t</span>[t[<span class=\"number\">0</span>]][t[<span class=\"number\">1</span>]][t[<span class=\"number\">2</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que_s.empty() || !<span class=\"keyword\">que_t</span>.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!que_s.empty())&#123;</span><br><span class=\"line\">            Pos u = que_s.front();</span><br><span class=\"line\">            que_s.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[u.a][u.b][u.c] == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                ans = dis_s[u.a][u.b][u.c] + <span class=\"keyword\">dis_t</span>[u.a][u.b][u.c];</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>)G[u.a].size(); i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"keyword\">int</span>)G[u.b].size(); j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; (<span class=\"keyword\">int</span>)G[u.c].size(); k++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> p1 = G[u.a][i], p2 = G[u.b][j], p3 = G[u.c][k];</span><br><span class=\"line\">                        <span class=\"comment\">//check conflict</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == p2 || p1 == p3 || p2 == p3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == u.b &amp;&amp; p2 == u.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == u.c &amp;&amp; p3 == u.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p2 == u.c &amp;&amp; p3 == u.b) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        dis_s[p1][p2][p3] = dis_s[u.a][u.b][u.c] + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                            ans = dis_s[p1][p2][p3] + <span class=\"keyword\">dis_t</span>[p1][p2][p3];</span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            vis[p1][p2][p3] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                            que_s.push(Pos(p1, p2, p3));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">que_t</span>.empty())&#123;</span><br><span class=\"line\">            Pos v = <span class=\"keyword\">que_t</span>.front();</span><br><span class=\"line\">            <span class=\"keyword\">que_t</span>.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[v.a][v.b][v.c] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                ans = <span class=\"keyword\">dis_t</span>[v.a][v.b][v.c] + dis_s[v.a][v.b][v.c];</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>)G[v.a].size(); i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"keyword\">int</span>)G[v.b].size(); j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; (<span class=\"keyword\">int</span>)G[v.c].size(); k++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> p1 = G[v.a][i], p2 = G[v.b][j], p3 = G[v.c][k];</span><br><span class=\"line\">                        <span class=\"comment\">//check conflict</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == p2 || p1 == p3 || p2 == p3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == v.b &amp;&amp; p2 == v.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == v.c &amp;&amp; p3 == v.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p2 == v.c &amp;&amp; p3 == v.b) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">dis_t</span>[p1][p2][p3] = <span class=\"keyword\">dis_t</span>[v.a][v.b][v.c] + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                            ans = <span class=\"keyword\">dis_t</span>[p1][p2][p3] + dis_s[p1][p2][p3];</span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            vis[p1][p2][p3] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">que_t</span>.push(Pos(p1, p2, p3));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(w == <span class=\"number\">0</span> &amp;&amp; h == <span class=\"number\">0</span> &amp;&amp; n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(id, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(id));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis_s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dis_s));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(<span class=\"keyword\">dis_t</span>, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">dis_t</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">200</span>; i++)&#123;</span><br><span class=\"line\">            G[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            fgets(d[i], maxn, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[i][j] != <span class=\"string\">'#'</span>)&#123;</span><br><span class=\"line\">                    x[cnt] = i, y[cnt] = j, id[i][j] = cnt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">islower</span>(d[i][j])) s[d[i][j] - <span class=\"string\">'a'</span>] = cnt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">isupper</span>(d[i][j])) t[d[i][j] - <span class=\"string\">'A'</span>] = cnt;</span><br><span class=\"line\">                    cnt++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dir = <span class=\"number\">0</span>; dir &lt; <span class=\"number\">5</span>; dir++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nx = x[i] + dx[dir], ny = y[i] + dy[dir];</span><br><span class=\"line\">                <span class=\"comment\">//\"Outermost cells of a map are walls\" means we don't need to check out-of-bound</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[nx][ny] != <span class=\"string\">'#'</span>) G[i].push_back(id[nx][ny]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//add fake nodes</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            G[cnt].push_back(cnt);</span><br><span class=\"line\">            s[<span class=\"number\">2</span>] = t[<span class=\"number\">2</span>] = cnt;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            G[cnt].push_back(cnt);</span><br><span class=\"line\">            s[<span class=\"number\">1</span>] = t[<span class=\"number\">1</span>] = cnt;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        adv_bfs();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>卡了两天，中间曾一度自闭…(●°u°●)​ 」。不过理解了之后发现确实是好题。<br>$w \\times h，（w, h &lt;= 16）$的网格上有$n（n &lt;= 3）$个小写字母（代表ghost）。要求把它们分别移动到对应的大写字母里。每步可以有多个ghost同时移动（均为上下左右4个方向之一移动），但每步结束之后任何两个ghost不能占用同一个位置，也不能在一步之内交换位置。</p>","more":"<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>题目链接：<a href=\"https://vjudge.net/problem/UVA-1601\" target=\"_blank\" rel=\"noopener\">Uva1601-The Morning after Halloween</a><br>参考链接：<a href=\"https://blog.csdn.net/crazysillynerd/article/details/42562959\" target=\"_blank\" rel=\"noopener\">crazysillynerd’s blog</a></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>总的状态数为$256^3$。另外每次转移时需要$5^3$枚举每一个ghost的下一个位置（上下左右+不动）。如果这样直接BFS的话，肯定会超时。于是要进行优化，第一次接触这类问题的优化方法，感谢博主<a href=\"https://blog.csdn.net/crazysillynerd/article/details/42562959\" target=\"_blank\" rel=\"noopener\">crazysillynerd</a>，讲解的很清晰。<br>首先是尽量避免搜索不合法的走法。题目条件“任何一个2*2子网格中至少有一个障碍格”说明了有很多格子都是障碍，可转移的状态很多都是不合法的。每次都压到队列里然后不合法再排除就会浪费很多时间。以这里为优化点，可以<strong>把迷宫图转换成图，用邻接表保存起来</strong>，这样搜索的时候就只走可以走的点，而不是临时判断5种方案是否合法。<br>其次在查重上。因为任何一个2*2的子网格中至少有一个障碍格，所有最多有256 * 75%的格子即不超过200个格子可以走。<strong>首先把坐标(x，y)，映射到一个整型数上，（这个整型数相当于把16*16的网格拉伸成一维之后原坐标点此时的数组下标，但是排除了’#’的格子）。然后建立一个数组vis[200][200][200]用来查重。</strong><br>最后考虑ghost的数量不同的问题。在建图的时候把多余的不存在的ghost<strong>放到一个孤立的点中，然后使其起始位置和目标位置相同</strong>，这样就避免了需要根据情况动态调整的麻烦。<br>总体思路：<strong>输入-&gt;建图-&gt;BFS</strong></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed  2 Jan 07:17:12 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> w, h, n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">3</span>], t[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[<span class=\"number\">200</span>], y[<span class=\"number\">200</span>], id[maxn][maxn];;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">200</span>][<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pos</span>&#123;</span></span><br><span class=\"line\">    Pos(<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> b = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> dis = <span class=\"number\">0</span>):a(a), b(b), c(c), dis(dis)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Pos&gt; que;</span><br><span class=\"line\">    que.push(Pos(s[<span class=\"number\">0</span>], s[<span class=\"number\">1</span>], s[<span class=\"number\">2</span>], <span class=\"number\">0</span>));</span><br><span class=\"line\">    vis[s[<span class=\"number\">0</span>]][s[<span class=\"number\">1</span>]][s[<span class=\"number\">2</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        Pos u = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u.a == t[<span class=\"number\">0</span>] &amp;&amp; u.b == t[<span class=\"number\">1</span>] &amp;&amp; u.c == t[<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">            ans = u.dis;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>)G[u.a].size(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"keyword\">int</span>)G[u.b].size(); j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; (<span class=\"keyword\">int</span>)G[u.c].size(); k++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> p1 = G[u.a][i], p2 = G[u.b][j], p3 = G[u.c][k];</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//check conflict</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(vis[p1][p2][p3]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p1 == p2 || p1 == p3 || p2 == p3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p1 == u.b &amp;&amp; p2 == u.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p1 == u.c &amp;&amp; p3 == u.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p2 == u.c &amp;&amp; p3 == u.b) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    que.push(Pos(p1, p2, p3, u.dis + <span class=\"number\">1</span>));</span><br><span class=\"line\">                    vis[p1][p2][p3] = <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(w == <span class=\"number\">0</span> &amp;&amp; h == <span class=\"number\">0</span> &amp;&amp; n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(id, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(id));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">200</span>; i++)&#123;</span><br><span class=\"line\">            G[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            fgets(d[i], maxn, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[i][j] != <span class=\"string\">'#'</span>)&#123;</span><br><span class=\"line\">                    x[cnt] = i, y[cnt] = j, id[i][j] = cnt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">islower</span>(d[i][j])) s[d[i][j] - <span class=\"string\">'a'</span>] = cnt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">isupper</span>(d[i][j])) t[d[i][j] - <span class=\"string\">'A'</span>] = cnt;</span><br><span class=\"line\">                    cnt++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dir = <span class=\"number\">0</span>; dir &lt; <span class=\"number\">5</span>; dir++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nx = x[i] + dx[dir], ny = y[i] + dy[dir];</span><br><span class=\"line\">                <span class=\"comment\">//\"Outermost cells of a map are walls\" means we don't need to check out-of-bound</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[nx][ny] != <span class=\"string\">'#'</span>) G[i].push_back(id[nx][ny]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//add fake nodes</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            G[cnt].push_back(cnt);</span><br><span class=\"line\">            s[<span class=\"number\">2</span>] = t[<span class=\"number\">2</span>] = cnt;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            G[cnt].push_back(cnt);</span><br><span class=\"line\">            s[<span class=\"number\">1</span>] = t[<span class=\"number\">1</span>] = cnt;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        bfs();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"双向BFS解法\"><a href=\"#双向BFS解法\" class=\"headerlink\" title=\"双向BFS解法\"></a>双向BFS解法</h1><p>参考链接：<a href=\"https://www.cnblogs.com/bhlsheji/p/4804022.html\" target=\"_blank\" rel=\"noopener\">phlsheji’s blog</a><br>参考连接：<a href=\"https://blog.csdn.net/crazysillynerd/article/details/42681579\" target=\"_blank\" rel=\"noopener\">crazysillynerd</a></p>\n<p>双向BFS是利用两个队列。一个队列保存从起点开始向后搜索的状态，另一个保存从终点开始向前搜索的状态，<strong>双向BFS主要是区分每一个格子是从起点开始搜索到的还是从终点开始搜索到的</strong>，每一个经过的格子结点保存到达该格子经过的步数，这样两边出现相交，两个方向的步数相加就是最终结果。<br><em>双向BFS的效率会高一些。</em></p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author : Aincrad</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Date : Wed  2 Jan 07:17:12 CST 2019</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> w, h, n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">3</span>], t[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[<span class=\"number\">200</span>], y[<span class=\"number\">200</span>], id[maxn][maxn];;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">200</span>][<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis_s[<span class=\"number\">200</span>][<span class=\"number\">200</span>][<span class=\"number\">200</span>], <span class=\"keyword\">dis_t</span>[<span class=\"number\">200</span>][<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pos</span>&#123;</span></span><br><span class=\"line\">    Pos(<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> b = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>):a(a), b(b), c(c)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">adv_bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Pos&gt; que_s;</span><br><span class=\"line\">    que_s.push(Pos(s[<span class=\"number\">0</span>], s[<span class=\"number\">1</span>], s[<span class=\"number\">2</span>]));</span><br><span class=\"line\">    vis[s[<span class=\"number\">0</span>]][s[<span class=\"number\">1</span>]][s[<span class=\"number\">2</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dis_s[s[<span class=\"number\">0</span>]][s[<span class=\"number\">1</span>]][s[<span class=\"number\">2</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Pos&gt; <span class=\"keyword\">que_t</span>;</span><br><span class=\"line\">    <span class=\"keyword\">que_t</span>.push(Pos(t[<span class=\"number\">0</span>], t[<span class=\"number\">1</span>], t[<span class=\"number\">2</span>]));</span><br><span class=\"line\">    vis[t[<span class=\"number\">0</span>]][t[<span class=\"number\">1</span>]][t[<span class=\"number\">2</span>]] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">dis_t</span>[t[<span class=\"number\">0</span>]][t[<span class=\"number\">1</span>]][t[<span class=\"number\">2</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que_s.empty() || !<span class=\"keyword\">que_t</span>.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!que_s.empty())&#123;</span><br><span class=\"line\">            Pos u = que_s.front();</span><br><span class=\"line\">            que_s.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[u.a][u.b][u.c] == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                ans = dis_s[u.a][u.b][u.c] + <span class=\"keyword\">dis_t</span>[u.a][u.b][u.c];</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>)G[u.a].size(); i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"keyword\">int</span>)G[u.b].size(); j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; (<span class=\"keyword\">int</span>)G[u.c].size(); k++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> p1 = G[u.a][i], p2 = G[u.b][j], p3 = G[u.c][k];</span><br><span class=\"line\">                        <span class=\"comment\">//check conflict</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == p2 || p1 == p3 || p2 == p3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == u.b &amp;&amp; p2 == u.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == u.c &amp;&amp; p3 == u.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p2 == u.c &amp;&amp; p3 == u.b) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        dis_s[p1][p2][p3] = dis_s[u.a][u.b][u.c] + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                            ans = dis_s[p1][p2][p3] + <span class=\"keyword\">dis_t</span>[p1][p2][p3];</span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            vis[p1][p2][p3] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                            que_s.push(Pos(p1, p2, p3));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">que_t</span>.empty())&#123;</span><br><span class=\"line\">            Pos v = <span class=\"keyword\">que_t</span>.front();</span><br><span class=\"line\">            <span class=\"keyword\">que_t</span>.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[v.a][v.b][v.c] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                ans = <span class=\"keyword\">dis_t</span>[v.a][v.b][v.c] + dis_s[v.a][v.b][v.c];</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>)G[v.a].size(); i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"keyword\">int</span>)G[v.b].size(); j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; (<span class=\"keyword\">int</span>)G[v.c].size(); k++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> p1 = G[v.a][i], p2 = G[v.b][j], p3 = G[v.c][k];</span><br><span class=\"line\">                        <span class=\"comment\">//check conflict</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == p2 || p1 == p3 || p2 == p3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == v.b &amp;&amp; p2 == v.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p1 == v.c &amp;&amp; p3 == v.a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(p2 == v.c &amp;&amp; p3 == v.b) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">dis_t</span>[p1][p2][p3] = <span class=\"keyword\">dis_t</span>[v.a][v.b][v.c] + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                            ans = <span class=\"keyword\">dis_t</span>[p1][p2][p3] + dis_s[p1][p2][p3];</span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vis[p1][p2][p3] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            vis[p1][p2][p3] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">que_t</span>.push(Pos(p1, p2, p3));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(w == <span class=\"number\">0</span> &amp;&amp; h == <span class=\"number\">0</span> &amp;&amp; n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(id, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(id));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis_s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dis_s));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(<span class=\"keyword\">dis_t</span>, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">dis_t</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">200</span>; i++)&#123;</span><br><span class=\"line\">            G[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            fgets(d[i], maxn, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; w; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[i][j] != <span class=\"string\">'#'</span>)&#123;</span><br><span class=\"line\">                    x[cnt] = i, y[cnt] = j, id[i][j] = cnt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">islower</span>(d[i][j])) s[d[i][j] - <span class=\"string\">'a'</span>] = cnt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">isupper</span>(d[i][j])) t[d[i][j] - <span class=\"string\">'A'</span>] = cnt;</span><br><span class=\"line\">                    cnt++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dir = <span class=\"number\">0</span>; dir &lt; <span class=\"number\">5</span>; dir++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nx = x[i] + dx[dir], ny = y[i] + dy[dir];</span><br><span class=\"line\">                <span class=\"comment\">//\"Outermost cells of a map are walls\" means we don't need to check out-of-bound</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d[nx][ny] != <span class=\"string\">'#'</span>) G[i].push_back(id[nx][ny]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//add fake nodes</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            G[cnt].push_back(cnt);</span><br><span class=\"line\">            s[<span class=\"number\">2</span>] = t[<span class=\"number\">2</span>] = cnt;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            G[cnt].push_back(cnt);</span><br><span class=\"line\">            s[<span class=\"number\">1</span>] = t[<span class=\"number\">1</span>] = cnt;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        adv_bfs();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"光栅化渲染(3)-光栅化","date":"2019-08-15T02:25:47.000Z","_content":"\n![rasterization](/rasterization.png)\n\n　　*通过检测图像中的像素是否处在投影后的三角形中，来赋予像素相应的颜色的属性，是光栅化算法的主要思路。*\n<!--more-->\n\n# 光栅化\n　　为了实现一个简易的光栅化效果（在屏幕上画出一个三角形），我们需要解决两个问题：\n- 首先要找到所有落在三角形投影范围内的像素。\n- 为以上位置的像素赋予相应的颜色。\n\n　　*Edge Function*可以很好的解决第一个问题，快速判断一个像素是否在三角投影区域内。第二个问题也被成为*shading*（着色）。\n\n# The Edge Function\n　　Edge Function 由 Juan Pineda 在 1988 年发表的一篇名为 *A parallel Algorithm for Polygon Rasterization* 的论文中提出。\n　　三角形的一边可以看作是分割二维平面的一条线(Figure 1)，Pineda 的方法的主要思路是找到一个方程，用它来测试任一给定点 $P(x, y)$ 处于分割线的哪一侧：\n- 当点 $P$ 位于分割线的左侧时，方程返回一个负值。\n- 当点 $P$ 位于分割线的右侧时，方程返回一个正值。\n- 当点 $P$ 正好位于分割线之上时，方程返回0。\n\n![figure 1](/figure1.png)\n<center>Figure 1</center>\n\n　　于是我们可以发现分别以三角形的三条边作为分割线的话，若某一点 $P(x, y)$ 经过Edge Function测试全为正，即点 $P(x, y)$ **全部位于三角形三边的右侧**，那么就可以确定这一点位于三角形内部。\n　　*需要注意三角形三边的方向，按照顺时针定义，即三边分别为 v0->v1，v1->v2，v2->v0。*\n\n![figure 2](/figure2.png)\n<center>Figure 2</center>\n\n　　了解了Edge Function的设计思路，下面给出它的公式（关于边$V0->V1$）：\n\n$$\nE_{01}(P)=(P.x-V0.x)\\*(V1.y-V0.y)-(P.y-V0.y)\\*(V1.x-V0.x)\n$$\n\n　　事实上这也是向量 $(P-v0)$ 和 $(V1-V0)$ **叉积**的大小值，可以用**行列式矩阵**表示：\n\n$$\n\\left[\n    \\begin{matrix}\n        P.x-V0.x & V1.x-V0.x \\\\\\\\\n        P.y-V0.y & V1.y-V0.y\n    \\end{matrix}\n\\right]\n$$\n\n　　*不难理解，Edge Function的结果的正负性和向量叉积值的正负性是一致的。*\n　　所以判断某一像素是否位于投影三角形内，只需检测由像素中心坐标 $P(x, y)$ 和三角形三边所定义的三个Edge Function的正负性。\n\n$$\nE_{01}(P)=(P.x-V0.x)\\*(V1.y-V0.y)-(P.y-V0.y)\\*(V1.x-V0.x) \\\\\\\\\nE_{12}(P)=(P.x-V1.x)\\*(V2.y-V1.y)-(P.y-V1.y)\\*(V2.x-V1.x) \\\\\\\\\nE_{20}(P)=(P.x-V2.x)\\*(V0.y-V2.y)-(P.y-V2.y)\\*(V0.x-V2.x)\n$$\n\n![figure 3](/figure3.gif)\n<center>Figure 3</center>\n\n# 重心坐标\n　　通常我们只能对三角形的三个顶点定义颜色等属性，那么如何确定三角形内部任意一点的颜色？(Figure 4)\n\n![figure 4](/figure4.png)\n<center>Figure 4</center>\n\n　　假设 $P=\\lambda_{0} \\* V0 + \\lambda_{1} \\* V1 + \\lambda_{2} \\* V2$，且满足 $\\lambda_{0} + \\lambda_{1} + \\lambda_{2} = 1$ 那么 $(\\lambda_{0},\\lambda_{1},\\lambda_{2})$ 就是 $P$ 的重心坐标。它可以表示位于三角形内部（及边界）上的任意一点。\n　　于是我们可以借助重心坐标来对三角形内任意一点进行插值，以获得其颜色 $C_P$ 等其它由顶点定义的属性：\n\n$$\nC_P=\\lambda_{0} \\* C_{V0} + \\lambda_{1} \\* C_{V1} + \\lambda_{2} \\* C_{V2}\n$$\n\n## 如何获得任意一点的重心坐标\n　　在三角形情形中，重心坐标也叫面积坐标，因为 $P$ 点关于 $\\Delta ABC$ 的重心坐标和 $\\Delta PBC, \\Delta PCA, \\Delta PAB$ 的面积成比例。证明如下。\n　　如图(Figure 4)，设 $\\Delta ABC$ 三个顶点和原点构成的向量分别为 $pmb{\\vec{a}}, \\pmb{\\vec{b}}, \\pmb{\\vec{c}}$，$P$ 点和原点构成的向量为 $\\pmb{\\vec{p}}$。$\\Delta PBC, \\Delta PCA, \\Delta PAB$ 面积之比为 $\\lambda_{0}:\\lambda_{1}:\\lambda_{2}$，且 $\\lambda_{0} + \\lambda_{1} + \\lambda_{2}=1$，设射线 $AP$ 与 $BC$ 交于点 $D$，点 $D$ 和原点构成的向量为 $\\pmb{\\vec{d}}$，\n\n![figure 5](/figure5.png)\n<center>Figure 5</center>\n\n　　则：\n\n$$\nBD:DC=\\lambda_{2}:\\lambda_{1}, 从而\\quad \\pmb{\\vec{d}}=\\cfrac{\\lambda_{1}\\pmb{\\vec{b}}+\\lambda_{2}\\pmb{\\vec{c}}}{\\lambda_{1}+\\lambda_{2}} \\\\\\\\\nAP:PD=(\\lambda_{1}+\\lambda_{2}):\\lambda_{0}, 故\\quad \\pmb{\\vec{p}}=\\cfrac{(\\lambda_{1}+\\lambda_{2})\\pmb{\\vec{d}}+\\lambda_{0}\\pmb{\\vec{a}}}{\\lambda_{0}+\\lambda_{1}+\\lambda_{2}} \\\\\\\\\n\\pmb{\\vec{p}}=\\lambda_{0}\\pmb{\\vec{a}}+\\lambda_{1}\\pmb{\\vec{b}}+\\lambda_{2}\\pmb{\\vec{c}}\n$$\n\n　　而 $\\Delta PBC, \\Delta PCA, \\Delta PAB$ 的面积又正好等于 $P$ 点和 $\\Delta ABC$ 顶点构成的向量与 $\\Delta ABC$ 三边构成的向量的**叉积的值的一半。**\n　　叉积值已通过 Edge Function 得到，所以重心坐标：\n\n$$\n\\lambda_{0}=\\cfrac{Area(V1,V2,P)}{Area(V0,V1,V2)}=\\cfrac{E_{12}(P)/2}{E_{12}(V0)/2}=\\cfrac{E_{12}(P)}{E_{12}(V0)} \\\\\\\\\n\\lambda_{1}=\\cfrac{Area(V2,V0,P)}{Area(V0,V1,V2)}=\\cfrac{E_{20}(P)/2}{E_{20}(V1)/2}=\\cfrac{E_{20}(P)}{E_{20}(V1)} \\\\\\\\\n\\lambda_{2}=\\cfrac{Area(V0,V1,P)}{Area(V0,V1,V2)}=\\cfrac{E_{01}(P)/2}{E_{01}(V2)/2}=\\cfrac{E_{01}(P)}{E_{01}(V2)}\n$$\n\n## 计算优化\n\n$$\nlambda_{0} + lambda_{1} + lambda_{2} = 1 \\\\\\\\\nP = lambda_{0} \\* V0 + lambda_{1} \\* V1 + lambda_{2} \\* V2\n$$\n\n　　两公式联立消去 $\\lambda_{0}$ 得：\n\n$$\nP=V0 + lambda_{1} \\* (V1-V0) + lambda_{2} \\* (V2-V0)\n$$\n\n　　$V1-V0$ 和 $V2-V0$ 可以提前计算出来，这样就把计算由三次乘法和两次加法简化到了两次乘法和两次加法。**GPU采用了这种优化策略。**\n\n# 拓展\n　　在某些特殊情况下，一个像素可能同时落在两个投影三角形区域内，Figure 6 中的红色像素点显示了这种情况。\n\n![figure 6](/figure6.png)\n<center>Figure 6</center>\n\n　　**top-left rule** (Figure 7) 可以用来避免这种重复光栅化三角形边界像素的情况。\n\n![figure 7](/figure7.png)\n<center>Figure 7</center>\n\n　　由图可知：\n- **top edge** 指的是满足向量 $V[(x+1)\\%3] - V[x], x=0,1,2$ 的 $y$ 坐标等于 $0$，且 $x$ 坐标大于 $0$ 的边。\n- **left edge** 指的是满足向量　$V[(x+1)\\%3]-V[x], x=0,1,2$ 的 $y$ 坐标大于 $0$ 的边。\n\n\n　　**需要特别注意的是，本节都是建立在三角形三边按顺时针方向定义的前提下讨论的。**\n\n# 实例\n　　给定光栅化坐标系下的三角形的三个顶点以及顶点的颜色，渲染出这个三角形。\n\n## 代码\n```C++\n#include <iostream>\n#include <fstream>\n#include <cstring>\n\nstruct Vec2{\n    float x, y;\n    Vec2(float x = 0.0, float y = 0.0): x(x), y(y){}\n};\n\nstruct Vec3{\n    float x, y, z;\n    Vec3(float x = 0.0, float y = 0.0, float z = 0.0): x(x), y(y), z(z){}\n};\n\nstruct Rgb{\n    unsigned char r, g, b;\n    Rgb(unsigned char r = 0, unsigned char g = 0, unsigned char b = 0): r(r), g(g), b(b){}\n};\n\nfloat edgeFunction(Vec2 &a, Vec2 &b, Vec2 &c){\n    return (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);\n}\n\nbool top_left(const Vec2 &v){\n    if((v.y == 0 && v.x > 0) || v.y > 0) return true;\n    else return false;\n}\n\nint main(){\n    Vec2 v0(491.407, 411.407); \n    Vec2 v1(148.593, 68.5928); \n    Vec2 v2(148.593, 411.407); \n    Vec3 c0(1, 0, 0); \n    Vec3 c1(0, 1, 0); \n    Vec3 c2(0, 0, 1);\n\n    const uint32_t w = 512;\n    const uint32_t h = 512;\n\n    Rgb framebuffer[w][h];\n    memset(framebuffer, 0, sizeof(framebuffer));\n\n    float area = edgeFunction(v0, v1, v2);\n\n    for(uint32_t j = 0; j < h; j++){\n        for(uint32_t i = 0; i < w; i++){\n            Vec2 p(i + 0.5, j + 0.5);\n            float w0 = edgeFunction(v1, v2, p);\n            float w1 = edgeFunction(v2, v0, p);\n            float w2 = edgeFunction(v0, v1, p);\n\n            if(w0 >= 0 && w1 >= 0 && w2 >= 0){\n                //top-left judge\n                if(w0 == 0 && !top_left(Vec2(v2.x - v1.x, v2.y - v1.y))) continue;\n                if(w1 == 0 && !top_left(Vec2(v0.x - v2.x, v0.y - v2.y))) continue;\n                if(w2 == 0 && !top_left(Vec2(v1.x - v0.x, v1.y - v0.y))) continue;\n\n                w0 /= area;\n                w1 /= area;\n                w2 /= area;\n                float r = w0 * c0.x + w1 * c1.x + w2 * c2.x;\n                float g = w0 * c0.y + w1 * c1.y + w2 * c2.y;\n                float b = w0 * c0.z + w1 * c1.z + w2 * c2.z;\n                framebuffer[j][i].r = (unsigned char)(r * 255);\n                framebuffer[j][i].g = (unsigned char)(g * 255);\n                framebuffer[j][i].b = (unsigned char)(b * 255);\n            }\n        }\n    }\n\n    std::ofstream ofs;\n    ofs.open(\"./raster2d.ppm\");\n       ofs << \"P6\\n\" << w << \" \" << h << \"\\n255\\n\";\n    ofs.write((char *)framebuffer, sizeof(framebuffer));\n    ofs.close(); \n\n    return 0;\n}\n```\n\n## 结果\n\n![result](/result.png)\n<center>result</center>\n\n# 参考链接\n\n[Scratchapixel-The Rasterization Stage](https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/rasterization-stage)\n[维基百科-重心坐标](https://www.wikiwand.com/zh-hans/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87)","source":"_posts/光栅化渲染-3-光栅化.md","raw":"---\ntitle: 光栅化渲染(3)-光栅化\ndate: 2019-08-15 10:25:47\ncategories:\ntags:\n---\n\n![rasterization](/rasterization.png)\n\n　　*通过检测图像中的像素是否处在投影后的三角形中，来赋予像素相应的颜色的属性，是光栅化算法的主要思路。*\n<!--more-->\n\n# 光栅化\n　　为了实现一个简易的光栅化效果（在屏幕上画出一个三角形），我们需要解决两个问题：\n- 首先要找到所有落在三角形投影范围内的像素。\n- 为以上位置的像素赋予相应的颜色。\n\n　　*Edge Function*可以很好的解决第一个问题，快速判断一个像素是否在三角投影区域内。第二个问题也被成为*shading*（着色）。\n\n# The Edge Function\n　　Edge Function 由 Juan Pineda 在 1988 年发表的一篇名为 *A parallel Algorithm for Polygon Rasterization* 的论文中提出。\n　　三角形的一边可以看作是分割二维平面的一条线(Figure 1)，Pineda 的方法的主要思路是找到一个方程，用它来测试任一给定点 $P(x, y)$ 处于分割线的哪一侧：\n- 当点 $P$ 位于分割线的左侧时，方程返回一个负值。\n- 当点 $P$ 位于分割线的右侧时，方程返回一个正值。\n- 当点 $P$ 正好位于分割线之上时，方程返回0。\n\n![figure 1](/figure1.png)\n<center>Figure 1</center>\n\n　　于是我们可以发现分别以三角形的三条边作为分割线的话，若某一点 $P(x, y)$ 经过Edge Function测试全为正，即点 $P(x, y)$ **全部位于三角形三边的右侧**，那么就可以确定这一点位于三角形内部。\n　　*需要注意三角形三边的方向，按照顺时针定义，即三边分别为 v0->v1，v1->v2，v2->v0。*\n\n![figure 2](/figure2.png)\n<center>Figure 2</center>\n\n　　了解了Edge Function的设计思路，下面给出它的公式（关于边$V0->V1$）：\n\n$$\nE_{01}(P)=(P.x-V0.x)\\*(V1.y-V0.y)-(P.y-V0.y)\\*(V1.x-V0.x)\n$$\n\n　　事实上这也是向量 $(P-v0)$ 和 $(V1-V0)$ **叉积**的大小值，可以用**行列式矩阵**表示：\n\n$$\n\\left[\n    \\begin{matrix}\n        P.x-V0.x & V1.x-V0.x \\\\\\\\\n        P.y-V0.y & V1.y-V0.y\n    \\end{matrix}\n\\right]\n$$\n\n　　*不难理解，Edge Function的结果的正负性和向量叉积值的正负性是一致的。*\n　　所以判断某一像素是否位于投影三角形内，只需检测由像素中心坐标 $P(x, y)$ 和三角形三边所定义的三个Edge Function的正负性。\n\n$$\nE_{01}(P)=(P.x-V0.x)\\*(V1.y-V0.y)-(P.y-V0.y)\\*(V1.x-V0.x) \\\\\\\\\nE_{12}(P)=(P.x-V1.x)\\*(V2.y-V1.y)-(P.y-V1.y)\\*(V2.x-V1.x) \\\\\\\\\nE_{20}(P)=(P.x-V2.x)\\*(V0.y-V2.y)-(P.y-V2.y)\\*(V0.x-V2.x)\n$$\n\n![figure 3](/figure3.gif)\n<center>Figure 3</center>\n\n# 重心坐标\n　　通常我们只能对三角形的三个顶点定义颜色等属性，那么如何确定三角形内部任意一点的颜色？(Figure 4)\n\n![figure 4](/figure4.png)\n<center>Figure 4</center>\n\n　　假设 $P=\\lambda_{0} \\* V0 + \\lambda_{1} \\* V1 + \\lambda_{2} \\* V2$，且满足 $\\lambda_{0} + \\lambda_{1} + \\lambda_{2} = 1$ 那么 $(\\lambda_{0},\\lambda_{1},\\lambda_{2})$ 就是 $P$ 的重心坐标。它可以表示位于三角形内部（及边界）上的任意一点。\n　　于是我们可以借助重心坐标来对三角形内任意一点进行插值，以获得其颜色 $C_P$ 等其它由顶点定义的属性：\n\n$$\nC_P=\\lambda_{0} \\* C_{V0} + \\lambda_{1} \\* C_{V1} + \\lambda_{2} \\* C_{V2}\n$$\n\n## 如何获得任意一点的重心坐标\n　　在三角形情形中，重心坐标也叫面积坐标，因为 $P$ 点关于 $\\Delta ABC$ 的重心坐标和 $\\Delta PBC, \\Delta PCA, \\Delta PAB$ 的面积成比例。证明如下。\n　　如图(Figure 4)，设 $\\Delta ABC$ 三个顶点和原点构成的向量分别为 $pmb{\\vec{a}}, \\pmb{\\vec{b}}, \\pmb{\\vec{c}}$，$P$ 点和原点构成的向量为 $\\pmb{\\vec{p}}$。$\\Delta PBC, \\Delta PCA, \\Delta PAB$ 面积之比为 $\\lambda_{0}:\\lambda_{1}:\\lambda_{2}$，且 $\\lambda_{0} + \\lambda_{1} + \\lambda_{2}=1$，设射线 $AP$ 与 $BC$ 交于点 $D$，点 $D$ 和原点构成的向量为 $\\pmb{\\vec{d}}$，\n\n![figure 5](/figure5.png)\n<center>Figure 5</center>\n\n　　则：\n\n$$\nBD:DC=\\lambda_{2}:\\lambda_{1}, 从而\\quad \\pmb{\\vec{d}}=\\cfrac{\\lambda_{1}\\pmb{\\vec{b}}+\\lambda_{2}\\pmb{\\vec{c}}}{\\lambda_{1}+\\lambda_{2}} \\\\\\\\\nAP:PD=(\\lambda_{1}+\\lambda_{2}):\\lambda_{0}, 故\\quad \\pmb{\\vec{p}}=\\cfrac{(\\lambda_{1}+\\lambda_{2})\\pmb{\\vec{d}}+\\lambda_{0}\\pmb{\\vec{a}}}{\\lambda_{0}+\\lambda_{1}+\\lambda_{2}} \\\\\\\\\n\\pmb{\\vec{p}}=\\lambda_{0}\\pmb{\\vec{a}}+\\lambda_{1}\\pmb{\\vec{b}}+\\lambda_{2}\\pmb{\\vec{c}}\n$$\n\n　　而 $\\Delta PBC, \\Delta PCA, \\Delta PAB$ 的面积又正好等于 $P$ 点和 $\\Delta ABC$ 顶点构成的向量与 $\\Delta ABC$ 三边构成的向量的**叉积的值的一半。**\n　　叉积值已通过 Edge Function 得到，所以重心坐标：\n\n$$\n\\lambda_{0}=\\cfrac{Area(V1,V2,P)}{Area(V0,V1,V2)}=\\cfrac{E_{12}(P)/2}{E_{12}(V0)/2}=\\cfrac{E_{12}(P)}{E_{12}(V0)} \\\\\\\\\n\\lambda_{1}=\\cfrac{Area(V2,V0,P)}{Area(V0,V1,V2)}=\\cfrac{E_{20}(P)/2}{E_{20}(V1)/2}=\\cfrac{E_{20}(P)}{E_{20}(V1)} \\\\\\\\\n\\lambda_{2}=\\cfrac{Area(V0,V1,P)}{Area(V0,V1,V2)}=\\cfrac{E_{01}(P)/2}{E_{01}(V2)/2}=\\cfrac{E_{01}(P)}{E_{01}(V2)}\n$$\n\n## 计算优化\n\n$$\nlambda_{0} + lambda_{1} + lambda_{2} = 1 \\\\\\\\\nP = lambda_{0} \\* V0 + lambda_{1} \\* V1 + lambda_{2} \\* V2\n$$\n\n　　两公式联立消去 $\\lambda_{0}$ 得：\n\n$$\nP=V0 + lambda_{1} \\* (V1-V0) + lambda_{2} \\* (V2-V0)\n$$\n\n　　$V1-V0$ 和 $V2-V0$ 可以提前计算出来，这样就把计算由三次乘法和两次加法简化到了两次乘法和两次加法。**GPU采用了这种优化策略。**\n\n# 拓展\n　　在某些特殊情况下，一个像素可能同时落在两个投影三角形区域内，Figure 6 中的红色像素点显示了这种情况。\n\n![figure 6](/figure6.png)\n<center>Figure 6</center>\n\n　　**top-left rule** (Figure 7) 可以用来避免这种重复光栅化三角形边界像素的情况。\n\n![figure 7](/figure7.png)\n<center>Figure 7</center>\n\n　　由图可知：\n- **top edge** 指的是满足向量 $V[(x+1)\\%3] - V[x], x=0,1,2$ 的 $y$ 坐标等于 $0$，且 $x$ 坐标大于 $0$ 的边。\n- **left edge** 指的是满足向量　$V[(x+1)\\%3]-V[x], x=0,1,2$ 的 $y$ 坐标大于 $0$ 的边。\n\n\n　　**需要特别注意的是，本节都是建立在三角形三边按顺时针方向定义的前提下讨论的。**\n\n# 实例\n　　给定光栅化坐标系下的三角形的三个顶点以及顶点的颜色，渲染出这个三角形。\n\n## 代码\n```C++\n#include <iostream>\n#include <fstream>\n#include <cstring>\n\nstruct Vec2{\n    float x, y;\n    Vec2(float x = 0.0, float y = 0.0): x(x), y(y){}\n};\n\nstruct Vec3{\n    float x, y, z;\n    Vec3(float x = 0.0, float y = 0.0, float z = 0.0): x(x), y(y), z(z){}\n};\n\nstruct Rgb{\n    unsigned char r, g, b;\n    Rgb(unsigned char r = 0, unsigned char g = 0, unsigned char b = 0): r(r), g(g), b(b){}\n};\n\nfloat edgeFunction(Vec2 &a, Vec2 &b, Vec2 &c){\n    return (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);\n}\n\nbool top_left(const Vec2 &v){\n    if((v.y == 0 && v.x > 0) || v.y > 0) return true;\n    else return false;\n}\n\nint main(){\n    Vec2 v0(491.407, 411.407); \n    Vec2 v1(148.593, 68.5928); \n    Vec2 v2(148.593, 411.407); \n    Vec3 c0(1, 0, 0); \n    Vec3 c1(0, 1, 0); \n    Vec3 c2(0, 0, 1);\n\n    const uint32_t w = 512;\n    const uint32_t h = 512;\n\n    Rgb framebuffer[w][h];\n    memset(framebuffer, 0, sizeof(framebuffer));\n\n    float area = edgeFunction(v0, v1, v2);\n\n    for(uint32_t j = 0; j < h; j++){\n        for(uint32_t i = 0; i < w; i++){\n            Vec2 p(i + 0.5, j + 0.5);\n            float w0 = edgeFunction(v1, v2, p);\n            float w1 = edgeFunction(v2, v0, p);\n            float w2 = edgeFunction(v0, v1, p);\n\n            if(w0 >= 0 && w1 >= 0 && w2 >= 0){\n                //top-left judge\n                if(w0 == 0 && !top_left(Vec2(v2.x - v1.x, v2.y - v1.y))) continue;\n                if(w1 == 0 && !top_left(Vec2(v0.x - v2.x, v0.y - v2.y))) continue;\n                if(w2 == 0 && !top_left(Vec2(v1.x - v0.x, v1.y - v0.y))) continue;\n\n                w0 /= area;\n                w1 /= area;\n                w2 /= area;\n                float r = w0 * c0.x + w1 * c1.x + w2 * c2.x;\n                float g = w0 * c0.y + w1 * c1.y + w2 * c2.y;\n                float b = w0 * c0.z + w1 * c1.z + w2 * c2.z;\n                framebuffer[j][i].r = (unsigned char)(r * 255);\n                framebuffer[j][i].g = (unsigned char)(g * 255);\n                framebuffer[j][i].b = (unsigned char)(b * 255);\n            }\n        }\n    }\n\n    std::ofstream ofs;\n    ofs.open(\"./raster2d.ppm\");\n       ofs << \"P6\\n\" << w << \" \" << h << \"\\n255\\n\";\n    ofs.write((char *)framebuffer, sizeof(framebuffer));\n    ofs.close(); \n\n    return 0;\n}\n```\n\n## 结果\n\n![result](/result.png)\n<center>result</center>\n\n# 参考链接\n\n[Scratchapixel-The Rasterization Stage](https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/rasterization-stage)\n[维基百科-重心坐标](https://www.wikiwand.com/zh-hans/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87)","slug":"光栅化渲染-3-光栅化","published":1,"updated":"2019-09-01T08:33:42.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck01sz2ni002g30vnggp356eh","content":"<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/rasterization.png\" alt=\"rasterization\"></p>\n<p>　　<em>通过检测图像中的像素是否处在投影后的三角形中，来赋予像素相应的颜色的属性，是光栅化算法的主要思路。</em></p>\n<a id=\"more\"></a>\n\n<h1 id=\"光栅化\"><a href=\"#光栅化\" class=\"headerlink\" title=\"光栅化\"></a>光栅化</h1><p>　　为了实现一个简易的光栅化效果（在屏幕上画出一个三角形），我们需要解决两个问题：</p>\n<ul>\n<li>首先要找到所有落在三角形投影范围内的像素。</li>\n<li>为以上位置的像素赋予相应的颜色。</li>\n</ul>\n<p>　　<em>Edge Function</em>可以很好的解决第一个问题，快速判断一个像素是否在三角投影区域内。第二个问题也被成为<em>shading</em>（着色）。</p>\n<h1 id=\"The-Edge-Function\"><a href=\"#The-Edge-Function\" class=\"headerlink\" title=\"The Edge Function\"></a>The Edge Function</h1><p>　　Edge Function 由 Juan Pineda 在 1988 年发表的一篇名为 <em>A parallel Algorithm for Polygon Rasterization</em> 的论文中提出。<br>　　三角形的一边可以看作是分割二维平面的一条线(Figure 1)，Pineda 的方法的主要思路是找到一个方程，用它来测试任一给定点 $P(x, y)$ 处于分割线的哪一侧：</p>\n<ul>\n<li>当点 $P$ 位于分割线的左侧时，方程返回一个负值。</li>\n<li>当点 $P$ 位于分割线的右侧时，方程返回一个正值。</li>\n<li>当点 $P$ 正好位于分割线之上时，方程返回0。</li>\n</ul>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure1.png\" alt=\"figure 1\"></p>\n<center>Figure 1</center>\n\n<p>　　于是我们可以发现分别以三角形的三条边作为分割线的话，若某一点 $P(x, y)$ 经过Edge Function测试全为正，即点 $P(x, y)$ <strong>全部位于三角形三边的右侧</strong>，那么就可以确定这一点位于三角形内部。<br>　　<em>需要注意三角形三边的方向，按照顺时针定义，即三边分别为 v0-&gt;v1，v1-&gt;v2，v2-&gt;v0。</em></p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure2.png\" alt=\"figure 2\"></p>\n<center>Figure 2</center>\n\n<p>　　了解了Edge Function的设计思路，下面给出它的公式（关于边$V0-&gt;V1$）：</p>\n<p>$$<br>E_{01}(P)=(P.x-V0.x)*(V1.y-V0.y)-(P.y-V0.y)*(V1.x-V0.x)<br>$$</p>\n<p>　　事实上这也是向量 $(P-v0)$ 和 $(V1-V0)$ <strong>叉积</strong>的大小值，可以用<strong>行列式矩阵</strong>表示：</p>\n<p>$$<br>\\left[<br>    \\begin{matrix}<br>        P.x-V0.x &amp; V1.x-V0.x \\\\<br>        P.y-V0.y &amp; V1.y-V0.y<br>    \\end{matrix}<br>\\right]<br>$$</p>\n<p>　　<em>不难理解，Edge Function的结果的正负性和向量叉积值的正负性是一致的。</em><br>　　所以判断某一像素是否位于投影三角形内，只需检测由像素中心坐标 $P(x, y)$ 和三角形三边所定义的三个Edge Function的正负性。</p>\n<p>$$<br>E_{01}(P)=(P.x-V0.x)*(V1.y-V0.y)-(P.y-V0.y)*(V1.x-V0.x) \\\\<br>E_{12}(P)=(P.x-V1.x)*(V2.y-V1.y)-(P.y-V1.y)*(V2.x-V1.x) \\\\<br>E_{20}(P)=(P.x-V2.x)*(V0.y-V2.y)-(P.y-V2.y)*(V0.x-V2.x)<br>$$</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure3.gif\" alt=\"figure 3\"></p>\n<center>Figure 3</center>\n\n<h1 id=\"重心坐标\"><a href=\"#重心坐标\" class=\"headerlink\" title=\"重心坐标\"></a>重心坐标</h1><p>　　通常我们只能对三角形的三个顶点定义颜色等属性，那么如何确定三角形内部任意一点的颜色？(Figure 4)</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure4.png\" alt=\"figure 4\"></p>\n<center>Figure 4</center>\n\n<p>　　假设 $P=\\lambda_{0} * V0 + \\lambda_{1} * V1 + \\lambda_{2} * V2$，且满足 $\\lambda_{0} + \\lambda_{1} + \\lambda_{2} = 1$ 那么 $(\\lambda_{0},\\lambda_{1},\\lambda_{2})$ 就是 $P$ 的重心坐标。它可以表示位于三角形内部（及边界）上的任意一点。<br>　　于是我们可以借助重心坐标来对三角形内任意一点进行插值，以获得其颜色 $C_P$ 等其它由顶点定义的属性：</p>\n<p>$$<br>C_P=\\lambda_{0} * C_{V0} + \\lambda_{1} * C_{V1} + \\lambda_{2} * C_{V2}<br>$$</p>\n<h2 id=\"如何获得任意一点的重心坐标\"><a href=\"#如何获得任意一点的重心坐标\" class=\"headerlink\" title=\"如何获得任意一点的重心坐标\"></a>如何获得任意一点的重心坐标</h2><p>　　在三角形情形中，重心坐标也叫面积坐标，因为 $P$ 点关于 $\\Delta ABC$ 的重心坐标和 $\\Delta PBC, \\Delta PCA, \\Delta PAB$ 的面积成比例。证明如下。<br>　　如图(Figure 4)，设 $\\Delta ABC$ 三个顶点和原点构成的向量分别为 $pmb{\\vec{a}}, \\pmb{\\vec{b}}, \\pmb{\\vec{c}}$，$P$ 点和原点构成的向量为 $\\pmb{\\vec{p}}$。$\\Delta PBC, \\Delta PCA, \\Delta PAB$ 面积之比为 $\\lambda_{0}:\\lambda_{1}:\\lambda_{2}$，且 $\\lambda_{0} + \\lambda_{1} + \\lambda_{2}=1$，设射线 $AP$ 与 $BC$ 交于点 $D$，点 $D$ 和原点构成的向量为 $\\pmb{\\vec{d}}$，</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure5.png\" alt=\"figure 5\"></p>\n<center>Figure 5</center>\n\n<p>　　则：</p>\n<p>$$<br>BD:DC=\\lambda_{2}:\\lambda_{1}, 从而\\quad \\pmb{\\vec{d}}=\\cfrac{\\lambda_{1}\\pmb{\\vec{b}}+\\lambda_{2}\\pmb{\\vec{c}}}{\\lambda_{1}+\\lambda_{2}} \\\\<br>AP:PD=(\\lambda_{1}+\\lambda_{2}):\\lambda_{0}, 故\\quad \\pmb{\\vec{p}}=\\cfrac{(\\lambda_{1}+\\lambda_{2})\\pmb{\\vec{d}}+\\lambda_{0}\\pmb{\\vec{a}}}{\\lambda_{0}+\\lambda_{1}+\\lambda_{2}} \\\\<br>\\pmb{\\vec{p}}=\\lambda_{0}\\pmb{\\vec{a}}+\\lambda_{1}\\pmb{\\vec{b}}+\\lambda_{2}\\pmb{\\vec{c}}<br>$$</p>\n<p>　　而 $\\Delta PBC, \\Delta PCA, \\Delta PAB$ 的面积又正好等于 $P$ 点和 $\\Delta ABC$ 顶点构成的向量与 $\\Delta ABC$ 三边构成的向量的<strong>叉积的值的一半。</strong><br>　　叉积值已通过 Edge Function 得到，所以重心坐标：</p>\n<p>$$<br>\\lambda_{0}=\\cfrac{Area(V1,V2,P)}{Area(V0,V1,V2)}=\\cfrac{E_{12}(P)/2}{E_{12}(V0)/2}=\\cfrac{E_{12}(P)}{E_{12}(V0)} \\\\<br>\\lambda_{1}=\\cfrac{Area(V2,V0,P)}{Area(V0,V1,V2)}=\\cfrac{E_{20}(P)/2}{E_{20}(V1)/2}=\\cfrac{E_{20}(P)}{E_{20}(V1)} \\\\<br>\\lambda_{2}=\\cfrac{Area(V0,V1,P)}{Area(V0,V1,V2)}=\\cfrac{E_{01}(P)/2}{E_{01}(V2)/2}=\\cfrac{E_{01}(P)}{E_{01}(V2)}<br>$$</p>\n<h2 id=\"计算优化\"><a href=\"#计算优化\" class=\"headerlink\" title=\"计算优化\"></a>计算优化</h2><p>$$<br>lambda_{0} + lambda_{1} + lambda_{2} = 1 \\\\<br>P = lambda_{0} * V0 + lambda_{1} * V1 + lambda_{2} * V2<br>$$</p>\n<p>　　两公式联立消去 $\\lambda_{0}$ 得：</p>\n<p>$$<br>P=V0 + lambda_{1} * (V1-V0) + lambda_{2} * (V2-V0)<br>$$</p>\n<p>　　$V1-V0$ 和 $V2-V0$ 可以提前计算出来，这样就把计算由三次乘法和两次加法简化到了两次乘法和两次加法。<strong>GPU采用了这种优化策略。</strong></p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>　　在某些特殊情况下，一个像素可能同时落在两个投影三角形区域内，Figure 6 中的红色像素点显示了这种情况。</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure6.png\" alt=\"figure 6\"></p>\n<center>Figure 6</center>\n\n<p>　　<strong>top-left rule</strong> (Figure 7) 可以用来避免这种重复光栅化三角形边界像素的情况。</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure7.png\" alt=\"figure 7\"></p>\n<center>Figure 7</center>\n\n<p>　　由图可知：</p>\n<ul>\n<li><strong>top edge</strong> 指的是满足向量 $V[(x+1)%3] - V[x], x=0,1,2$ 的 $y$ 坐标等于 $0$，且 $x$ 坐标大于 $0$ 的边。</li>\n<li><strong>left edge</strong> 指的是满足向量　$V[(x+1)%3]-V[x], x=0,1,2$ 的 $y$ 坐标大于 $0$ 的边。</li>\n</ul>\n<p>　　<strong>需要特别注意的是，本节都是建立在三角形三边按顺时针方向定义的前提下讨论的。</strong></p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>　　给定光栅化坐标系下的三角形的三个顶点以及顶点的颜色，渲染出这个三角形。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vec2</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x, y;</span><br><span class=\"line\">    Vec2(<span class=\"keyword\">float</span> x = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> y = <span class=\"number\">0.0</span>): x(x), y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vec3</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x, y, z;</span><br><span class=\"line\">    Vec3(<span class=\"keyword\">float</span> x = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> y = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> z = <span class=\"number\">0.0</span>): x(x), y(y), z(z)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rgb</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r, g, b;</span><br><span class=\"line\">    Rgb(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r = <span class=\"number\">0</span>, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> g = <span class=\"number\">0</span>, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b = <span class=\"number\">0</span>): r(r), g(g), b(b)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">edgeFunction</span><span class=\"params\">(Vec2 &amp;a, Vec2 &amp;b, Vec2 &amp;c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">top_left</span><span class=\"params\">(<span class=\"keyword\">const</span> Vec2 &amp;v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((v.y == <span class=\"number\">0</span> &amp;&amp; v.x &gt; <span class=\"number\">0</span>) || v.y &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Vec2 <span class=\"title\">v0</span><span class=\"params\">(<span class=\"number\">491.407</span>, <span class=\"number\">411.407</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec2 <span class=\"title\">v1</span><span class=\"params\">(<span class=\"number\">148.593</span>, <span class=\"number\">68.5928</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec2 <span class=\"title\">v2</span><span class=\"params\">(<span class=\"number\">148.593</span>, <span class=\"number\">411.407</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec3 <span class=\"title\">c0</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec3 <span class=\"title\">c1</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec3 <span class=\"title\">c2</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> w = <span class=\"number\">512</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> h = <span class=\"number\">512</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rgb framebuffer[w][h];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(framebuffer, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(framebuffer));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> area = edgeFunction(v0, v1, v2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> j = <span class=\"number\">0</span>; j &lt; h; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; w; i++)&#123;</span><br><span class=\"line\">            <span class=\"function\">Vec2 <span class=\"title\">p</span><span class=\"params\">(i + <span class=\"number\">0.5</span>, j + <span class=\"number\">0.5</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> w0 = edgeFunction(v1, v2, p);</span><br><span class=\"line\">            <span class=\"keyword\">float</span> w1 = edgeFunction(v2, v0, p);</span><br><span class=\"line\">            <span class=\"keyword\">float</span> w2 = edgeFunction(v0, v1, p);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(w0 &gt;= <span class=\"number\">0</span> &amp;&amp; w1 &gt;= <span class=\"number\">0</span> &amp;&amp; w2 &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//top-left judge</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(w0 == <span class=\"number\">0</span> &amp;&amp; !top_left(Vec2(v2.x - v1.x, v2.y - v1.y))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(w1 == <span class=\"number\">0</span> &amp;&amp; !top_left(Vec2(v0.x - v2.x, v0.y - v2.y))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(w2 == <span class=\"number\">0</span> &amp;&amp; !top_left(Vec2(v1.x - v0.x, v1.y - v0.y))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                w0 /= area;</span><br><span class=\"line\">                w1 /= area;</span><br><span class=\"line\">                w2 /= area;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> r = w0 * c0.x + w1 * c1.x + w2 * c2.x;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> g = w0 * c0.y + w1 * c1.y + w2 * c2.y;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> b = w0 * c0.z + w1 * c1.z + w2 * c2.z;</span><br><span class=\"line\">                framebuffer[j][i].r = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(r * <span class=\"number\">255</span>);</span><br><span class=\"line\">                framebuffer[j][i].g = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(g * <span class=\"number\">255</span>);</span><br><span class=\"line\">                framebuffer[j][i].b = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(b * <span class=\"number\">255</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::ofstream ofs;</span><br><span class=\"line\">    ofs.open(<span class=\"string\">\"./raster2d.ppm\"</span>);</span><br><span class=\"line\">       ofs &lt;&lt; <span class=\"string\">\"P6\\n\"</span> &lt;&lt; w &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; h &lt;&lt; <span class=\"string\">\"\\n255\\n\"</span>;</span><br><span class=\"line\">    ofs.write((<span class=\"keyword\">char</span> *)framebuffer, <span class=\"keyword\">sizeof</span>(framebuffer));</span><br><span class=\"line\">    ofs.close(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/result.png\" alt=\"result\"></p>\n<center>result</center>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/rasterization-stage\" target=\"_blank\" rel=\"noopener\">Scratchapixel-The Rasterization Stage</a><br><a href=\"https://www.wikiwand.com/zh-hans/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87\" target=\"_blank\" rel=\"noopener\">维基百科-重心坐标</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/rasterization.png\" alt=\"rasterization\"></p>\n<p>　　<em>通过检测图像中的像素是否处在投影后的三角形中，来赋予像素相应的颜色的属性，是光栅化算法的主要思路。</em></p>","more":"<h1 id=\"光栅化\"><a href=\"#光栅化\" class=\"headerlink\" title=\"光栅化\"></a>光栅化</h1><p>　　为了实现一个简易的光栅化效果（在屏幕上画出一个三角形），我们需要解决两个问题：</p>\n<ul>\n<li>首先要找到所有落在三角形投影范围内的像素。</li>\n<li>为以上位置的像素赋予相应的颜色。</li>\n</ul>\n<p>　　<em>Edge Function</em>可以很好的解决第一个问题，快速判断一个像素是否在三角投影区域内。第二个问题也被成为<em>shading</em>（着色）。</p>\n<h1 id=\"The-Edge-Function\"><a href=\"#The-Edge-Function\" class=\"headerlink\" title=\"The Edge Function\"></a>The Edge Function</h1><p>　　Edge Function 由 Juan Pineda 在 1988 年发表的一篇名为 <em>A parallel Algorithm for Polygon Rasterization</em> 的论文中提出。<br>　　三角形的一边可以看作是分割二维平面的一条线(Figure 1)，Pineda 的方法的主要思路是找到一个方程，用它来测试任一给定点 $P(x, y)$ 处于分割线的哪一侧：</p>\n<ul>\n<li>当点 $P$ 位于分割线的左侧时，方程返回一个负值。</li>\n<li>当点 $P$ 位于分割线的右侧时，方程返回一个正值。</li>\n<li>当点 $P$ 正好位于分割线之上时，方程返回0。</li>\n</ul>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure1.png\" alt=\"figure 1\"></p>\n<center>Figure 1</center>\n\n<p>　　于是我们可以发现分别以三角形的三条边作为分割线的话，若某一点 $P(x, y)$ 经过Edge Function测试全为正，即点 $P(x, y)$ <strong>全部位于三角形三边的右侧</strong>，那么就可以确定这一点位于三角形内部。<br>　　<em>需要注意三角形三边的方向，按照顺时针定义，即三边分别为 v0-&gt;v1，v1-&gt;v2，v2-&gt;v0。</em></p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure2.png\" alt=\"figure 2\"></p>\n<center>Figure 2</center>\n\n<p>　　了解了Edge Function的设计思路，下面给出它的公式（关于边$V0-&gt;V1$）：</p>\n<p>$$<br>E_{01}(P)=(P.x-V0.x)*(V1.y-V0.y)-(P.y-V0.y)*(V1.x-V0.x)<br>$$</p>\n<p>　　事实上这也是向量 $(P-v0)$ 和 $(V1-V0)$ <strong>叉积</strong>的大小值，可以用<strong>行列式矩阵</strong>表示：</p>\n<p>$$<br>\\left[<br>    \\begin{matrix}<br>        P.x-V0.x &amp; V1.x-V0.x \\\\<br>        P.y-V0.y &amp; V1.y-V0.y<br>    \\end{matrix}<br>\\right]<br>$$</p>\n<p>　　<em>不难理解，Edge Function的结果的正负性和向量叉积值的正负性是一致的。</em><br>　　所以判断某一像素是否位于投影三角形内，只需检测由像素中心坐标 $P(x, y)$ 和三角形三边所定义的三个Edge Function的正负性。</p>\n<p>$$<br>E_{01}(P)=(P.x-V0.x)*(V1.y-V0.y)-(P.y-V0.y)*(V1.x-V0.x) \\\\<br>E_{12}(P)=(P.x-V1.x)*(V2.y-V1.y)-(P.y-V1.y)*(V2.x-V1.x) \\\\<br>E_{20}(P)=(P.x-V2.x)*(V0.y-V2.y)-(P.y-V2.y)*(V0.x-V2.x)<br>$$</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure3.gif\" alt=\"figure 3\"></p>\n<center>Figure 3</center>\n\n<h1 id=\"重心坐标\"><a href=\"#重心坐标\" class=\"headerlink\" title=\"重心坐标\"></a>重心坐标</h1><p>　　通常我们只能对三角形的三个顶点定义颜色等属性，那么如何确定三角形内部任意一点的颜色？(Figure 4)</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure4.png\" alt=\"figure 4\"></p>\n<center>Figure 4</center>\n\n<p>　　假设 $P=\\lambda_{0} * V0 + \\lambda_{1} * V1 + \\lambda_{2} * V2$，且满足 $\\lambda_{0} + \\lambda_{1} + \\lambda_{2} = 1$ 那么 $(\\lambda_{0},\\lambda_{1},\\lambda_{2})$ 就是 $P$ 的重心坐标。它可以表示位于三角形内部（及边界）上的任意一点。<br>　　于是我们可以借助重心坐标来对三角形内任意一点进行插值，以获得其颜色 $C_P$ 等其它由顶点定义的属性：</p>\n<p>$$<br>C_P=\\lambda_{0} * C_{V0} + \\lambda_{1} * C_{V1} + \\lambda_{2} * C_{V2}<br>$$</p>\n<h2 id=\"如何获得任意一点的重心坐标\"><a href=\"#如何获得任意一点的重心坐标\" class=\"headerlink\" title=\"如何获得任意一点的重心坐标\"></a>如何获得任意一点的重心坐标</h2><p>　　在三角形情形中，重心坐标也叫面积坐标，因为 $P$ 点关于 $\\Delta ABC$ 的重心坐标和 $\\Delta PBC, \\Delta PCA, \\Delta PAB$ 的面积成比例。证明如下。<br>　　如图(Figure 4)，设 $\\Delta ABC$ 三个顶点和原点构成的向量分别为 $pmb{\\vec{a}}, \\pmb{\\vec{b}}, \\pmb{\\vec{c}}$，$P$ 点和原点构成的向量为 $\\pmb{\\vec{p}}$。$\\Delta PBC, \\Delta PCA, \\Delta PAB$ 面积之比为 $\\lambda_{0}:\\lambda_{1}:\\lambda_{2}$，且 $\\lambda_{0} + \\lambda_{1} + \\lambda_{2}=1$，设射线 $AP$ 与 $BC$ 交于点 $D$，点 $D$ 和原点构成的向量为 $\\pmb{\\vec{d}}$，</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure5.png\" alt=\"figure 5\"></p>\n<center>Figure 5</center>\n\n<p>　　则：</p>\n<p>$$<br>BD:DC=\\lambda_{2}:\\lambda_{1}, 从而\\quad \\pmb{\\vec{d}}=\\cfrac{\\lambda_{1}\\pmb{\\vec{b}}+\\lambda_{2}\\pmb{\\vec{c}}}{\\lambda_{1}+\\lambda_{2}} \\\\<br>AP:PD=(\\lambda_{1}+\\lambda_{2}):\\lambda_{0}, 故\\quad \\pmb{\\vec{p}}=\\cfrac{(\\lambda_{1}+\\lambda_{2})\\pmb{\\vec{d}}+\\lambda_{0}\\pmb{\\vec{a}}}{\\lambda_{0}+\\lambda_{1}+\\lambda_{2}} \\\\<br>\\pmb{\\vec{p}}=\\lambda_{0}\\pmb{\\vec{a}}+\\lambda_{1}\\pmb{\\vec{b}}+\\lambda_{2}\\pmb{\\vec{c}}<br>$$</p>\n<p>　　而 $\\Delta PBC, \\Delta PCA, \\Delta PAB$ 的面积又正好等于 $P$ 点和 $\\Delta ABC$ 顶点构成的向量与 $\\Delta ABC$ 三边构成的向量的<strong>叉积的值的一半。</strong><br>　　叉积值已通过 Edge Function 得到，所以重心坐标：</p>\n<p>$$<br>\\lambda_{0}=\\cfrac{Area(V1,V2,P)}{Area(V0,V1,V2)}=\\cfrac{E_{12}(P)/2}{E_{12}(V0)/2}=\\cfrac{E_{12}(P)}{E_{12}(V0)} \\\\<br>\\lambda_{1}=\\cfrac{Area(V2,V0,P)}{Area(V0,V1,V2)}=\\cfrac{E_{20}(P)/2}{E_{20}(V1)/2}=\\cfrac{E_{20}(P)}{E_{20}(V1)} \\\\<br>\\lambda_{2}=\\cfrac{Area(V0,V1,P)}{Area(V0,V1,V2)}=\\cfrac{E_{01}(P)/2}{E_{01}(V2)/2}=\\cfrac{E_{01}(P)}{E_{01}(V2)}<br>$$</p>\n<h2 id=\"计算优化\"><a href=\"#计算优化\" class=\"headerlink\" title=\"计算优化\"></a>计算优化</h2><p>$$<br>lambda_{0} + lambda_{1} + lambda_{2} = 1 \\\\<br>P = lambda_{0} * V0 + lambda_{1} * V1 + lambda_{2} * V2<br>$$</p>\n<p>　　两公式联立消去 $\\lambda_{0}$ 得：</p>\n<p>$$<br>P=V0 + lambda_{1} * (V1-V0) + lambda_{2} * (V2-V0)<br>$$</p>\n<p>　　$V1-V0$ 和 $V2-V0$ 可以提前计算出来，这样就把计算由三次乘法和两次加法简化到了两次乘法和两次加法。<strong>GPU采用了这种优化策略。</strong></p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>　　在某些特殊情况下，一个像素可能同时落在两个投影三角形区域内，Figure 6 中的红色像素点显示了这种情况。</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure6.png\" alt=\"figure 6\"></p>\n<center>Figure 6</center>\n\n<p>　　<strong>top-left rule</strong> (Figure 7) 可以用来避免这种重复光栅化三角形边界像素的情况。</p>\n<p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/figure7.png\" alt=\"figure 7\"></p>\n<center>Figure 7</center>\n\n<p>　　由图可知：</p>\n<ul>\n<li><strong>top edge</strong> 指的是满足向量 $V[(x+1)%3] - V[x], x=0,1,2$ 的 $y$ 坐标等于 $0$，且 $x$ 坐标大于 $0$ 的边。</li>\n<li><strong>left edge</strong> 指的是满足向量　$V[(x+1)%3]-V[x], x=0,1,2$ 的 $y$ 坐标大于 $0$ 的边。</li>\n</ul>\n<p>　　<strong>需要特别注意的是，本节都是建立在三角形三边按顺时针方向定义的前提下讨论的。</strong></p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>　　给定光栅化坐标系下的三角形的三个顶点以及顶点的颜色，渲染出这个三角形。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vec2</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x, y;</span><br><span class=\"line\">    Vec2(<span class=\"keyword\">float</span> x = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> y = <span class=\"number\">0.0</span>): x(x), y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vec3</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x, y, z;</span><br><span class=\"line\">    Vec3(<span class=\"keyword\">float</span> x = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> y = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> z = <span class=\"number\">0.0</span>): x(x), y(y), z(z)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rgb</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r, g, b;</span><br><span class=\"line\">    Rgb(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r = <span class=\"number\">0</span>, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> g = <span class=\"number\">0</span>, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b = <span class=\"number\">0</span>): r(r), g(g), b(b)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">edgeFunction</span><span class=\"params\">(Vec2 &amp;a, Vec2 &amp;b, Vec2 &amp;c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">top_left</span><span class=\"params\">(<span class=\"keyword\">const</span> Vec2 &amp;v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((v.y == <span class=\"number\">0</span> &amp;&amp; v.x &gt; <span class=\"number\">0</span>) || v.y &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Vec2 <span class=\"title\">v0</span><span class=\"params\">(<span class=\"number\">491.407</span>, <span class=\"number\">411.407</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec2 <span class=\"title\">v1</span><span class=\"params\">(<span class=\"number\">148.593</span>, <span class=\"number\">68.5928</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec2 <span class=\"title\">v2</span><span class=\"params\">(<span class=\"number\">148.593</span>, <span class=\"number\">411.407</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec3 <span class=\"title\">c0</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec3 <span class=\"title\">c1</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">Vec3 <span class=\"title\">c2</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> w = <span class=\"number\">512</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> h = <span class=\"number\">512</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rgb framebuffer[w][h];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(framebuffer, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(framebuffer));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> area = edgeFunction(v0, v1, v2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> j = <span class=\"number\">0</span>; j &lt; h; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; w; i++)&#123;</span><br><span class=\"line\">            <span class=\"function\">Vec2 <span class=\"title\">p</span><span class=\"params\">(i + <span class=\"number\">0.5</span>, j + <span class=\"number\">0.5</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> w0 = edgeFunction(v1, v2, p);</span><br><span class=\"line\">            <span class=\"keyword\">float</span> w1 = edgeFunction(v2, v0, p);</span><br><span class=\"line\">            <span class=\"keyword\">float</span> w2 = edgeFunction(v0, v1, p);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(w0 &gt;= <span class=\"number\">0</span> &amp;&amp; w1 &gt;= <span class=\"number\">0</span> &amp;&amp; w2 &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//top-left judge</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(w0 == <span class=\"number\">0</span> &amp;&amp; !top_left(Vec2(v2.x - v1.x, v2.y - v1.y))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(w1 == <span class=\"number\">0</span> &amp;&amp; !top_left(Vec2(v0.x - v2.x, v0.y - v2.y))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(w2 == <span class=\"number\">0</span> &amp;&amp; !top_left(Vec2(v1.x - v0.x, v1.y - v0.y))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                w0 /= area;</span><br><span class=\"line\">                w1 /= area;</span><br><span class=\"line\">                w2 /= area;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> r = w0 * c0.x + w1 * c1.x + w2 * c2.x;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> g = w0 * c0.y + w1 * c1.y + w2 * c2.y;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> b = w0 * c0.z + w1 * c1.z + w2 * c2.z;</span><br><span class=\"line\">                framebuffer[j][i].r = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(r * <span class=\"number\">255</span>);</span><br><span class=\"line\">                framebuffer[j][i].g = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(g * <span class=\"number\">255</span>);</span><br><span class=\"line\">                framebuffer[j][i].b = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(b * <span class=\"number\">255</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::ofstream ofs;</span><br><span class=\"line\">    ofs.open(<span class=\"string\">\"./raster2d.ppm\"</span>);</span><br><span class=\"line\">       ofs &lt;&lt; <span class=\"string\">\"P6\\n\"</span> &lt;&lt; w &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; h &lt;&lt; <span class=\"string\">\"\\n255\\n\"</span>;</span><br><span class=\"line\">    ofs.write((<span class=\"keyword\">char</span> *)framebuffer, <span class=\"keyword\">sizeof</span>(framebuffer));</span><br><span class=\"line\">    ofs.close(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"/2019/08/15/光栅化渲染-3-光栅化/result.png\" alt=\"result\"></p>\n<center>result</center>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/rasterization-stage\" target=\"_blank\" rel=\"noopener\">Scratchapixel-The Rasterization Stage</a><br><a href=\"https://www.wikiwand.com/zh-hans/%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87\" target=\"_blank\" rel=\"noopener\">维基百科-重心坐标</a></p>"}],"PostAsset":[{"_id":"source/_posts/Uva1343-The-Rotation-Game/game.png","slug":"game.png","post":"ck01sz2lo001630vn1aa8i52z","modified":1,"renderable":0},{"_id":"source/_posts/光栅化渲染-2-透视投影/perspective.png","slug":"perspective.png","post":"ck01sz2m2002030vnzg9or5sq","modified":1,"renderable":0},{"_id":"source/_posts/Linear algebra-Dot product/1.gif","slug":"1.gif","post":"ck01sz2ld000i30vndyf5u31r","modified":1,"renderable":0},{"_id":"source/_posts/哈希表/hash.png","slug":"hash.png","post":"ck01sz2m4002430vnudfv8kd3","modified":1,"renderable":0},{"_id":"source/_posts/HDU1016-Prime-Ring-Problem-DFS/dfs.png","post":"ck01sz2l8000a30vn81kkefm0","slug":"dfs.png","modified":1,"renderable":1},{"_id":"source/_posts/Learn-CMake-4-链接库文件/lena_color.png","post":"ck01sz2ld000h30vnbh5pwy9h","slug":"lena_color.png","modified":1,"renderable":1},{"_id":"source/_posts/Maze/maze.png","post":"ck01sz2le000j30vn5b98zrui","slug":"maze.png","modified":1,"renderable":1},{"_id":"source/_posts/PCA-主成分分析/pca.jpeg","post":"ck01sz2lf000n30vnev5sigyl","slug":"pca.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/POJ1970-The-Game-DFS/Renju.png","post":"ck01sz2lg000o30vnebjsc1vp","slug":"Renju.png","modified":1,"renderable":1},{"_id":"source/_posts/Rand-C-随机数/random.jpg","post":"ck01sz2lh000q30vnoazwntli","slug":"random.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Super-Mario/SuperMario.png","post":"ck01sz2lh000r30vns9wdc0dc","slug":"SuperMario.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva10562-Undraw the trees/tree.png","post":"ck01sz2lk000w30vnynvfs3n3","slug":"tree.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva11212-Editing-a-Book/prune.png","post":"ck01sz2ll000z30vnqdbq9ami","slug":"prune.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva1602-Lattice-Animals/pic.png","post":"ck01sz2lq001a30vnxdzduuut","slug":"pic.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva12166-Equilibrium-Mobile/balance.png","post":"ck01sz2ln001330vnhv2ka6i0","slug":"balance.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva221-Urban-Elevations/building.png","post":"ck01sz2lq001b30vnmvyrb4o5","slug":"building.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva839-二叉树的递归处理/tree.png","post":"ck01sz2lt001h30vnphfq0li4","slug":"tree.png","modified":1,"renderable":1},{"_id":"source/_posts/buildBinaryTree/BinaryTree.png","post":"ck01sz2lu001i30vnh369od95","slug":"BinaryTree.png","modified":1,"renderable":1},{"_id":"source/_posts/二分查找以及lower-bound-upper-bound实现/BinarySearch.jpeg","post":"ck01sz2m0001w30vnd204ncg3","slug":"BinarySearch.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/倒水问题/fill.png","post":"ck01sz2m1001y30vn9v2rcdne","slug":"fill.png","modified":1,"renderable":1},{"_id":"source/_posts/八数码问题/EightDigital.png","post":"ck01sz2m3002230vn8s1ieequ","slug":"EightDigital.png","modified":1,"renderable":1},{"_id":"source/_posts/循环小数化为分数的方法/wiki.png","post":"ck01sz2m5002730vnv91lzx9d","slug":"wiki.png","modified":1,"renderable":1},{"_id":"source/_posts/欧拉回路/Elur.png","post":"ck01sz2m5002830vnp76edsxa","slug":"Elur.png","modified":1,"renderable":1},{"_id":"source/_posts/Graph-Theory-The-shortest-path/gra.png","post":"ck01sz2l7000830vnh8tydej9","slug":"gra.png","modified":1,"renderable":1},{"_id":"source/_posts/Graph-Theory-The-shortest-path/path.png","post":"ck01sz2l7000830vnh8tydej9","slug":"path.png","modified":1,"renderable":1},{"_id":"source/_posts/HDU2050/line.jpg","post":"ck01sz2l9000b30vn4lmqupus","slug":"line.jpg","modified":1,"renderable":1},{"_id":"source/_posts/HDU2050/res.gif","post":"ck01sz2l9000b30vn4lmqupus","slug":"res.gif","modified":1,"renderable":1},{"_id":"source/_posts/Uva806-Spatial-Structures/1.png","post":"ck01sz2ls001f30vnv87nh9ey","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva806-Spatial-Structures/2.png","post":"ck01sz2ls001f30vnv87nh9ey","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/八皇后问题/diagonal.png","post":"ck01sz2m3002330vnbadhgdmt","slug":"diagonal.png","modified":1,"renderable":1},{"_id":"source/_posts/八皇后问题/queen.png","post":"ck01sz2m3002330vnbadhgdmt","slug":"queen.png","modified":1,"renderable":1},{"_id":"source/_posts/tab-to-spaces/space.png","post":"ck01sz2m4002530vnw6qugw9t","slug":"space.png","modified":1,"renderable":1},{"_id":"source/_posts/tab-to-spaces/tab.png","post":"ck01sz2m4002530vnw6qugw9t","slug":"tab.png","modified":1,"renderable":1},{"_id":"source/_posts/静态链接库-STATIC-和动态链接库-SHARED/shared.png","post":"ck01sz2m6002930vnnfdzon0v","slug":"shared.png","modified":1,"renderable":1},{"_id":"source/_posts/静态链接库-STATIC-和动态链接库-SHARED/static.png","post":"ck01sz2m6002930vnnfdzon0v","slug":"static.png","modified":1,"renderable":1},{"_id":"source/_posts/Linear algebra-Dot product/2.gif","slug":"2.gif","post":"ck01sz2ld000i30vndyf5u31r","modified":1,"renderable":0},{"_id":"source/_posts/Linear algebra-Dot product/3.gif","slug":"3.gif","post":"ck01sz2ld000i30vndyf5u31r","modified":1,"renderable":0},{"_id":"source/_posts/My-little-angel/moon1.jpg","post":"ck01sz2le000k30vnwgpu95rp","slug":"moon1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/My-little-angel/qxy1.jpg","post":"ck01sz2le000k30vnwgpu95rp","slug":"qxy1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/My-little-angel/together1.jpg","post":"ck01sz2le000k30vnwgpu95rp","slug":"together1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Uva1103-Ancient-Messages/1.png","post":"ck01sz2lk000x30vnlyw2o2xm","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva1103-Ancient-Messages/2.png","post":"ck01sz2lk000x30vnlyw2o2xm","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Uva1103-Ancient-Messages/hier.png","post":"ck01sz2lk000x30vnlyw2o2xm","slug":"hier.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-4-深度检测/depth.png","post":"ck01sz2m3002130vne0u98g3h","slug":"depth.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-4-深度检测/figure1.png","post":"ck01sz2m3002130vne0u98g3h","slug":"figure1.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-4-深度检测/figure2.png","post":"ck01sz2m3002130vne0u98g3h","slug":"figure2.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-1-算法总述/discrete.png","post":"ck01sz2m2001z30vnz66b41pd","slug":"discrete.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-1-算法总述/figure1.png","post":"ck01sz2m2001z30vnz66b41pd","slug":"figure1.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-1-算法总述/figure2.jpg","post":"ck01sz2m2001z30vnz66b41pd","slug":"figure2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-1-算法总述/figure3.png","post":"ck01sz2m2001z30vnz66b41pd","slug":"figure3.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-1-算法总述/figure4.png","post":"ck01sz2m2001z30vnz66b41pd","slug":"figure4.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure1.png","post":"ck01sz2m2002030vnzg9or5sq","slug":"figure1.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure2.png","post":"ck01sz2m2002030vnzg9or5sq","slug":"figure2.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure3.png","post":"ck01sz2m2002030vnzg9or5sq","slug":"figure3.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure4.png","post":"ck01sz2m2002030vnzg9or5sq","slug":"figure4.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-2-透视投影/figure5.png","post":"ck01sz2m2002030vnzg9or5sq","slug":"figure5.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-2-透视投影/visible.png","post":"ck01sz2m2002030vnzg9or5sq","slug":"visible.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p1.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p1.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p2.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p2.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p3.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p3.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p4.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p4.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p5.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p5.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p6.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p6.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p7.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p7.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p8.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p8.png","modified":1,"renderable":1},{"_id":"source/_posts/vultr/p9.png","post":"ck01sz2m0001v30vnv206chjo","slug":"p9.png","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/Rudolf_Kalman.jpg","post":"ck01sz2ng002c30vnttvpv7jk","slug":"Rudolf_Kalman.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/afterFilter.png","post":"ck01sz2ng002c30vnttvpv7jk","slug":"afterFilter.png","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g1.jpg","post":"ck01sz2ng002c30vnttvpv7jk","slug":"g1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g2.jpg","post":"ck01sz2ng002c30vnttvpv7jk","slug":"g2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g3.jpg","post":"ck01sz2ng002c30vnttvpv7jk","slug":"g3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g4.jpg","post":"ck01sz2ng002c30vnttvpv7jk","slug":"g4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/g5.jpg","post":"ck01sz2ng002c30vnttvpv7jk","slug":"g5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/gauss.jpg","post":"ck01sz2ng002c30vnttvpv7jk","slug":"gauss.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Kalman-filter-卡尔曼滤波器/origin.png","post":"ck01sz2ng002c30vnttvpv7jk","slug":"origin.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure1.png","post":"ck01sz2ni002g30vnggp356eh","slug":"figure1.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure2.png","post":"ck01sz2ni002g30vnggp356eh","slug":"figure2.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure3.gif","post":"ck01sz2ni002g30vnggp356eh","slug":"figure3.gif","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure4.png","post":"ck01sz2ni002g30vnggp356eh","slug":"figure4.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure5.png","post":"ck01sz2ni002g30vnggp356eh","slug":"figure5.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure6.png","post":"ck01sz2ni002g30vnggp356eh","slug":"figure6.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/figure7.png","post":"ck01sz2ni002g30vnggp356eh","slug":"figure7.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/rasterization.png","post":"ck01sz2ni002g30vnggp356eh","slug":"rasterization.png","modified":1,"renderable":1},{"_id":"source/_posts/光栅化渲染-3-光栅化/result.png","post":"ck01sz2ni002g30vnggp356eh","slug":"result.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck01sz2l5000530vnai5w6lm7","category_id":"ck01sz2nl002o30vn4oden1fr","_id":"ck01sz2qc007j30vny6wupgsx"},{"post_id":"ck01sz2l6000630vnb31clfrm","category_id":"ck01sz2nm002q30vnogp4uack","_id":"ck01sz2qd007l30vn19zswr3c"},{"post_id":"ck01sz2l7000830vnh8tydej9","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qd007n30vnp075jesh"},{"post_id":"ck01sz2l8000930vn1scyuwor","category_id":"ck01sz2no002w30vni3q9nj5w","_id":"ck01sz2qe007r30vnsmoq56bs"},{"post_id":"ck01sz2lb000e30vndokiv9pv","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qe007t30vng5oe3oxg"},{"post_id":"ck01sz2lc000f30vnp9r411tv","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qf007x30vn2kzvoqr4"},{"post_id":"ck01sz2lc000g30vnvhtjkurk","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qf007z30vnv1zf4720"},{"post_id":"ck01sz2ld000h30vnbh5pwy9h","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qf008230vnseicnypx"},{"post_id":"ck01sz2ld000i30vndyf5u31r","category_id":"ck01sz2nl002o30vn4oden1fr","_id":"ck01sz2qg008430vn136csfxk"},{"post_id":"ck01sz2le000j30vn5b98zrui","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2qh008730vn231drfaq"},{"post_id":"ck01sz2le000k30vnwgpu95rp","category_id":"ck01sz2no002w30vni3q9nj5w","_id":"ck01sz2qh008930vnf4erdt8m"},{"post_id":"ck01sz2lf000n30vnev5sigyl","category_id":"ck01sz2nl002o30vn4oden1fr","_id":"ck01sz2qh008c30vnsmbtzjv9"},{"post_id":"ck01sz2lh000q30vnoazwntli","category_id":"ck01sz2nm002q30vnogp4uack","_id":"ck01sz2qh008e30vnhte3g1sv"},{"post_id":"ck01sz2lh000r30vns9wdc0dc","category_id":"ck01sz2o1003t30vngx8ajknn","_id":"ck01sz2qi008h30vnp3akyey3"},{"post_id":"ck01sz2li000s30vn31kch3ae","category_id":"ck01sz2nm002q30vnogp4uack","_id":"ck01sz2qi008j30vn0088sj5m"},{"post_id":"ck01sz2lu001i30vnh369od95","category_id":"ck01sz2og005930vniftz0cpz","_id":"ck01sz2qi008l30vnyglht3xj"},{"post_id":"ck01sz2lu001j30vnghs9vpwa","category_id":"ck01sz2nm002q30vnogp4uack","_id":"ck01sz2qj008o30vnsxjkzj3d"},{"post_id":"ck01sz2lv001k30vnd4jb69ui","category_id":"ck01sz2o1003t30vngx8ajknn","_id":"ck01sz2qj008q30vnsm0m3sct"},{"post_id":"ck01sz2lv001l30vn9rket3uj","category_id":"ck01sz2oh005f30vnthpsmt16","_id":"ck01sz2qj008t30vnprs9wwvs"},{"post_id":"ck01sz2lw001m30vnrx6q6xlg","category_id":"ck01sz2nm002q30vnogp4uack","_id":"ck01sz2qj008v30vnfbemjyd0"},{"post_id":"ck01sz2lw001n30vn2uh7t1t9","category_id":"ck01sz2no002w30vni3q9nj5w","_id":"ck01sz2qk008y30vndki06v8p"},{"post_id":"ck01sz2lx001o30vnkvobhk4z","category_id":"ck01sz2nm002q30vnogp4uack","_id":"ck01sz2qk009030vnqy5bu1fs"},{"post_id":"ck01sz2ly001q30vnrl6ex3zv","category_id":"ck01sz2og005930vniftz0cpz","_id":"ck01sz2qk009330vnrp5t4opb"},{"post_id":"ck01sz2ly001r30vn9i7d8n71","category_id":"ck01sz2og005930vniftz0cpz","_id":"ck01sz2ql009530vni4lwwds5"},{"post_id":"ck01sz2ly001s30vn2891zwc8","category_id":"ck01sz2nm002q30vnogp4uack","_id":"ck01sz2ql009830vn5xubuvly"},{"post_id":"ck01sz2lz001t30vnjftdpde0","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2ql009a30vnvfxm0xuv"},{"post_id":"ck01sz2lz001u30vn37ykchbm","category_id":"ck01sz2nm002q30vnogp4uack","_id":"ck01sz2qm009d30vnjcuyb4hw"},{"post_id":"ck01sz2m0001v30vnv206chjo","category_id":"ck01sz2o1003t30vngx8ajknn","_id":"ck01sz2qm009f30vnytro1c01"},{"post_id":"ck01sz2m0001w30vnd204ncg3","category_id":"ck01sz2og005930vniftz0cpz","_id":"ck01sz2qm009h30vn3korw9jw"},{"post_id":"ck01sz2m1001x30vnpcll4toy","category_id":"ck01sz2og005930vniftz0cpz","_id":"ck01sz2qn009k30vn40a5dyj8"},{"post_id":"ck01sz2m1001y30vn9v2rcdne","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qn009m30vn5fdt3v9m"},{"post_id":"ck01sz2m3002230vn8s1ieequ","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qn009p30vnosgr2u31"},{"post_id":"ck01sz2m3002330vnbadhgdmt","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qn009r30vnu5l3kfzl"},{"post_id":"ck01sz2m4002430vnudfv8kd3","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qo009u30vn091g9t4y"},{"post_id":"ck01sz2m4002530vnw6qugw9t","category_id":"ck01sz2o1003t30vngx8ajknn","_id":"ck01sz2qo009w30vnl7q2igr3"},{"post_id":"ck01sz2m5002630vn8nbw8uca","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qo009z30vngjg32f07"},{"post_id":"ck01sz2m5002730vnv91lzx9d","category_id":"ck01sz2nl002o30vn4oden1fr","_id":"ck01sz2qp00a130vnqircuk5e"},{"post_id":"ck01sz2m5002830vnp76edsxa","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qp00a430vnujlmb46r"},{"post_id":"ck01sz2m6002930vnnfdzon0v","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qp00a630vnmins7hp8"},{"post_id":"ck01sz2ng002c30vnttvpv7jk","category_id":"ck01sz2no002u30vnhjtk9dnx","_id":"ck01sz2qp00a930vna5dfeelz"},{"post_id":"ck01sz2l0000130vnhh2sa916","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rn00ck30vnbwkxd8xe"},{"post_id":"ck01sz2l0000130vnhh2sa916","category_id":"ck01sz2qc007g30vn21w665kr","_id":"ck01sz2rn00cm30vn15fdbshl"},{"post_id":"ck01sz2l4000330vn15yqv7cl","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2ro00co30vn7fssqvyg"},{"post_id":"ck01sz2l4000330vn15yqv7cl","category_id":"ck01sz2qd007o30vn3mukq1r9","_id":"ck01sz2ro00cp30vnckpbhgvg"},{"post_id":"ck01sz2l4000430vn05ofv0mm","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2ro00cq30vnh2kskvle"},{"post_id":"ck01sz2l4000430vn05ofv0mm","category_id":"ck01sz2qe007u30vnzp9ridda","_id":"ck01sz2ro00cr30vnki5msh2q"},{"post_id":"ck01sz2l6000730vnpo8404q7","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2ro00cs30vnibtkwoxc"},{"post_id":"ck01sz2l6000730vnpo8404q7","category_id":"ck01sz2qd007o30vn3mukq1r9","_id":"ck01sz2rp00ct30vnt0qc4iqk"},{"post_id":"ck01sz2l8000a30vn81kkefm0","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rp00cu30vnqu8a50br"},{"post_id":"ck01sz2l8000a30vn81kkefm0","category_id":"ck01sz2qg008530vnzn5dxo4n","_id":"ck01sz2rp00cv30vn8514tb00"},{"post_id":"ck01sz2l9000b30vn4lmqupus","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rp00cw30vn2nuiiaec"},{"post_id":"ck01sz2l9000b30vn4lmqupus","category_id":"ck01sz2qd007o30vn3mukq1r9","_id":"ck01sz2rp00cx30vn2p2gx4sa"},{"post_id":"ck01sz2la000c30vn9luu2jtv","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rp00cy30vnaoizrm2s"},{"post_id":"ck01sz2la000c30vn9luu2jtv","category_id":"ck01sz2qi008f30vnhz0xb7rk","_id":"ck01sz2rp00cz30vn7bw12et9"},{"post_id":"ck01sz2le000l30vn3yyd25ck","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rp00d030vnoqo48vsb"},{"post_id":"ck01sz2le000l30vn3yyd25ck","category_id":"ck01sz2qd007o30vn3mukq1r9","_id":"ck01sz2rp00d130vnpadu4j3a"},{"post_id":"ck01sz2lf000m30vn9mecg7kj","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rq00d230vnpbxomxvk"},{"post_id":"ck01sz2lf000m30vn9mecg7kj","category_id":"ck01sz2qj008r30vnagclasxt","_id":"ck01sz2rq00d330vnfjgrycd0"},{"post_id":"ck01sz2lg000o30vnebjsc1vp","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rq00d430vn1kutrkw5"},{"post_id":"ck01sz2lg000o30vnebjsc1vp","category_id":"ck01sz2qg008530vnzn5dxo4n","_id":"ck01sz2rq00d530vn6g84rf0m"},{"post_id":"ck01sz2lg000p30vnziaof3gn","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rq00d630vnoxqogijw"},{"post_id":"ck01sz2lg000p30vnziaof3gn","category_id":"ck01sz2qk009130vnu2thh8e9","_id":"ck01sz2rq00d730vnhu81yd2g"},{"post_id":"ck01sz2li000t30vnt3iecy25","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rq00d830vnwgwpxd64"},{"post_id":"ck01sz2li000t30vnt3iecy25","category_id":"ck01sz2ql009630vni4g15k2q","_id":"ck01sz2rq00d930vncjjjii09"},{"post_id":"ck01sz2lj000u30vn92tt28zd","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rq00da30vn7xu5p3vc"},{"post_id":"ck01sz2lj000u30vn92tt28zd","category_id":"ck01sz2qm009b30vnp4gb9kr2","_id":"ck01sz2rq00db30vneg7kqiez"},{"post_id":"ck01sz2lj000v30vnx8lxnphv","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rq00dc30vn4kn13e48"},{"post_id":"ck01sz2lj000v30vnx8lxnphv","category_id":"ck01sz2qm009i30vn1ktpj63h","_id":"ck01sz2rq00dd30vn24zof4ks"},{"post_id":"ck01sz2lk000w30vnynvfs3n3","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rq00de30vnsq9283wd"},{"post_id":"ck01sz2lk000w30vnynvfs3n3","category_id":"ck01sz2qm009i30vn1ktpj63h","_id":"ck01sz2rq00df30vnv5k6bs6p"},{"post_id":"ck01sz2lk000x30vnlyw2o2xm","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rq00dg30vnc9u1far3"},{"post_id":"ck01sz2lk000x30vnlyw2o2xm","category_id":"ck01sz2qg008530vnzn5dxo4n","_id":"ck01sz2rq00dh30vnny9ka67k"},{"post_id":"ck01sz2lk000y30vnytzoxijt","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rr00di30vn3bql1y08"},{"post_id":"ck01sz2lk000y30vnytzoxijt","category_id":"ck01sz2qo009x30vnk5a07idv","_id":"ck01sz2rr00dj30vnvwbuy48y"},{"post_id":"ck01sz2ll000z30vnqdbq9ami","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rr00dk30vnugmmiwt0"},{"post_id":"ck01sz2ll000z30vnqdbq9ami","category_id":"ck01sz2qp00a230vno23ny55w","_id":"ck01sz2rr00dl30vnuihsxb3k"},{"post_id":"ck01sz2ll001030vn28sxm22b","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rr00dm30vnil9sb3d5"},{"post_id":"ck01sz2ll001030vn28sxm22b","category_id":"ck01sz2qg008530vnzn5dxo4n","_id":"ck01sz2rr00dn30vn6phejokj"},{"post_id":"ck01sz2lm001130vnmld5814c","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rr00do30vn75j2z1bs"},{"post_id":"ck01sz2lm001130vnmld5814c","category_id":"ck01sz2ql009630vni4g15k2q","_id":"ck01sz2rr00dp30vntvj6aier"},{"post_id":"ck01sz2lm001230vnvail92jh","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rr00dq30vn2nn5f99s"},{"post_id":"ck01sz2lm001230vnvail92jh","category_id":"ck01sz2qq00ae30vnanbbnros","_id":"ck01sz2rr00dr30vnfz6uen3g"},{"post_id":"ck01sz2ln001330vnhv2ka6i0","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rr00ds30vni5vmcgyr"},{"post_id":"ck01sz2ln001330vnhv2ka6i0","category_id":"ck01sz2qm009i30vn1ktpj63h","_id":"ck01sz2rr00dt30vnr9vkjrh7"},{"post_id":"ck01sz2ln001430vnkpvyxosb","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rs00du30vn3sxxo3rj"},{"post_id":"ck01sz2ln001430vnkpvyxosb","category_id":"ck01sz2qm009i30vn1ktpj63h","_id":"ck01sz2rs00dv30vn4ry01444"},{"post_id":"ck01sz2lo001530vng0q2quvt","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rs00dw30vnzojp6dil"},{"post_id":"ck01sz2lo001530vng0q2quvt","category_id":"ck01sz2qs00ao30vn5a1ifwwv","_id":"ck01sz2rs00dx30vn9gjib0b9"},{"post_id":"ck01sz2lo001630vn1aa8i52z","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rs00dy30vn07btmy4j"},{"post_id":"ck01sz2lo001630vn1aa8i52z","category_id":"ck01sz2qp00a230vno23ny55w","_id":"ck01sz2rs00dz30vnimg9t22t"},{"post_id":"ck01sz2lo001730vnv7msmvh8","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rs00e030vny7ru1fk4"},{"post_id":"ck01sz2lo001730vnv7msmvh8","category_id":"ck01sz2qp00a230vno23ny55w","_id":"ck01sz2rs00e130vnf4wtksxi"},{"post_id":"ck01sz2lp001830vnn0j30gwu","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rs00e230vn7wb33105"},{"post_id":"ck01sz2lp001830vnn0j30gwu","category_id":"ck01sz2qu00ax30vncg6o0d1m","_id":"ck01sz2rs00e330vncnjzl4uu"},{"post_id":"ck01sz2lp001930vnpqdsuost","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rs00e430vn315keyoi"},{"post_id":"ck01sz2lp001930vnpqdsuost","category_id":"ck01sz2qu00ax30vncg6o0d1m","_id":"ck01sz2rs00e530vn06tyhzvp"},{"post_id":"ck01sz2lq001a30vnxdzduuut","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rs00e630vnge5f5grp"},{"post_id":"ck01sz2lq001a30vnxdzduuut","category_id":"ck01sz2qu00ax30vncg6o0d1m","_id":"ck01sz2rs00e730vnupuekpfw"},{"post_id":"ck01sz2lq001b30vnmvyrb4o5","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rs00e830vnmg94xh70"},{"post_id":"ck01sz2lq001b30vnmvyrb4o5","category_id":"ck01sz2qv00b630vnxjx01oqz","_id":"ck01sz2rt00e930vneicz3v4m"},{"post_id":"ck01sz2lr001c30vnquiclegj","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rt00ea30vnxciamt3b"},{"post_id":"ck01sz2lr001c30vnquiclegj","category_id":"ck01sz2qm009i30vn1ktpj63h","_id":"ck01sz2rt00eb30vn4dahegfv"},{"post_id":"ck01sz2lr001d30vnt3lklw6d","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rt00ec30vnukyrdade"},{"post_id":"ck01sz2lr001d30vnt3lklw6d","category_id":"ck01sz2qx00bc30vnuu86tfnf","_id":"ck01sz2rt00ed30vnsq13d923"},{"post_id":"ck01sz2ls001e30vnkxtdve97","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rt00ee30vntz4fhoam"},{"post_id":"ck01sz2ls001e30vnkxtdve97","category_id":"ck01sz2qo009x30vnk5a07idv","_id":"ck01sz2rt00ef30vncnlfuhaw"},{"post_id":"ck01sz2ls001f30vnv87nh9ey","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rt00eg30vn86pus63d"},{"post_id":"ck01sz2ls001f30vnv87nh9ey","category_id":"ck01sz2qm009i30vn1ktpj63h","_id":"ck01sz2rt00eh30vnzjwqz2u2"},{"post_id":"ck01sz2lt001g30vnrqv6g2ag","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rt00ei30vnq68ltd9k"},{"post_id":"ck01sz2lt001g30vnrqv6g2ag","category_id":"ck01sz2qu00ax30vncg6o0d1m","_id":"ck01sz2rt00ej30vnt90fvlp3"},{"post_id":"ck01sz2lt001h30vnphfq0li4","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rt00ek30vnstwx254h"},{"post_id":"ck01sz2lt001h30vnphfq0li4","category_id":"ck01sz2qm009i30vn1ktpj63h","_id":"ck01sz2rt00el30vnv23ifaqf"},{"post_id":"ck01sz2lx001p30vnrctp7nh5","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2rt00em30vnm11c1zr5"},{"post_id":"ck01sz2lx001p30vnrctp7nh5","category_id":"ck01sz2qg008530vnzn5dxo4n","_id":"ck01sz2rt00en30vnio2ln4xy"},{"post_id":"ck01sz2m2001z30vnz66b41pd","category_id":"ck01sz2op006630vn4208trpy","_id":"ck01sz2rt00eo30vnh2imom8f"},{"post_id":"ck01sz2m2001z30vnz66b41pd","category_id":"ck01sz2qz00bv30vn6xr25qsm","_id":"ck01sz2ru00ep30vnigilaf7w"},{"post_id":"ck01sz2m2002030vnzg9or5sq","category_id":"ck01sz2op006630vn4208trpy","_id":"ck01sz2ru00eq30vn88ie3lt4"},{"post_id":"ck01sz2m2002030vnzg9or5sq","category_id":"ck01sz2qz00bv30vn6xr25qsm","_id":"ck01sz2ru00er30vn5qc74phu"},{"post_id":"ck01sz2m3002130vne0u98g3h","category_id":"ck01sz2op006630vn4208trpy","_id":"ck01sz2ru00es30vnt0yuussb"},{"post_id":"ck01sz2m3002130vne0u98g3h","category_id":"ck01sz2qz00bv30vn6xr25qsm","_id":"ck01sz2ru00et30vntgs8g5l4"},{"post_id":"ck01sz2nh002e30vnx0ch7tbl","category_id":"ck01sz2n6002a30vn4bhhy9h8","_id":"ck01sz2ru00eu30vnaf6kzbiq"},{"post_id":"ck01sz2nh002e30vnx0ch7tbl","category_id":"ck01sz2qu00ax30vncg6o0d1m","_id":"ck01sz2ru00ev30vnph3h8w5r"}],"PostTag":[{"post_id":"ck01sz2l0000130vnhh2sa916","tag_id":"ck01sz2nf002b30vnu1jsxses","_id":"ck01sz2qc007h30vnb0bfmxi9"},{"post_id":"ck01sz2l0000130vnhh2sa916","tag_id":"ck01sz2nj002j30vni8v7j9v7","_id":"ck01sz2qd007k30vnue4shfjl"},{"post_id":"ck01sz2l4000330vn15yqv7cl","tag_id":"ck01sz2nf002b30vnu1jsxses","_id":"ck01sz2qd007m30vndoyxtdd3"},{"post_id":"ck01sz2l4000430vn05ofv0mm","tag_id":"ck01sz2nm002p30vn77jm1bes","_id":"ck01sz2qe007q30vnxoxfnyez"},{"post_id":"ck01sz2l4000430vn05ofv0mm","tag_id":"ck01sz2nn002r30vnzi6zjpyk","_id":"ck01sz2qe007s30vnwur90oxo"},{"post_id":"ck01sz2l5000530vnai5w6lm7","tag_id":"ck01sz2nn002t30vnqamt07yg","_id":"ck01sz2qf007w30vnf0jhez0b"},{"post_id":"ck01sz2l6000630vnb31clfrm","tag_id":"ck01sz2no002v30vnn23j53ml","_id":"ck01sz2qf007y30vnaw122hs5"},{"post_id":"ck01sz2l6000730vnpo8404q7","tag_id":"ck01sz2nf002b30vnu1jsxses","_id":"ck01sz2qf008130vn3r1atrxb"},{"post_id":"ck01sz2l7000830vnh8tydej9","tag_id":"ck01sz2np002z30vn9z2zqg4l","_id":"ck01sz2qg008330vnfxz46f7j"},{"post_id":"ck01sz2l8000a30vn81kkefm0","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2qh008630vnvizahwbo"},{"post_id":"ck01sz2l9000b30vn4lmqupus","tag_id":"ck01sz2nq003330vnf62fdbb5","_id":"ck01sz2qh008830vntzfev8ee"},{"post_id":"ck01sz2l9000b30vn4lmqupus","tag_id":"ck01sz2nr003530vna3vihx2x","_id":"ck01sz2qh008b30vnkes4by3r"},{"post_id":"ck01sz2l9000b30vn4lmqupus","tag_id":"ck01sz2ns003730vnceo1z1t8","_id":"ck01sz2qh008d30vntbihor0o"},{"post_id":"ck01sz2l9000b30vn4lmqupus","tag_id":"ck01sz2nf002b30vnu1jsxses","_id":"ck01sz2qi008g30vnl5wwrgk8"},{"post_id":"ck01sz2la000c30vn9luu2jtv","tag_id":"ck01sz2nq003330vnf62fdbb5","_id":"ck01sz2qi008i30vn63t7w53x"},{"post_id":"ck01sz2la000c30vn9luu2jtv","tag_id":"ck01sz2nv003d30vnb09d9ei0","_id":"ck01sz2qi008k30vn6itjtb3f"},{"post_id":"ck01sz2la000c30vn9luu2jtv","tag_id":"ck01sz2nw003f30vn884onnaf","_id":"ck01sz2qj008n30vnm6vemhhm"},{"post_id":"ck01sz2lb000e30vndokiv9pv","tag_id":"ck01sz2nx003i30vndxxfc631","_id":"ck01sz2qj008p30vnzd5748ra"},{"post_id":"ck01sz2lc000f30vnp9r411tv","tag_id":"ck01sz2nx003i30vndxxfc631","_id":"ck01sz2qj008s30vnzp1wwxuf"},{"post_id":"ck01sz2lc000g30vnvhtjkurk","tag_id":"ck01sz2nx003i30vndxxfc631","_id":"ck01sz2qj008u30vnd20m4ohw"},{"post_id":"ck01sz2ld000h30vnbh5pwy9h","tag_id":"ck01sz2nx003i30vndxxfc631","_id":"ck01sz2qk008x30vnrjs8fspd"},{"post_id":"ck01sz2ld000i30vndyf5u31r","tag_id":"ck01sz2o0003q30vn1p5yytz7","_id":"ck01sz2qk008z30vn6iaas226"},{"post_id":"ck01sz2ld000i30vndyf5u31r","tag_id":"ck01sz2o1003s30vn9or2awyd","_id":"ck01sz2qk009230vn9p8h51u3"},{"post_id":"ck01sz2le000j30vn5b98zrui","tag_id":"ck01sz2nw003f30vn884onnaf","_id":"ck01sz2qk009430vnzueew8tv"},{"post_id":"ck01sz2le000k30vnwgpu95rp","tag_id":"ck01sz2o2003w30vn3zih4fg6","_id":"ck01sz2ql009730vni574bz5l"},{"post_id":"ck01sz2le000l30vn3yyd25ck","tag_id":"ck01sz2o2003y30vny4ksgr5a","_id":"ck01sz2ql009930vn7g0ofdn4"},{"post_id":"ck01sz2lf000m30vn9mecg7kj","tag_id":"ck01sz2o3004030vna39837hp","_id":"ck01sz2qm009c30vnodzyxbyf"},{"post_id":"ck01sz2lf000m30vn9mecg7kj","tag_id":"ck01sz2o3004230vn3mregefm","_id":"ck01sz2qm009e30vnfv5wtfbn"},{"post_id":"ck01sz2lf000n30vnev5sigyl","tag_id":"ck01sz2o4004430vn37a7k4qg","_id":"ck01sz2qm009g30vnv2xdazqx"},{"post_id":"ck01sz2lg000o30vnebjsc1vp","tag_id":"ck01sz2o4004630vntigry9zh","_id":"ck01sz2qn009j30vnowa8i2y5"},{"post_id":"ck01sz2lg000o30vnebjsc1vp","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2qn009l30vnuzcl4m1d"},{"post_id":"ck01sz2lg000o30vnebjsc1vp","tag_id":"ck01sz2o6004b30vnmxw2k3sd","_id":"ck01sz2qn009o30vnfzmw1o5e"},{"post_id":"ck01sz2lg000p30vnziaof3gn","tag_id":"ck01sz2o4004630vntigry9zh","_id":"ck01sz2qn009q30vnib7znjo8"},{"post_id":"ck01sz2lg000p30vnziaof3gn","tag_id":"ck01sz2o7004f30vn1ra8hxog","_id":"ck01sz2qo009t30vne52g95r5"},{"post_id":"ck01sz2lh000q30vnoazwntli","tag_id":"ck01sz2o7004h30vnesxfcynu","_id":"ck01sz2qo009v30vnqy19iox0"},{"post_id":"ck01sz2lh000r30vns9wdc0dc","tag_id":"ck01sz2o8004j30vn44wne83x","_id":"ck01sz2qo009y30vn6yngu1zf"},{"post_id":"ck01sz2li000s30vn31kch3ae","tag_id":"ck01sz2o8004l30vn6srhlzt8","_id":"ck01sz2qp00a030vnjv97mbgz"},{"post_id":"ck01sz2li000t30vnt3iecy25","tag_id":"ck01sz2o9004n30vn286bwadn","_id":"ck01sz2qp00a330vn8xhckom0"},{"post_id":"ck01sz2li000t30vnt3iecy25","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2qp00a530vnr1j1w7df"},{"post_id":"ck01sz2lj000u30vn92tt28zd","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2qp00a830vnysypubnp"},{"post_id":"ck01sz2lj000u30vn92tt28zd","tag_id":"ck01sz2ob004t30vne04lj002","_id":"ck01sz2qq00aa30vnob3ly3gv"},{"post_id":"ck01sz2lj000v30vnx8lxnphv","tag_id":"ck01sz2ob004v30vnaxesgrb5","_id":"ck01sz2qq00ac30vnbvp7ukrs"},{"post_id":"ck01sz2lk000w30vnynvfs3n3","tag_id":"ck01sz2oc004y30vnayn0y9l6","_id":"ck01sz2qq00ad30vnmj0dtuyp"},{"post_id":"ck01sz2lk000x30vnlyw2o2xm","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2qq00af30vnt9d7q8w2"},{"post_id":"ck01sz2lk000x30vnlyw2o2xm","tag_id":"ck01sz2od005230vnnnky1qfq","_id":"ck01sz2qr00ag30vnyk3cdzgy"},{"post_id":"ck01sz2lk000y30vnytzoxijt","tag_id":"ck01sz2oe005430vn2wqld4c0","_id":"ck01sz2qr00ah30vn1f57ix41"},{"post_id":"ck01sz2ll000z30vnqdbq9ami","tag_id":"ck01sz2oe005630vno3lpl6io","_id":"ck01sz2qr00aj30vna438j4vx"},{"post_id":"ck01sz2ll001030vn28sxm22b","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2qr00ak30vnq3yb6jof"},{"post_id":"ck01sz2ll001030vn28sxm22b","tag_id":"ck01sz2og005a30vnrbbgopqz","_id":"ck01sz2qs00am30vn6mz05bcc"},{"post_id":"ck01sz2lm001130vnmld5814c","tag_id":"ck01sz2o9004n30vn286bwadn","_id":"ck01sz2qs00an30vnjtmjxmat"},{"post_id":"ck01sz2lm001230vnvail92jh","tag_id":"ck01sz2oh005e30vnnn6xll5d","_id":"ck01sz2qs00ap30vn4boddtxw"},{"post_id":"ck01sz2lm001230vnvail92jh","tag_id":"ck01sz2o8004l30vn6srhlzt8","_id":"ck01sz2qs00aq30vnw33tvbab"},{"post_id":"ck01sz2ln001330vnhv2ka6i0","tag_id":"ck01sz2nf002b30vnu1jsxses","_id":"ck01sz2qs00as30vn3ilk6kt2"},{"post_id":"ck01sz2ln001330vnhv2ka6i0","tag_id":"ck01sz2oc004y30vnayn0y9l6","_id":"ck01sz2qs00at30vnjoaftfrj"},{"post_id":"ck01sz2ln001430vnkpvyxosb","tag_id":"ck01sz2oc004y30vnayn0y9l6","_id":"ck01sz2qt00av30vnbnskfjdm"},{"post_id":"ck01sz2ln001430vnkpvyxosb","tag_id":"ck01sz2nw003f30vn884onnaf","_id":"ck01sz2qt00aw30vnm624sofi"},{"post_id":"ck01sz2lo001530vng0q2quvt","tag_id":"ck01sz2ol005q30vnv0y37bvs","_id":"ck01sz2qu00ay30vn2udne2ss"},{"post_id":"ck01sz2lo001530vng0q2quvt","tag_id":"ck01sz2om005s30vnmxlytz5u","_id":"ck01sz2qu00az30vnju3bln3u"},{"post_id":"ck01sz2lo001730vnv7msmvh8","tag_id":"ck01sz2om005u30vnyzpckp9u","_id":"ck01sz2qu00b130vn0rfdxwdb"},{"post_id":"ck01sz2lp001830vnn0j30gwu","tag_id":"ck01sz2nw003f30vn884onnaf","_id":"ck01sz2qu00b230vn487g8ea9"},{"post_id":"ck01sz2lp001930vnpqdsuost","tag_id":"ck01sz2nw003f30vn884onnaf","_id":"ck01sz2qv00b430vn2uz8wvqp"},{"post_id":"ck01sz2lq001a30vnxdzduuut","tag_id":"ck01sz2oo006030vnj4g5aulq","_id":"ck01sz2qv00b530vnq8t83fha"},{"post_id":"ck01sz2lq001a30vnxdzduuut","tag_id":"ck01sz2op006330vncanq2t5b","_id":"ck01sz2qv00b730vnrqwiolt3"},{"post_id":"ck01sz2lq001b30vnmvyrb4o5","tag_id":"ck01sz2op006530vn94s2zz18","_id":"ck01sz2qv00b830vn2i6yj2zt"},{"post_id":"ck01sz2lr001c30vnquiclegj","tag_id":"ck01sz2oc004y30vnayn0y9l6","_id":"ck01sz2qw00ba30vn13tir9p5"},{"post_id":"ck01sz2lr001c30vnquiclegj","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2qw00bb30vn3px1kaac"},{"post_id":"ck01sz2lr001d30vnt3lklw6d","tag_id":"ck01sz2or006b30vnbxw330j8","_id":"ck01sz2qx00bd30vn987k3zyz"},{"post_id":"ck01sz2ls001e30vnkxtdve97","tag_id":"ck01sz2oe005430vn2wqld4c0","_id":"ck01sz2qx00be30vn7xxo8403"},{"post_id":"ck01sz2ls001f30vnv87nh9ey","tag_id":"ck01sz2os006f30vnyd8sokuo","_id":"ck01sz2qx00bf30vng8c9ldyw"},{"post_id":"ck01sz2lt001g30vnrqv6g2ag","tag_id":"ck01sz2nw003f30vn884onnaf","_id":"ck01sz2qx00bh30vnaufp46c4"},{"post_id":"ck01sz2lt001h30vnphfq0li4","tag_id":"ck01sz2oc004y30vnayn0y9l6","_id":"ck01sz2qy00bi30vncfoovfla"},{"post_id":"ck01sz2lt001h30vnphfq0li4","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2qy00bk30vn91hbcu0f"},{"post_id":"ck01sz2lu001i30vnh369od95","tag_id":"ck01sz2ou006n30vnsxezqoxg","_id":"ck01sz2qy00bl30vnu1s9mers"},{"post_id":"ck01sz2lu001j30vnghs9vpwa","tag_id":"ck01sz2no002v30vnn23j53ml","_id":"ck01sz2qy00bn30vn59uk7sbk"},{"post_id":"ck01sz2lv001k30vnd4jb69ui","tag_id":"ck01sz2ov006r30vnf5ikpj17","_id":"ck01sz2qy00bo30vn90xq8jk8"},{"post_id":"ck01sz2lv001k30vnd4jb69ui","tag_id":"ck01sz2ow006s30vnac2auxot","_id":"ck01sz2qz00bq30vnxeim3pth"},{"post_id":"ck01sz2lv001k30vnd4jb69ui","tag_id":"ck01sz2o0003q30vn1p5yytz7","_id":"ck01sz2qz00br30vnd8dsd3qk"},{"post_id":"ck01sz2lw001m30vnrx6q6xlg","tag_id":"ck01sz2ow006u30vn66wcsn0o","_id":"ck01sz2qz00bt30vnu1jhysho"},{"post_id":"ck01sz2lw001n30vn2uh7t1t9","tag_id":"ck01sz2ow006v30vn3n6t66gq","_id":"ck01sz2qz00bu30vn3exx0sox"},{"post_id":"ck01sz2lw001n30vn2uh7t1t9","tag_id":"ck01sz2o0003q30vn1p5yytz7","_id":"ck01sz2r000bw30vnc2dc5908"},{"post_id":"ck01sz2lx001o30vnkvobhk4z","tag_id":"ck01sz2ox006x30vnl9egzlpk","_id":"ck01sz2r000bx30vn2hbm0j7f"},{"post_id":"ck01sz2lx001p30vnrctp7nh5","tag_id":"ck01sz2nq003130vnk95ie0ho","_id":"ck01sz2r000bz30vnrqhae7h5"},{"post_id":"ck01sz2ly001q30vnrl6ex3zv","tag_id":"ck01sz2oy006z30vnaao30rbz","_id":"ck01sz2r000c030vnnen5t5yn"},{"post_id":"ck01sz2ly001r30vn9i7d8n71","tag_id":"ck01sz2oy007030vnpka5x62u","_id":"ck01sz2r100c230vnee99nede"},{"post_id":"ck01sz2ly001s30vn2891zwc8","tag_id":"ck01sz2o0003q30vn1p5yytz7","_id":"ck01sz2r100c330vnu693akaq"},{"post_id":"ck01sz2lz001t30vnjftdpde0","tag_id":"ck01sz2ns003730vnceo1z1t8","_id":"ck01sz2r100c530vnt608f98v"},{"post_id":"ck01sz2lz001u30vn37ykchbm","tag_id":"ck01sz2oy007330vnf31j6582","_id":"ck01sz2r100c630vnmsva2o43"},{"post_id":"ck01sz2m0001v30vnv206chjo","tag_id":"ck01sz2oz007430vnqudt3q2x","_id":"ck01sz2r100c730vnc0qov866"},{"post_id":"ck01sz2m0001w30vnd204ncg3","tag_id":"ck01sz2oz007530vntob4mdt7","_id":"ck01sz2r100c830vnzf4aopc2"},{"post_id":"ck01sz2m1001x30vnpcll4toy","tag_id":"ck01sz2oc004y30vnayn0y9l6","_id":"ck01sz2r100c930vni1y73xuk"},{"post_id":"ck01sz2m1001y30vn9v2rcdne","tag_id":"ck01sz2p0007730vnk2g72z6d","_id":"ck01sz2r100ca30vnims6jndc"},{"post_id":"ck01sz2m2001z30vnz66b41pd","tag_id":"ck01sz2p0007830vnwr0wce1o","_id":"ck01sz2r100cb30vnfrjwdx5n"},{"post_id":"ck01sz2m2002030vnzg9or5sq","tag_id":"ck01sz2p0007930vn7gqzaup6","_id":"ck01sz2r200cc30vnqj77fmna"},{"post_id":"ck01sz2m4002430vnudfv8kd3","tag_id":"ck01sz2p0007a30vn03vjajbk","_id":"ck01sz2r200cd30vn0vwhtdpx"},{"post_id":"ck01sz2m4002530vnw6qugw9t","tag_id":"ck01sz2p0007b30vnydu3a2zp","_id":"ck01sz2r200ce30vno0or697s"},{"post_id":"ck01sz2m5002630vn8nbw8uca","tag_id":"ck01sz2p1007c30vn7xrx3je3","_id":"ck01sz2r200cf30vnt94bohjm"},{"post_id":"ck01sz2m5002730vnv91lzx9d","tag_id":"ck01sz2p1007d30vnmil4ao0n","_id":"ck01sz2r200cg30vnw2b03p3d"},{"post_id":"ck01sz2m5002830vnp76edsxa","tag_id":"ck01sz2o9004n30vn286bwadn","_id":"ck01sz2r200ch30vncbzs0xyk"},{"post_id":"ck01sz2m6002930vnnfdzon0v","tag_id":"ck01sz2p2007f30vnyfhokfft","_id":"ck01sz2r200ci30vnv1o3q1y0"},{"post_id":"ck01sz2ng002c30vnttvpv7jk","tag_id":"ck01sz2qc007i30vnvku9lwy9","_id":"ck01sz2rn00cj30vnljctk97k"},{"post_id":"ck01sz2nh002e30vnx0ch7tbl","tag_id":"ck01sz2qd007p30vn3txgwysg","_id":"ck01sz2rn00cl30vnu7zqa7fk"},{"post_id":"ck01sz2nh002e30vnx0ch7tbl","tag_id":"ck01sz2qe007v30vn7cckrnhn","_id":"ck01sz2ro00cn30vnu91clmox"}],"Tag":[{"name":"思维","_id":"ck01sz2nf002b30vnu1jsxses"},{"name":"贪心","_id":"ck01sz2nj002j30vni8v7j9v7"},{"name":"前缀和","_id":"ck01sz2nm002p30vn77jm1bes"},{"name":"后缀和","_id":"ck01sz2nn002r30vnzi6zjpyk"},{"name":"Covariance","_id":"ck01sz2nn002t30vnqamt07yg"},{"name":"C语言","_id":"ck01sz2no002v30vnn23j53ml"},{"name":"图论","_id":"ck01sz2np002z30vn9z2zqg4l"},{"name":"DFS","_id":"ck01sz2nq003130vnk95ie0ho"},{"name":"HDU","_id":"ck01sz2nq003330vnf62fdbb5"},{"name":"线切割平面","_id":"ck01sz2nr003530vna3vihx2x"},{"name":"math","_id":"ck01sz2ns003730vnceo1z1t8"},{"name":"状态压缩DP","_id":"ck01sz2nv003d30vnb09d9ei0"},{"name":"BFS","_id":"ck01sz2nw003f30vn884onnaf"},{"name":"CMake","_id":"ck01sz2nx003i30vndxxfc631"},{"name":"总结","_id":"ck01sz2o0003q30vn1p5yytz7"},{"name":"Liner algebra","_id":"ck01sz2o1003s30vn9or2awyd"},{"name":"Lover","_id":"ck01sz2o2003w30vn3zih4fg6"},{"name":"逆向思维","_id":"ck01sz2o2003y30vny4ksgr5a"},{"name":"DP","_id":"ck01sz2o3004030vna39837hp"},{"name":"01背包","_id":"ck01sz2o3004230vn3mregefm"},{"name":"PCA","_id":"ck01sz2o4004430vn37a7k4qg"},{"name":"POJ","_id":"ck01sz2o4004630vntigry9zh"},{"name":"迷宫问题","_id":"ck01sz2o6004b30vnmxw2k3sd"},{"name":"线段树","_id":"ck01sz2o7004f30vn1ra8hxog"},{"name":"Random","_id":"ck01sz2o7004h30vnesxfcynu"},{"name":"Game","_id":"ck01sz2o8004j30vn44wne83x"},{"name":"STL","_id":"ck01sz2o8004l30vn6srhlzt8"},{"name":"欧拉路","_id":"ck01sz2o9004n30vn286bwadn"},{"name":"拓扑排序","_id":"ck01sz2ob004t30vne04lj002"},{"name":"树","_id":"ck01sz2ob004v30vnaxesgrb5"},{"name":"二叉树","_id":"ck01sz2oc004y30vnayn0y9l6"},{"name":"全局思维","_id":"ck01sz2od005230vnnnky1qfq"},{"name":"暴力枚举","_id":"ck01sz2oe005430vn2wqld4c0"},{"name":"迭代加深","_id":"ck01sz2oe005630vno3lpl6io"},{"name":"全局思想","_id":"ck01sz2og005a30vnrbbgopqz"},{"name":"stack","_id":"ck01sz2oh005e30vnnn6xll5d"},{"name":"链表","_id":"ck01sz2ol005q30vnv0y37bvs"},{"name":"栈","_id":"ck01sz2om005s30vnmxlytz5u"},{"name":"IDA*","_id":"ck01sz2om005u30vnyzpckp9u"},{"name":"搜索","_id":"ck01sz2oo006030vnj4g5aulq"},{"name":"仿射变换","_id":"ck01sz2op006330vncanq2t5b"},{"name":"离散化","_id":"ck01sz2op006530vn94s2zz18"},{"name":"Stack","_id":"ck01sz2or006b30vnbxw330j8"},{"name":"四分树","_id":"ck01sz2os006f30vnyd8sokuo"},{"name":"Binary Tree","_id":"ck01sz2ou006n30vnsxezqoxg"},{"name":"mathjax","_id":"ck01sz2ov006r30vnf5ikpj17"},{"name":"hexo插入数学公式","_id":"ck01sz2ow006s30vnac2auxot"},{"name":"C++","_id":"ck01sz2ow006u30vn66wcsn0o"},{"name":"生活","_id":"ck01sz2ow006v30vn3n6t66gq"},{"name":"排列","_id":"ck01sz2ox006x30vnl9egzlpk"},{"name":"线段树区间更新","_id":"ck01sz2oy006z30vnaao30rbz"},{"name":"线段树单点更新","_id":"ck01sz2oy007030vnpka5x62u"},{"name":"字符串","_id":"ck01sz2oy007330vnf31j6582"},{"name":"vultr服务器搭建","_id":"ck01sz2oz007430vnqudt3q2x"},{"name":"Binary Search","_id":"ck01sz2oz007530vntob4mdt7"},{"name":"状态转移","_id":"ck01sz2p0007730vnk2g72z6d"},{"name":"Rasterization","_id":"ck01sz2p0007830vnwr0wce1o"},{"name":"rasterization","_id":"ck01sz2p0007930vn7gqzaup6"},{"name":"Hash","_id":"ck01sz2p0007a30vn03vjajbk"},{"name":"python","_id":"ck01sz2p0007b30vnydu3a2zp"},{"name":"迭代加深搜索","_id":"ck01sz2p1007c30vn7xrx3je3"},{"name":"Math","_id":"ck01sz2p1007d30vnmil4ao0n"},{"name":"Link Library","_id":"ck01sz2p2007f30vnyfhokfft"},{"name":"Kalman filter","_id":"ck01sz2qc007i30vnvku9lwy9"},{"name":"建图","_id":"ck01sz2qd007p30vn3txgwysg"},{"name":"双向BFS","_id":"ck01sz2qe007v30vn7cckrnhn"}]}}
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/user.jpg","path":"images/user.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/Picture1.png","path":"images/Picture1.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/user2.png","path":"images/user2.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1521962313000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1521962313000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1521962313000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1521962313000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1521962313000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1521962313000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1521962313000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1521962313000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1521962313000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1521962313000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1521962313000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1521962313000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1521962313000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1521962313000},{"_id":"source/_posts/My-little-angel.md","hash":"e5fa985361d5cd8bf5cfc2fbec58eca91b886bda","modified":1528604410163},{"_id":"source/_posts/hdu-2050.md","hash":"529814aff0cf565801c45afd83d65766c01b130a","modified":1528597588000},{"_id":"source/_posts/hdu-5092.md","hash":"51ba3808c7917621d95edbbd6090a5a1af11a383","modified":1528201686754},{"_id":"source/_posts/hexo-mathjax.md","hash":"cdbc3da1ed794bc59c5ed170375cb97fff8d8343","modified":1528596127148},{"_id":"themes/next/_config.yml","hash":"e40f053d848b115372686f56ab9db603eee45095","modified":1523250797000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1521962313000},{"_id":"source/_posts/hdu-4856-Tunnels.md","hash":"3ad6f0ad20869000edc2a2d81e5adc6771ab7a27","modified":1526455804000},{"_id":"source/_posts/quick-matrix.md","hash":"88f53e5ce01cf55a1cf2810e568d95b031b607b4","modified":1526265860000},{"_id":"source/_posts/new start point.md","hash":"ab4724d2edbd4bba9efc0d6861c4ca7e1dc069be","modified":1523242409741},{"_id":"source/_posts/vultr.md","hash":"17dcc97267809ca943d946d0a69878ba7dfba5ad","modified":1528596095792},{"_id":"source/_posts/segtree-template.md","hash":"f8eda1e38dec800b4445c6bdd3737730cc39092f","modified":1525764808665},{"_id":"source/_posts/poj-2481.md","hash":"ff0a88ce396a89c24ff6978d41d6248ea18bd8e2","modified":1526454965409},{"_id":"source/_posts/segtree-intval.md","hash":"a575c84f4b880887e76c2b60c675b38c3b3898b8","modified":1525765688000},{"_id":"source/commonweal/index.md","hash":"423894f3e9d10b9bbfae31c42cb31f5c3cec81a2","modified":1523179153090},{"_id":"source/about/index.md","hash":"3ebd04672d0a84fa7380f3ae3a7aea48f08c07cc","modified":1523175241342},{"_id":"source/categories/index.md","hash":"76f4447e0e8f274e0255fa038aa97656425eae07","modified":1523175315982},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1521962313000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1521962313000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1521962313000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1521962313000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1521962313000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1521962313000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1521962313000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1521962313000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1521962313000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1521962313000},{"_id":"source/sitemap/index.md","hash":"f18cfe801086a113dff7f6862d85c7e2d6727e46","modified":1523179132866},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1521962313000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1521962313000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1521962313000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1521962313000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1521962313000},{"_id":"source/schedule/index.md","hash":"73d7ca6fb2a4d82bc89a489befdb0b066599178b","modified":1523179037727},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1521962313000},{"_id":"source/tags/index.md","hash":"b23dc9c86fb565af015f51a741bf0c9f890a87fc","modified":1523121942983},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1521962313000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1521962313000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1521962313000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1521962313000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1521962313000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1521962313000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1521962313000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1521962313000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1521962313000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1521962313000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1521962313000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1521962313000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1521962313000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1521962313000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1521962313000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1521962313000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521962313000},{"_id":"source/_posts/My-little-angel/together.jpg","hash":"f5360d1553e4d0d50267d806c8326137be554199","modified":1528598640644},{"_id":"source/_posts/hdu-2050/res.gif","hash":"163a87523482ba25a73787e59a0b13ecfb736053","modified":1523247099713},{"_id":"source/_posts/vultr/p1.png","hash":"595bda0f3e72f314db02d09c378298daf0840657","modified":1523619807000},{"_id":"source/_posts/hdu-2050/line.jpg","hash":"0b614039e05df58510f6979466289f7ac7190b5f","modified":1523244954809},{"_id":"source/_posts/vultr/p2.png","hash":"c797e71775de0c707e10ec8f765a154b37f27197","modified":1523620056000},{"_id":"source/_posts/vultr/p3.png","hash":"67dbd2c65a2c47e6ae09f22051629da1a6c5fdd1","modified":1523620317000},{"_id":"source/_posts/vultr/p5.png","hash":"a7c6230253b7b12375ea294a6386473479cd7d26","modified":1523620767000},{"_id":"source/_posts/vultr/p7.png","hash":"da388ae09f2db520f71e2348bf8a4883adb2666a","modified":1523623834000},{"_id":"source/_posts/vultr/p8.png","hash":"2f5ce1e7aa48769570589a1a15948f1364753a67","modified":1523625511000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521962313000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521962313000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1521962313000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1521962313000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1521962313000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1521962313000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1521962313000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1521962313000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1521962313000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1521962313000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1521962313000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1521962313000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1521962313000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1521962313000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1521962313000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1521962313000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1521962313000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1521962313000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1521962313000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1521962313000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1521962313000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1521962313000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1521962313000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1521962313000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1521962313000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1521962313000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1521962313000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1521962313000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1521962313000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1521962313000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1521962313000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1521962313000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1521962313000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1521962313000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1521962313000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1521962313000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1521962313000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1521962313000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1521962313000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1521962313000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1521962313000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1521962313000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1521962313000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1521962313000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1521962313000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521962313000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1521962313000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1521962313000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1521962313000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1521962313000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521962313000},{"_id":"themes/next/source/images/user.jpg","hash":"16b0e60948516954e1f9834e2d593c1deb0ffec4","modified":1490872143020},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1521962313000},{"_id":"source/_posts/vultr/p4.png","hash":"2ee46cf520c7d0585db4245c9586829f5173e680","modified":1523620362000},{"_id":"source/_posts/vultr/p6.png","hash":"47f4048062363375bb49809ceb19a67b5c659bf3","modified":1523621592467},{"_id":"source/_posts/vultr/p9.png","hash":"7a099d33cc7ac17bc5e233121d135e46af0549b5","modified":1523625737000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521962313000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521962313000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521962313000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521962313000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521962313000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521962313000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521962313000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1521962313000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1521962313000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1521962313000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1521962313000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1521962313000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1521962313000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1521962313000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1521962313000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1521962313000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1521962313000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1521962313000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1521962313000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1521962313000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1521962313000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1521962313000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1521962313000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1521962313000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1521962313000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1521962313000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1521962313000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1521962313000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1521962313000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1521962313000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1521962313000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1521962313000},{"_id":"themes/next/source/images/Picture1.png","hash":"94067d9a4021d24612d7dad597c915d07d0056c0","modified":1523193407424},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1521962313000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1521962313000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1521962313000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1521962313000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1521962313000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1521962313000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1521962313000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1521962313000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1521962313000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1521962313000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1521962313000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1521962313000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1521962313000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1521962313000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1521962313000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1521962313000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1521962313000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1521962313000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1521962313000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1521962313000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1521962313000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1521962313000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1521962313000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1521962313000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1521962313000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1521962313000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1521962313000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1521962313000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1521962313000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1521962313000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1521962313000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1521962313000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1521962313000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1521962313000},{"_id":"themes/next/source/images/user2.png","hash":"5a825078a61886e5bf8f40244b0c0d3acef801ee","modified":1523193518284},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1521962313000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1521962313000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1521962313000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1521962313000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1521962313000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1521962313000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1521962313000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1521962313000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1521962313000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1521962313000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1521962313000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1521962313000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1521962313000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1521962313000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1521962313000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1521962313000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1521962313000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1521962313000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1521962313000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1521962313000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1521962313000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521962313000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1521962313000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1521962313000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1521962313000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1521962313000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1521962313000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1521962313000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1521962313000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1521962313000},{"_id":"source/_posts/My-little-angel/qxy.jpg","hash":"29c0b85aa8bd9e32c8b239b78ae5f571e8375bd9","modified":1528599176588},{"_id":"public/commonweal/index.html","hash":"6a23a7125eb8beed55301e08e303f720c1038b24","modified":1528598867384},{"_id":"public/about/index.html","hash":"fe5ef5b8e3822e01fa3e85a6bbdce7ce75afde54","modified":1528598867385},{"_id":"public/categories/index.html","hash":"ab7ae82b917cff77f7f0321f3dd59510daf4c5ff","modified":1528598867386},{"_id":"public/sitemap/index.html","hash":"ff246af7b5e33031b36861eecb1666d483520fe3","modified":1528598867387},{"_id":"public/schedule/index.html","hash":"d4007a83309bc3d8cd6e7b9db8e72ef673ef2abb","modified":1528598867387},{"_id":"public/tags/index.html","hash":"e16793c78ec6cab624d767b05105e43d207d393a","modified":1528598867387},{"_id":"public/archives/2018/05/index.html","hash":"018c78a3233e61b88e6e9953c402feee30a44636","modified":1528598867387},{"_id":"public/categories/Diary/index.html","hash":"9170feb9c136f38ecbb5005c735d5e2d185267ab","modified":1528598867387},{"_id":"public/tags/hdu/index.html","hash":"2533f1d2e90ec331cd03a5b35b6cfdb9c134a7c3","modified":1528598867387},{"_id":"public/tags/线切割平面/index.html","hash":"0bd3276ebc325a5e41d8e9ce40d98964c161cd70","modified":1528598867387},{"_id":"public/tags/math/index.html","hash":"0a79bbb8e93391628ddf7c1f7b6103f79a70b192","modified":1528598867388},{"_id":"public/tags/思维/index.html","hash":"3c3044903c257c36c77448c987c51f377e031d99","modified":1528598867388},{"_id":"public/tags/mathjax/index.html","hash":"1d1d3899aea7b804ccca02cf431ee4f4a66d4f15","modified":1528598867388},{"_id":"public/tags/hexo插入数学公式/index.html","hash":"f60eb0725c8fb29da23c5486810ff993b8238d4c","modified":1528598867388},{"_id":"public/tags/总结/index.html","hash":"d3f3bcdc1c75f774e74abe2586e6aae9a5ae7087","modified":1528598867388},{"_id":"public/tags/状态压缩DP/index.html","hash":"9de073f759b26a711ec67c557f42193c52ed17c6","modified":1528598867388},{"_id":"public/tags/BFS/index.html","hash":"e2bdad5263c40333789511cd7d99290768c5d449","modified":1528598867388},{"_id":"public/tags/生活/index.html","hash":"ff3d59ff1552021e32b383babe15bf5314f5e0f1","modified":1528598867388},{"_id":"public/tags/vultr服务器搭建/index.html","hash":"02f988e82000b974527e0a57df4ccf85049c0054","modified":1528598867388},{"_id":"public/tags/线段树单点更新/index.html","hash":"a19447e1d456655843fe308c38aef48e7b92fc5e","modified":1528598867388},{"_id":"public/tags/poj/index.html","hash":"17566f4a467934eaec328ca9ddfd8701e14ecfaa","modified":1528598867388},{"_id":"public/tags/线段树/index.html","hash":"f7cb0dfa57487b1a20c20b22bc81c663fce19e69","modified":1528598867388},{"_id":"public/tags/线段树区间更新/index.html","hash":"4f577bbd6b65ef40ae3f25287da7562e90c3e7f7","modified":1528598867388},{"_id":"public/2018/05/16/hdu-4856-Tunnels/index.html","hash":"8b8ea5eab24d03a0a954aaf5d97c035ee69c723c","modified":1528598867389},{"_id":"public/2018/05/14/quick-matrix/index.html","hash":"38d3f7fa51c2a6555fe689a20b1db9adf8ce3282","modified":1528598867389},{"_id":"public/2018/05/08/segtree-intval/index.html","hash":"5a0ca7eafc9d1b245359b8981d60df8a401169c1","modified":1528598867389},{"_id":"public/2018/05/06/segtree-template/index.html","hash":"25b7ac66e70266aacfc2033d3e8273d90060f46c","modified":1528598867389},{"_id":"public/2018/04/22/poj-2481/index.html","hash":"488c57bedca8477988acc8b41672d1118889d673","modified":1528598867389},{"_id":"public/2018/04/13/vultr/index.html","hash":"ea53f378c9bb19dcc9dc09eee589b8928b86c6e2","modified":1528598867389},{"_id":"public/2018/04/09/hexo-mathjax/index.html","hash":"a03e78004f0139b4679b0b468b698140c5f8220a","modified":1528598867389},{"_id":"public/2018/04/09/hdu-2050/index.html","hash":"1141c70b59fba82d9f52e39d9791aa7ed3eabc55","modified":1528598867389},{"_id":"public/2018/04/08/new start point/index.html","hash":"6bb99e31e73baa553aa12dd410b9e8a77fa76a49","modified":1528598867389},{"_id":"public/archives/index.html","hash":"40be1af670915f53a6757caf553c0a451fbd24dc","modified":1528598867389},{"_id":"public/archives/2018/index.html","hash":"5a796466e06ae44157f2823dcf5a2c303bc0d027","modified":1528598867389},{"_id":"public/archives/2018/04/index.html","hash":"b27514b521bace5e02d9bf670f48b05d2663a994","modified":1528598867389},{"_id":"public/categories/ACM/index.html","hash":"20c7cfcd44cbe040ccd47f4f1603127c9ad17300","modified":1528598867389},{"_id":"public/index.html","hash":"fef647bad2a9daa07f150ea2d643334fbcfdf09c","modified":1528604468077},{"_id":"public/2018/06/05/hdu-5092/index.html","hash":"26c5fd1252eb4e902dc8ea09dbe7a922f20fad96","modified":1528598867397},{"_id":"public/archives/page/2/index.html","hash":"3912a3884b22872891711af5e7d848fa859164f8","modified":1528598867397},{"_id":"public/archives/2018/page/2/index.html","hash":"5e01d853c604d663d766d395804e1e62cbba3043","modified":1528598867397},{"_id":"public/archives/2018/06/index.html","hash":"1e7c57e2a8addae3175c425aaa9b325d5cca2c1c","modified":1528598867397},{"_id":"public/categories/技术杂文/index.html","hash":"71499e2452303883d01a8ab781ca50aa531428d6","modified":1528598867398},{"_id":"public/tags/Lover/index.html","hash":"b02beb0ba98330e743b1265b1a11832fcb6ce6a0","modified":1528598867398},{"_id":"public/2018/06/10/My-little-angel/index.html","hash":"be314594f79da28cff5129b4e5933b3b577cbdd8","modified":1528604468077},{"_id":"public/page/2/index.html","hash":"9eb17f1de0f70a54388d4cb7ce95056d600f929b","modified":1528598867398},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1528598867409},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528598867409},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528598867409},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528598867409},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528598867409},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528598867409},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528598867409},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528598867409},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528598867409},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528598867409},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528598867410},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528598867410},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1528598867410},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528598867410},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528598867410},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528598867410},{"_id":"public/images/user.jpg","hash":"16b0e60948516954e1f9834e2d593c1deb0ffec4","modified":1528598867410},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528598867410},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528598867410},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1528598867410},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1528598867410},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528598867410},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528598867410},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528598867410},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528598867410},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528598867411},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528598867411},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528598867411},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1528598867411},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1528598867411},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1528598867411},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1528598867411},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528598867411},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1528598867411},{"_id":"public/2018/04/09/hdu-2050/line.jpg","hash":"0b614039e05df58510f6979466289f7ac7190b5f","modified":1528598867411},{"_id":"public/2018/04/09/hdu-2050/res.gif","hash":"163a87523482ba25a73787e59a0b13ecfb736053","modified":1528598867411},{"_id":"public/2018/04/13/vultr/p2.png","hash":"c797e71775de0c707e10ec8f765a154b37f27197","modified":1528598867411},{"_id":"public/2018/04/13/vultr/p1.png","hash":"595bda0f3e72f314db02d09c378298daf0840657","modified":1528598867411},{"_id":"public/2018/04/13/vultr/p3.png","hash":"67dbd2c65a2c47e6ae09f22051629da1a6c5fdd1","modified":1528598867411},{"_id":"public/2018/04/13/vultr/p5.png","hash":"a7c6230253b7b12375ea294a6386473479cd7d26","modified":1528598867412},{"_id":"public/2018/04/13/vultr/p7.png","hash":"da388ae09f2db520f71e2348bf8a4883adb2666a","modified":1528598867412},{"_id":"public/2018/04/13/vultr/p8.png","hash":"2f5ce1e7aa48769570589a1a15948f1364753a67","modified":1528598867412},{"_id":"public/2018/06/10/My-little-angel/together.jpg","hash":"f5360d1553e4d0d50267d806c8326137be554199","modified":1528598867412},{"_id":"public/images/user2.png","hash":"5a825078a61886e5bf8f40244b0c0d3acef801ee","modified":1528598868282},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528598868285},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528598868286},{"_id":"public/2018/04/13/vultr/p4.png","hash":"2ee46cf520c7d0585db4245c9586829f5173e680","modified":1528598868286},{"_id":"public/2018/04/13/vultr/p6.png","hash":"47f4048062363375bb49809ceb19a67b5c659bf3","modified":1528598868286},{"_id":"public/2018/04/13/vultr/p9.png","hash":"7a099d33cc7ac17bc5e233121d135e46af0549b5","modified":1528598868286},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1528598868296},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528598868297},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1528598868297},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1528598868297},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1528598868297},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1528598868297},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1528598868297},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1528598868298},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1528598868298},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528598868298},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1528598868298},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1528598868298},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1528598868298},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1528598868298},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1528598868298},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1528598868298},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1528598868298},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528598868298},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528598868298},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528598868298},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528598868298},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528598868298},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528598868298},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528598868299},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528598868299},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528598868299},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528598868299},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528598868299},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528598868299},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1528598868299},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1528598868299},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1528598868299},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1528598868299},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528598868299},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1528598868299},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1528598868299},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1528598868299},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528598868299},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1528598868300},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1528598868300},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1528598868300},{"_id":"public/css/main.css","hash":"4e59a00fe6bb102eb9a6c1d1b047de20c8b310c2","modified":1528598868300},{"_id":"public/images/Picture1.png","hash":"94067d9a4021d24612d7dad597c915d07d0056c0","modified":1528598868300},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1528598868300},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528598868300},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1528598868301},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1528598868304},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1528598868305},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1528598868305},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1528598868305},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528598868305},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528598868305},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528598868305},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528598868305},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1528598868312},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1528598868312},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1528598868316},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1528598868316},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1528598868324},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1528598868324},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528598868325},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1528598868325},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528598868325},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1528598868325},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1528598868325},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1528598868325},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1528598868327},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1528598868327},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1528598868327},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1528598868328},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1528598868332},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528598868333},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528598868340},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1528598868346},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1528598868350},{"_id":"public/2018/06/10/My-little-angel/qxy.jpg","hash":"29c0b85aa8bd9e32c8b239b78ae5f571e8375bd9","modified":1528604468080}],"Category":[{"name":"Diary","_id":"cji88ao5x0004gwoufes8989v"},{"name":"ACM","_id":"cji88ao6a000bgwoumnjnadq7"},{"name":"技术杂文","_id":"cji88ao6i000jgwouoetx6nrl"}],"Data":[],"Page":[{"title":"commonweal","date":"2018-04-08T09:18:33.000Z","type":"commonweal","_content":"","source":"commonweal/index.md","raw":"---\ntitle: commonweal\ndate: 2018-04-08 17:18:33\ntype: \"commonweal\"\n---\n","updated":"2018-04-08T09:19:13.090Z","path":"commonweal/index.html","comments":1,"layout":"page","_id":"cji88ao5s0001gwouxiw8c6ui","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-04-08T08:12:48.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-04-08 16:12:48\ntype: \"about\"\n---\n","updated":"2018-04-08T08:14:01.342Z","path":"about/index.html","comments":1,"layout":"page","_id":"cji88ao5v0003gwou57bd118y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-04-08T08:14:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-04-08 16:14:39\ntype: \"categories\"\n---\n","updated":"2018-04-08T08:15:15.982Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cji88ao610007gwouuswjq25j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2018-04-08T09:18:19.000Z","type":"sitemap","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2018-04-08 17:18:19\ntype: \"sitemap\"\n---\n","updated":"2018-04-08T09:18:52.866Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"cji88ao640009gwoub8rg5g7a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2018-04-08T09:15:03.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2018-04-08 17:15:03\ntype: \"schedule\"\n---\n","updated":"2018-04-08T09:17:17.727Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cji88ao6a000dgwouaa0nejay","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-04-07T17:23:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-04-08 01:23:59\ntype: \"tags\"\n---\n","updated":"2018-04-07T17:25:42.983Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cji88ao6f000ggwou4fs56pe8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"My little angel","date":"2018-06-10T01:57:06.000Z","_content":"## 重庆之旅\n和邱小笨蛋在一起四个多月了，但是快一年没见了，她在重庆，我在北京，她读高中，我读大学。感觉有些不可思议，能够遇到，能够在一起。感谢女票的勇敢，我是非常怂的，，，。\n在重庆度过了非常非常开心的几天，刚到的那天晚上给女票发消息说到了之后激动的睡不着，第二天早上终于见到了穿着裙子来找我的女票票～(｡･ω･｡)ﾉ♡\n![邱小雁](/qxy.jpg)\n女票比印象中要瘦了，可能是高中太累了吧，有些心疼，让她多长些肉肉她还不愿意Ծ‸ Ծ 。之后两人一起牵爪爪去逛商场玩了和女票期待已久的密室逃脱，可惜太菜了，小哥哥可能是可怜我们哈哈让我们看了最后的一关。\n一直想去女票学校看看的心愿也达成了，想感受一下女票平时给我发的照片里的地方、花花到底是什么样子的。去了女票平时自习的自习室，稍微有点冷，女票下次去的时候多穿一点啊。竟然还遇到了抓早恋的老师＝＝（害怕.jpg），女票好机智，话说我都大三了为什么还怕这种老师。。\n到的第三天早上和女票在一起吃的早餐，还是要说一下女票吃的太少了，多长肉肉啊亲爱的，不用担心，男票抱得动的(•̀⌄•́)。吃了早餐一起去女票住的小区里打了篮球，之前说要教女票投篮可是自己投了十几个才中了一个，，呜呜呜T^T树立了一个篮球小菜鸡的形象。中午一起去吃了自助，女票怕我吃不了太辣点了清汤的小火锅，委屈重庆小妹纸了。下午一起做了情侣必做的事情，看电影！而且是小哆啦，抱着女票看电影的感觉好幸福。\n\n","source":"_posts/My-little-angel.md","raw":"---\ntitle: My little angel\ndate: 2018-06-10 09:57:06\ncategories:\n- Diary\ntags:\n- Lover\n---\n## 重庆之旅\n和邱小笨蛋在一起四个多月了，但是快一年没见了，她在重庆，我在北京，她读高中，我读大学。感觉有些不可思议，能够遇到，能够在一起。感谢女票的勇敢，我是非常怂的，，，。\n在重庆度过了非常非常开心的几天，刚到的那天晚上给女票发消息说到了之后激动的睡不着，第二天早上终于见到了穿着裙子来找我的女票票～(｡･ω･｡)ﾉ♡\n![邱小雁](/qxy.jpg)\n女票比印象中要瘦了，可能是高中太累了吧，有些心疼，让她多长些肉肉她还不愿意Ծ‸ Ծ 。之后两人一起牵爪爪去逛商场玩了和女票期待已久的密室逃脱，可惜太菜了，小哥哥可能是可怜我们哈哈让我们看了最后的一关。\n一直想去女票学校看看的心愿也达成了，想感受一下女票平时给我发的照片里的地方、花花到底是什么样子的。去了女票平时自习的自习室，稍微有点冷，女票下次去的时候多穿一点啊。竟然还遇到了抓早恋的老师＝＝（害怕.jpg），女票好机智，话说我都大三了为什么还怕这种老师。。\n到的第三天早上和女票在一起吃的早餐，还是要说一下女票吃的太少了，多长肉肉啊亲爱的，不用担心，男票抱得动的(•̀⌄•́)。吃了早餐一起去女票住的小区里打了篮球，之前说要教女票投篮可是自己投了十几个才中了一个，，呜呜呜T^T树立了一个篮球小菜鸡的形象。中午一起去吃了自助，女票怕我吃不了太辣点了清汤的小火锅，委屈重庆小妹纸了。下午一起做了情侣必做的事情，看电影！而且是小哆啦，抱着女票看电影的感觉好幸福。\n\n","slug":"My-little-angel","published":1,"updated":"2018-06-10T04:20:10.163Z","_id":"cji88ao5l0000gwoupg32ri82","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"重庆之旅\"><a href=\"#重庆之旅\" class=\"headerlink\" title=\"重庆之旅\"></a>重庆之旅</h2><p>和邱小笨蛋在一起四个多月了，但是快一年没见了，她在重庆，我在北京，她读高中，我读大学。感觉有些不可思议，能够遇到，能够在一起。感谢女票的勇敢，我是非常怂的，，，。<br>在重庆度过了非常非常开心的几天，刚到的那天晚上给女票发消息说到了之后激动的睡不着，第二天早上终于见到了穿着裙子来找我的女票票～(｡･ω･｡)ﾉ♡<br><img src=\"/2018/06/10/My-little-angel/qxy.jpg\" alt=\"邱小雁\"><br>女票比印象中要瘦了，可能是高中太累了吧，有些心疼，让她多长些肉肉她还不愿意Ծ‸ Ծ 。之后两人一起牵爪爪去逛商场玩了和女票期待已久的密室逃脱，可惜太菜了，小哥哥可能是可怜我们哈哈让我们看了最后的一关。<br>一直想去女票学校看看的心愿也达成了，想感受一下女票平时给我发的照片里的地方、花花到底是什么样子的。去了女票平时自习的自习室，稍微有点冷，女票下次去的时候多穿一点啊。竟然还遇到了抓早恋的老师＝＝（害怕.jpg），女票好机智，话说我都大三了为什么还怕这种老师。。<br>到的第三天早上和女票在一起吃的早餐，还是要说一下女票吃的太少了，多长肉肉啊亲爱的，不用担心，男票抱得动的(•̀⌄•́)。吃了早餐一起去女票住的小区里打了篮球，之前说要教女票投篮可是自己投了十几个才中了一个，，呜呜呜T^T树立了一个篮球小菜鸡的形象。中午一起去吃了自助，女票怕我吃不了太辣点了清汤的小火锅，委屈重庆小妹纸了。下午一起做了情侣必做的事情，看电影！而且是小哆啦，抱着女票看电影的感觉好幸福。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重庆之旅\"><a href=\"#重庆之旅\" class=\"headerlink\" title=\"重庆之旅\"></a>重庆之旅</h2><p>和邱小笨蛋在一起四个多月了，但是快一年没见了，她在重庆，我在北京，她读高中，我读大学。感觉有些不可思议，能够遇到，能够在一起。感谢女票的勇敢，我是非常怂的，，，。<br>在重庆度过了非常非常开心的几天，刚到的那天晚上给女票发消息说到了之后激动的睡不着，第二天早上终于见到了穿着裙子来找我的女票票～(｡･ω･｡)ﾉ♡<br><img src=\"/2018/06/10/My-little-angel/qxy.jpg\" alt=\"邱小雁\"><br>女票比印象中要瘦了，可能是高中太累了吧，有些心疼，让她多长些肉肉她还不愿意Ծ‸ Ծ 。之后两人一起牵爪爪去逛商场玩了和女票期待已久的密室逃脱，可惜太菜了，小哥哥可能是可怜我们哈哈让我们看了最后的一关。<br>一直想去女票学校看看的心愿也达成了，想感受一下女票平时给我发的照片里的地方、花花到底是什么样子的。去了女票平时自习的自习室，稍微有点冷，女票下次去的时候多穿一点啊。竟然还遇到了抓早恋的老师＝＝（害怕.jpg），女票好机智，话说我都大三了为什么还怕这种老师。。<br>到的第三天早上和女票在一起吃的早餐，还是要说一下女票吃的太少了，多长肉肉啊亲爱的，不用担心，男票抱得动的(•̀⌄•́)。吃了早餐一起去女票住的小区里打了篮球，之前说要教女票投篮可是自己投了十几个才中了一个，，呜呜呜T^T树立了一个篮球小菜鸡的形象。中午一起去吃了自助，女票怕我吃不了太辣点了清汤的小火锅，委屈重庆小妹纸了。下午一起做了情侣必做的事情，看电影！而且是小哆啦，抱着女票看电影的感觉好幸福。</p>\n"},{"title":"hdu-2050-线切割平面问题-思维+简单dp","date":"2018-04-09T02:42:54.000Z","_content":"和队友一块做这道题，队友们几乎秒杀，而自己想了很久也没有推导出一个清晰的规律...看了[vinacky的线切割平面问题](https://blog.csdn.net/vinacky/article/details/8958326)这篇博客后才豁然开朗,个人感觉一道很好的思维题。\n题目描述就是求n条折线可以分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成七部分。\n![example](/line.jpg)\n\n## 链接\n[hdu-2050](http://acm.hdu.edu.cn/showproblem.php?pid=2050)\n## 题解\n### 直线切割平面\n首先考虑向平面添加直线(简化思维)后的平面分割情况：\n(下面假设新添加的直线与已有直线均相交)\n当平面上没有直线时，有一个平面；\n有１条直线时，没有节点，多出１部分，共２个平面；\n有２条直线时，多了１个节点，多出２部分，共４个平面；\n有３条直线时，多了２个节点，多出３部分，共７个平面；\n...\n至此我们便可以直观的思考一下是什么导致了平面的分割，当添加第i条直线时，因为我们总可以使它和前i-1条直线都相交，所以共有i-1个交点，也即第i条直线被分割成了i段，对每一段来说，它都将自己所在的平面重新分割为两部分。所以添加了第i条直线后，最多可以重新多分割出i个平面。\n所以原始的１个平面,\n添加１条直线后平面数为1+1;\n添加２条直线后平面数为1+1+2;\n添加３条直线后平面数为1+1+2+3；\n...\n得到添加n条直线后的平面数公式：$res = 1 + 1 + 2 + 3 + ... + n = \\frac{n(n+1)}{2} + 1$\n### V型折线切割平面\nV型折线切割平面可以看做同时添加了两条相交直线，但是稍有不同的是，这两条直线的交点有一侧平面合并了,因此而产生的影响是减少了两个平面。\n\n我们仍然可以保证添加的折线与其他折线均有交点，所以添加第i条V型折线时，增加的平面数为：$2\\*i - 1 + 2\\*i - 2$\n得到添加n条折线后的平面数公式：$$res = 1 + (1 + 2) + (3 + 4) + ... + (2n - 1 + 2n) = \\frac{2n(2n + 1)}{2} + 1 - 2n$$\n于是可以公式直接求解，也可以dp求解\n## 代码\n下面给出dp求解代码\n``` C++\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n\nusing namespace std;\nconst int maxn = 1e4 + 7;\nint n;\nlong long dp[maxn] = {1, 2, 7};\n\nint main(){\n    int c;\n    scanf(\"%d\", &c);\n    while(c--){\n    scanf(\"%d\", &n);\n        for(int i = 3; i <= n; i++){\n            dp[i] = dp[i - 1] + ２\\*i - 1 + 2\\*i - 2;\n        }\n        printf(\"%lld\\n\", dp[n]);\n        \n    }\n    return 0;\n\n}\n```","source":"_posts/hdu-2050.md","raw":"---\ntitle: hdu-2050-线切割平面问题-思维+简单dp\ndate: 2018-04-09 10:42:54\ncategories:\n- ACM\ntags:\n- hdu\n- 线切割平面\n- math\n- 思维\n---\n和队友一块做这道题，队友们几乎秒杀，而自己想了很久也没有推导出一个清晰的规律...看了[vinacky的线切割平面问题](https://blog.csdn.net/vinacky/article/details/8958326)这篇博客后才豁然开朗,个人感觉一道很好的思维题。\n题目描述就是求n条折线可以分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成七部分。\n![example](/line.jpg)\n\n## 链接\n[hdu-2050](http://acm.hdu.edu.cn/showproblem.php?pid=2050)\n## 题解\n### 直线切割平面\n首先考虑向平面添加直线(简化思维)后的平面分割情况：\n(下面假设新添加的直线与已有直线均相交)\n当平面上没有直线时，有一个平面；\n有１条直线时，没有节点，多出１部分，共２个平面；\n有２条直线时，多了１个节点，多出２部分，共４个平面；\n有３条直线时，多了２个节点，多出３部分，共７个平面；\n...\n至此我们便可以直观的思考一下是什么导致了平面的分割，当添加第i条直线时，因为我们总可以使它和前i-1条直线都相交，所以共有i-1个交点，也即第i条直线被分割成了i段，对每一段来说，它都将自己所在的平面重新分割为两部分。所以添加了第i条直线后，最多可以重新多分割出i个平面。\n所以原始的１个平面,\n添加１条直线后平面数为1+1;\n添加２条直线后平面数为1+1+2;\n添加３条直线后平面数为1+1+2+3；\n...\n得到添加n条直线后的平面数公式：$res = 1 + 1 + 2 + 3 + ... + n = \\frac{n(n+1)}{2} + 1$\n### V型折线切割平面\nV型折线切割平面可以看做同时添加了两条相交直线，但是稍有不同的是，这两条直线的交点有一侧平面合并了,因此而产生的影响是减少了两个平面。\n\n我们仍然可以保证添加的折线与其他折线均有交点，所以添加第i条V型折线时，增加的平面数为：$2\\*i - 1 + 2\\*i - 2$\n得到添加n条折线后的平面数公式：$$res = 1 + (1 + 2) + (3 + 4) + ... + (2n - 1 + 2n) = \\frac{2n(2n + 1)}{2} + 1 - 2n$$\n于是可以公式直接求解，也可以dp求解\n## 代码\n下面给出dp求解代码\n``` C++\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n\nusing namespace std;\nconst int maxn = 1e4 + 7;\nint n;\nlong long dp[maxn] = {1, 2, 7};\n\nint main(){\n    int c;\n    scanf(\"%d\", &c);\n    while(c--){\n    scanf(\"%d\", &n);\n        for(int i = 3; i <= n; i++){\n            dp[i] = dp[i - 1] + ２\\*i - 1 + 2\\*i - 2;\n        }\n        printf(\"%lld\\n\", dp[n]);\n        \n    }\n    return 0;\n\n}\n```","slug":"hdu-2050","published":1,"updated":"2018-06-10T02:26:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao5t0002gwoumzj81cmq","content":"<p>和队友一块做这道题，队友们几乎秒杀，而自己想了很久也没有推导出一个清晰的规律…看了<a href=\"https://blog.csdn.net/vinacky/article/details/8958326\" target=\"_blank\" rel=\"noopener\">vinacky的线切割平面问题</a>这篇博客后才豁然开朗,个人感觉一道很好的思维题。<br>题目描述就是求n条折线可以分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成七部分。<br><img src=\"/2018/04/09/hdu-2050/line.jpg\" alt=\"example\"></p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2050\" target=\"_blank\" rel=\"noopener\">hdu-2050</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"直线切割平面\"><a href=\"#直线切割平面\" class=\"headerlink\" title=\"直线切割平面\"></a>直线切割平面</h3><p>首先考虑向平面添加直线(简化思维)后的平面分割情况：<br>(下面假设新添加的直线与已有直线均相交)<br>当平面上没有直线时，有一个平面；<br>有１条直线时，没有节点，多出１部分，共２个平面；<br>有２条直线时，多了１个节点，多出２部分，共４个平面；<br>有３条直线时，多了２个节点，多出３部分，共７个平面；<br>…<br>至此我们便可以直观的思考一下是什么导致了平面的分割，当添加第i条直线时，因为我们总可以使它和前i-1条直线都相交，所以共有i-1个交点，也即第i条直线被分割成了i段，对每一段来说，它都将自己所在的平面重新分割为两部分。所以添加了第i条直线后，最多可以重新多分割出i个平面。<br>所以原始的１个平面,<br>添加１条直线后平面数为1+1;<br>添加２条直线后平面数为1+1+2;<br>添加３条直线后平面数为1+1+2+3；<br>…<br>得到添加n条直线后的平面数公式：$res = 1 + 1 + 2 + 3 + … + n = \\frac{n(n+1)}{2} + 1$</p>\n<h3 id=\"V型折线切割平面\"><a href=\"#V型折线切割平面\" class=\"headerlink\" title=\"V型折线切割平面\"></a>V型折线切割平面</h3><p>V型折线切割平面可以看做同时添加了两条相交直线，但是稍有不同的是，这两条直线的交点有一侧平面合并了,因此而产生的影响是减少了两个平面。</p>\n<p>我们仍然可以保证添加的折线与其他折线均有交点，所以添加第i条V型折线时，增加的平面数为：$2*i - 1 + 2*i - 2$<br>得到添加n条折线后的平面数公式：$$res = 1 + (1 + 2) + (3 + 4) + … + (2n - 1 + 2n) = \\frac{2n(2n + 1)}{2} + 1 - 2n$$<br>于是可以公式直接求解，也可以dp求解</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>下面给出dp求解代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[maxn] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c--)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + ２\\*i - <span class=\"number\">1</span> + <span class=\"number\">2</span>\\*i - <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, dp[n]);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>和队友一块做这道题，队友们几乎秒杀，而自己想了很久也没有推导出一个清晰的规律…看了<a href=\"https://blog.csdn.net/vinacky/article/details/8958326\" target=\"_blank\" rel=\"noopener\">vinacky的线切割平面问题</a>这篇博客后才豁然开朗,个人感觉一道很好的思维题。<br>题目描述就是求n条折线可以分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成七部分。<br><img src=\"/2018/04/09/hdu-2050/line.jpg\" alt=\"example\"></p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2050\" target=\"_blank\" rel=\"noopener\">hdu-2050</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"直线切割平面\"><a href=\"#直线切割平面\" class=\"headerlink\" title=\"直线切割平面\"></a>直线切割平面</h3><p>首先考虑向平面添加直线(简化思维)后的平面分割情况：<br>(下面假设新添加的直线与已有直线均相交)<br>当平面上没有直线时，有一个平面；<br>有１条直线时，没有节点，多出１部分，共２个平面；<br>有２条直线时，多了１个节点，多出２部分，共４个平面；<br>有３条直线时，多了２个节点，多出３部分，共７个平面；<br>…<br>至此我们便可以直观的思考一下是什么导致了平面的分割，当添加第i条直线时，因为我们总可以使它和前i-1条直线都相交，所以共有i-1个交点，也即第i条直线被分割成了i段，对每一段来说，它都将自己所在的平面重新分割为两部分。所以添加了第i条直线后，最多可以重新多分割出i个平面。<br>所以原始的１个平面,<br>添加１条直线后平面数为1+1;<br>添加２条直线后平面数为1+1+2;<br>添加３条直线后平面数为1+1+2+3；<br>…<br>得到添加n条直线后的平面数公式：$res = 1 + 1 + 2 + 3 + … + n = \\frac{n(n+1)}{2} + 1$</p>\n<h3 id=\"V型折线切割平面\"><a href=\"#V型折线切割平面\" class=\"headerlink\" title=\"V型折线切割平面\"></a>V型折线切割平面</h3><p>V型折线切割平面可以看做同时添加了两条相交直线，但是稍有不同的是，这两条直线的交点有一侧平面合并了,因此而产生的影响是减少了两个平面。</p>\n<p>我们仍然可以保证添加的折线与其他折线均有交点，所以添加第i条V型折线时，增加的平面数为：$2*i - 1 + 2*i - 2$<br>得到添加n条折线后的平面数公式：$$res = 1 + (1 + 2) + (3 + 4) + … + (2n - 1 + 2n) = \\frac{2n(2n + 1)}{2} + 1 - 2n$$<br>于是可以公式直接求解，也可以dp求解</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>下面给出dp求解代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[maxn] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c--)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + ２\\*i - <span class=\"number\">1</span> + <span class=\"number\">2</span>\\*i - <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, dp[n]);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"hdu-5092","date":"2018-06-05T12:28:06.000Z","_content":"","source":"_posts/hdu-5092.md","raw":"---\ntitle: hdu-5092\ndate: 2018-06-05 20:28:06\ncategories:\ntags:\n---\n","slug":"hdu-5092","published":1,"updated":"2018-06-05T12:28:06.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao600006gwoumhs1cej8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo中mathjax使用坑点","date":"2018-04-09T07:29:50.000Z","_content":"刚刚开始自己的博客之旅，开始真是无比艰难啊，各种被坑。过程中博客需要插入数学公式，下载了mathjax插件(安装之后就可以使用Latex定义的宏写数学公式了)，结果被坑惨(也不算是mathjax的锅，markdown自己也要背)，卡了2个小时，气愤(╯‵□′)╯︵┻━┻\n这里记录一下在mathjax里踩到的坑。\nmathjax的安装配置和使用大家可以参照[Steven's space的博文](http://stevenshi.me/2017/06/26/hexo-insert-formula/)，不再赘述了。\n\n## 坑点\nmarkdown本身的特殊符号和Latex中的符号会出现冲突。\n- 下划线\\_在markdown中是斜体，但是Latex中下划线是下标的意思，所以这里会冲突。\n- 双斜线\\\\\\\\在markdown中会被转义为\\，所以Latex的\\\\\\\\换行功能也会不正常。\n- 乘法符号\\*在markdown中是粗体＝＝(就是在这被卡了)，所以Latex在写两个数相乘时不能直接写\n```\n$a*b$\n```\n以上情况都会导致无法在mathjax中渲染出来。\n\n## 解决方法\n手动转义：\n比如需要在公式中写乘法*可以写成\n```\n$a\\*b$\n```\n下标写成\n```\n$a\\_1$\n```\n换行写成\n```\n$\\\\\\\\$\n```\n解决，散花。\n\n更多解决方法可以参考[hexo下mathjax的转义问题](http://shomy.top/2016/10/22/hexo-markdown-mathjax/)\n","source":"_posts/hexo-mathjax.md","raw":"---\ntitle: hexo中mathjax使用坑点\ndate: 2018-04-09 15:29:50\ncategories:\n- 技术杂文\ntags:\n- mathjax\n- hexo插入数学公式\n- 总结\n---\n刚刚开始自己的博客之旅，开始真是无比艰难啊，各种被坑。过程中博客需要插入数学公式，下载了mathjax插件(安装之后就可以使用Latex定义的宏写数学公式了)，结果被坑惨(也不算是mathjax的锅，markdown自己也要背)，卡了2个小时，气愤(╯‵□′)╯︵┻━┻\n这里记录一下在mathjax里踩到的坑。\nmathjax的安装配置和使用大家可以参照[Steven's space的博文](http://stevenshi.me/2017/06/26/hexo-insert-formula/)，不再赘述了。\n\n## 坑点\nmarkdown本身的特殊符号和Latex中的符号会出现冲突。\n- 下划线\\_在markdown中是斜体，但是Latex中下划线是下标的意思，所以这里会冲突。\n- 双斜线\\\\\\\\在markdown中会被转义为\\，所以Latex的\\\\\\\\换行功能也会不正常。\n- 乘法符号\\*在markdown中是粗体＝＝(就是在这被卡了)，所以Latex在写两个数相乘时不能直接写\n```\n$a*b$\n```\n以上情况都会导致无法在mathjax中渲染出来。\n\n## 解决方法\n手动转义：\n比如需要在公式中写乘法*可以写成\n```\n$a\\*b$\n```\n下标写成\n```\n$a\\_1$\n```\n换行写成\n```\n$\\\\\\\\$\n```\n解决，散花。\n\n更多解决方法可以参考[hexo下mathjax的转义问题](http://shomy.top/2016/10/22/hexo-markdown-mathjax/)\n","slug":"hexo-mathjax","published":1,"updated":"2018-06-10T02:02:07.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao630008gwounkbju545","content":"<p>刚刚开始自己的博客之旅，开始真是无比艰难啊，各种被坑。过程中博客需要插入数学公式，下载了mathjax插件(安装之后就可以使用Latex定义的宏写数学公式了)，结果被坑惨(也不算是mathjax的锅，markdown自己也要背)，卡了2个小时，气愤(╯‵□′)╯︵┻━┻<br>这里记录一下在mathjax里踩到的坑。<br>mathjax的安装配置和使用大家可以参照<a href=\"http://stevenshi.me/2017/06/26/hexo-insert-formula/\" target=\"_blank\" rel=\"noopener\">Steven’s space的博文</a>，不再赘述了。</p>\n<h2 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点\"></a>坑点</h2><p>markdown本身的特殊符号和Latex中的符号会出现冲突。</p>\n<ul>\n<li>下划线_在markdown中是斜体，但是Latex中下划线是下标的意思，所以这里会冲突。</li>\n<li>双斜线\\\\在markdown中会被转义为\\，所以Latex的\\\\换行功能也会不正常。</li>\n<li>乘法符号*在markdown中是粗体＝＝(就是在这被卡了)，所以Latex在写两个数相乘时不能直接写<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a*b$</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上情况都会导致无法在mathjax中渲染出来。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>手动转义：<br>比如需要在公式中写乘法*可以写成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a\\*b$</span><br></pre></td></tr></table></figure></p>\n<p>下标写成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a\\_1$</span><br></pre></td></tr></table></figure></p>\n<p>换行写成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\\\\\\\$</span><br></pre></td></tr></table></figure></p>\n<p>解决，散花。</p>\n<p>更多解决方法可以参考<a href=\"http://shomy.top/2016/10/22/hexo-markdown-mathjax/\" target=\"_blank\" rel=\"noopener\">hexo下mathjax的转义问题</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚刚开始自己的博客之旅，开始真是无比艰难啊，各种被坑。过程中博客需要插入数学公式，下载了mathjax插件(安装之后就可以使用Latex定义的宏写数学公式了)，结果被坑惨(也不算是mathjax的锅，markdown自己也要背)，卡了2个小时，气愤(╯‵□′)╯︵┻━┻<br>这里记录一下在mathjax里踩到的坑。<br>mathjax的安装配置和使用大家可以参照<a href=\"http://stevenshi.me/2017/06/26/hexo-insert-formula/\" target=\"_blank\" rel=\"noopener\">Steven’s space的博文</a>，不再赘述了。</p>\n<h2 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点\"></a>坑点</h2><p>markdown本身的特殊符号和Latex中的符号会出现冲突。</p>\n<ul>\n<li>下划线_在markdown中是斜体，但是Latex中下划线是下标的意思，所以这里会冲突。</li>\n<li>双斜线\\\\在markdown中会被转义为\\，所以Latex的\\\\换行功能也会不正常。</li>\n<li>乘法符号*在markdown中是粗体＝＝(就是在这被卡了)，所以Latex在写两个数相乘时不能直接写<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a*b$</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上情况都会导致无法在mathjax中渲染出来。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>手动转义：<br>比如需要在公式中写乘法*可以写成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a\\*b$</span><br></pre></td></tr></table></figure></p>\n<p>下标写成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a\\_1$</span><br></pre></td></tr></table></figure></p>\n<p>换行写成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\\\\\\\$</span><br></pre></td></tr></table></figure></p>\n<p>解决，散花。</p>\n<p>更多解决方法可以参考<a href=\"http://shomy.top/2016/10/22/hexo-markdown-mathjax/\" target=\"_blank\" rel=\"noopener\">hexo下mathjax的转义问题</a></p>\n"},{"title":"hdu 4856 Tunnels-BFS+状态压缩DP","date":"2018-05-16T06:03:19.000Z","_content":"最近的几场训练赛做题的时候发现自己对搜索类、动态规划类的题有些恐惧，导致这些类型的题比赛时基本做不出来。仔细想了一下，是自己的递归部分理解的就不够透彻，导致搜索写不出来，动态规划就更无从下手。之前也找了很多递归理解的文章去看，也做了一些递归的题，但是效果不佳。意识到网上的资料对于递归的理解一般会拿经典的斐波那契数列或汉诺塔来举例，这对于递归的理解确实是有帮助的，但是对于锻炼搜索思维的效果不是太有效，于是决定先恶补一部分搜索类的题。\n这道题是准备西安邀请赛时打的模拟赛做到的题，知识点主要用到了BFS和状态压缩DP，可以当做旅行商问题来做，但是最后不返回起点。由于自己DP比较差，所以搞懂这道题还是花了挺长时间。状态压缩DP部分的实现代码参考大白。\n\nPs：在最后会贴几个自己觉得看到的对递归和动态规划理解比较有帮助的文章链接。\n\n## 题目链接\n[hdu-4856-Tunnels](http://acm.hdu.edu.cn/showproblem.php?pid=4856)\n## 题目描述\n一张城市网格图，城市中有m条快速通道，可以从图中任意位置出发，求访问完所有快速通道所用的最少时间，忽略在快速通道内的时间。\n## 题解\n因为在快速通道内的时间是不计的所以只要到达了一个快速通道的入口就相当于访问完了这一条通道，所以可以构造一张$m×m$的邻接表，其中$d[i][j]$表示从第$i$个通道的出口到第$j$个通道的入口的距离，这一部分直接用BFS就能实现，接下来就可以用旅行商问题的解法求解不重复的访问完所有通道所用的时间。\n有两个与旅行商问题不同需要注意的地方：\n**最后不返回起点**\n**起点位置任意，也就是可以将任意一个通道的入口作为起点**\n解决方法详见代码。\n##代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 18;\nconst int maxm = 18;\nconst int inf = 0x3f3f3f3f;\nchar mp[maxn][maxn];\ntypedef pair<int, int> P;\nP in[maxm];\nP out[maxm];\nint n, m;\nint d[maxn][maxn];\nint sx, sy;\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nint dis[maxm][maxm];\nint dp[1 <<  maxm][maxm];\n\n//状态压缩DP\nvoid dpsolve(){\n    for(int S = 0; S < 1 << m; S++){\n        fill(dp[S], dp[S] + m, inf);\n    }\n    for(int i = 0; i < m; i++){\n        dp[(1 << m) - 1][i] = 0;//因为起点未定，所以终点在任意一个通道都可以\n    }\n    for(int S = (1 << m) - 2; S >= 0; S--){\n        for(int v = 0; v < m; v++){\n            for(int u = 0; u < m; u++){\n                if(!(S >> u & 1)){\n                    dp[S][v] = min(dp[S][v], dp[S | 1 << u][u] + dis[v][u]);\n                }\n            }\n        }\n    }\n    int res = inf;\n    for(int i = 0; i < m; i++){\n        res = min(res, dp[1 << i][i]);//判断以不同通道为起点的情况下，哪种用时最短\n    }\n    if(res == inf) printf(\"%d\\n\", -1);\n    else printf(\"%d\\n\", res);\n}\n\n//bfs搜索确定两两通道之间最小距离\nvoid bfs(int sx, int sy){\n    queue<P> que;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            d[i][j] = inf;\n        }\n    }\n    d[sx][sy] = 0;\n    que.push(P(sx, sy));\n\n    while(!que.empty()){\n        P p = que.front();\n        que.pop();\n        for(int i = 0; i < 4; i++){\n            int nx = p.first + dx[i];\n            int ny = p.second + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < n && mp[nx][ny] != '#' && d[nx][ny] == inf){\n\n                d[nx][ny] = d[p.first][p.second] + 1;\n                que.push(P(nx, ny));\n            }\n        }\n\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif // ONLINE_JUDGE\n    while(~scanf(\"%d%d\", &n, &m)){\n        for(int i = 0; i < n; i++){\n            scanf(\"%s\", mp[i]);\n        }\n        for(int i = 0; i < m; i++){\n            scanf(\"%d%d%d%d\", &in[i].first, &in[i].second, &out[i].first, &out[i].second);\n        }\n        //构建邻接表\n        for(int i = 0; i < m; i++){\n            bfs(out[i].first - 1, out[i].second - 1);\n            for(int j = 0; j < m; j++){\n                if(i == j) dis[i][j] = 0;\n                else dis[i][j] = d[in[j].first - 1][in[j].second - 1];\n            }\n        }\n\n        dpsolve();\n    }\n    return 0;\n}\n```\n## 关于递归、动态规划理解的文章链接\n[写递归函数的正确思维方法](https://blog.csdn.net/vagrxie/article/details/8470798)\n[递归算法详解](https://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/)\n[怎么更好地终极理解递归算法](https://blog.csdn.net/StruggleShu/article/details/51051140)\n[如何有效地理解程序中的递归](https://blog.csdn.net/qq_34773981/article/details/79225588)\n\n[一道题看清动态规划的前世今生（一）](http://www.importnew.com/27323.html)\n[一道题看清动态规划的前世今生（二）](http://www.importnew.com/27444.html)\n\n最后对这些文章的博主表示感谢！","source":"_posts/hdu-4856-Tunnels.md","raw":"---\ntitle: hdu 4856 Tunnels-BFS+状态压缩DP\ndate: 2018-05-16 14:03:19\ncategories:\n- ACM\ntags:\n- 状态压缩DP\n- BFS\n---\n最近的几场训练赛做题的时候发现自己对搜索类、动态规划类的题有些恐惧，导致这些类型的题比赛时基本做不出来。仔细想了一下，是自己的递归部分理解的就不够透彻，导致搜索写不出来，动态规划就更无从下手。之前也找了很多递归理解的文章去看，也做了一些递归的题，但是效果不佳。意识到网上的资料对于递归的理解一般会拿经典的斐波那契数列或汉诺塔来举例，这对于递归的理解确实是有帮助的，但是对于锻炼搜索思维的效果不是太有效，于是决定先恶补一部分搜索类的题。\n这道题是准备西安邀请赛时打的模拟赛做到的题，知识点主要用到了BFS和状态压缩DP，可以当做旅行商问题来做，但是最后不返回起点。由于自己DP比较差，所以搞懂这道题还是花了挺长时间。状态压缩DP部分的实现代码参考大白。\n\nPs：在最后会贴几个自己觉得看到的对递归和动态规划理解比较有帮助的文章链接。\n\n## 题目链接\n[hdu-4856-Tunnels](http://acm.hdu.edu.cn/showproblem.php?pid=4856)\n## 题目描述\n一张城市网格图，城市中有m条快速通道，可以从图中任意位置出发，求访问完所有快速通道所用的最少时间，忽略在快速通道内的时间。\n## 题解\n因为在快速通道内的时间是不计的所以只要到达了一个快速通道的入口就相当于访问完了这一条通道，所以可以构造一张$m×m$的邻接表，其中$d[i][j]$表示从第$i$个通道的出口到第$j$个通道的入口的距离，这一部分直接用BFS就能实现，接下来就可以用旅行商问题的解法求解不重复的访问完所有通道所用的时间。\n有两个与旅行商问题不同需要注意的地方：\n**最后不返回起点**\n**起点位置任意，也就是可以将任意一个通道的入口作为起点**\n解决方法详见代码。\n##代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 18;\nconst int maxm = 18;\nconst int inf = 0x3f3f3f3f;\nchar mp[maxn][maxn];\ntypedef pair<int, int> P;\nP in[maxm];\nP out[maxm];\nint n, m;\nint d[maxn][maxn];\nint sx, sy;\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nint dis[maxm][maxm];\nint dp[1 <<  maxm][maxm];\n\n//状态压缩DP\nvoid dpsolve(){\n    for(int S = 0; S < 1 << m; S++){\n        fill(dp[S], dp[S] + m, inf);\n    }\n    for(int i = 0; i < m; i++){\n        dp[(1 << m) - 1][i] = 0;//因为起点未定，所以终点在任意一个通道都可以\n    }\n    for(int S = (1 << m) - 2; S >= 0; S--){\n        for(int v = 0; v < m; v++){\n            for(int u = 0; u < m; u++){\n                if(!(S >> u & 1)){\n                    dp[S][v] = min(dp[S][v], dp[S | 1 << u][u] + dis[v][u]);\n                }\n            }\n        }\n    }\n    int res = inf;\n    for(int i = 0; i < m; i++){\n        res = min(res, dp[1 << i][i]);//判断以不同通道为起点的情况下，哪种用时最短\n    }\n    if(res == inf) printf(\"%d\\n\", -1);\n    else printf(\"%d\\n\", res);\n}\n\n//bfs搜索确定两两通道之间最小距离\nvoid bfs(int sx, int sy){\n    queue<P> que;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            d[i][j] = inf;\n        }\n    }\n    d[sx][sy] = 0;\n    que.push(P(sx, sy));\n\n    while(!que.empty()){\n        P p = que.front();\n        que.pop();\n        for(int i = 0; i < 4; i++){\n            int nx = p.first + dx[i];\n            int ny = p.second + dy[i];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < n && mp[nx][ny] != '#' && d[nx][ny] == inf){\n\n                d[nx][ny] = d[p.first][p.second] + 1;\n                que.push(P(nx, ny));\n            }\n        }\n\n    }\n}\n\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif // ONLINE_JUDGE\n    while(~scanf(\"%d%d\", &n, &m)){\n        for(int i = 0; i < n; i++){\n            scanf(\"%s\", mp[i]);\n        }\n        for(int i = 0; i < m; i++){\n            scanf(\"%d%d%d%d\", &in[i].first, &in[i].second, &out[i].first, &out[i].second);\n        }\n        //构建邻接表\n        for(int i = 0; i < m; i++){\n            bfs(out[i].first - 1, out[i].second - 1);\n            for(int j = 0; j < m; j++){\n                if(i == j) dis[i][j] = 0;\n                else dis[i][j] = d[in[j].first - 1][in[j].second - 1];\n            }\n        }\n\n        dpsolve();\n    }\n    return 0;\n}\n```\n## 关于递归、动态规划理解的文章链接\n[写递归函数的正确思维方法](https://blog.csdn.net/vagrxie/article/details/8470798)\n[递归算法详解](https://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/)\n[怎么更好地终极理解递归算法](https://blog.csdn.net/StruggleShu/article/details/51051140)\n[如何有效地理解程序中的递归](https://blog.csdn.net/qq_34773981/article/details/79225588)\n\n[一道题看清动态规划的前世今生（一）](http://www.importnew.com/27323.html)\n[一道题看清动态规划的前世今生（二）](http://www.importnew.com/27444.html)\n\n最后对这些文章的博主表示感谢！","slug":"hdu-4856-Tunnels","published":1,"updated":"2018-05-16T07:30:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao66000agwou4zxcn2wa","content":"<p>最近的几场训练赛做题的时候发现自己对搜索类、动态规划类的题有些恐惧，导致这些类型的题比赛时基本做不出来。仔细想了一下，是自己的递归部分理解的就不够透彻，导致搜索写不出来，动态规划就更无从下手。之前也找了很多递归理解的文章去看，也做了一些递归的题，但是效果不佳。意识到网上的资料对于递归的理解一般会拿经典的斐波那契数列或汉诺塔来举例，这对于递归的理解确实是有帮助的，但是对于锻炼搜索思维的效果不是太有效，于是决定先恶补一部分搜索类的题。<br>这道题是准备西安邀请赛时打的模拟赛做到的题，知识点主要用到了BFS和状态压缩DP，可以当做旅行商问题来做，但是最后不返回起点。由于自己DP比较差，所以搞懂这道题还是花了挺长时间。状态压缩DP部分的实现代码参考大白。</p>\n<p>Ps：在最后会贴几个自己觉得看到的对递归和动态规划理解比较有帮助的文章链接。</p>\n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4856\" target=\"_blank\" rel=\"noopener\">hdu-4856-Tunnels</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>一张城市网格图，城市中有m条快速通道，可以从图中任意位置出发，求访问完所有快速通道所用的最少时间，忽略在快速通道内的时间。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>因为在快速通道内的时间是不计的所以只要到达了一个快速通道的入口就相当于访问完了这一条通道，所以可以构造一张$m×m$的邻接表，其中$d[i][j]$表示从第$i$个通道的出口到第$j$个通道的入口的距离，这一部分直接用BFS就能实现，接下来就可以用旅行商问题的解法求解不重复的访问完所有通道所用的时间。<br>有两个与旅行商问题不同需要注意的地方：<br><strong>最后不返回起点</strong><br><strong>起点位置任意，也就是可以将任意一个通道的入口作为起点</strong><br>解决方法详见代码。</p>\n<p>##代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\">P in[maxm];</span><br><span class=\"line\">P out[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sx, sy;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxm][maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span> &lt;&lt;  maxm][maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//状态压缩DP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dpsolve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> S = <span class=\"number\">0</span>; S &lt; <span class=\"number\">1</span> &lt;&lt; m; S++)&#123;</span><br><span class=\"line\">        fill(dp[S], dp[S] + m, inf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[(<span class=\"number\">1</span> &lt;&lt; m) - <span class=\"number\">1</span>][i] = <span class=\"number\">0</span>;<span class=\"comment\">//因为起点未定，所以终点在任意一个通道都可以</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> S = (<span class=\"number\">1</span> &lt;&lt; m) - <span class=\"number\">2</span>; S &gt;= <span class=\"number\">0</span>; S--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; m; v++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>; u &lt; m; u++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!(S &gt;&gt; u &amp; <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    dp[S][v] = min(dp[S][v], dp[S | <span class=\"number\">1</span> &lt;&lt; u][u] + dis[v][u]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = inf;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        res = min(res, dp[<span class=\"number\">1</span> &lt;&lt; i][i]);<span class=\"comment\">//判断以不同通道为起点的情况下，哪种用时最短</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res == inf) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bfs搜索确定两两通道之间最小距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> sx, <span class=\"keyword\">int</span> sy)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;P&gt; que;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            d[i][j] = inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[sx][sy] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(P(sx, sy));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        P p = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = p.first + dx[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = p.second + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; mp[nx][ny] != <span class=\"string\">'#'</span> &amp;&amp; d[nx][ny] == inf)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                d[nx][ny] = d[p.first][p.second] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.push(P(nx, ny));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// ONLINE_JUDGE</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, mp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;in[i].first, &amp;in[i].second, &amp;out[i].first, &amp;out[i].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//构建邻接表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            bfs(out[i].first - <span class=\"number\">1</span>, out[i].second - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) dis[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> dis[i][j] = d[in[j].first - <span class=\"number\">1</span>][in[j].second - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dpsolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"关于递归、动态规划理解的文章链接\"><a href=\"#关于递归、动态规划理解的文章链接\" class=\"headerlink\" title=\"关于递归、动态规划理解的文章链接\"></a>关于递归、动态规划理解的文章链接</h2><p><a href=\"https://blog.csdn.net/vagrxie/article/details/8470798\" target=\"_blank\" rel=\"noopener\">写递归函数的正确思维方法</a><br><a href=\"https://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/\" target=\"_blank\" rel=\"noopener\">递归算法详解</a><br><a href=\"https://blog.csdn.net/StruggleShu/article/details/51051140\" target=\"_blank\" rel=\"noopener\">怎么更好地终极理解递归算法</a><br><a href=\"https://blog.csdn.net/qq_34773981/article/details/79225588\" target=\"_blank\" rel=\"noopener\">如何有效地理解程序中的递归</a></p>\n<p><a href=\"http://www.importnew.com/27323.html\" target=\"_blank\" rel=\"noopener\">一道题看清动态规划的前世今生（一）</a><br><a href=\"http://www.importnew.com/27444.html\" target=\"_blank\" rel=\"noopener\">一道题看清动态规划的前世今生（二）</a></p>\n<p>最后对这些文章的博主表示感谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的几场训练赛做题的时候发现自己对搜索类、动态规划类的题有些恐惧，导致这些类型的题比赛时基本做不出来。仔细想了一下，是自己的递归部分理解的就不够透彻，导致搜索写不出来，动态规划就更无从下手。之前也找了很多递归理解的文章去看，也做了一些递归的题，但是效果不佳。意识到网上的资料对于递归的理解一般会拿经典的斐波那契数列或汉诺塔来举例，这对于递归的理解确实是有帮助的，但是对于锻炼搜索思维的效果不是太有效，于是决定先恶补一部分搜索类的题。<br>这道题是准备西安邀请赛时打的模拟赛做到的题，知识点主要用到了BFS和状态压缩DP，可以当做旅行商问题来做，但是最后不返回起点。由于自己DP比较差，所以搞懂这道题还是花了挺长时间。状态压缩DP部分的实现代码参考大白。</p>\n<p>Ps：在最后会贴几个自己觉得看到的对递归和动态规划理解比较有帮助的文章链接。</p>\n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4856\" target=\"_blank\" rel=\"noopener\">hdu-4856-Tunnels</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>一张城市网格图，城市中有m条快速通道，可以从图中任意位置出发，求访问完所有快速通道所用的最少时间，忽略在快速通道内的时间。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>因为在快速通道内的时间是不计的所以只要到达了一个快速通道的入口就相当于访问完了这一条通道，所以可以构造一张$m×m$的邻接表，其中$d[i][j]$表示从第$i$个通道的出口到第$j$个通道的入口的距离，这一部分直接用BFS就能实现，接下来就可以用旅行商问题的解法求解不重复的访问完所有通道所用的时间。<br>有两个与旅行商问题不同需要注意的地方：<br><strong>最后不返回起点</strong><br><strong>起点位置任意，也就是可以将任意一个通道的入口作为起点</strong><br>解决方法详见代码。</p>\n<p>##代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> mp[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\">P in[maxm];</span><br><span class=\"line\">P out[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sx, sy;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxm][maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span> &lt;&lt;  maxm][maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//状态压缩DP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dpsolve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> S = <span class=\"number\">0</span>; S &lt; <span class=\"number\">1</span> &lt;&lt; m; S++)&#123;</span><br><span class=\"line\">        fill(dp[S], dp[S] + m, inf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[(<span class=\"number\">1</span> &lt;&lt; m) - <span class=\"number\">1</span>][i] = <span class=\"number\">0</span>;<span class=\"comment\">//因为起点未定，所以终点在任意一个通道都可以</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> S = (<span class=\"number\">1</span> &lt;&lt; m) - <span class=\"number\">2</span>; S &gt;= <span class=\"number\">0</span>; S--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; m; v++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>; u &lt; m; u++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!(S &gt;&gt; u &amp; <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    dp[S][v] = min(dp[S][v], dp[S | <span class=\"number\">1</span> &lt;&lt; u][u] + dis[v][u]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = inf;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        res = min(res, dp[<span class=\"number\">1</span> &lt;&lt; i][i]);<span class=\"comment\">//判断以不同通道为起点的情况下，哪种用时最短</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res == inf) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bfs搜索确定两两通道之间最小距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> sx, <span class=\"keyword\">int</span> sy)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;P&gt; que;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            d[i][j] = inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[sx][sy] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    que.push(P(sx, sy));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        P p = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = p.first + dx[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = p.second + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; mp[nx][ny] != <span class=\"string\">'#'</span> &amp;&amp; d[nx][ny] == inf)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                d[nx][ny] = d[p.first][p.second] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.push(P(nx, ny));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// ONLINE_JUDGE</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, mp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;in[i].first, &amp;in[i].second, &amp;out[i].first, &amp;out[i].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//构建邻接表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            bfs(out[i].first - <span class=\"number\">1</span>, out[i].second - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) dis[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> dis[i][j] = d[in[j].first - <span class=\"number\">1</span>][in[j].second - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dpsolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"关于递归、动态规划理解的文章链接\"><a href=\"#关于递归、动态规划理解的文章链接\" class=\"headerlink\" title=\"关于递归、动态规划理解的文章链接\"></a>关于递归、动态规划理解的文章链接</h2><p><a href=\"https://blog.csdn.net/vagrxie/article/details/8470798\" target=\"_blank\" rel=\"noopener\">写递归函数的正确思维方法</a><br><a href=\"https://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/\" target=\"_blank\" rel=\"noopener\">递归算法详解</a><br><a href=\"https://blog.csdn.net/StruggleShu/article/details/51051140\" target=\"_blank\" rel=\"noopener\">怎么更好地终极理解递归算法</a><br><a href=\"https://blog.csdn.net/qq_34773981/article/details/79225588\" target=\"_blank\" rel=\"noopener\">如何有效地理解程序中的递归</a></p>\n<p><a href=\"http://www.importnew.com/27323.html\" target=\"_blank\" rel=\"noopener\">一道题看清动态规划的前世今生（一）</a><br><a href=\"http://www.importnew.com/27444.html\" target=\"_blank\" rel=\"noopener\">一道题看清动态规划的前世今生（二）</a></p>\n<p>最后对这些文章的博主表示感谢！</p>\n"},{"title":"新起点","date":"2018-04-08T15:12:00.000Z","_content":"搭一个自己的独立博客的想法记得从去年暑假就有了，可是当时还是小菜鸡蛋，什么都不懂＝＝，现在孵成了小菜鸡，才终于磨磨蹭蹭的搭了起来，内心还是十分激动的(〃∇〃)，其间走了很多弯路，陷进了很多坑，感谢[CrazyMilk的这篇博文](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more)以及[陶司机](http://logqtainia.github.io/)的指导，感谢女票的支持，也感谢自己没有就此放弃ヽ(•̀ω•́ )ゝ。\n\n### 为什么要搭建独立博客\n\n最近３个月左右，一直在跟着校内的ACM队进行训练，最初是想提高自己的编程能力，后来发现自己无论对这个团队还是对这项竞赛都有一种由衷的向往，虽然最后因为个人能力以及年级太高(大三下)等方面因素没能成为正式队员，但还是想至少沿这个方向走下去。从接触ACM开始后就发现，优秀的人实在太多太多，自己会的实在太少太少，都不敢以菜鸡自称，简直是菜鸡蛋2333\n所以想在这里记录自己的成长，努力成为一个优秀的人。我也十分赞同CrazyMilk博主提到的Litten（Yilia主题的制作者）说的那句话：有了一个独立博客，就有了属于自己的一片田，开始默默耕作。\n等到自己不再是小菜鸡的那一天再回头来看那个曾经的小菜鸡的成长历程，应该会别有一番滋味吧，哈哈，期待。\n\nHello, Aincrad.\n\n要去耕作了(ง •̀_•́)ง，告辞。\n\nPs:博客框架采用hexo,及其经典的next主题。\n","source":"_posts/new start point.md","raw":"---\ntitle: 新起点\ndate : 2018-04-08 23:12:00\ncategories:\n- Diary\ntags:\n- 生活\n- 总结\n---\n搭一个自己的独立博客的想法记得从去年暑假就有了，可是当时还是小菜鸡蛋，什么都不懂＝＝，现在孵成了小菜鸡，才终于磨磨蹭蹭的搭了起来，内心还是十分激动的(〃∇〃)，其间走了很多弯路，陷进了很多坑，感谢[CrazyMilk的这篇博文](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more)以及[陶司机](http://logqtainia.github.io/)的指导，感谢女票的支持，也感谢自己没有就此放弃ヽ(•̀ω•́ )ゝ。\n\n### 为什么要搭建独立博客\n\n最近３个月左右，一直在跟着校内的ACM队进行训练，最初是想提高自己的编程能力，后来发现自己无论对这个团队还是对这项竞赛都有一种由衷的向往，虽然最后因为个人能力以及年级太高(大三下)等方面因素没能成为正式队员，但还是想至少沿这个方向走下去。从接触ACM开始后就发现，优秀的人实在太多太多，自己会的实在太少太少，都不敢以菜鸡自称，简直是菜鸡蛋2333\n所以想在这里记录自己的成长，努力成为一个优秀的人。我也十分赞同CrazyMilk博主提到的Litten（Yilia主题的制作者）说的那句话：有了一个独立博客，就有了属于自己的一片田，开始默默耕作。\n等到自己不再是小菜鸡的那一天再回头来看那个曾经的小菜鸡的成长历程，应该会别有一番滋味吧，哈哈，期待。\n\nHello, Aincrad.\n\n要去耕作了(ง •̀_•́)ง，告辞。\n\nPs:博客框架采用hexo,及其经典的next主题。\n","slug":"new start point","published":1,"updated":"2018-04-09T02:53:29.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao6e000fgwouaisnigku","content":"<p>搭一个自己的独立博客的想法记得从去年暑假就有了，可是当时还是小菜鸡蛋，什么都不懂＝＝，现在孵成了小菜鸡，才终于磨磨蹭蹭的搭了起来，内心还是十分激动的(〃∇〃)，其间走了很多弯路，陷进了很多坑，感谢<a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"noopener\">CrazyMilk的这篇博文</a>以及<a href=\"http://logqtainia.github.io/\" target=\"_blank\" rel=\"noopener\">陶司机</a>的指导，感谢女票的支持，也感谢自己没有就此放弃ヽ(•̀ω•́ )ゝ。</p>\n<h3 id=\"为什么要搭建独立博客\"><a href=\"#为什么要搭建独立博客\" class=\"headerlink\" title=\"为什么要搭建独立博客\"></a>为什么要搭建独立博客</h3><p>最近３个月左右，一直在跟着校内的ACM队进行训练，最初是想提高自己的编程能力，后来发现自己无论对这个团队还是对这项竞赛都有一种由衷的向往，虽然最后因为个人能力以及年级太高(大三下)等方面因素没能成为正式队员，但还是想至少沿这个方向走下去。从接触ACM开始后就发现，优秀的人实在太多太多，自己会的实在太少太少，都不敢以菜鸡自称，简直是菜鸡蛋2333<br>所以想在这里记录自己的成长，努力成为一个优秀的人。我也十分赞同CrazyMilk博主提到的Litten（Yilia主题的制作者）说的那句话：有了一个独立博客，就有了属于自己的一片田，开始默默耕作。<br>等到自己不再是小菜鸡的那一天再回头来看那个曾经的小菜鸡的成长历程，应该会别有一番滋味吧，哈哈，期待。</p>\n<p>Hello, Aincrad.</p>\n<p>要去耕作了(ง •̀_•́)ง，告辞。</p>\n<p>Ps:博客框架采用hexo,及其经典的next主题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>搭一个自己的独立博客的想法记得从去年暑假就有了，可是当时还是小菜鸡蛋，什么都不懂＝＝，现在孵成了小菜鸡，才终于磨磨蹭蹭的搭了起来，内心还是十分激动的(〃∇〃)，其间走了很多弯路，陷进了很多坑，感谢<a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"noopener\">CrazyMilk的这篇博文</a>以及<a href=\"http://logqtainia.github.io/\" target=\"_blank\" rel=\"noopener\">陶司机</a>的指导，感谢女票的支持，也感谢自己没有就此放弃ヽ(•̀ω•́ )ゝ。</p>\n<h3 id=\"为什么要搭建独立博客\"><a href=\"#为什么要搭建独立博客\" class=\"headerlink\" title=\"为什么要搭建独立博客\"></a>为什么要搭建独立博客</h3><p>最近３个月左右，一直在跟着校内的ACM队进行训练，最初是想提高自己的编程能力，后来发现自己无论对这个团队还是对这项竞赛都有一种由衷的向往，虽然最后因为个人能力以及年级太高(大三下)等方面因素没能成为正式队员，但还是想至少沿这个方向走下去。从接触ACM开始后就发现，优秀的人实在太多太多，自己会的实在太少太少，都不敢以菜鸡自称，简直是菜鸡蛋2333<br>所以想在这里记录自己的成长，努力成为一个优秀的人。我也十分赞同CrazyMilk博主提到的Litten（Yilia主题的制作者）说的那句话：有了一个独立博客，就有了属于自己的一片田，开始默默耕作。<br>等到自己不再是小菜鸡的那一天再回头来看那个曾经的小菜鸡的成长历程，应该会别有一番滋味吧，哈哈，期待。</p>\n<p>Hello, Aincrad.</p>\n<p>要去耕作了(ง •̀_•́)ง，告辞。</p>\n<p>Ps:博客框架采用hexo,及其经典的next主题。</p>\n"},{"title":"矩阵快速幂","date":"2018-05-14T01:41:44.000Z","_content":"最近在做一道DP的题时发现数据范围竟然是1e18，这样的话只能用log(n)复杂度的算法来实现了，于是从队长那里了解到了矩阵快速幂。在这里记录一下快速幂以及其它矩阵处理的模板。\n矩阵快速幂模板参考自[eecrazy](https://github.com/eecrazy/ACM/blob/master/%E6%95%B0%E8%AE%BA/poj3233%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.cpp)\n## 常数快速幂\n```C++\ntypedef long long ll;\nll mod_pow(ll x, ll n, ll mod){\n    ll res = 1;\n    while(n > 0){\n        if(n & 1) res *= x % mod;\n        x = x * x % mod;\n        n >>= 1;\n    }\n    return res;\n}\n```\n## 矩阵快速幂\n``` C++\nstruct Ma\n{\n    int m[maxn][maxn];\n};\n\nMa a,per;\nint n, mod;\n\nvoid init()//矩阵初始化\n{\n    int i,j;\n    for(i = 0; i < n; i++)\n        for(j = 0; j < n; j++)\n        {\n            scanf(\"%d\", &a.m[i][j]);\n            a.m[i][j] %= mod;\n            per.m[i][j] = (i == j);\n        }\n}\n\nMa add(Ma a,Ma b)//矩阵加法\n{\n    Ma c;\n    for (int i = 0; i < n; ++i)\n    {\n        for (int j = 0; j < n; ++j)\n        {\n            c.m[i][j] = (a.m[i][j] + b.m[i][j]) % mod;\n        }\n    }\n    return c;\n}\n\n\nMa multi(Ma a,Ma b)//矩阵乘法\n{\n    Ma c;\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < n; j++)\n        {\n            c.m[i][j] = 0;\n            for(int k = 0; k < n; k++)\n            {\n                c.m[i][j] += a.m[i][k] * b.m[k][j];\n            }\n            c.m[i][j] %= mod;\n        }\n    return c;\n}\n\nMa quick_pow(long long x)//矩阵快速幂\n{\n    Ma res = per;\n    Ma p = a;\n    while(x)\n    {\n        if(x&1) res = multi(res,p);\n        p = multi(p,p);\n        x >>= 1;\n    }\n    return res;\n}\n```","source":"_posts/quick-matrix.md","raw":"---\ntitle: 矩阵快速幂\ndate: 2018-05-14 09:41:44\ncategories:\n- ACM\ntags:\n- math\n---\n最近在做一道DP的题时发现数据范围竟然是1e18，这样的话只能用log(n)复杂度的算法来实现了，于是从队长那里了解到了矩阵快速幂。在这里记录一下快速幂以及其它矩阵处理的模板。\n矩阵快速幂模板参考自[eecrazy](https://github.com/eecrazy/ACM/blob/master/%E6%95%B0%E8%AE%BA/poj3233%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.cpp)\n## 常数快速幂\n```C++\ntypedef long long ll;\nll mod_pow(ll x, ll n, ll mod){\n    ll res = 1;\n    while(n > 0){\n        if(n & 1) res *= x % mod;\n        x = x * x % mod;\n        n >>= 1;\n    }\n    return res;\n}\n```\n## 矩阵快速幂\n``` C++\nstruct Ma\n{\n    int m[maxn][maxn];\n};\n\nMa a,per;\nint n, mod;\n\nvoid init()//矩阵初始化\n{\n    int i,j;\n    for(i = 0; i < n; i++)\n        for(j = 0; j < n; j++)\n        {\n            scanf(\"%d\", &a.m[i][j]);\n            a.m[i][j] %= mod;\n            per.m[i][j] = (i == j);\n        }\n}\n\nMa add(Ma a,Ma b)//矩阵加法\n{\n    Ma c;\n    for (int i = 0; i < n; ++i)\n    {\n        for (int j = 0; j < n; ++j)\n        {\n            c.m[i][j] = (a.m[i][j] + b.m[i][j]) % mod;\n        }\n    }\n    return c;\n}\n\n\nMa multi(Ma a,Ma b)//矩阵乘法\n{\n    Ma c;\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < n; j++)\n        {\n            c.m[i][j] = 0;\n            for(int k = 0; k < n; k++)\n            {\n                c.m[i][j] += a.m[i][k] * b.m[k][j];\n            }\n            c.m[i][j] %= mod;\n        }\n    return c;\n}\n\nMa quick_pow(long long x)//矩阵快速幂\n{\n    Ma res = per;\n    Ma p = a;\n    while(x)\n    {\n        if(x&1) res = multi(res,p);\n        p = multi(p,p);\n        x >>= 1;\n    }\n    return res;\n}\n```","slug":"quick-matrix","published":1,"updated":"2018-05-14T02:44:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao6g000hgwouq01saww1","content":"<p>最近在做一道DP的题时发现数据范围竟然是1e18，这样的话只能用log(n)复杂度的算法来实现了，于是从队长那里了解到了矩阵快速幂。在这里记录一下快速幂以及其它矩阵处理的模板。<br>矩阵快速幂模板参考自<a href=\"https://github.com/eecrazy/ACM/blob/master/%E6%95%B0%E8%AE%BA/poj3233%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.cpp\" target=\"_blank\" rel=\"noopener\">eecrazy</a></p>\n<h2 id=\"常数快速幂\"><a href=\"#常数快速幂\" class=\"headerlink\" title=\"常数快速幂\"></a>常数快速幂</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mod_pow</span><span class=\"params\">(ll x, ll n, ll mod)</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) res *= x % mod;</span><br><span class=\"line\">        x = x * x % mod;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Ma</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m[maxn][maxn];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ma a,per;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, mod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span><span class=\"comment\">//矩阵初始化</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a.m[i][j]);</span><br><span class=\"line\">            a.m[i][j] %= mod;</span><br><span class=\"line\">            per.m[i][j] = (i == j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">add</span><span class=\"params\">(Ma a,Ma b)</span><span class=\"comment\">//矩阵加法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.m[i][j] = (a.m[i][j] + b.m[i][j]) % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">multi</span><span class=\"params\">(Ma a,Ma b)</span><span class=\"comment\">//矩阵乘法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.m[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c.m[i][j] += a.m[i][k] * b.m[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            c.m[i][j] %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">quick_pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x)</span><span class=\"comment\">//矩阵快速幂</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma res = per;</span><br><span class=\"line\">    Ma p = a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&amp;<span class=\"number\">1</span>) res = multi(res,p);</span><br><span class=\"line\">        p = multi(p,p);</span><br><span class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>最近在做一道DP的题时发现数据范围竟然是1e18，这样的话只能用log(n)复杂度的算法来实现了，于是从队长那里了解到了矩阵快速幂。在这里记录一下快速幂以及其它矩阵处理的模板。<br>矩阵快速幂模板参考自<a href=\"https://github.com/eecrazy/ACM/blob/master/%E6%95%B0%E8%AE%BA/poj3233%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82.cpp\" target=\"_blank\" rel=\"noopener\">eecrazy</a></p>\n<h2 id=\"常数快速幂\"><a href=\"#常数快速幂\" class=\"headerlink\" title=\"常数快速幂\"></a>常数快速幂</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mod_pow</span><span class=\"params\">(ll x, ll n, ll mod)</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) res *= x % mod;</span><br><span class=\"line\">        x = x * x % mod;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Ma</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m[maxn][maxn];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ma a,per;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, mod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span><span class=\"comment\">//矩阵初始化</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a.m[i][j]);</span><br><span class=\"line\">            a.m[i][j] %= mod;</span><br><span class=\"line\">            per.m[i][j] = (i == j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">add</span><span class=\"params\">(Ma a,Ma b)</span><span class=\"comment\">//矩阵加法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.m[i][j] = (a.m[i][j] + b.m[i][j]) % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">multi</span><span class=\"params\">(Ma a,Ma b)</span><span class=\"comment\">//矩阵乘法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.m[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c.m[i][j] += a.m[i][k] * b.m[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            c.m[i][j] %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Ma <span class=\"title\">quick_pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x)</span><span class=\"comment\">//矩阵快速幂</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Ma res = per;</span><br><span class=\"line\">    Ma p = a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&amp;<span class=\"number\">1</span>) res = multi(res,p);</span><br><span class=\"line\">        p = multi(p,p);</span><br><span class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ubuntu下vultr服务器搭建","date":"2018-04-13T11:09:32.000Z","_content":"工欲善其事必先利其器。\n前一段时间在[陶司机学长](http://logqtainia.github.io/)的帮助下搭了自己的梯子，因为实在是受不了某度的搜索引擎了...，某天电脑出了一个小问题，去某度搜，２个小时过去没有任何头绪，无奈挂了VPN软件搜谷歌，搜索结果的第一条就是解决办法，，，没有对比就没有伤害，google真是一家伟大的公司。\n觉得靠免费的VPN软件不是长久之计（一方面是速度不理想，另一方面是考虑安全的问题），于是搭了梯子，终于可以愉快的用google了(•̀⌄•́)，用这篇博客记录一下搭建的过程。\n## 注册vultr账号\n[链接](https://www.vultr.com/)\n## 创建vultr主机\n点击右上角的蓝色加号，创建新的vultr主机\n![p1](/p1.png)\n服务器位置选择，推荐选择新加坡，或者美国的服务器(日本服务器已基本被墙)\n![p2](/p2.png)\n服务器端系统选择，选择ubuntu\n![p3](/p3.png)\n服务器配置选择,配置越高价格也越高，一般最便宜的2.5刀/month就够用了，但是很难抢到，，，于是就选5刀/month的了。\n![p4](/p4.png)\n其它的选项不需要填写，点击支付就ok(ps:从2017年10月开始支持支付宝支付！！)\n![p5](/p5.png)\n接下来等待主机部署完成即可。\n## 服务器端配置\n服务器端，也就是你刚刚创建的那台主机。\n点击主机右侧\"...\"展开菜单，选择\"Server Details\"可以看到这台主机的一些信息。包括这台主机的IP地址(IP Address)、用户名(Username)、密码(Password)等，这些信息下面需要用到。\n![p6](/p6.png)\n打开终端，使用ssh远程登录到主机\n```\n$ ssh root@你的主机IP地址\n```\n之后输入你的主机密码进行登录(可以在主机信息页面直接复制，粘贴到终端里时不会显示，但已存在,直接回车即可)。\n登录成功后使用一键配置脚本进行配置\n```\n$ wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n终端中会出现如下界面，输入１选择安装shadowsocksR\n![p7](/p7.png)\n之后会依次要求设置端口号(推荐设置8000以上)、密码、加密方式、协议、混淆等，下面给出我的几个主要配置选择\n```\n加密方式(method):none\n协议(protocol):auth_chain_a\n混淆(obfs):plain\n```\n服务器端配置完成，终端中输入exit退出ssh登录\n```\n$ exit\n```\n## 客户端配置\n客户端，也就是你的个人电脑。\n在终端中依次输入如下命令安装配置客户端的ssr(shadowsocksR)，注意此时一定要确保已经在终端中退出ssh登录，或者新打开一个终端。\n```\n$ wget http://www.djangoz.com/ssr\n$ sudo mv ssr /usr/local/bin\n$ sudo chmod 766 /usr/local/bin/ssr\n$ ssr install\n$ ssr config\n```\n配置和服务器端保持一直即可，下面给出示例，只需配置server、server_port、password、method、protocol、obfs这几项\n```\n    \"server\": \"11.22.33.44\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": 1234,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n\n    \"password\": \"123456789\",\n    \"method\": \"none\",\n    \"protocol\": \"auth_chain_a\",\n    \"protocol_param\": \"\",\n    \"obfs\": \"plain\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": 0,\n    \"speed_limit_per_user\": 0,\n\n    \"additional_ports\" : {}, // only works under multi-user mode\n    \"additional_ports_only\" : false, // only works under multi-user mode\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n\n```\n以后若想修改配置，在终端中输入ssh config即可(服务器端也要对应修改)，还有打开和关闭命令\n```\nssr start\nssr stop\n```\n## 可能的问题\n检查自己是否可以登录google、youtube、twitter等网站，若依旧不能可尝试用以下方法解决。\n* 依次打开ubuntu系统设置->网络->网络代理，设置如下\n![p8](/p8.png)\n* 推荐使用chrome浏览器+proxy SwitchyOmega插件(可离线安装)\nproxy SwitchyOmega配置如下\n![p９](/p9.png)\n* 有可能申请的服务器的ip被墙，可通过在线网站验证是否可以ping通，若确认ip被墙，在你的vultr账户中申请更换即可(更换服务器位置，或只更换ip地址)\n\nps:服务器端配置好后，windows、android端只需下载shadowsocksR软件并进行简单配置即可使用","source":"_posts/vultr.md","raw":"---\ntitle: ubuntu下vultr服务器搭建\ndate: 2018-04-13 19:09:32\ncategories:\n- 技术杂文\ntags:\n- vultr服务器搭建\n---\n工欲善其事必先利其器。\n前一段时间在[陶司机学长](http://logqtainia.github.io/)的帮助下搭了自己的梯子，因为实在是受不了某度的搜索引擎了...，某天电脑出了一个小问题，去某度搜，２个小时过去没有任何头绪，无奈挂了VPN软件搜谷歌，搜索结果的第一条就是解决办法，，，没有对比就没有伤害，google真是一家伟大的公司。\n觉得靠免费的VPN软件不是长久之计（一方面是速度不理想，另一方面是考虑安全的问题），于是搭了梯子，终于可以愉快的用google了(•̀⌄•́)，用这篇博客记录一下搭建的过程。\n## 注册vultr账号\n[链接](https://www.vultr.com/)\n## 创建vultr主机\n点击右上角的蓝色加号，创建新的vultr主机\n![p1](/p1.png)\n服务器位置选择，推荐选择新加坡，或者美国的服务器(日本服务器已基本被墙)\n![p2](/p2.png)\n服务器端系统选择，选择ubuntu\n![p3](/p3.png)\n服务器配置选择,配置越高价格也越高，一般最便宜的2.5刀/month就够用了，但是很难抢到，，，于是就选5刀/month的了。\n![p4](/p4.png)\n其它的选项不需要填写，点击支付就ok(ps:从2017年10月开始支持支付宝支付！！)\n![p5](/p5.png)\n接下来等待主机部署完成即可。\n## 服务器端配置\n服务器端，也就是你刚刚创建的那台主机。\n点击主机右侧\"...\"展开菜单，选择\"Server Details\"可以看到这台主机的一些信息。包括这台主机的IP地址(IP Address)、用户名(Username)、密码(Password)等，这些信息下面需要用到。\n![p6](/p6.png)\n打开终端，使用ssh远程登录到主机\n```\n$ ssh root@你的主机IP地址\n```\n之后输入你的主机密码进行登录(可以在主机信息页面直接复制，粘贴到终端里时不会显示，但已存在,直接回车即可)。\n登录成功后使用一键配置脚本进行配置\n```\n$ wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n终端中会出现如下界面，输入１选择安装shadowsocksR\n![p7](/p7.png)\n之后会依次要求设置端口号(推荐设置8000以上)、密码、加密方式、协议、混淆等，下面给出我的几个主要配置选择\n```\n加密方式(method):none\n协议(protocol):auth_chain_a\n混淆(obfs):plain\n```\n服务器端配置完成，终端中输入exit退出ssh登录\n```\n$ exit\n```\n## 客户端配置\n客户端，也就是你的个人电脑。\n在终端中依次输入如下命令安装配置客户端的ssr(shadowsocksR)，注意此时一定要确保已经在终端中退出ssh登录，或者新打开一个终端。\n```\n$ wget http://www.djangoz.com/ssr\n$ sudo mv ssr /usr/local/bin\n$ sudo chmod 766 /usr/local/bin/ssr\n$ ssr install\n$ ssr config\n```\n配置和服务器端保持一直即可，下面给出示例，只需配置server、server_port、password、method、protocol、obfs这几项\n```\n    \"server\": \"11.22.33.44\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": 1234,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n\n    \"password\": \"123456789\",\n    \"method\": \"none\",\n    \"protocol\": \"auth_chain_a\",\n    \"protocol_param\": \"\",\n    \"obfs\": \"plain\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": 0,\n    \"speed_limit_per_user\": 0,\n\n    \"additional_ports\" : {}, // only works under multi-user mode\n    \"additional_ports_only\" : false, // only works under multi-user mode\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n\n```\n以后若想修改配置，在终端中输入ssh config即可(服务器端也要对应修改)，还有打开和关闭命令\n```\nssr start\nssr stop\n```\n## 可能的问题\n检查自己是否可以登录google、youtube、twitter等网站，若依旧不能可尝试用以下方法解决。\n* 依次打开ubuntu系统设置->网络->网络代理，设置如下\n![p8](/p8.png)\n* 推荐使用chrome浏览器+proxy SwitchyOmega插件(可离线安装)\nproxy SwitchyOmega配置如下\n![p９](/p9.png)\n* 有可能申请的服务器的ip被墙，可通过在线网站验证是否可以ping通，若确认ip被墙，在你的vultr账户中申请更换即可(更换服务器位置，或只更换ip地址)\n\nps:服务器端配置好后，windows、android端只需下载shadowsocksR软件并进行简单配置即可使用","slug":"vultr","published":1,"updated":"2018-06-10T02:01:35.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao6i000lgwouyygn7f8b","content":"<p>工欲善其事必先利其器。<br>前一段时间在<a href=\"http://logqtainia.github.io/\" target=\"_blank\" rel=\"noopener\">陶司机学长</a>的帮助下搭了自己的梯子，因为实在是受不了某度的搜索引擎了…，某天电脑出了一个小问题，去某度搜，２个小时过去没有任何头绪，无奈挂了VPN软件搜谷歌，搜索结果的第一条就是解决办法，，，没有对比就没有伤害，google真是一家伟大的公司。<br>觉得靠免费的VPN软件不是长久之计（一方面是速度不理想，另一方面是考虑安全的问题），于是搭了梯子，终于可以愉快的用google了(•̀⌄•́)，用这篇博客记录一下搭建的过程。</p>\n<h2 id=\"注册vultr账号\"><a href=\"#注册vultr账号\" class=\"headerlink\" title=\"注册vultr账号\"></a>注册vultr账号</h2><p><a href=\"https://www.vultr.com/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h2 id=\"创建vultr主机\"><a href=\"#创建vultr主机\" class=\"headerlink\" title=\"创建vultr主机\"></a>创建vultr主机</h2><p>点击右上角的蓝色加号，创建新的vultr主机<br><img src=\"/2018/04/13/vultr/p1.png\" alt=\"p1\"><br>服务器位置选择，推荐选择新加坡，或者美国的服务器(日本服务器已基本被墙)<br><img src=\"/2018/04/13/vultr/p2.png\" alt=\"p2\"><br>服务器端系统选择，选择ubuntu<br><img src=\"/2018/04/13/vultr/p3.png\" alt=\"p3\"><br>服务器配置选择,配置越高价格也越高，一般最便宜的2.5刀/month就够用了，但是很难抢到，，，于是就选5刀/month的了。<br><img src=\"/2018/04/13/vultr/p4.png\" alt=\"p4\"><br>其它的选项不需要填写，点击支付就ok(ps:从2017年10月开始支持支付宝支付！！)<br><img src=\"/2018/04/13/vultr/p5.png\" alt=\"p5\"><br>接下来等待主机部署完成即可。</p>\n<h2 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h2><p>服务器端，也就是你刚刚创建的那台主机。<br>点击主机右侧”…”展开菜单，选择”Server Details”可以看到这台主机的一些信息。包括这台主机的IP地址(IP Address)、用户名(Username)、密码(Password)等，这些信息下面需要用到。<br><img src=\"/2018/04/13/vultr/p6.png\" alt=\"p6\"><br>打开终端，使用ssh远程登录到主机<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh root@你的主机IP地址</span><br></pre></td></tr></table></figure></p>\n<p>之后输入你的主机密码进行登录(可以在主机信息页面直接复制，粘贴到终端里时不会显示，但已存在,直接回车即可)。<br>登录成功后使用一键配置脚本进行配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure></p>\n<p>终端中会出现如下界面，输入１选择安装shadowsocksR<br><img src=\"/2018/04/13/vultr/p7.png\" alt=\"p7\"><br>之后会依次要求设置端口号(推荐设置8000以上)、密码、加密方式、协议、混淆等，下面给出我的几个主要配置选择<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加密方式(method):none</span><br><span class=\"line\">协议(protocol):auth_chain_a</span><br><span class=\"line\">混淆(obfs):plain</span><br></pre></td></tr></table></figure></p>\n<p>服务器端配置完成，终端中输入exit退出ssh登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ exit</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><p>客户端，也就是你的个人电脑。<br>在终端中依次输入如下命令安装配置客户端的ssr(shadowsocksR)，注意此时一定要确保已经在终端中退出ssh登录，或者新打开一个终端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.djangoz.com/ssr</span><br><span class=\"line\">$ sudo mv ssr /usr/local/bin</span><br><span class=\"line\">$ sudo chmod 766 /usr/local/bin/ssr</span><br><span class=\"line\">$ ssr install</span><br><span class=\"line\">$ ssr config</span><br></pre></td></tr></table></figure></p>\n<p>配置和服务器端保持一直即可，下面给出示例，只需配置server、server_port、password、method、protocol、obfs这几项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;server&quot;: &quot;11.22.33.44&quot;,</span><br><span class=\"line\">&quot;server_ipv6&quot;: &quot;::&quot;,</span><br><span class=\"line\">&quot;server_port&quot;: 1234,</span><br><span class=\"line\">&quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">&quot;local_port&quot;: 1080,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;password&quot;: &quot;123456789&quot;,</span><br><span class=\"line\">&quot;method&quot;: &quot;none&quot;,</span><br><span class=\"line\">&quot;protocol&quot;: &quot;auth_chain_a&quot;,</span><br><span class=\"line\">&quot;protocol_param&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;obfs&quot;: &quot;plain&quot;,</span><br><span class=\"line\">&quot;obfs_param&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;speed_limit_per_con&quot;: 0,</span><br><span class=\"line\">&quot;speed_limit_per_user&quot;: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;additional_ports&quot; : &#123;&#125;, // only works under multi-user mode</span><br><span class=\"line\">&quot;additional_ports_only&quot; : false, // only works under multi-user mode</span><br><span class=\"line\">&quot;timeout&quot;: 120,</span><br><span class=\"line\">&quot;udp_timeout&quot;: 60,</span><br><span class=\"line\">&quot;dns_ipv6&quot;: false,</span><br><span class=\"line\">&quot;connect_verbose_info&quot;: 0,</span><br><span class=\"line\">&quot;redirect&quot;: &quot;&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>以后若想修改配置，在终端中输入ssh config即可(服务器端也要对应修改)，还有打开和关闭命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssr start</span><br><span class=\"line\">ssr stop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可能的问题\"><a href=\"#可能的问题\" class=\"headerlink\" title=\"可能的问题\"></a>可能的问题</h2><p>检查自己是否可以登录google、youtube、twitter等网站，若依旧不能可尝试用以下方法解决。</p>\n<ul>\n<li>依次打开ubuntu系统设置-&gt;网络-&gt;网络代理，设置如下<br><img src=\"/2018/04/13/vultr/p8.png\" alt=\"p8\"></li>\n<li>推荐使用chrome浏览器+proxy SwitchyOmega插件(可离线安装)<br>proxy SwitchyOmega配置如下<br><img src=\"/2018/04/13/vultr/p9.png\" alt=\"p９\"></li>\n<li>有可能申请的服务器的ip被墙，可通过在线网站验证是否可以ping通，若确认ip被墙，在你的vultr账户中申请更换即可(更换服务器位置，或只更换ip地址)</li>\n</ul>\n<p>ps:服务器端配置好后，windows、android端只需下载shadowsocksR软件并进行简单配置即可使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>工欲善其事必先利其器。<br>前一段时间在<a href=\"http://logqtainia.github.io/\" target=\"_blank\" rel=\"noopener\">陶司机学长</a>的帮助下搭了自己的梯子，因为实在是受不了某度的搜索引擎了…，某天电脑出了一个小问题，去某度搜，２个小时过去没有任何头绪，无奈挂了VPN软件搜谷歌，搜索结果的第一条就是解决办法，，，没有对比就没有伤害，google真是一家伟大的公司。<br>觉得靠免费的VPN软件不是长久之计（一方面是速度不理想，另一方面是考虑安全的问题），于是搭了梯子，终于可以愉快的用google了(•̀⌄•́)，用这篇博客记录一下搭建的过程。</p>\n<h2 id=\"注册vultr账号\"><a href=\"#注册vultr账号\" class=\"headerlink\" title=\"注册vultr账号\"></a>注册vultr账号</h2><p><a href=\"https://www.vultr.com/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h2 id=\"创建vultr主机\"><a href=\"#创建vultr主机\" class=\"headerlink\" title=\"创建vultr主机\"></a>创建vultr主机</h2><p>点击右上角的蓝色加号，创建新的vultr主机<br><img src=\"/2018/04/13/vultr/p1.png\" alt=\"p1\"><br>服务器位置选择，推荐选择新加坡，或者美国的服务器(日本服务器已基本被墙)<br><img src=\"/2018/04/13/vultr/p2.png\" alt=\"p2\"><br>服务器端系统选择，选择ubuntu<br><img src=\"/2018/04/13/vultr/p3.png\" alt=\"p3\"><br>服务器配置选择,配置越高价格也越高，一般最便宜的2.5刀/month就够用了，但是很难抢到，，，于是就选5刀/month的了。<br><img src=\"/2018/04/13/vultr/p4.png\" alt=\"p4\"><br>其它的选项不需要填写，点击支付就ok(ps:从2017年10月开始支持支付宝支付！！)<br><img src=\"/2018/04/13/vultr/p5.png\" alt=\"p5\"><br>接下来等待主机部署完成即可。</p>\n<h2 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h2><p>服务器端，也就是你刚刚创建的那台主机。<br>点击主机右侧”…”展开菜单，选择”Server Details”可以看到这台主机的一些信息。包括这台主机的IP地址(IP Address)、用户名(Username)、密码(Password)等，这些信息下面需要用到。<br><img src=\"/2018/04/13/vultr/p6.png\" alt=\"p6\"><br>打开终端，使用ssh远程登录到主机<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh root@你的主机IP地址</span><br></pre></td></tr></table></figure></p>\n<p>之后输入你的主机密码进行登录(可以在主机信息页面直接复制，粘贴到终端里时不会显示，但已存在,直接回车即可)。<br>登录成功后使用一键配置脚本进行配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure></p>\n<p>终端中会出现如下界面，输入１选择安装shadowsocksR<br><img src=\"/2018/04/13/vultr/p7.png\" alt=\"p7\"><br>之后会依次要求设置端口号(推荐设置8000以上)、密码、加密方式、协议、混淆等，下面给出我的几个主要配置选择<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加密方式(method):none</span><br><span class=\"line\">协议(protocol):auth_chain_a</span><br><span class=\"line\">混淆(obfs):plain</span><br></pre></td></tr></table></figure></p>\n<p>服务器端配置完成，终端中输入exit退出ssh登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ exit</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><p>客户端，也就是你的个人电脑。<br>在终端中依次输入如下命令安装配置客户端的ssr(shadowsocksR)，注意此时一定要确保已经在终端中退出ssh登录，或者新打开一个终端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.djangoz.com/ssr</span><br><span class=\"line\">$ sudo mv ssr /usr/local/bin</span><br><span class=\"line\">$ sudo chmod 766 /usr/local/bin/ssr</span><br><span class=\"line\">$ ssr install</span><br><span class=\"line\">$ ssr config</span><br></pre></td></tr></table></figure></p>\n<p>配置和服务器端保持一直即可，下面给出示例，只需配置server、server_port、password、method、protocol、obfs这几项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;server&quot;: &quot;11.22.33.44&quot;,</span><br><span class=\"line\">&quot;server_ipv6&quot;: &quot;::&quot;,</span><br><span class=\"line\">&quot;server_port&quot;: 1234,</span><br><span class=\"line\">&quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">&quot;local_port&quot;: 1080,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;password&quot;: &quot;123456789&quot;,</span><br><span class=\"line\">&quot;method&quot;: &quot;none&quot;,</span><br><span class=\"line\">&quot;protocol&quot;: &quot;auth_chain_a&quot;,</span><br><span class=\"line\">&quot;protocol_param&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;obfs&quot;: &quot;plain&quot;,</span><br><span class=\"line\">&quot;obfs_param&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;speed_limit_per_con&quot;: 0,</span><br><span class=\"line\">&quot;speed_limit_per_user&quot;: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;additional_ports&quot; : &#123;&#125;, // only works under multi-user mode</span><br><span class=\"line\">&quot;additional_ports_only&quot; : false, // only works under multi-user mode</span><br><span class=\"line\">&quot;timeout&quot;: 120,</span><br><span class=\"line\">&quot;udp_timeout&quot;: 60,</span><br><span class=\"line\">&quot;dns_ipv6&quot;: false,</span><br><span class=\"line\">&quot;connect_verbose_info&quot;: 0,</span><br><span class=\"line\">&quot;redirect&quot;: &quot;&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>以后若想修改配置，在终端中输入ssh config即可(服务器端也要对应修改)，还有打开和关闭命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssr start</span><br><span class=\"line\">ssr stop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可能的问题\"><a href=\"#可能的问题\" class=\"headerlink\" title=\"可能的问题\"></a>可能的问题</h2><p>检查自己是否可以登录google、youtube、twitter等网站，若依旧不能可尝试用以下方法解决。</p>\n<ul>\n<li>依次打开ubuntu系统设置-&gt;网络-&gt;网络代理，设置如下<br><img src=\"/2018/04/13/vultr/p8.png\" alt=\"p8\"></li>\n<li>推荐使用chrome浏览器+proxy SwitchyOmega插件(可离线安装)<br>proxy SwitchyOmega配置如下<br><img src=\"/2018/04/13/vultr/p9.png\" alt=\"p９\"></li>\n<li>有可能申请的服务器的ip被墙，可通过在线网站验证是否可以ping通，若确认ip被墙，在你的vultr账户中申请更换即可(更换服务器位置，或只更换ip地址)</li>\n</ul>\n<p>ps:服务器端配置好后，windows、android端只需下载shadowsocksR软件并进行简单配置即可使用</p>\n"},{"title":"线段树单点更新模板","date":"2018-05-06T13:47:10.000Z","_content":"之前一直在用大白上的线段树单点更新模板，最近渐渐发现有一些不太舒服的地方，一方面是大白上的模板会强行把线段树建成一个满二叉树，这样虽然比较好理解一些，但同时也会因为要考虑多出来的那些点的影响而相对麻烦。另一方面是因为大家貌似都不用大白上的线段树模板= =||，这样搜题解以及和队友交流的时候会存在一些障碍（其实这一方面是主要原因），所以最后通过权衡还是选择了一个自己觉得通用性比较好也比较好实现的模板。[参考博客链接](http://www.hysonn.com/2017/01/26/segtree/)\nPs:关于线段树区间更新目前正在学习中，之后再补上关于区间更新的模板。\n\n## 基于最大值查询的线段树模板\n```C++\n//首先定义线段树的结构体\nstruct SegTree{\n    int vl, vr;         //每个tree[k]对应一个节点，其中vl, vr是节点对应的区间\n    int mv;             //表示节点维护的数据，视情况而定，以维护区间最大值为例\n}tree[maxn << 2];       //绝对安全的情况是建议开四倍数据量的大小\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    if(l == r){\n        tree[k].mv = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv);\n}\n\nvoid update(int k, int pos, int val){\n    if(tree[k].vl == tree[k].vr){\n        tree[k].mv = val;\n        return;\n    }\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(pos <= mid)\n        update(k << 1, pos, val);\n    else\n        update(k << 1 | 1, pos, val);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv); \n}\n\nint query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr)\n        return tree[k].mv;\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return max(query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r));\n\t\n}\n\n```\n## 例题实现\n[HDU-1754--I Hate It(线段树单点更新入门题)](http://acm.hdu.edu.cn/showproblem.php?pid=1754)\nAC代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 2e5 + 7;\nint n, m;\nstruct SegTree{\n    int vl, vr;\n    int mv;\n}tree[maxn << 2];\n\nint d[maxn];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    if(l == r){\n        tree[k].mv = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv);\n}\n\nvoid update(int k, int pos, int val){\n    if(tree[k].vl == tree[k].vr){\n        tree[k].mv = val;\n        return;\n    }\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(pos <= mid)//doubt\n        update(k << 1, pos, val);\n    else\n        update(k << 1 | 1, pos, val);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv); \n}\n\nint query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr)\n        return tree[k].mv;\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return max(query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r));\n\t\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\t\n    while(~scanf(\"%d%d\", &n, &m)){\n        char c[10];\n        int a, b;\n        for(int i = 1; i <= n; i++){\n            scanf(\"%d\", &d[i]);\n        }\n        build(1, 1, n);\n        for(int i = 1; i <= m; i++){\n            scanf(\"%s%d%d\", c, &a, &b);\n            if(c[0] == 'Q')\n                printf(\"%d\\n\", query(1, a, b));\n            else if(c[0] == 'U')\n            update(1, a, b);\n        }\n\t\t\n\t}\n\t\n    return 0;\n}\n```\n\n","source":"_posts/segtree-template.md","raw":"---\ntitle: 线段树单点更新模板\ndate: 2018-05-06 21:47:10\ncategories:\n- ACM\ntags:\n- 线段树单点更新\n---\n之前一直在用大白上的线段树单点更新模板，最近渐渐发现有一些不太舒服的地方，一方面是大白上的模板会强行把线段树建成一个满二叉树，这样虽然比较好理解一些，但同时也会因为要考虑多出来的那些点的影响而相对麻烦。另一方面是因为大家貌似都不用大白上的线段树模板= =||，这样搜题解以及和队友交流的时候会存在一些障碍（其实这一方面是主要原因），所以最后通过权衡还是选择了一个自己觉得通用性比较好也比较好实现的模板。[参考博客链接](http://www.hysonn.com/2017/01/26/segtree/)\nPs:关于线段树区间更新目前正在学习中，之后再补上关于区间更新的模板。\n\n## 基于最大值查询的线段树模板\n```C++\n//首先定义线段树的结构体\nstruct SegTree{\n    int vl, vr;         //每个tree[k]对应一个节点，其中vl, vr是节点对应的区间\n    int mv;             //表示节点维护的数据，视情况而定，以维护区间最大值为例\n}tree[maxn << 2];       //绝对安全的情况是建议开四倍数据量的大小\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    if(l == r){\n        tree[k].mv = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv);\n}\n\nvoid update(int k, int pos, int val){\n    if(tree[k].vl == tree[k].vr){\n        tree[k].mv = val;\n        return;\n    }\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(pos <= mid)\n        update(k << 1, pos, val);\n    else\n        update(k << 1 | 1, pos, val);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv); \n}\n\nint query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr)\n        return tree[k].mv;\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return max(query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r));\n\t\n}\n\n```\n## 例题实现\n[HDU-1754--I Hate It(线段树单点更新入门题)](http://acm.hdu.edu.cn/showproblem.php?pid=1754)\nAC代码\n```C++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 2e5 + 7;\nint n, m;\nstruct SegTree{\n    int vl, vr;\n    int mv;\n}tree[maxn << 2];\n\nint d[maxn];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    if(l == r){\n        tree[k].mv = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv);\n}\n\nvoid update(int k, int pos, int val){\n    if(tree[k].vl == tree[k].vr){\n        tree[k].mv = val;\n        return;\n    }\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(pos <= mid)//doubt\n        update(k << 1, pos, val);\n    else\n        update(k << 1 | 1, pos, val);\n    tree[k].mv = max(tree[k << 1].mv, tree[k << 1 | 1].mv); \n}\n\nint query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr)\n        return tree[k].mv;\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return max(query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r));\n\t\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n\t\n    while(~scanf(\"%d%d\", &n, &m)){\n        char c[10];\n        int a, b;\n        for(int i = 1; i <= n; i++){\n            scanf(\"%d\", &d[i]);\n        }\n        build(1, 1, n);\n        for(int i = 1; i <= m; i++){\n            scanf(\"%s%d%d\", c, &a, &b);\n            if(c[0] == 'Q')\n                printf(\"%d\\n\", query(1, a, b));\n            else if(c[0] == 'U')\n            update(1, a, b);\n        }\n\t\t\n\t}\n\t\n    return 0;\n}\n```\n\n","slug":"segtree-template","published":1,"updated":"2018-05-08T07:33:28.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao6k000mgwounttgjin3","content":"<p>之前一直在用大白上的线段树单点更新模板，最近渐渐发现有一些不太舒服的地方，一方面是大白上的模板会强行把线段树建成一个满二叉树，这样虽然比较好理解一些，但同时也会因为要考虑多出来的那些点的影响而相对麻烦。另一方面是因为大家貌似都不用大白上的线段树模板= =||，这样搜题解以及和队友交流的时候会存在一些障碍（其实这一方面是主要原因），所以最后通过权衡还是选择了一个自己觉得通用性比较好也比较好实现的模板。<a href=\"http://www.hysonn.com/2017/01/26/segtree/\" target=\"_blank\" rel=\"noopener\">参考博客链接</a><br>Ps:关于线段树区间更新目前正在学习中，之后再补上关于区间更新的模板。</p>\n<h2 id=\"基于最大值查询的线段树模板\"><a href=\"#基于最大值查询的线段树模板\" class=\"headerlink\" title=\"基于最大值查询的线段树模板\"></a>基于最大值查询的线段树模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先定义线段树的结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;         <span class=\"comment\">//每个tree[k]对应一个节点，其中vl, vr是节点对应的区间</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mv;             <span class=\"comment\">//表示节点维护的数据，视情况而定，以维护区间最大值为例</span></span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];       <span class=\"comment\">//绝对安全的情况是建议开四倍数据量的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].mv = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].vl == tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].mv = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].mv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(query(k &lt;&lt; <span class=\"number\">1</span>, l, mid), query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例题实现\"><a href=\"#例题实现\" class=\"headerlink\" title=\"例题实现\"></a>例题实现</h2><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1754\" target=\"_blank\" rel=\"noopener\">HDU-1754–I Hate It(线段树单点更新入门题)</a><br>AC代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mv;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].mv = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].vl == tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].mv = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos &lt;= mid)<span class=\"comment\">//doubt</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].mv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(query(k &lt;&lt; <span class=\"number\">1</span>, l, mid), query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;d[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s%d%d\"</span>, c, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, query(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] == <span class=\"string\">'U'</span>)</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前一直在用大白上的线段树单点更新模板，最近渐渐发现有一些不太舒服的地方，一方面是大白上的模板会强行把线段树建成一个满二叉树，这样虽然比较好理解一些，但同时也会因为要考虑多出来的那些点的影响而相对麻烦。另一方面是因为大家貌似都不用大白上的线段树模板= =||，这样搜题解以及和队友交流的时候会存在一些障碍（其实这一方面是主要原因），所以最后通过权衡还是选择了一个自己觉得通用性比较好也比较好实现的模板。<a href=\"http://www.hysonn.com/2017/01/26/segtree/\" target=\"_blank\" rel=\"noopener\">参考博客链接</a><br>Ps:关于线段树区间更新目前正在学习中，之后再补上关于区间更新的模板。</p>\n<h2 id=\"基于最大值查询的线段树模板\"><a href=\"#基于最大值查询的线段树模板\" class=\"headerlink\" title=\"基于最大值查询的线段树模板\"></a>基于最大值查询的线段树模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先定义线段树的结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;         <span class=\"comment\">//每个tree[k]对应一个节点，其中vl, vr是节点对应的区间</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mv;             <span class=\"comment\">//表示节点维护的数据，视情况而定，以维护区间最大值为例</span></span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];       <span class=\"comment\">//绝对安全的情况是建议开四倍数据量的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].mv = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].vl == tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].mv = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].mv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(query(k &lt;&lt; <span class=\"number\">1</span>, l, mid), query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例题实现\"><a href=\"#例题实现\" class=\"headerlink\" title=\"例题实现\"></a>例题实现</h2><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1754\" target=\"_blank\" rel=\"noopener\">HDU-1754–I Hate It(线段树单点更新入门题)</a><br>AC代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mv;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].mv = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].vl == tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].mv = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos &lt;= mid)<span class=\"comment\">//doubt</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, pos, val);</span><br><span class=\"line\">    tree[k].mv = max(tree[k &lt;&lt; <span class=\"number\">1</span>].mv, tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mv); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].mv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(query(k &lt;&lt; <span class=\"number\">1</span>, l, mid), query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;d[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s%d%d\"</span>, c, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, query(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] == <span class=\"string\">'U'</span>)</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"poj-2481-线段树单点更新","date":"2018-04-22T08:51:50.000Z","_content":"最近刚刚开始做线段树相关的题目，很艰难...依照现在的理解其实线段树的题的暴力求解思路比较容易想到，但是暴力求解的时间复杂度一般肯会超，而线段树也正是这样一种通过区间更新来解决大量输入数据问题、降低时间复杂度的高级数据结构。线段树的关键是确定每个节点维护的是什么数据，以及以什么参数为依据进行区间的查询。\n被POJ上的这道题卡了很久，一开始是思路问题，后来是一些细节问题，总之还是熟练度不高...\n[参考博客链接](http://111qqz.com/2015/08/poj2481/)\n\n## 题目链接\n[poj-2481](http://poj.org/problem?id=2481)\n## 题目描述\n共有N头牛，每头牛对应一个进食区间[$S$,$E$], 对两头牛$i$,$j$来说，假设它们对应的区间分别为[$S\\_i$,$E\\_i$]和[$S\\_j$,$E\\_j$]，如果满足$S\\_i<=S\\_j，E\\_j<=E\\_i$且$E\\_i-S\\_i>E\\_j-S\\_j$,那么我们可以说牛$i$要比牛$j$强壮。\n现对于每头牛来说计算比它强壮的牛的数量。\n## 题解\n先对区间进行排序，右端点降序为第一关键字，左端点升序为第二关键字。这样进行处理后第$i$个区间的右端点一定小于前$i-1$个区间的右端点了，那么只要进行左端点的判决就可以了，具体做法为：\n每次处理一个区间后都将该区间的左端点更新到线段树中（插入后相对应叶节点数值+1，插入前为0）。\n那么当我们查询第$i$个区间时其实也就是查询线段树中从1到$i-1$的区间内左端点的标记个数。\n**于是线段树每个节点维护的就是以该节点为根节点的子树所代表的区间中左端点的个数，而进行区间查询依据的参数也就是每个区间的左端点。**\n*需要注意的问题*:\n**两个区间重合时的情况要特殊处理，这种情况不算在内，做法可以是对排好序的每个区间进行处理前先检查它是否和上一查询区间重合，若重合则直接将上一区间的查询结果赋予该区间，并将该区间对应的左端点在线段树中再次更新（再次加1）,而后跳过该区间的查询。**详见代码：\n## 代码\n关于线段树的实现部分基于《挑战程序设计竞赛》一书中的实现模板，也可参考其它实现模板，形成自己的书写习惯。\n``` C++\n//#include <bits/stdc++.h> //POJ上大部分题不支持该头文件\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nconst int maxn = 1 << 18;\ntypedef struct node{\n    int vl;\n    int vr;\n    int id;\n} nod;\nnod a[maxn];\nint d[2 * maxn];\nint n, pn;\nint ans[maxn];\n//排序部分\nbool cmp(const nod& a, const nod& b){\n    if(a.vr == b.vr) \n        return a.vl < b.vl;\n    else\n        return a.vr > b.vr;\n}\n//初始化\nvoid init(int _n){\n    n = 1;\n    while(n < _n) n *= 2;\n    for(int i = 0; i < 2 * n - 1; i++){\n        d[i] = 0;\n    }\n}\n//查询操作\nint query(int a, int b, int k, int l, int r){\n    if(a <= l && b >= r) return d[k];\n    if(b <= l) return 0;\n    else{\n        int res1 = query(a, b, 2 * k + 1, l, (l + r) / 2);\n        int res2 = query(a, b, 2 * k + 2, (l + r) / 2, r);\n        return res1 + res2;\n    }\n}\n//更新操作\nvoid update(int k){\n    k += n - 1;\n    d[k] += 1;\n    while(k > 0){\n        k = (k - 1) / 2;\n        d[k] = d[2 *k + 1] + d[2 * k + 2];\n    }\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int t1, t2;\n    while(~scanf(\"%d\", &n)){\n        memset(ans, 0, sizeof(ans));\n        memset(d, 0, sizeof(d));\n\t    if(n == 0) break;\n\t    for(int i = 0; i < n; i++){\n            scanf(\"%d%d\", &t1, &t2);\n            a[i].vl = t1;\n            a[i].vr = t2;\n            a[i].id = i;\n        }\n        sort(a, a + n, cmp);\n        pn = n;\n        init(n);\n        for(int i = 0; i < pn; i++){\n            //if内为判断重合区间部分\n            if(i >= 1 && a[i].vl == a[i - 1].vl && a[i].vr == a[i - 1].vr){\n                ans[a[i].id] = ans[a[i - 1].id];\n                update(a[i].vl);\n                continue;\n            }\n            ans[a[i].id] = query(0, a[i].vl + 1, 0, 0, n);\n            update(a[i].vl);\n\t\t\t\n        }\n        for(int i = 0; i < pn; i++){\n            printf(\"%d%c\", ans[i], i < pn - 1 ? ' ' : '\\n');\n        }\n    }\n\t\n    return 0;\n}\n```","source":"_posts/poj-2481.md","raw":"---\ntitle: poj-2481-线段树单点更新\ndate: 2018-04-22 16:51:50\ncategories: \n- ACM\ntags:\n- poj\n- 线段树\n---\n最近刚刚开始做线段树相关的题目，很艰难...依照现在的理解其实线段树的题的暴力求解思路比较容易想到，但是暴力求解的时间复杂度一般肯会超，而线段树也正是这样一种通过区间更新来解决大量输入数据问题、降低时间复杂度的高级数据结构。线段树的关键是确定每个节点维护的是什么数据，以及以什么参数为依据进行区间的查询。\n被POJ上的这道题卡了很久，一开始是思路问题，后来是一些细节问题，总之还是熟练度不高...\n[参考博客链接](http://111qqz.com/2015/08/poj2481/)\n\n## 题目链接\n[poj-2481](http://poj.org/problem?id=2481)\n## 题目描述\n共有N头牛，每头牛对应一个进食区间[$S$,$E$], 对两头牛$i$,$j$来说，假设它们对应的区间分别为[$S\\_i$,$E\\_i$]和[$S\\_j$,$E\\_j$]，如果满足$S\\_i<=S\\_j，E\\_j<=E\\_i$且$E\\_i-S\\_i>E\\_j-S\\_j$,那么我们可以说牛$i$要比牛$j$强壮。\n现对于每头牛来说计算比它强壮的牛的数量。\n## 题解\n先对区间进行排序，右端点降序为第一关键字，左端点升序为第二关键字。这样进行处理后第$i$个区间的右端点一定小于前$i-1$个区间的右端点了，那么只要进行左端点的判决就可以了，具体做法为：\n每次处理一个区间后都将该区间的左端点更新到线段树中（插入后相对应叶节点数值+1，插入前为0）。\n那么当我们查询第$i$个区间时其实也就是查询线段树中从1到$i-1$的区间内左端点的标记个数。\n**于是线段树每个节点维护的就是以该节点为根节点的子树所代表的区间中左端点的个数，而进行区间查询依据的参数也就是每个区间的左端点。**\n*需要注意的问题*:\n**两个区间重合时的情况要特殊处理，这种情况不算在内，做法可以是对排好序的每个区间进行处理前先检查它是否和上一查询区间重合，若重合则直接将上一区间的查询结果赋予该区间，并将该区间对应的左端点在线段树中再次更新（再次加1）,而后跳过该区间的查询。**详见代码：\n## 代码\n关于线段树的实现部分基于《挑战程序设计竞赛》一书中的实现模板，也可参考其它实现模板，形成自己的书写习惯。\n``` C++\n//#include <bits/stdc++.h> //POJ上大部分题不支持该头文件\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nconst int maxn = 1 << 18;\ntypedef struct node{\n    int vl;\n    int vr;\n    int id;\n} nod;\nnod a[maxn];\nint d[2 * maxn];\nint n, pn;\nint ans[maxn];\n//排序部分\nbool cmp(const nod& a, const nod& b){\n    if(a.vr == b.vr) \n        return a.vl < b.vl;\n    else\n        return a.vr > b.vr;\n}\n//初始化\nvoid init(int _n){\n    n = 1;\n    while(n < _n) n *= 2;\n    for(int i = 0; i < 2 * n - 1; i++){\n        d[i] = 0;\n    }\n}\n//查询操作\nint query(int a, int b, int k, int l, int r){\n    if(a <= l && b >= r) return d[k];\n    if(b <= l) return 0;\n    else{\n        int res1 = query(a, b, 2 * k + 1, l, (l + r) / 2);\n        int res2 = query(a, b, 2 * k + 2, (l + r) / 2, r);\n        return res1 + res2;\n    }\n}\n//更新操作\nvoid update(int k){\n    k += n - 1;\n    d[k] += 1;\n    while(k > 0){\n        k = (k - 1) / 2;\n        d[k] = d[2 *k + 1] + d[2 * k + 2];\n    }\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    int t1, t2;\n    while(~scanf(\"%d\", &n)){\n        memset(ans, 0, sizeof(ans));\n        memset(d, 0, sizeof(d));\n\t    if(n == 0) break;\n\t    for(int i = 0; i < n; i++){\n            scanf(\"%d%d\", &t1, &t2);\n            a[i].vl = t1;\n            a[i].vr = t2;\n            a[i].id = i;\n        }\n        sort(a, a + n, cmp);\n        pn = n;\n        init(n);\n        for(int i = 0; i < pn; i++){\n            //if内为判断重合区间部分\n            if(i >= 1 && a[i].vl == a[i - 1].vl && a[i].vr == a[i - 1].vr){\n                ans[a[i].id] = ans[a[i - 1].id];\n                update(a[i].vl);\n                continue;\n            }\n            ans[a[i].id] = query(0, a[i].vl + 1, 0, 0, n);\n            update(a[i].vl);\n\t\t\t\n        }\n        for(int i = 0; i < pn; i++){\n            printf(\"%d%c\", ans[i], i < pn - 1 ? ' ' : '\\n');\n        }\n    }\n\t\n    return 0;\n}\n```","slug":"poj-2481","published":1,"updated":"2018-05-16T07:16:05.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao6n000qgwou04j4p9qo","content":"<p>最近刚刚开始做线段树相关的题目，很艰难…依照现在的理解其实线段树的题的暴力求解思路比较容易想到，但是暴力求解的时间复杂度一般肯会超，而线段树也正是这样一种通过区间更新来解决大量输入数据问题、降低时间复杂度的高级数据结构。线段树的关键是确定每个节点维护的是什么数据，以及以什么参数为依据进行区间的查询。<br>被POJ上的这道题卡了很久，一开始是思路问题，后来是一些细节问题，总之还是熟练度不高…<br><a href=\"http://111qqz.com/2015/08/poj2481/\" target=\"_blank\" rel=\"noopener\">参考博客链接</a></p>\n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"http://poj.org/problem?id=2481\" target=\"_blank\" rel=\"noopener\">poj-2481</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>共有N头牛，每头牛对应一个进食区间[$S$,$E$], 对两头牛$i$,$j$来说，假设它们对应的区间分别为[$S_i$,$E_i$]和[$S_j$,$E_j$]，如果满足$S_i&lt;=S_j，E_j&lt;=E_i$且$E_i-S_i&gt;E_j-S_j$,那么我们可以说牛$i$要比牛$j$强壮。<br>现对于每头牛来说计算比它强壮的牛的数量。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>先对区间进行排序，右端点降序为第一关键字，左端点升序为第二关键字。这样进行处理后第$i$个区间的右端点一定小于前$i-1$个区间的右端点了，那么只要进行左端点的判决就可以了，具体做法为：<br>每次处理一个区间后都将该区间的左端点更新到线段树中（插入后相对应叶节点数值+1，插入前为0）。<br>那么当我们查询第$i$个区间时其实也就是查询线段树中从1到$i-1$的区间内左端点的标记个数。<br><strong>于是线段树每个节点维护的就是以该节点为根节点的子树所代表的区间中左端点的个数，而进行区间查询依据的参数也就是每个区间的左端点。</strong><br><em>需要注意的问题</em>:<br><strong>两个区间重合时的情况要特殊处理，这种情况不算在内，做法可以是对排好序的每个区间进行处理前先检查它是否和上一查询区间重合，若重合则直接将上一区间的查询结果赋予该区间，并将该区间对应的左端点在线段树中再次更新（再次加1）,而后跳过该区间的查询。</strong>详见代码：</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>关于线段树的实现部分基于《挑战程序设计竞赛》一书中的实现模板，也可参考其它实现模板，形成自己的书写习惯。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt; //POJ上大部分题不支持该头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> vr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">&#125; nod;</span><br><span class=\"line\">nod a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">2</span> * maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, pn;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"><span class=\"comment\">//排序部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> nod&amp; a, <span class=\"keyword\">const</span> nod&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.vr == b.vr) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.vl &lt; b.vl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.vr &gt; b.vr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> _n)</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &lt; _n) n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        d[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查询操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class=\"keyword\">return</span> d[k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b &lt;= l) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res1 = query(a, b, <span class=\"number\">2</span> * k + <span class=\"number\">1</span>, l, (l + r) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res2 = query(a, b, <span class=\"number\">2</span> * k + <span class=\"number\">2</span>, (l + r) / <span class=\"number\">2</span>, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res1 + res2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    k += n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    d[k] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        k = (k - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        d[k] = d[<span class=\"number\">2</span> *k + <span class=\"number\">1</span>] + d[<span class=\"number\">2</span> * k + <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1, t2;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;t1, &amp;t2);</span><br><span class=\"line\">            a[i].vl = t1;</span><br><span class=\"line\">            a[i].vr = t2;</span><br><span class=\"line\">            a[i].id = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(a, a + n, cmp);</span><br><span class=\"line\">        pn = n;</span><br><span class=\"line\">        init(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pn; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//if内为判断重合区间部分</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">1</span> &amp;&amp; a[i].vl == a[i - <span class=\"number\">1</span>].vl &amp;&amp; a[i].vr == a[i - <span class=\"number\">1</span>].vr)&#123;</span><br><span class=\"line\">                ans[a[i].id] = ans[a[i - <span class=\"number\">1</span>].id];</span><br><span class=\"line\">                update(a[i].vl);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans[a[i].id] = query(<span class=\"number\">0</span>, a[i].vl + <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">            update(a[i].vl);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pn; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, ans[i], i &lt; pn - <span class=\"number\">1</span> ? <span class=\"string\">' '</span> : <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近刚刚开始做线段树相关的题目，很艰难…依照现在的理解其实线段树的题的暴力求解思路比较容易想到，但是暴力求解的时间复杂度一般肯会超，而线段树也正是这样一种通过区间更新来解决大量输入数据问题、降低时间复杂度的高级数据结构。线段树的关键是确定每个节点维护的是什么数据，以及以什么参数为依据进行区间的查询。<br>被POJ上的这道题卡了很久，一开始是思路问题，后来是一些细节问题，总之还是熟练度不高…<br><a href=\"http://111qqz.com/2015/08/poj2481/\" target=\"_blank\" rel=\"noopener\">参考博客链接</a></p>\n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"http://poj.org/problem?id=2481\" target=\"_blank\" rel=\"noopener\">poj-2481</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>共有N头牛，每头牛对应一个进食区间[$S$,$E$], 对两头牛$i$,$j$来说，假设它们对应的区间分别为[$S_i$,$E_i$]和[$S_j$,$E_j$]，如果满足$S_i&lt;=S_j，E_j&lt;=E_i$且$E_i-S_i&gt;E_j-S_j$,那么我们可以说牛$i$要比牛$j$强壮。<br>现对于每头牛来说计算比它强壮的牛的数量。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>先对区间进行排序，右端点降序为第一关键字，左端点升序为第二关键字。这样进行处理后第$i$个区间的右端点一定小于前$i-1$个区间的右端点了，那么只要进行左端点的判决就可以了，具体做法为：<br>每次处理一个区间后都将该区间的左端点更新到线段树中（插入后相对应叶节点数值+1，插入前为0）。<br>那么当我们查询第$i$个区间时其实也就是查询线段树中从1到$i-1$的区间内左端点的标记个数。<br><strong>于是线段树每个节点维护的就是以该节点为根节点的子树所代表的区间中左端点的个数，而进行区间查询依据的参数也就是每个区间的左端点。</strong><br><em>需要注意的问题</em>:<br><strong>两个区间重合时的情况要特殊处理，这种情况不算在内，做法可以是对排好序的每个区间进行处理前先检查它是否和上一查询区间重合，若重合则直接将上一区间的查询结果赋予该区间，并将该区间对应的左端点在线段树中再次更新（再次加1）,而后跳过该区间的查询。</strong>详见代码：</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>关于线段树的实现部分基于《挑战程序设计竞赛》一书中的实现模板，也可参考其它实现模板，形成自己的书写习惯。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt; //POJ上大部分题不支持该头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> vr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">&#125; nod;</span><br><span class=\"line\">nod a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">2</span> * maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, pn;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"><span class=\"comment\">//排序部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> nod&amp; a, <span class=\"keyword\">const</span> nod&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.vr == b.vr) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.vl &lt; b.vl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.vr &gt; b.vr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> _n)</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &lt; _n) n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        d[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查询操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class=\"keyword\">return</span> d[k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b &lt;= l) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res1 = query(a, b, <span class=\"number\">2</span> * k + <span class=\"number\">1</span>, l, (l + r) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res2 = query(a, b, <span class=\"number\">2</span> * k + <span class=\"number\">2</span>, (l + r) / <span class=\"number\">2</span>, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res1 + res2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    k += n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    d[k] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        k = (k - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        d[k] = d[<span class=\"number\">2</span> *k + <span class=\"number\">1</span>] + d[<span class=\"number\">2</span> * k + <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1, t2;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(d, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;t1, &amp;t2);</span><br><span class=\"line\">            a[i].vl = t1;</span><br><span class=\"line\">            a[i].vr = t2;</span><br><span class=\"line\">            a[i].id = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(a, a + n, cmp);</span><br><span class=\"line\">        pn = n;</span><br><span class=\"line\">        init(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pn; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//if内为判断重合区间部分</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">1</span> &amp;&amp; a[i].vl == a[i - <span class=\"number\">1</span>].vl &amp;&amp; a[i].vr == a[i - <span class=\"number\">1</span>].vr)&#123;</span><br><span class=\"line\">                ans[a[i].id] = ans[a[i - <span class=\"number\">1</span>].id];</span><br><span class=\"line\">                update(a[i].vl);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans[a[i].id] = query(<span class=\"number\">0</span>, a[i].vl + <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">            update(a[i].vl);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pn; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, ans[i], i &lt; pn - <span class=\"number\">1</span> ? <span class=\"string\">' '</span> : <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"线段树区间更新模板","date":"2018-05-07T16:08:11.000Z","_content":"线段树区间更新中比较重要的一个概念是延迟标记，即lazy思想，当要对某一个区间中的所有节点进行更新时，先找到包含该区间所有节点的那一个（或多个）节点，只对它（们）进行更新，同时保存更新的值lazy。当进行区间查询时，若查询的区间的大小在lazy标记区间之内则直接返回，否则将lazy值向下进行传递，直到包含查询的区间。通过这种方式，可以用更新整个区间的值来代替更新区间中的每一个节点，从而避免了很多不必要的操作，提高了效率。说起来可能比较抽象，详见代码。\n[参考链接](https://www.zybuluo.com/lychee123/note/731591)\n\n## 基于区间和的线段树区间更新模板\n```C++\nstruct SegTree{\n    int vl, vr;\n    long long sum;\n    long long lazy;//延迟标记\n}tree[maxn << 2];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    tree[k].lazy = 0;//延迟标记初始化为0\n    if(l == r){\n        tree[k].sum = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n//更新下层区间的值，即将lazy向下进行传递，这里是区别于单点更新的最主要的地方\nvoid pushdown(int k){\n    tree[k << 1].lazy += tree[k].lazy;\n    tree[k << 1 | 1].lazy += tree[k].lazy;\n    tree[k << 1].sum += tree[k].lazy * (tree[k << 1].vr - tree[k << 1].vl + 1);//区间长度乘以当前标记\n    tree[k << 1 | 1].sum += tree[k].lazy * (tree[k << 1 | 1].vr - tree[k << 1 | 1].vl + 1);\n    tree[k].lazy = 0;//标记传递后清空为0\n}\n\nvoid update(int k, int l, int r, int val){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        tree[k].lazy += val;\n        tree[k].sum += val * (tree[k].vr - tree[k].vl + 1);\n        return;\n    }\n    if(tree[k].lazy != 0)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        update(k << 1, l, r, val);\n    else if(l > mid)\n        update(k << 1 | 1, l, r, val);\n    else{\n        update(k << 1, l, mid, val);\n        update(k << 1 | 1, mid + 1, r, val);\n    }\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nlong long query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        return tree[k].sum;\n    }\n    if(tree[k].lazy)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\n\n```\n## 例题实现\n[POJ-3468--A Simple Problem with Integers](http://acm.hdu.edu.cn/showproblem.php?pid=1754)\nAC代码\n```C++\n//#include <bits/stdc++.h>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nint n, q;\n\nstruct SegTree{\n    int vl, vr;\n    long long sum;\n    long long lazy;\n}tree[maxn << 2];\nint d[maxn];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    tree[k].lazy = 0;\n    if(l == r){\n        tree[k].sum = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nvoid pushdown(int k){\n    tree[k << 1].lazy += tree[k].lazy;\n    tree[k << 1 | 1].lazy += tree[k].lazy;\n    tree[k << 1].sum += tree[k].lazy * (tree[k << 1].vr - tree[k << 1].vl + 1);\n    tree[k << 1 | 1].sum += tree[k].lazy * (tree[k << 1 | 1].vr - tree[k << 1 | 1].vl + 1);\n    tree[k].lazy = 0;\n}\n\nvoid update(int k, int l, int r, int val){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        tree[k].lazy += val;\n        tree[k].sum += val * (tree[k].vr - tree[k].vl + 1);\n        return;\n    }\n    if(tree[k].lazy != 0)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        update(k << 1, l, r, val);\n    else if(l > mid)\n        update(k << 1 | 1, l, r, val);\n    else{\n        update(k << 1, l, mid, val);\n        update(k << 1 | 1, mid + 1, r, val);\n    }\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nlong long query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        return tree[k].sum;\n    }\n    if(tree[k].lazy)\n    pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n        return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    char s[10];\n    int a, b, c;\n    scanf(\"%d%d\", &n, &q);\n    for(int i = 1; i <= n; i++)\n        scanf(\"%d\", d + i);\n    build(1, 1, n);\n    while(q--){\n        scanf(\"%s\", s);\n        if(s[0] == 'Q'){\n            scanf(\"%d%d\", &a, &b);\n            printf(\"%lld\\n\", query(1, a, b));\n        }\n        else if(s[0] == 'C'){\n            scanf(\"%d%d%d\", &a, &b, &c);\n            update(1, a, b, c);\n        }\n    }\n\t\n    return 0;\n}\n\n```","source":"_posts/segtree-intval.md","raw":"---\ntitle: 线段树区间更新模板\ndate: 2018-05-08 00:08:11\ncategories:\n- ACM\ntags:\n- 线段树区间更新\n---\n线段树区间更新中比较重要的一个概念是延迟标记，即lazy思想，当要对某一个区间中的所有节点进行更新时，先找到包含该区间所有节点的那一个（或多个）节点，只对它（们）进行更新，同时保存更新的值lazy。当进行区间查询时，若查询的区间的大小在lazy标记区间之内则直接返回，否则将lazy值向下进行传递，直到包含查询的区间。通过这种方式，可以用更新整个区间的值来代替更新区间中的每一个节点，从而避免了很多不必要的操作，提高了效率。说起来可能比较抽象，详见代码。\n[参考链接](https://www.zybuluo.com/lychee123/note/731591)\n\n## 基于区间和的线段树区间更新模板\n```C++\nstruct SegTree{\n    int vl, vr;\n    long long sum;\n    long long lazy;//延迟标记\n}tree[maxn << 2];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    tree[k].lazy = 0;//延迟标记初始化为0\n    if(l == r){\n        tree[k].sum = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n//更新下层区间的值，即将lazy向下进行传递，这里是区别于单点更新的最主要的地方\nvoid pushdown(int k){\n    tree[k << 1].lazy += tree[k].lazy;\n    tree[k << 1 | 1].lazy += tree[k].lazy;\n    tree[k << 1].sum += tree[k].lazy * (tree[k << 1].vr - tree[k << 1].vl + 1);//区间长度乘以当前标记\n    tree[k << 1 | 1].sum += tree[k].lazy * (tree[k << 1 | 1].vr - tree[k << 1 | 1].vl + 1);\n    tree[k].lazy = 0;//标记传递后清空为0\n}\n\nvoid update(int k, int l, int r, int val){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        tree[k].lazy += val;\n        tree[k].sum += val * (tree[k].vr - tree[k].vl + 1);\n        return;\n    }\n    if(tree[k].lazy != 0)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        update(k << 1, l, r, val);\n    else if(l > mid)\n        update(k << 1 | 1, l, r, val);\n    else{\n        update(k << 1, l, mid, val);\n        update(k << 1 | 1, mid + 1, r, val);\n    }\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nlong long query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        return tree[k].sum;\n    }\n    if(tree[k].lazy)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n    return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\n\n```\n## 例题实现\n[POJ-3468--A Simple Problem with Integers](http://acm.hdu.edu.cn/showproblem.php?pid=1754)\nAC代码\n```C++\n//#include <bits/stdc++.h>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 7;\nint n, q;\n\nstruct SegTree{\n    int vl, vr;\n    long long sum;\n    long long lazy;\n}tree[maxn << 2];\nint d[maxn];\n\nvoid build(int k, int l, int r){\n    tree[k].vl = l;\n    tree[k].vr = r;\n    tree[k].lazy = 0;\n    if(l == r){\n        tree[k].sum = d[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nvoid pushdown(int k){\n    tree[k << 1].lazy += tree[k].lazy;\n    tree[k << 1 | 1].lazy += tree[k].lazy;\n    tree[k << 1].sum += tree[k].lazy * (tree[k << 1].vr - tree[k << 1].vl + 1);\n    tree[k << 1 | 1].sum += tree[k].lazy * (tree[k << 1 | 1].vr - tree[k << 1 | 1].vl + 1);\n    tree[k].lazy = 0;\n}\n\nvoid update(int k, int l, int r, int val){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        tree[k].lazy += val;\n        tree[k].sum += val * (tree[k].vr - tree[k].vl + 1);\n        return;\n    }\n    if(tree[k].lazy != 0)\n        pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        update(k << 1, l, r, val);\n    else if(l > mid)\n        update(k << 1 | 1, l, r, val);\n    else{\n        update(k << 1, l, mid, val);\n        update(k << 1 | 1, mid + 1, r, val);\n    }\n    tree[k].sum = tree[k << 1].sum + tree[k << 1 | 1].sum;\n}\n\nlong long query(int k, int l, int r){\n    if(l <= tree[k].vl && r >= tree[k].vr){\n        return tree[k].sum;\n    }\n    if(tree[k].lazy)\n    pushdown(k);\n    int mid = (tree[k].vl + tree[k].vr) / 2;\n    if(r <= mid)\n        return query(k << 1, l, r);\n    if(l > mid)\n        return query(k << 1 | 1, l, r);\n        return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\n\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin.tie(0);\n    //cout.tie(0);\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n    #endif\n    char s[10];\n    int a, b, c;\n    scanf(\"%d%d\", &n, &q);\n    for(int i = 1; i <= n; i++)\n        scanf(\"%d\", d + i);\n    build(1, 1, n);\n    while(q--){\n        scanf(\"%s\", s);\n        if(s[0] == 'Q'){\n            scanf(\"%d%d\", &a, &b);\n            printf(\"%lld\\n\", query(1, a, b));\n        }\n        else if(s[0] == 'C'){\n            scanf(\"%d%d%d\", &a, &b, &c);\n            update(1, a, b, c);\n        }\n    }\n\t\n    return 0;\n}\n\n```","slug":"segtree-intval","published":1,"updated":"2018-05-08T07:48:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji88ao6o000sgwouqx2hk0sr","content":"<p>线段树区间更新中比较重要的一个概念是延迟标记，即lazy思想，当要对某一个区间中的所有节点进行更新时，先找到包含该区间所有节点的那一个（或多个）节点，只对它（们）进行更新，同时保存更新的值lazy。当进行区间查询时，若查询的区间的大小在lazy标记区间之内则直接返回，否则将lazy值向下进行传递，直到包含查询的区间。通过这种方式，可以用更新整个区间的值来代替更新区间中的每一个节点，从而避免了很多不必要的操作，提高了效率。说起来可能比较抽象，详见代码。<br><a href=\"https://www.zybuluo.com/lychee123/note/731591\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h2 id=\"基于区间和的线段树区间更新模板\"><a href=\"#基于区间和的线段树区间更新模板\" class=\"headerlink\" title=\"基于区间和的线段树区间更新模板\"></a>基于区间和的线段树区间更新模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lazy;<span class=\"comment\">//延迟标记</span></span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;<span class=\"comment\">//延迟标记初始化为0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].sum = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新下层区间的值，即将lazy向下进行传递，这里是区别于单点更新的最主要的地方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);<span class=\"comment\">//区间长度乘以当前标记</span></span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;<span class=\"comment\">//标记传递后清空为0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].lazy += val;</span><br><span class=\"line\">        tree[k].sum += val * (tree[k].vr - tree[k].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy != <span class=\"number\">0</span>)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, mid, val);</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, mid) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例题实现\"><a href=\"#例题实现\" class=\"headerlink\" title=\"例题实现\"></a>例题实现</h2><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1754\" target=\"_blank\" rel=\"noopener\">POJ-3468–A Simple Problem with Integers</a><br>AC代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lazy;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].sum = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].lazy += val;</span><br><span class=\"line\">        tree[k].sum += val * (tree[k].vr - tree[k].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy != <span class=\"number\">0</span>)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, mid, val);</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy)</span><br><span class=\"line\">    pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, mid) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, d + i);</span><br><span class=\"line\">    build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'C'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, a, b, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>线段树区间更新中比较重要的一个概念是延迟标记，即lazy思想，当要对某一个区间中的所有节点进行更新时，先找到包含该区间所有节点的那一个（或多个）节点，只对它（们）进行更新，同时保存更新的值lazy。当进行区间查询时，若查询的区间的大小在lazy标记区间之内则直接返回，否则将lazy值向下进行传递，直到包含查询的区间。通过这种方式，可以用更新整个区间的值来代替更新区间中的每一个节点，从而避免了很多不必要的操作，提高了效率。说起来可能比较抽象，详见代码。<br><a href=\"https://www.zybuluo.com/lychee123/note/731591\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h2 id=\"基于区间和的线段树区间更新模板\"><a href=\"#基于区间和的线段树区间更新模板\" class=\"headerlink\" title=\"基于区间和的线段树区间更新模板\"></a>基于区间和的线段树区间更新模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lazy;<span class=\"comment\">//延迟标记</span></span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;<span class=\"comment\">//延迟标记初始化为0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].sum = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新下层区间的值，即将lazy向下进行传递，这里是区别于单点更新的最主要的地方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);<span class=\"comment\">//区间长度乘以当前标记</span></span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;<span class=\"comment\">//标记传递后清空为0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].lazy += val;</span><br><span class=\"line\">        tree[k].sum += val * (tree[k].vr - tree[k].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy != <span class=\"number\">0</span>)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, mid, val);</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, mid) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"例题实现\"><a href=\"#例题实现\" class=\"headerlink\" title=\"例题实现\"></a>例题实现</h2><p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1754\" target=\"_blank\" rel=\"noopener\">POJ-3468–A Simple Problem with Integers</a><br>AC代码<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegTree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vl, vr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lazy;</span><br><span class=\"line\">&#125;tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    tree[k].vl = l;</span><br><span class=\"line\">    tree[k].vr = r;</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)&#123;</span><br><span class=\"line\">        tree[k].sum = d[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    build(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[k].lazy;</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[k].lazy * (tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vr - tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[k].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        tree[k].lazy += val;</span><br><span class=\"line\">        tree[k].sum += val * (tree[k].vr - tree[k].vl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy != <span class=\"number\">0</span>)</span><br><span class=\"line\">        pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r, val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span>, l, mid, val);</span><br><span class=\"line\">        update(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[k].sum = tree[k &lt;&lt; <span class=\"number\">1</span>].sum + tree[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= tree[k].vl &amp;&amp; r &gt;= tree[k].vr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[k].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree[k].lazy)</span><br><span class=\"line\">    pushdown(k);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (tree[k].vl + tree[k].vr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, l, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(k &lt;&lt; <span class=\"number\">1</span>, l, mid) + query(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ios::sync_with_stdio(false);</span></span><br><span class=\"line\">    <span class=\"comment\">//cin.tie(0);</span></span><br><span class=\"line\">    <span class=\"comment\">//cout.tie(0);</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, d + i);</span><br><span class=\"line\">    build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, query(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[<span class=\"number\">0</span>] == <span class=\"string\">'C'</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">            update(<span class=\"number\">1</span>, a, b, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/My-little-angel/qxy.jpg","slug":"qxy.jpg","post":"cji88ao5l0000gwoupg32ri82","modified":1,"renderable":0},{"_id":"source/_posts/My-little-angel/together.jpg","slug":"together.jpg","post":"cji88ao5l0000gwoupg32ri82","modified":0,"renderable":0},{"_id":"source/_posts/hdu-2050/line.jpg","slug":"line.jpg","post":"cji88ao5t0002gwoumzj81cmq","modified":0,"renderable":0},{"_id":"source/_posts/hdu-2050/res.gif","slug":"res.gif","post":"cji88ao5t0002gwoumzj81cmq","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p1.png","slug":"p1.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p2.png","slug":"p2.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p3.png","slug":"p3.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p4.png","slug":"p4.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p5.png","slug":"p5.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p6.png","slug":"p6.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p7.png","slug":"p7.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p8.png","slug":"p8.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0},{"_id":"source/_posts/vultr/p9.png","slug":"p9.png","post":"cji88ao6i000lgwouyygn7f8b","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cji88ao5l0000gwoupg32ri82","category_id":"cji88ao5x0004gwoufes8989v","_id":"cji88ao6h000igwouy6fru3fd"},{"post_id":"cji88ao6e000fgwouaisnigku","category_id":"cji88ao5x0004gwoufes8989v","_id":"cji88ao6k000ngwouadcrvjlf"},{"post_id":"cji88ao5t0002gwoumzj81cmq","category_id":"cji88ao6a000bgwoumnjnadq7","_id":"cji88ao6o000rgwouvp6ktktv"},{"post_id":"cji88ao6g000hgwouq01saww1","category_id":"cji88ao6a000bgwoumnjnadq7","_id":"cji88ao6p000tgwougna2qt64"},{"post_id":"cji88ao6i000lgwouyygn7f8b","category_id":"cji88ao6i000jgwouoetx6nrl","_id":"cji88ao6q000vgwoufivf0zoi"},{"post_id":"cji88ao630008gwounkbju545","category_id":"cji88ao6i000jgwouoetx6nrl","_id":"cji88ao6r000wgwouy6kery4n"},{"post_id":"cji88ao6k000mgwounttgjin3","category_id":"cji88ao6a000bgwoumnjnadq7","_id":"cji88ao6r000xgwoudho4g5m2"},{"post_id":"cji88ao6n000qgwou04j4p9qo","category_id":"cji88ao6a000bgwoumnjnadq7","_id":"cji88ao6s0010gwou24oabn3w"},{"post_id":"cji88ao66000agwou4zxcn2wa","category_id":"cji88ao6a000bgwoumnjnadq7","_id":"cji88ao6s0012gwou8dsj4aii"},{"post_id":"cji88ao6o000sgwouqx2hk0sr","category_id":"cji88ao6a000bgwoumnjnadq7","_id":"cji88ao6t0015gwou6ncz6qx2"}],"PostTag":[{"post_id":"cji88ao5l0000gwoupg32ri82","tag_id":"cji88ao5z0005gwoupbzw40g9","_id":"cji88ao6d000egwoul4tu8xp5"},{"post_id":"cji88ao5t0002gwoumzj81cmq","tag_id":"cji88ao6a000cgwou4b27lctm","_id":"cji88ao6s000zgwoudlsg2922"},{"post_id":"cji88ao5t0002gwoumzj81cmq","tag_id":"cji88ao6i000kgwouezjdvwh5","_id":"cji88ao6s0011gwouj27w0uae"},{"post_id":"cji88ao5t0002gwoumzj81cmq","tag_id":"cji88ao6l000pgwougu30io1d","_id":"cji88ao6t0014gwou20dq1vc5"},{"post_id":"cji88ao5t0002gwoumzj81cmq","tag_id":"cji88ao6q000ugwoubhpt1194","_id":"cji88ao6t0016gwout8btj01z"},{"post_id":"cji88ao630008gwounkbju545","tag_id":"cji88ao6r000ygwouvxj02vxg","_id":"cji88ao6u0019gwoub6gjpts1"},{"post_id":"cji88ao630008gwounkbju545","tag_id":"cji88ao6s0013gwougv4ty1ar","_id":"cji88ao6v001agwouljdkl9ke"},{"post_id":"cji88ao630008gwounkbju545","tag_id":"cji88ao6t0017gwous0dgv2lo","_id":"cji88ao6v001cgwoufejmg9mq"},{"post_id":"cji88ao66000agwou4zxcn2wa","tag_id":"cji88ao6u0018gwou6yzx78wl","_id":"cji88ao6w001egwoudxp0g1ht"},{"post_id":"cji88ao66000agwou4zxcn2wa","tag_id":"cji88ao6v001bgwouq647ciu5","_id":"cji88ao6w001fgwou8goymqxx"},{"post_id":"cji88ao6e000fgwouaisnigku","tag_id":"cji88ao6w001dgwoulbm9nner","_id":"cji88ao6y001igwouirv0qx1z"},{"post_id":"cji88ao6e000fgwouaisnigku","tag_id":"cji88ao6t0017gwous0dgv2lo","_id":"cji88ao6z001jgwouls84tir9"},{"post_id":"cji88ao6g000hgwouq01saww1","tag_id":"cji88ao6l000pgwougu30io1d","_id":"cji88ao6z001lgwouwm4s86t4"},{"post_id":"cji88ao6i000lgwouyygn7f8b","tag_id":"cji88ao6z001kgwouc3tj0o4s","_id":"cji88ao70001ngwouj5z9nlh8"},{"post_id":"cji88ao6k000mgwounttgjin3","tag_id":"cji88ao6z001mgwou2066faz7","_id":"cji88ao71001pgwou66d1yeon"},{"post_id":"cji88ao6n000qgwou04j4p9qo","tag_id":"cji88ao70001ogwoukg6k4v0v","_id":"cji88ao72001sgwouerinm3vn"},{"post_id":"cji88ao6n000qgwou04j4p9qo","tag_id":"cji88ao71001qgwouo8tdebrn","_id":"cji88ao72001tgwouo9lch80u"},{"post_id":"cji88ao6o000sgwouqx2hk0sr","tag_id":"cji88ao72001rgwou9o7jaq13","_id":"cji88ao73001ugwouqi8rwu1k"}],"Tag":[{"name":"Lover","_id":"cji88ao5z0005gwoupbzw40g9"},{"name":"hdu","_id":"cji88ao6a000cgwou4b27lctm"},{"name":"线切割平面","_id":"cji88ao6i000kgwouezjdvwh5"},{"name":"math","_id":"cji88ao6l000pgwougu30io1d"},{"name":"思维","_id":"cji88ao6q000ugwoubhpt1194"},{"name":"mathjax","_id":"cji88ao6r000ygwouvxj02vxg"},{"name":"hexo插入数学公式","_id":"cji88ao6s0013gwougv4ty1ar"},{"name":"总结","_id":"cji88ao6t0017gwous0dgv2lo"},{"name":"状态压缩DP","_id":"cji88ao6u0018gwou6yzx78wl"},{"name":"BFS","_id":"cji88ao6v001bgwouq647ciu5"},{"name":"生活","_id":"cji88ao6w001dgwoulbm9nner"},{"name":"vultr服务器搭建","_id":"cji88ao6z001kgwouc3tj0o4s"},{"name":"线段树单点更新","_id":"cji88ao6z001mgwou2066faz7"},{"name":"poj","_id":"cji88ao70001ogwoukg6k4v0v"},{"name":"线段树","_id":"cji88ao71001qgwouo8tdebrn"},{"name":"线段树区间更新","_id":"cji88ao72001rgwou9o7jaq13"}]}}